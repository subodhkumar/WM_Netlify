import * as tslib_1 from "tslib";
import { Compiler, Component, CUSTOM_ELEMENTS_SCHEMA, Injectable, Injector, NgModule, NO_ERRORS_SCHEMA, ViewEncapsulation } from '@angular/core';
import { App, getValidJSON, UserDefinedExecutionContext } from '@wm/core';
import { transpile, scopeComponentStyles } from '@wm/transpiler';
import { AppManagerService, BasePageComponent, BasePartialComponent, BasePrefabComponent, ComponentRefProvider, ComponentType, RuntimeBaseModule, getPrefabMinJsonUrl } from '@wm/runtime/base';
import { AppResourceManagerService } from './app-resource-manager.service';
const fragmentCache = new Map();
window.resourceCache = fragmentCache;
const componentFactoryRefCache = new Map();
componentFactoryRefCache.set(ComponentType.PAGE, new Map());
componentFactoryRefCache.set(ComponentType.PARTIAL, new Map());
componentFactoryRefCache.set(ComponentType.PREFAB, new Map());
const _decodeURIComponent = (str) => decodeURIComponent(str.replace(/\+/g, ' '));
const ɵ0 = _decodeURIComponent;
const getFragmentUrl = (fragmentName, type) => {
    if (type === ComponentType.PAGE || type === ComponentType.PARTIAL) {
        return `./pages/${fragmentName}/page.min.json`;
    }
    else if (type === ComponentType.PREFAB) {
        return getPrefabMinJsonUrl(fragmentName);
    }
};
const ɵ1 = getFragmentUrl;
const scriptCache = new Map();
const execScript = (script, identifier, ctx, instance, app, utils) => {
    let fn = scriptCache.get(identifier);
    if (!fn) {
        fn = new Function(ctx, 'App', 'Utils', script);
        scriptCache.set(identifier, fn);
    }
    fn(instance, app, utils);
};
const ɵ2 = execScript;
class BaseDynamicComponent {
    init() { }
}
const getDynamicModule = (componentRef) => {
    class DynamicModule {
    }
    DynamicModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [componentRef],
                    imports: [
                        RuntimeBaseModule
                    ],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]
                },] },
    ];
    return DynamicModule;
};
const ɵ3 = getDynamicModule;
const getDynamicComponent = (componentName, type, template, css, script, variables) => {
    const componentDef = {
        template,
        styles: [css],
        encapsulation: ViewEncapsulation.None
    };
    let BaseClass = BaseDynamicComponent;
    let selector = '';
    let context = '';
    switch (type) {
        case ComponentType.PAGE:
            BaseClass = BasePageComponent;
            selector = `app-page-${componentName}`;
            context = 'Page';
            break;
        case ComponentType.PARTIAL:
            BaseClass = BasePartialComponent;
            selector = `app-partial-${componentName}`;
            context = 'Partial';
            break;
        case ComponentType.PREFAB:
            BaseClass = BasePrefabComponent;
            selector = `app-prefab-${componentName}`;
            context = 'Prefab';
            break;
    }
    class DynamicComponent extends BaseClass {
        constructor(injector) {
            super();
            this.injector = injector;
            switch (type) {
                case ComponentType.PAGE:
                    this.pageName = componentName;
                    break;
                case ComponentType.PARTIAL:
                    this.partialName = componentName;
                    break;
                case ComponentType.PREFAB:
                    this.prefabName = componentName;
                    break;
            }
            super.init();
        }
        evalUserScript(instance, appContext, utils) {
            execScript(script, selector, context, instance, appContext, utils);
        }
        getVariables() {
            return JSON.parse(variables);
        }
    }
    DynamicComponent.decorators = [
        { type: Component, args: [Object.assign({}, componentDef, { selector, providers: [
                        {
                            provide: UserDefinedExecutionContext,
                            useExisting: DynamicComponent
                        }
                    ] }),] },
    ];
    /** @nocollapse */
    DynamicComponent.ctorParameters = () => [
        { type: Injector }
    ];
    return DynamicComponent;
};
const ɵ4 = getDynamicComponent;
export class ComponentRefProviderService extends ComponentRefProvider {
    constructor(resouceMngr, app, appManager, compiler) {
        super();
        this.resouceMngr = resouceMngr;
        this.app = app;
        this.appManager = appManager;
        this.compiler = compiler;
    }
    loadResourcesOfFragment(componentName, componentType) {
        const url = getFragmentUrl(componentName, componentType);
        const resource = fragmentCache.get(url);
        if (resource) {
            return Promise.resolve(resource);
        }
        return this.resouceMngr.get(url, true)
            .then(({ markup, script, styles, variables }) => {
            const response = {
                markup: transpile(_decodeURIComponent(markup)),
                script: _decodeURIComponent(script),
                styles: scopeComponentStyles(componentName, componentType, _decodeURIComponent(styles)),
                variables: getValidJSON(_decodeURIComponent(variables))
            };
            fragmentCache.set(url, response);
            return response;
        }, e => {
            const status = e.details.status;
            const errorMsgMap = {
                404: this.app.appLocale.MESSAGE_PAGE_NOT_FOUND || 'The page you are trying to reach is not available',
                403: this.app.appLocale.LABEL_ACCESS_DENIED || 'Access Denied'
            };
            return Promise.reject(errorMsgMap[status]);
        });
    }
    getComponentFactoryRef(componentName, componentType) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // check in the cache.
            const componentFactoryMap = componentFactoryRefCache.get(componentType);
            let componentFactoryRef;
            if (componentFactoryMap) {
                componentFactoryRef = componentFactoryMap.get(componentName);
                if (componentFactoryRef) {
                    return componentFactoryRef;
                }
            }
            return this.loadResourcesOfFragment(componentName, componentType)
                .then(({ markup, script, styles, variables }) => {
                const componentDef = getDynamicComponent(componentName, componentType, markup, styles, script, JSON.stringify(variables));
                const moduleDef = getDynamicModule(componentDef);
                componentFactoryRef = this.compiler
                    .compileModuleAndAllComponentsSync(moduleDef)
                    .componentFactories
                    .filter(factory => factory.componentType === componentDef)[0];
                componentFactoryRefCache.get(componentType).set(componentName, componentFactoryRef);
                return componentFactoryRef;
            }, (err) => {
                if (err) {
                    this.appManager.notifyApp(err, 'error');
                }
            });
        });
    }
    // clears the cache map
    clearComponentFactoryRefCache() {
        this.resouceMngr.clearCache();
        fragmentCache.clear();
        componentFactoryRefCache.forEach(map => {
            map.clear();
        });
    }
}
ComponentRefProviderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComponentRefProviderService.ctorParameters = () => [
    { type: AppResourceManagerService },
    { type: App },
    { type: AppManagerService },
    { type: Compiler }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,