import { Subject } from 'rxjs';
import { $watch, AbstractI18nService, App, isIE, noop, UtilsService, $invokeWatchers } from '@wm/core';
import { WidgetRef } from '@wm/components';
import { VariablesService } from '@wm/variables';
import { PrefabManagerService } from '../services/prefab-manager.service';
import { FragmentMonitor } from "../util/fragment-monitor";
export class BasePrefabComponent extends FragmentMonitor {
    constructor() {
        super(...arguments);
        this.destroy$ = new Subject();
        this.viewInit$ = new Subject();
    }
    getContainerWidgetInjector() {
        return this.containerWidget.inj || this.containerWidget.injector;
    }
    init() {
        this.App = this.injector.get(App);
        this.containerWidget = this.injector.get(WidgetRef);
        this.prefabMngr = this.injector.get(PrefabManagerService);
        this.i18nService = this.injector.get(AbstractI18nService);
        if (this.getContainerWidgetInjector().view.component.registerFragment) {
            this.getContainerWidgetInjector().view.component.registerFragment();
        }
        this.initUserScript();
        this.registerWidgets();
        this.initVariables();
        this.registerProps();
        this.defineI18nProps();
        super.init();
    }
    registerWidgets() {
        this.Widgets = {};
    }
    initUserScript() {
        try {
            this.evalUserScript(this, this.App, this.injector.get(UtilsService));
        }
        catch (e) {
            console.error(`Error in evaluating prefab (${this.prefabName}) script\n`, e);
        }
    }
    registerChangeListeners() {
        this.containerWidget.registerPropertyChangeListener(this.onPropertyChange);
        this.containerWidget.registerStyleChangeListener(this.onPropertyChange);
    }
    registerDestroyListener(fn) {
        this.destroy$.subscribe(noop, noop, () => fn());
    }
    defineI18nProps() {
        this.appLocale = this.i18nService.getPrefabLocaleBundle(this.prefabName);
    }
    registerProps() {
        this.prefabMngr.getConfig(this.prefabName)
            .then(config => {
            if (config) {
                this.displayName = config.displayName;
                Object.entries((config.properties || {}))
                    .forEach(([key, prop]) => {
                    let expr;
                    const value = _.trim(prop.value);
                    if (_.startsWith(value, 'bind:')) {
                        expr = value.replace('bind:', '');
                    }
                    Object.defineProperty(this, key, {
                        get: () => this.containerWidget[key],
                        set: nv => this.containerWidget.widget[key] = nv
                    });
                    if (expr) {
                        this.registerDestroyListener($watch(expr, this, {}, nv => this.containerWidget.widget[key] = nv));
                    }
                });
                Object.entries((config.events || {}))
                    .forEach(([key, prop]) => {
                    this[key] = (...args) => {
                        const eventName = key.substr(2).toLowerCase();
                        this.containerWidget.invokeEventCallback(eventName, { $event: args[0], $data: args[1] });
                    };
                });
                Object.entries((config.methods || {}))
                    .forEach(([key, prop]) => {
                    this.containerWidget[key] = (...args) => {
                        try {
                            if (this[key]) {
                                return this[key].apply(this, args);
                            }
                        }
                        catch (e) {
                            console.warn(`error in executing prefab-${this.prefabName} method-${key}`);
                        }
                    };
                });
            }
            this.containerWidget.setProps(config);
            // Reassigning the proxy handler for prefab inbound properties as we
            // will get them only after the prefab config call.
            if (isIE()) {
                this.containerWidget.widget = this.containerWidget.createProxy();
            }
        });
    }
    initVariables() {
        const variablesService = this.injector.get(VariablesService);
        // get variables and actions instances for the page
        const variableCollection = variablesService.register(this.prefabName, this.getVariables(), this);
        // create namespace for Variables nad Actions on page/partial, which inherits the Variables and Actions from App instance
        this.Variables = {};
        this.Actions = {};
        // assign all the page variables to the pageInstance
        Object.entries(variableCollection.Variables).forEach(([name, variable]) => this.Variables[name] = variable);
        Object.entries(variableCollection.Actions).forEach(([name, action]) => this.Actions[name] = action);
        this.viewInit$.subscribe(noop, noop, () => {
            variableCollection.callback(variableCollection.Variables).catch(noop);
            variableCollection.callback(variableCollection.Actions);
        });
    }
    invokeOnReady() {
        // triggering watchers so variables and propertiers watching over an expression are updated
        $invokeWatchers(true, true);
        this.onReady();
        if (this.getContainerWidgetInjector().view.component.resolveFragment) {
            this.getContainerWidgetInjector().view.component.resolveFragment();
        }
        this.containerWidget.invokeEventCallback('load');
    }
    ngAfterViewInit() {
        this.viewInit$.complete();
        this.registerChangeListeners();
        setTimeout(() => {
            this.fragmentsLoaded$.subscribe(noop, noop, () => this.invokeOnReady());
        }, 100);
    }
    ngOnDestroy() {
        this.containerWidget.invokeEventCallback('destroy');
        this.destroy$.complete();
    }
    // user overrides this
    onPropertyChange() { }
    onReady() { }
}
//# sourceMappingURL=data:application/json;base64,