import { Injectable } from '@angular/core';
import { loadScripts, loadStyleSheets, stringStartsWith } from '@wm/core';
import { MetadataService } from '@wm/variables';
import { PrefabConfigProvider } from '../types/types';
import { getPrefabBaseUrl, isPrefabInPreview } from '../util/utils';
const prefabsWithError = new Set();
const inProgress = new Map();
const resolvedPrefabs = new Set();
const getPrefabResourceUrl = (resourcePath, resourceBasePath) => {
    let _url = resourcePath;
    if (!stringStartsWith(resourcePath, 'http://|https://|//')) {
        _url = (resourceBasePath + _url).replace('//', '/');
    }
    return _url;
};
const ɵ0 = getPrefabResourceUrl;
export class PrefabManagerService {
    constructor($metadata, prefabConfigProvider) {
        this.$metadata = $metadata;
        this.prefabConfigProvider = prefabConfigProvider;
    }
    getConfig(prefabName) {
        return this.prefabConfigProvider.getConfig(prefabName);
    }
    loadServiceDefs(prefabName) {
        return isPrefabInPreview(prefabName) ? Promise.resolve() : this.$metadata.load(prefabName);
    }
    loadStyles(prefabName, { resources: { styles } } = { resources: { styles: [] } }) {
        const baseUrl = getPrefabBaseUrl(prefabName);
        const _styles = styles.map(url => {
            if (!_.endsWith(url, '/pages/Main/Main.css')) {
                return getPrefabResourceUrl(url, baseUrl);
            }
            return undefined;
        }).filter(url => !!url);
        loadStyleSheets(_styles);
        return Promise.resolve();
    }
    // TODO [Vinay] - implement onPrefabResourceLoad
    loadScripts(prefabName, { resources: { scripts } } = { resources: { scripts: [] } }) {
        const baseUrl = getPrefabBaseUrl(prefabName);
        const _scripts = scripts.map(url => getPrefabResourceUrl(url, baseUrl));
        return loadScripts(_scripts);
    }
    setInProgress(prefabName) {
        let _res;
        let _rej;
        const _promise = new Promise((res, rej) => {
            _res = res;
            _rej = rej;
        });
        _promise.resolve = _res;
        _promise.reject = _rej;
        inProgress.set(prefabName, _promise);
    }
    resolveInProgress(prefabName) {
        if (inProgress.get(prefabName)) {
            inProgress.get(prefabName).resolve();
            inProgress.delete(prefabName);
        }
    }
    loadDependencies(prefabName) {
        if (resolvedPrefabs.has(prefabName)) {
            return Promise.resolve();
        }
        if (prefabsWithError.has(prefabName)) {
            return Promise.reject('');
        }
        if (inProgress.get(prefabName)) {
            return inProgress.get(prefabName);
        }
        this.setInProgress(prefabName);
        return this.getConfig(prefabName)
            .then(config => {
            return Promise.all([
                this.loadStyles(prefabName, config),
                this.loadScripts(prefabName, config),
                this.loadServiceDefs(prefabName)
            ]).then(() => {
                this.resolveInProgress(prefabName);
                resolvedPrefabs.add(prefabName);
            });
        });
    }
}
PrefabManagerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrefabManagerService.ctorParameters = () => [
    { type: MetadataService },
    { type: PrefabConfigProvider }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,