import { Injectable } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { AbstractToasterService, isDefined } from '@wm/core';
import { CustomToasterComponent } from '../components/custom-toaster.component';
export class ToasterServiceImpl extends AbstractToasterService {
    constructor(toaster) {
        super();
        this.toaster = toaster;
    }
    _showToaster(type, title, desc, options) {
        // backward compatibility (in 9.x, 4th param is timeout value).
        if (_.isNumber(options)) {
            options = { timeOut: options };
        }
        options = options || {};
        options.timeOut = isDefined(options.timeOut) ? options.timeOut : 0;
        options.enableHtml = isDefined(options.enableHtml);
        options.positionClass = options.positionClass || 'toast-bottom-right';
        options.toastClass = 'toast';
        // pop the toaster only if either title or description are defined
        if (title || desc) {
            // if the desc is an object, stringify it.
            if (!options.bodyOutputType && _.isObject(desc)) {
                desc = JSON.stringify(desc);
            }
            const fn = this.toaster[type];
            if (fn) {
                return fn.call(this.toaster, desc, title, options);
            }
        }
    }
    success(title, desc) {
        return this._showToaster('success', title, desc, { timeOut: 5000 });
    }
    error(title, desc) {
        return this._showToaster('error', title, desc, { timeOut: 0 });
    }
    info(title, desc) {
        return this._showToaster('info', title, desc, { timeOut: 0 });
    }
    warn(title, desc) {
        return this._showToaster('warning', title, desc, { timeOut: 0 });
    }
    show(type, title, desc, options) {
        return this._showToaster(type, title, desc, options);
    }
    hide(toasterObj) {
        // in studio just ignore the toasterObj and hide all the toasters
        if (!toasterObj) {
            this.toaster.clear();
            return;
        }
        this.toaster.clear(toasterObj.toastId);
    }
    showCustom(page, options) {
        if (!page) {
            return;
        }
        options = options || {};
        options.toastComponent = CustomToasterComponent;
        options.toastClass = 'custom-toaster';
        options.timeOut = isDefined(options.timeOut) ? options.timeOut : 0;
        options.enableHtml = isDefined(options.enableHtml);
        options.positionClass = options.positionClass || 'toast-bottom-right';
        options.toastClass = 'toast';
        return this.toaster.show(page, '', options);
    }
}
ToasterServiceImpl.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ToasterServiceImpl.ctorParameters = () => [
    { type: ToastrService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL3J1bnRpbWUvYmFzZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3RvYXN0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUtoRixNQUFNLE9BQU8sa0JBQW1CLFNBQVEsc0JBQXNCO0lBRTFELFlBQW9CLE9BQXNCO1FBQ3RDLEtBQUssRUFBRSxDQUFDO1FBRFEsWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUUxQyxDQUFDO0lBRU8sWUFBWSxDQUFFLElBQVksRUFBRSxLQUFhLEVBQUUsSUFBWSxFQUFFLE9BQWE7UUFDMUUsK0RBQStEO1FBQy9ELElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQixPQUFPLEdBQUcsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUM7U0FDaEM7UUFFRCxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxPQUFPLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsT0FBTyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxJQUFJLG9CQUFvQixDQUFDO1FBQ3RFLE9BQU8sQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQzdC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cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUb2FzdHJTZXJ2aWNlIH0gZnJvbSAnbmd4LXRvYXN0cic7XG5cbmltcG9ydCB7IEFic3RyYWN0VG9hc3RlclNlcnZpY2UsIGlzRGVmaW5lZCB9IGZyb20gJ0B3bS9jb3JlJztcblxuaW1wb3J0IHsgQ3VzdG9tVG9hc3RlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY3VzdG9tLXRvYXN0ZXIuY29tcG9uZW50JztcblxuZGVjbGFyZSBjb25zdCBfO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVG9hc3RlclNlcnZpY2VJbXBsIGV4dGVuZHMgQWJzdHJhY3RUb2FzdGVyU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRvYXN0ZXI6IFRvYXN0clNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9zaG93VG9hc3RlciAodHlwZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBkZXNjOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSAoaW4gOS54LCA0dGggcGFyYW0gaXMgdGltZW91dCB2YWx1ZSkuXG4gICAgICAgIGlmIChfLmlzTnVtYmVyKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge3RpbWVPdXQ6IG9wdGlvbnN9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMudGltZU91dCA9IGlzRGVmaW5lZChvcHRpb25zLnRpbWVPdXQpID8gb3B0aW9ucy50aW1lT3V0IDogMDtcbiAgICAgICAgb3B0aW9ucy5lbmFibGVIdG1sID0gaXNEZWZpbmVkKG9wdGlvbnMuZW5hYmxlSHRtbCk7XG4gICAgICAgIG9wdGlvbnMucG9zaXRpb25DbGFzcyA9IG9wdGlvbnMucG9zaXRpb25DbGFzcyB8fCAndG9hc3QtYm90dG9tLXJpZ2h0JztcbiAgICAgICAgb3B0aW9ucy50b2FzdENsYXNzID0gJ3RvYXN0JztcbiAgICAgICAgLy8gcG9wIHRoZSB0b2FzdGVyIG9ubHkgaWYgZWl0aGVyIHRpdGxlIG9yIGRlc2NyaXB0aW9uIGFyZSBkZWZpbmVkXG4gICAgICAgIGlmICh0aXRsZSB8fCBkZXNjKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgZGVzYyBpcyBhbiBvYmplY3QsIHN0cmluZ2lmeSBpdC5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ib2R5T3V0cHV0VHlwZSAmJiBfLmlzT2JqZWN0KGRlc2MpKSB7XG4gICAgICAgICAgICAgICAgZGVzYyA9IEpTT04uc3RyaW5naWZ5KGRlc2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZm4gPSB0aGlzLnRvYXN0ZXJbdHlwZV07XG4gICAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLnRvYXN0ZXIsIGRlc2MsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdWNjZXNzICh0aXRsZSwgZGVzYykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2hvd1RvYXN0ZXIoJ3N1Y2Nlc3MnLCB0aXRsZSwgZGVzYywge3RpbWVPdXQ6IDUwMDB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXJyb3IgKHRpdGxlLCBkZXNjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaG93VG9hc3RlcignZXJyb3InLCB0aXRsZSwgZGVzYywge3RpbWVPdXQ6IDB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5mbyAodGl0bGUsIGRlc2MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nob3dUb2FzdGVyKCdpbmZvJywgdGl0bGUsIGRlc2MsIHt0aW1lT3V0OiAwfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHdhcm4gKHRpdGxlLCBkZXNjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaG93VG9hc3Rlcignd2FybmluZycsIHRpdGxlLCBkZXNjLCB7dGltZU91dDogMH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93ICh0eXBlLCB0aXRsZSwgZGVzYywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2hvd1RvYXN0ZXIodHlwZSwgdGl0bGUsIGRlc2MsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlICh0b2FzdGVyT2JqKSB7XG4gICAgICAgIC8vIGluIHN0dWRpbyBqdXN0IGlnbm9yZSB0aGUgdG9hc3Rlck9iaiBhbmQgaGlkZSBhbGwgdGhlIHRvYXN0ZXJzXG4gICAgICAgIGlmICghdG9hc3Rlck9iaikge1xuICAgICAgICAgICAgdGhpcy50b2FzdGVyLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b2FzdGVyLmNsZWFyKHRvYXN0ZXJPYmoudG9hc3RJZCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dDdXN0b20ocGFnZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIXBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy50b2FzdENvbXBvbmVudCA9IEN1c3RvbVRvYXN0ZXJDb21wb25lbnQ7XG4gICAgICAgIG9wdGlvbnMudG9hc3RDbGFzcyA9ICdjdXN0b20tdG9hc3Rlcic7XG4gICAgICAgIG9wdGlvbnMudGltZU91dCA9IGlzRGVmaW5lZChvcHRpb25zLnRpbWVPdXQpID8gb3B0aW9ucy50aW1lT3V0IDogMDtcbiAgICAgICAgb3B0aW9ucy5lbmFibGVIdG1sID0gaXNEZWZpbmVkKG9wdGlvbnMuZW5hYmxlSHRtbCk7XG4gICAgICAgIG9wdGlvbnMucG9zaXRpb25DbGFzcyA9IG9wdGlvbnMucG9zaXRpb25DbGFzcyB8fCAndG9hc3QtYm90dG9tLXJpZ2h0JztcbiAgICAgICAgb3B0aW9ucy50b2FzdENsYXNzID0gJ3RvYXN0JztcbiAgICAgICAgcmV0dXJuIHRoaXMudG9hc3Rlci5zaG93KHBhZ2UsICcnLCBvcHRpb25zKTtcbiAgICB9XG59XG4iXX0=