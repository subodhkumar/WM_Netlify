import { Compiler, Injectable, Injector, ChangeDetectorRef, KeyValueDiffers } from '@angular/core';
import { AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe, NgLocalization } from '@angular/common';
import { SuffixPipe, ToDatePipe, FileIconClassPipe, FileExtensionFromMimePipe, FilterPipe, FileSizePipe, ToNumberPipe, ToCurrencyPipe, PrefixPipe, TimeFromNowPipe, NumberToStringPipe, StateClassPipe, StringToNumberPipe } from '@wm/components';
import { getSessionStorageItem } from '@wm/core';
import * as i0 from "@angular/core";
export class PipeProvider {
    constructor(compiler, injector) {
        this.compiler = compiler;
        this.injector = injector;
        this._locale = getSessionStorageItem('selectedLocale') || 'en';
        this.preparePipeMeta = (reference, name, pure, diDeps = []) => ({
            type: { reference, diDeps },
            name,
            pure
        });
        this._pipeData = [
            // TODO | NEED TO BE TESTED
            this.preparePipeMeta(AsyncPipe, 'async', false, [ChangeDetectorRef]),
            this.preparePipeMeta(SlicePipe, 'slice', false),
            this.preparePipeMeta(PercentPipe, 'percent', true, [this._locale]),
            this.preparePipeMeta(I18nPluralPipe, 'i18nPlural', true, [
                NgLocalization
            ]),
            this.preparePipeMeta(I18nSelectPipe, 'i18nSelect', true),
            this.preparePipeMeta(KeyValuePipe, 'keyvalue', false, [
                KeyValueDiffers
            ]),
            this.preparePipeMeta(FileIconClassPipe, 'fileIconClass', true),
            this.preparePipeMeta(FileExtensionFromMimePipe, 'fileExtensionFromMime', true),
            this.preparePipeMeta(StateClassPipe, 'stateClass', true),
            this.preparePipeMeta(FileSizePipe, 'filesize', true),
            // TESTED
            this.preparePipeMeta(FilterPipe, 'filter', true),
            this.preparePipeMeta(UpperCasePipe, 'uppercase', true),
            this.preparePipeMeta(LowerCasePipe, 'lowercase', true),
            this.preparePipeMeta(JsonPipe, 'json', false),
            this.preparePipeMeta(DecimalPipe, 'number', true, [this._locale]),
            this.preparePipeMeta(TitleCasePipe, 'titlecase', true),
            this.preparePipeMeta(CurrencyPipe, 'currency', true, [this._locale]),
            this.preparePipeMeta(DatePipe, 'date', true, [this._locale]),
            this.preparePipeMeta(ToDatePipe, 'toDate', true, [
                new DatePipe(this._locale)
            ]),
            this.preparePipeMeta(ToNumberPipe, 'toNumber', true, [
                new DecimalPipe(this._locale)
            ]),
            this.preparePipeMeta(ToCurrencyPipe, 'toCurrency', true, [
                new DecimalPipe(this._locale)
            ]),
            this.preparePipeMeta(PrefixPipe, 'prefix', true),
            this.preparePipeMeta(SuffixPipe, 'suffix', true),
            this.preparePipeMeta(TimeFromNowPipe, 'timeFromNow', true),
            this.preparePipeMeta(NumberToStringPipe, 'numberToString', true, [
                new DecimalPipe(this._locale)
            ]),
            this.preparePipeMeta(StringToNumberPipe, 'stringToNumber', true)
        ];
        this._pipeMeta = new Map();
        this._pipeData.forEach(v => {
            this._pipeMeta.set(v.name, v);
        });
    }
    unknownPipe(name) {
        throw Error(`The pipe '${name}' could not be found`);
    }
    meta(name) {
        const meta = this._pipeMeta.get(name);
        if (!meta) {
            this.unknownPipe(name);
        }
        return meta;
    }
    getPipeNameVsIsPureMap() {
        const _map = new Map();
        this._pipeMeta.forEach((v, k) => {
            _map.set(k, v.pure);
        });
        return _map;
    }
    resolveDep(dep) {
        return this.injector.get(dep.token.identifier.reference);
    }
    getInstance(name) {
        const { type: { reference: ref, diDeps: deps } } = this.meta(name);
        if (!ref) {
            this.unknownPipe(name);
        }
        if (!deps.length) {
            return new ref();
        }
        else {
            const args = [];
            for (const dep of deps) {
                args.push(dep);
            }
            return new ref(...args);
        }
    }
}
PipeProvider.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PipeProvider.ctorParameters = () => [
    { type: Compiler },
    { type: Injector }
];
PipeProvider.ngInjectableDef = i0.defineInjectable({ factory: function PipeProvider_Factory() { return new PipeProvider(i0.inject(i0.Compiler), i0.inject(i0.INJECTOR)); }, token: PipeProvider, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,