import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { registerLocaleData } from '@angular/common';
import { BsLocaleService, defineLocale } from 'ngx-bootstrap';
import { _WM_APP_PROJECT, AbstractI18nService, AppDefaults, getSessionStorageItem, getWmProjectProperties, isMobile, isMobileApp, replace, setCSS, setSessionStorageItem } from '@wm/core';
import { CONSTANTS } from '@wm/variables';
var APP_LOCALE_ROOT_PATH = 'resources/i18n';
var RTL_LANGUAGE_CODES = ['ar', 'ar-001', 'ar-ae', 'ar-bh', 'ar-dz', 'ar-eg', 'ar-iq', 'ar-jo', 'ar-kw', 'ar-lb', 'ar-ly',
    'ar-ma', 'ar-om', 'ar-qa', 'ar-sa', 'ar-sd', 'ar-sy', 'ar-tn', 'ar-ye', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk',
    'he', 'ku', 'mzn', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi'];
var I18nServiceImpl = /** @class */ (function (_super) {
    tslib_1.__extends(I18nServiceImpl, _super);
    function I18nServiceImpl($http, bsLocaleService, appDefaults) {
        var _this = _super.call(this) || this;
        _this.$http = $http;
        _this.bsLocaleService = bsLocaleService;
        _this.appDefaults = appDefaults;
        _this.defaultSupportedLocale = 'en';
        _this._isAngularLocaleLoaded = false;
        _this.appLocale = {};
        _this.prefabLocale = new Map();
        return _this;
    }
    I18nServiceImpl.prototype.updateLocaleDirection = function () {
        var direction = 'ltr';
        if (RTL_LANGUAGE_CODES.includes(this.selectedLocale)) {
            direction = 'rtl';
        }
        setCSS(document.body, 'direction', direction);
    };
    I18nServiceImpl.prototype.init = function () {
        this.messages = {};
        Object.setPrototypeOf(this.appLocale, this.messages);
    };
    I18nServiceImpl.prototype.getSelectedLocale = function () {
        return this.selectedLocale;
    };
    I18nServiceImpl.prototype.getDefaultSupportedLocale = function () {
        return this.defaultSupportedLocale;
    };
    I18nServiceImpl.prototype.getAppLocale = function () {
        return this.appLocale;
    };
    I18nServiceImpl.prototype.getPrefabLocaleBundle = function (prefabName) {
        if (!this.prefabLocale.has(prefabName)) {
            this.prefabLocale.set(prefabName, Object.create(this.appLocale));
        }
        return this.prefabLocale.get(prefabName);
    };
    I18nServiceImpl.prototype.extendPrefabMessages = function (messages) {
        var _this = this;
        if (!messages.prefabMessages) {
            return;
        }
        Object.keys(messages.prefabMessages).forEach(function (prefabName) {
            var bundle = _this.prefabLocale.get(prefabName);
            if (!bundle) {
                bundle = Object.create(_this.appLocale);
                _this.prefabLocale.set(prefabName, bundle);
            }
            Object.assign(bundle, messages.prefabMessages[prefabName]);
        });
    };
    I18nServiceImpl.prototype.extendMessages = function (messages) {
        Object.assign(this.messages, messages);
    };
    I18nServiceImpl.prototype.loadResource = function (path) {
        return this.$http.get(path)
            .toPromise()
            .catch(function () {
            console.warn("error loading locale resource from " + path);
            Promise.resolve({});
        });
    };
    I18nServiceImpl.prototype.loadAppLocaleBundle = function () {
        var _this = this;
        this.loadResource(APP_LOCALE_ROOT_PATH + "/" + this.selectedLocale + ".json")
            .then(function (bundle) {
            _this.extendMessages(bundle.messages);
            _this.extendPrefabMessages(bundle);
            _this.appDefaults.setFormats(bundle.formats);
        });
    };
    I18nServiceImpl.prototype.loadMomentLocaleBundle = function (momentLocale) {
        var _this = this;
        var _cdnUrl = _WM_APP_PROJECT.cdnUrl || _WM_APP_PROJECT.ngDest;
        if (this.selectedLocale === this.defaultSupportedLocale) {
            moment.locale(this.defaultSupportedLocale);
            return;
        }
        var path = _cdnUrl + ("locales/moment/" + momentLocale + ".js");
        this.$http.get(path, { responseType: 'text' })
            .toPromise()
            .then(function (response) {
            var fn = new Function(response);
            // Call the script. In script, moment defines the loaded locale
            fn();
            moment.locale(_this.selectedLocale);
            // For ngx bootstrap locale, get the config from script and apply locale
            var _config;
            fn.apply({ moment: { defineLocale: function (code, config) { return _config = config; } } });
            defineLocale(_this.selectedLocale, _config);
            _this.bsLocaleService.use(_this.getSelectedLocale() || _this.defaultSupportedLocale);
        });
    };
    I18nServiceImpl.prototype.loadAngularLocaleBundle = function (angLocale) {
        var _this = this;
        return new Promise(function (resolve) {
            var _cdnUrl = _WM_APP_PROJECT.cdnUrl || _WM_APP_PROJECT.ngDest;
            if (_this.selectedLocale === _this.defaultSupportedLocale) {
                resolve();
                return;
            }
            var path = _cdnUrl + ("locales/angular/" + angLocale + ".js");
            _this.$http.get(path, { responseType: 'text' })
                .toPromise()
                .then(function (response) {
                var module = {}, exports = {};
                module.exports = exports;
                var fn = new Function('module', 'exports', response);
                fn(module, exports);
                registerLocaleData(exports.default);
                _this._isAngularLocaleLoaded = true;
                resolve();
            }, function () { return resolve(); });
        });
    };
    I18nServiceImpl.prototype.loadCalendarLocaleBundle = function (calendarLocale) {
        var _cdnUrl = _WM_APP_PROJECT.cdnUrl || _WM_APP_PROJECT.ngDest;
        var path;
        if (calendarLocale) {
            path = _cdnUrl + ("locales/fullcalendar/" + calendarLocale + ".js");
        }
        else {
            return Promise.resolve();
        }
        // return in case of mobile app or if selected locale is default supported locale.
        if (isMobile() || isMobileApp() || this.selectedLocale === this.defaultSupportedLocale) {
            return;
        }
        this.$http.get(path, { responseType: 'text' })
            .toPromise()
            .then(function (response) {
            var fn = new Function(response);
            // Call the script. In script, moment defines the loaded locale
            fn();
        });
    };
    I18nServiceImpl.prototype.loadLocaleBundles = function (libLocale) {
        if (libLocale.moment) {
            this.loadMomentLocaleBundle(libLocale.moment);
        }
        if (libLocale.fullCalendar) {
            this.loadCalendarLocaleBundle(libLocale.fullCalendar);
        }
        if (libLocale.angular) {
            this.loadAppLocaleBundle();
        }
        return this.loadAngularLocaleBundle(libLocale.angular);
    };
    I18nServiceImpl.prototype.setSelectedLocale = function (locale) {
        var _this = this;
        // check if the event is propagated from the select or any such widget
        if (_.isObject(locale)) {
            locale = locale.datavalue;
        }
        var libLocale = getWmProjectProperties().supportedLanguages[locale];
        var supportedLocale = Object.keys(getWmProjectProperties().supportedLanguages);
        if (!_.includes(supportedLocale, locale)) {
            return Promise.resolve();
        }
        if (!locale || locale === this.selectedLocale) {
            return Promise.resolve();
        }
        setSessionStorageItem('selectedLocale', locale);
        this.selectedLocale = locale;
        // reset the localeData object
        this.init();
        // load the locale bundles of the selected locale
        return this.loadLocaleBundles(libLocale).then(function () { return _this.updateLocaleDirection(); });
    };
    I18nServiceImpl.prototype.loadDefaultLocale = function () {
        var _acceptLang = this.getAcceptedLanguages();
        _acceptLang.push(getWmProjectProperties().defaultLanguage);
        var _supportedLang = Object.keys(getWmProjectProperties().supportedLanguages) || [this.defaultSupportedLocale];
        // check for the session storage to load any pre-requested locale
        var _defaultLang = getSessionStorageItem('selectedLocale') || _.intersection(_acceptLang, _supportedLang)[0] || this.defaultSupportedLocale;
        // if the supportedLocale is not available set it to defaultLocale
        _supportedLang = _supportedLang || [_defaultLang];
        var defaultLanguage = _defaultLang || _supportedLang[0];
        return this.setSelectedLocale(defaultLanguage);
    };
    I18nServiceImpl.prototype.getLocalizedMessage = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return replace(this.appLocale[message], args);
    };
    // This function returns the accepted languages list
    I18nServiceImpl.prototype.getAcceptedLanguages = function () {
        var languages;
        if (CONSTANTS.hasCordova) {
            languages = navigator.languages || [navigator.language];
        }
        else {
            languages = getWmProjectProperties().preferredLanguage || '';
            /**
             * Accept-Language Header will contain set of supported locale, so try splitting the string to proper locale set
             * Ex: en,en-US;q=0.9,de;q=0.6,ar;q=0.2,hi
             *
             * Split the above into [en,en-us,de,ar,hi]
             * @type {Array}
             */
            languages = languages.split(',').map(function (locale) {
                return locale.split(';')[0];
            });
        }
        return _.map(languages, _.toLower);
    };
    I18nServiceImpl.prototype.isAngularLocaleLoaded = function () {
        return this._isAngularLocaleLoaded;
    };
    I18nServiceImpl.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    I18nServiceImpl.ctorParameters = function () { return [
        { type: HttpClient },
        { type: BsLocaleService },
        { type: AppDefaults }
    ]; };
    return I18nServiceImpl;
}(AbstractI18nService));
export { I18nServiceImpl };
//# sourceMappingURL=data:application/json;base64,