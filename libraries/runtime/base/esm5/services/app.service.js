import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { AbstractDialogService, AbstractHttpService, AbstractI18nService, AbstractSpinnerService, AbstractToasterService, EventNotifier, FieldTypeService, FieldWidgetService, getWmProjectProperties, isDefined, isString, UtilsService, DynamicComponentRefProvider } from '@wm/core';
import { SecurityService } from '@wm/security';
var injectorMap = {
    DialogService: AbstractDialogService,
    i18nService: AbstractI18nService,
    SpinnerService: AbstractSpinnerService,
    ToasterService: AbstractToasterService,
    Utils: UtilsService,
    FIELD_TYPE: FieldTypeService,
    FIELD_WIDGET: FieldWidgetService,
    DynamicComponentService: DynamicComponentRefProvider
};
var noop = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
};
var ɵ0 = noop;
// Wraps httpService to behave as angular 1.x $http service.
var getHttpDependency = function () {
    var httpService = this.httpService;
    var fn = function (key, options) {
        var args = Array.from(arguments).slice(1);
        return Promise.resolve(httpService[key].apply(httpService, args));
    };
    var $http = function () {
        return fn.apply(undefined, tslib_1.__spread(['send'], Array.from(arguments)));
    };
    ['get', 'post', 'head', 'put', 'delete', 'jsonp', 'patch'].forEach(function (key) { return $http[key] = fn.bind(undefined, key); });
    return $http;
};
var ɵ1 = getHttpDependency;
var AppRef = /** @class */ (function () {
    function AppRef(inj, i18nService, httpService, securityService) {
        this.inj = inj;
        this.i18nService = i18nService;
        this.httpService = httpService;
        this.securityService = securityService;
        this.Variables = {};
        this.Actions = {};
        this.onAppVariablesReady = noop;
        this.onSessionTimeout = noop;
        this.onPageReady = noop;
        this.onBeforePageLeave = noop;
        this.onBeforeServiceCall = noop;
        this.onServiceSuccess = noop;
        this.onServiceError = noop;
        this.dynamicComponentContainerRef = {};
        this.changeLocale = this.i18nService.setSelectedLocale.bind(this.i18nService);
        this.getSelectedLocale = this.i18nService.getSelectedLocale.bind(this.i18nService);
        this._eventNotifier = new EventNotifier();
        var wmProjectProperties = getWmProjectProperties();
        this.projectName = wmProjectProperties.name;
        this.isPrefabType = wmProjectProperties.type === "PREFAB" /* PREFAB */;
        this.isApplicationType = wmProjectProperties.type === "APPLICATION" /* APPLICATION */;
        this.isTemplateBundleType = wmProjectProperties.type === "TEMPLATEBUNDLE" /* TEMPLATE_BUNDLE */;
        this.httpService.registerOnSessionTimeout(this.on401.bind(this));
        this.appLocale = this.i18nService.getAppLocale();
        this.httpService.setLocale(this.appLocale);
    }
    AppRef.prototype.reload = function () {
        window.location.reload();
    };
    AppRef.prototype.notify = function (eventName) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        this._eventNotifier.notify.apply(this._eventNotifier, arguments);
    };
    AppRef.prototype.getDependency = function (injToken) {
        var _this = this;
        if (isString(injToken)) {
            if (injToken === 'HttpService') {
                return getHttpDependency.call(this);
            }
            var providerInstance_1 = injectorMap[injToken] && this.inj.get(injectorMap[injToken]);
            if (!providerInstance_1 && this.inj['_providers']) {
                this.inj['_providers'].forEach(function (e) {
                    if (e && e.__proto__.constructor.toString().indexOf('function ' + injToken + '(') === 0) {
                        providerInstance_1 = _this.inj.get(e.__proto__.constructor);
                    }
                });
            }
            return providerInstance_1;
        }
        return this.inj.get(injToken);
    };
    /**
     * triggers the onSessionTimeout callback in app.js
     */
    AppRef.prototype.on401 = function () {
        var userInfo = _.get(this.securityService.get(), 'userInfo');
        // if a previous user exists, a session time out triggered
        if (!_.isEmpty(userInfo)) {
            this.onSessionTimeout();
        }
    };
    AppRef.prototype.subscribe = function (eventName, callback) {
        return this._eventNotifier.subscribe(eventName, callback);
    };
    AppRef.prototype.notifyApp = function (template, type, title) {
        var notificationAction = _.get(this, 'Actions.appNotification');
        if (notificationAction) {
            type = type || 'success';
            notificationAction.invoke({
                message: template,
                title: isDefined(title) ? title : type.toUpperCase(),
                class: type,
                // If the type is error do not close the toastr
                duration: type.toUpperCase() === 'ERROR' ? 0 : undefined
            });
        }
        else {
            console.warn('The default Action "appNotification" doesn\'t exist in the app.');
        }
    };
    AppRef.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AppRef.ctorParameters = function () { return [
        { type: Injector },
        { type: AbstractI18nService },
        { type: AbstractHttpService },
        { type: SecurityService }
    ]; };
    return AppRef;
}());
export { AppRef };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,