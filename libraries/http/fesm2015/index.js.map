{"version":3,"file":"index.js.map","sources":["ng://@wm/http/http.service.ts","ng://@wm/http/wm-http-request.ts","ng://@wm/http/wm-http-response.ts","ng://@wm/http/http-service.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { AbstractHttpService, getValidJSON, replace } from '@wm/core';\n\ndeclare const _;\n\n@Injectable()\nexport class HttpServiceImpl extends AbstractHttpService {\n    nonBodyTypeMethods = ['GET', 'DELETE', 'HEAD', 'OPTIONS', 'JSONP'];\n    sessionTimeoutObservable = new Subject();\n    sessionTimeoutQueue = [];\n    localeObject: any;\n\n    constructor(private httpClient: HttpClient) {\n        super();\n    }\n\n    /**\n     * This method handles session timeout.\n     * @param options\n     * @param resolve\n     * @param reject\n     */\n    handleSessionTimeout(options, subscriber401?) {\n        this.sessionTimeoutQueue.push({\n            requestInfo: options,\n            sub401: subscriber401\n        });\n        this.on401();\n    }\n\n    /**\n     * Generates a request with provided options\n     * @param options, request params/options\n     */\n    private generateRequest(options: any) {\n        let reqHeaders = new HttpHeaders(),\n            reqParams = new HttpParams();\n        const headers = options.headers;\n        const params = options.params;\n        const responseType = options.responseType;\n\n        // this header is not to be sent with non-proxy calls from service variable\n        if (!options.isDirectCall) {\n            reqHeaders = reqHeaders.append('X-Requested-With', 'XMLHttpRequest');\n        }\n\n        // headers\n        if (headers) {\n            Object.entries(headers).forEach(([k, v]) => reqHeaders = reqHeaders.append(k, v as string));\n        }\n\n        // params\n        if (params) {\n            Object.entries(params).forEach(([k, v]) => reqParams = reqParams.append(k, v as string));\n        }\n\n        let third, fourth;\n        const reqOptions = {\n            headers: reqHeaders,\n            params: reqParams,\n            responseType: responseType\n        };\n        if (_.includes(this.nonBodyTypeMethods, options.method && options.method.toUpperCase())) {\n            third = reqOptions;\n            fourth = null;\n        } else {\n            third = options.data;\n            fourth = reqOptions;\n        }\n        return new HttpRequest(options.method, options.url, third, fourth);\n    }\n\n    /**\n     * This method filters and returns error message from the failed network call response.\n     * @param err, error form network call failure\n     */\n    public getErrMessage(err: any) {\n        const HTTP_STATUS_MSG = {\n            404: this.getLocale()['MESSAGE_404_ERROR'] || 'Requested resource not found',\n            401: this.getLocale()['MESSAGE_401_ERROR'] || 'Requested resource requires authentication',\n            403: this.getLocale()['LABEL_FORBIDDEN_MESSAGE'] || 'The requested resource access/action is forbidden.'\n        };\n\n        // check if error message present for responded http status\n        let errMsg = HTTP_STATUS_MSG[err.status];\n        let errorDetails = err.error;\n        errorDetails = getValidJSON(errorDetails) || errorDetails;\n\n        // WM services have the format of error response as errorDetails.error\n        if (errorDetails && errorDetails.errors) {\n            errMsg = this.parseErrors(errorDetails.errors);\n        } else {\n            errMsg = errMsg || 'Service Call Failed';\n        }\n        return errMsg;\n    }\n\n    /**\n     * Make a http call and returns an observable that can be cancelled\n     * @param options, options using which the call needs to be made\n     */\n    sendCallAsObservable(options: any): any {\n        const req = this.generateRequest(options);\n        return this.httpClient.request(req);\n    }\n\n    /**\n     * Makes a http call and return a promise\n     * @param options, options using which the call needs to be made\n     */\n    send(options: any) {\n        const req = this.generateRequest(options);\n\n        return new Promise((resolve, reject) => {\n            this.httpClient.request(req).toPromise().then((response) => {\n                resolve(response);\n            } , (err) => {\n                if (this.isPlatformSessionTimeout(err)) {\n                    err._401Subscriber.asObservable().subscribe((response) => {\n                        resolve(response);\n                    }, (e) => {\n                        reject(e);\n                    });\n                } else {\n                    const errMsg = this.getErrMessage(err);\n                    reject({\n                        error: errMsg,\n                        details: err\n                    });\n                }\n            });\n        });\n    }\n\n    setLocale(locale) {\n        this.localeObject = locale;\n    }\n\n    getLocale() {\n        return this.localeObject;\n    }\n\n    parseErrors(errors) {\n        let errMsg = '';\n        errors.error.forEach((errorDetails, i) => {\n            errMsg += this.parseError(errorDetails) + (i > 0 ? '\\n' : '');\n        });\n        return errMsg;\n    }\n\n    parseError(errorObj) {\n        let errMsg;\n        errMsg = errorObj.message ? replace(errorObj.message, errorObj.parameters, true) : ((errorObj.parameters && errorObj.parameters[0]) || '');\n        return errMsg;\n    }\n\n    getHeader(error, headerKey) {\n        return error.headers.get(headerKey);\n    }\n\n    isPlatformSessionTimeout(error) {\n        const MSG_SESSION_NOT_FOUND = 'Session Not Found';\n        return error.status === 401 && this.getHeader(error, 'x-wm-login-errormessage') === MSG_SESSION_NOT_FOUND;\n    }\n\n    get(url: string, options?: any) {\n        options = options || {};\n        options.url = url;\n        options.method = 'get';\n        return this.send(options).then((response: HttpResponse<string>) => response.body);\n    }\n\n    post(url, data, options) {\n        options = options || {};\n        options.url = url;\n        options.method = 'post';\n        options.data = data;\n        return this.send(options);\n    }\n\n    put(url, data, options) {\n        options = options || {};\n        options.url = url;\n        options.method = 'put';\n        options.data = data;\n        return this.send(options);\n    }\n\n    patch(url, data, options) {\n        options = options || {};\n        options.url = url;\n        options.method = 'patch';\n        options.data = data;\n        return this.send(options);\n    }\n\n    delete(url, options) {\n        options = options || {};\n        options.url = url;\n        options.method = 'delete';\n        return this.send(options);\n    }\n\n    head(url, options) {\n        options = options || {};\n        options.url = url;\n        options.method = 'head';\n        return this.send(options);\n    }\n\n    jsonp(url, options) {\n        options = options || {};\n        options.url = url;\n        options.method = 'jsonp';\n        return this.send(options);\n    }\n\n    upload(url, data, options): Observable<HttpEvent<any>> {\n        const req = new HttpRequest('POST', url, data, {\n            reportProgress: true // for progress data\n        });\n        return this.httpClient.request(req);\n        // return this.httpClient.post(url, data, {\n        //     reportProgress: true\n        // });\n    }\n\n    /**\n     * registers a callback to be trigerred on session timeout\n     * @param callback\n     */\n    registerOnSessionTimeout(callback) {\n        this.sessionTimeoutObservable.asObservable().subscribe(callback);\n    }\n\n    /**\n     * trigger the registered methods on session timeout\n     */\n    on401() {\n        this.sessionTimeoutObservable.next();\n    }\n\n    pushToSessionFailureQueue(callback) {\n        this.sessionTimeoutQueue.push({\n            callback: callback\n        });\n    }\n\n    /**\n     * Execute queued requests, failed due to session timeout\n     */\n    executeSessionFailureRequests() {\n        const queue = this.sessionTimeoutQueue;\n        const that = this;\n        that.sessionTimeoutQueue = [];\n        queue.forEach(data => {\n            if (_.isFunction(data.callback)) {\n                data.callback();\n            } else {\n                data.requestInfo.headers.headers.delete('x-wm-xsrf-token');\n                that.httpClient.request(data.requestInfo)\n                    .subscribe(\n                        response => {\n                            if (response && response.type && data.sub401) {\n                                data.sub401.next(response);\n                            }\n                        }, (reason) => {\n                            data.sub401.error(reason);\n                        });\n            }\n        });\n    }\n}\n","import { HttpRequest } from '@angular/common/http';\n\ndeclare const _;\n\n/**\n * This class creates a custom WmHttpRequest.\n */\nexport class WmHttpRequest {\n\n    method: string;\n    url: string;\n    headers: any = [];\n    responseType: string;\n    withCredentials: boolean;\n    urlWithParams: string;\n    body: any;\n\n    constructor() {}\n\n    /**\n     * This method converts the given wm HttpRequest to angular HttpRequest\n     * @param reqObj, the wm HttpRequest\n     */\n    wmToAngularRequest(reqObj) {\n        let angReq;\n        angReq = new HttpRequest(reqObj.method, reqObj.url);\n        angReq = angReq.clone();\n        angReq.body = reqObj.body;\n        angReq.method = reqObj.method;\n        angReq.responseType =  reqObj.responseType;\n        angReq.urlWithParams = reqObj.url;\n        angReq.withCredentials =  reqObj.withCredentials;\n        reqObj.headers.forEach((value, header)=>{\n            angReq.headers = angReq.headers.append(header, value);\n        });\n        return angReq;\n    }\n\n    /**\n     * This method converts the given angular HttpRequest to wm HttpRequest\n     * @param req, the angular HttpRequest\n     */\n    angularToWmRequest(req) {\n        let wmReq = new WmHttpRequest();\n        let headerMap = new Map();\n        wmReq.body = req.body;\n        wmReq.method = req.method;\n        wmReq.responseType = req.responseType;\n        wmReq.url = req.urlWithParams;\n        wmReq.withCredentials = req.withCredentials;\n        req.headers.keys().forEach((header) => {\n            headerMap.set(header, req.headers.headers.get(header.toLowerCase())[0]);\n        });\n        wmReq.headers = headerMap;\n        return wmReq;\n    }\n}","import { WmHttpRequest } from './wm-http-request';\nimport { HttpResponse } from '@angular/common/http';\n\n\ndeclare const _;\n\n/**\n * This class creates a custom WmHttpRequest.\n */\nexport class WmHttpResponse extends WmHttpRequest{\n\n    error: any;\n    message: string;\n    ok: boolean;\n    status: number;\n    statusText: string;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * This method converts the given wm HttpResponse to angular HttpResponse\n     * @param respObj, the wm HttpResponse\n     */\n    wmToAngularResponse(respObj) {\n        let angResp;\n        angResp = new HttpResponse();\n        angResp = angResp.clone();\n        angResp.body = respObj.body;\n        angResp.error = respObj.error;\n        angResp.message = respObj.message;\n        angResp.url = respObj.url;\n        angResp.ok = respObj.ok;\n        angResp.status = respObj.status;\n        angResp.statusText = respObj.statusText;\n        respObj.headers.forEach((value, header)=>{\n            angResp.headers = angResp.headers.append(header, value);\n        });\n        return angResp;\n    }\n\n    /**\n     * This method converts the given wm HttpResponse to angular HttpResponse\n     * @param respObj, the angular HttpResponse\n     */\n    angularToWmResponse(respObj) {\n        let wmResp;\n        let headerMap = new Map();\n        wmResp = new WmHttpResponse();\n        wmResp.body = respObj.body;\n        wmResp.error = respObj.error;\n        wmResp.message = respObj.message;\n        wmResp.url = respObj.url;\n        wmResp.ok = respObj.ok;\n        wmResp.status = respObj.status;\n        wmResp.statusText = respObj.statusText;\n        respObj.headers.keys().forEach((header) => {\n            headerMap.set(header, respObj.headers.headers.get(header.toLowerCase())[0]);\n        });\n        wmResp.headers = headerMap;\n        return wmResp;\n    }\n}","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AbstractHttpService } from '@wm/core';\n\nimport { HttpServiceImpl } from './http.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: []\n})\nexport class HttpServiceModule {\n\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: CommonModule,\n            providers: [\n                {provide: AbstractHttpService, useClass: HttpServiceImpl}\n            ]\n        };\n    }\n}\n\nexport * from './http.service';\nexport * from './wm-http-request';\nexport * from './wm-http-response';\n"],"names":[],"mappings":"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"}
