import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, HostListener, Injector } from '@angular/core';
import { Camera } from '@ionic-native/camera';
import { MediaCapture } from '@ionic-native/media-capture';
import { APPLY_STYLES_TYPE, provideAsWidgetRef, StylableComponent, styler } from '@wm/components';
import { convertToBlob, hasCordova } from '@wm/core';
import { registerProps } from './camera.props';
var DEFAULT_CLS = 'btn app-camera';
var WIDGET_CONFIG = { widgetType: 'wm-camera', hostClass: DEFAULT_CLS };
export var CAPTURE_TYPE;
(function (CAPTURE_TYPE) {
    CAPTURE_TYPE["IMAGE"] = "IMAGE";
    CAPTURE_TYPE["PNG"] = "PNG";
})(CAPTURE_TYPE || (CAPTURE_TYPE = {}));
export var ENCODING_TYPE;
(function (ENCODING_TYPE) {
    ENCODING_TYPE["JPEG"] = "JPEG";
    ENCODING_TYPE["PNG"] = "PNG";
})(ENCODING_TYPE || (ENCODING_TYPE = {}));
var CameraComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CameraComponent, _super);
    function CameraComponent(camera, mediaCapture, inj, elRef, cdr) {
        var _this = _super.call(this, inj, WIDGET_CONFIG) || this;
        _this.camera = camera;
        _this.mediaCapture = mediaCapture;
        styler(_this.nativeElement, _this, APPLY_STYLES_TYPE.SCROLLABLE_CONTAINER);
        return _this;
    }
    CameraComponent.prototype.openCamera = function ($event) {
        var _this = this;
        if (hasCordova()) {
            if (this.capturetype === CAPTURE_TYPE.IMAGE) {
                this._cameraOptions = {
                    quality: this.imagequality,
                    destinationType: 1,
                    sourceType: 1,
                    allowEdit: this.allowedit,
                    correctOrientation: this.correctorientation,
                    encodingType: this.imageencodingtype === ENCODING_TYPE.JPEG ? 0 : 1,
                    saveToPhotoAlbum: this.savetogallery,
                    targetWidth: this.imagetargetwidth,
                    targetHeight: this.imagetargetheight
                };
                // start camera
                this.camera.getPicture(this._cameraOptions)
                    .then(function (path) { return _this.updateModel($event, path); });
            }
            else {
                this._cameraOptions = {
                    limit: 1
                };
                // start video capture
                this.mediaCapture.captureVideo(this._cameraOptions)
                    .then(function (mediaFiles) { return _this.updateModel($event, mediaFiles[0].fullPath); });
            }
        }
        else {
            this.invokeEventCallback('success', { $event: $event });
        }
    };
    CameraComponent.prototype.updateModel = function ($event, value) {
        var _this = this;
        this.localFilePath = this.datavalue = value;
        convertToBlob(value)
            .then(function (result) {
            _this.localFile = result.blob;
            _this.invokeEventCallback('success', { $event: $event, localFilePath: _this.localFilePath, localFile: _this.localFile });
        }, function () {
            _this.localFile = undefined;
        });
    };
    CameraComponent.initializeProps = registerProps();
    CameraComponent.decorators = [
        { type: Component, args: [{
                    selector: 'button[wmCamera]',
                    template: "<i [ngClass]=\"iconclass\" [ngStyle]=\"{'font-size': iconsize}\"></i>",
                    providers: [
                        provideAsWidgetRef(CameraComponent)
                    ]
                }] }
    ];
    /** @nocollapse */
    CameraComponent.ctorParameters = function () { return [
        { type: Camera },
        { type: MediaCapture },
        { type: Injector },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    CameraComponent.propDecorators = {
        openCamera: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return CameraComponent;
}(StylableComponent));
export { CameraComponent };
//# sourceMappingURL=data:application/json;base64,