import { Component, Injector } from '@angular/core';
import { APPLY_STYLES_TYPE, provideAsWidgetRef, StylableComponent, styler } from '@wm/components';
import { isNumber, setCSS, setCSSFromObj } from '@wm/core';
import { registerProps } from './segmented-control.props';
const DEFAULT_CLS = 'app-segmented-control';
const WIDGET_CONFIG = { widgetType: 'wm-segmented-control', hostClass: DEFAULT_CLS };
export class SegmentedControlComponent extends StylableComponent {
    constructor(inj) {
        super(inj, WIDGET_CONFIG);
        this.contents = [];
        this.currentSelectedIndex = 0;
        styler(this.nativeElement, this, APPLY_STYLES_TYPE.SCROLLABLE_CONTAINER);
    }
    addContent(content) {
        this.contents.push(content);
    }
    goToNext() {
        this.showContent(this.currentSelectedIndex + 1);
    }
    goToPrev() {
        this.showContent(this.currentSelectedIndex - 1);
    }
    ngAfterViewInit() {
        this._$container = this.$element.find('>.app-segments-container');
        const childEls = this._$container.find('>.list-inline >li');
        const maxWidth = `${this.contents.length * 100}%`;
        setCSSFromObj(this._$container[0], {
            maxWidth: maxWidth,
            width: maxWidth,
            'white-space': 'nowrap',
            transition: 'transform 0.2s linear'
        });
        const width = `${100 / this.contents.length}%`;
        for (const child of Array.from(childEls)) {
            setCSS(child, 'width', width);
        }
        this.showContent(0, undefined, true);
    }
    onPropertyChange(key, nv, ov) {
        if (key === 'tabindex') {
            return;
        }
        else {
            super.onPropertyChange(key, nv, ov);
        }
    }
    removeContent(content) {
        const index = this.contents.findIndex(c => {
            return c === content;
        });
        if (index >= 0) {
            this.contents.splice(index, 1);
            if (index < this.contents.length) {
                this.showContent(index);
            }
            else if (this.contents.length > 0) {
                this.showContent(0);
            }
        }
    }
    showContent(content, $event, defaultLoad) {
        let index;
        let selectedContent;
        if (isNumber(content)) {
            index = content;
            if (this.contents.length) {
                selectedContent = this.contents[index];
            }
        }
        else {
            selectedContent = content;
            index = this.contents.findIndex(c => {
                return c === content;
            });
        }
        if (selectedContent) {
            selectedContent.loadContent(defaultLoad);
        }
        if (index < 0 || index >= this.contents.length) {
            return;
        }
        if ($event) {
            $event.stopPropagation();
        }
        const eventData = {
            $old: this.currentSelectedIndex,
            $new: index
        };
        this.currentSelectedIndex = index;
        this.invokeEventCallback('beforesegmentchange', eventData);
        setCSS(this._$container[0], 'transform', `translate3d(${-1 * index / this.contents.length * 100}%, 0, 0)`);
        this.invokeEventCallback('segmentchange', eventData);
    }
}
SegmentedControlComponent.initializeProps = registerProps();
SegmentedControlComponent.decorators = [
    { type: Component, args: [{
                selector: '[wmSegmentedControl]',
                template: "<div class=\"app-segments-container\"> \n    <ul class=\"list-inline\">\n        <ng-content></ng-content>\n    </ul>\n    </div> \n<div class=\"btn-group btn-group-justified\"> \n    <a class=\"btn btn-default\" *ngFor=\"let content of contents; index as i\"\n       [ngClass]=\"{'active btn-primary' : i == currentSelectedIndex}\"\n       (click)=\"showContent(i, $event);\">\n        <i class=\"app-icon\" [ngClass]=\"content.iconclass\"></i>{{content.caption}}\n    </a> \n</div> ",
                providers: [
                    provideAsWidgetRef(SegmentedControlComponent)
                ]
            }] }
];
/** @nocollapse */
SegmentedControlComponent.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,