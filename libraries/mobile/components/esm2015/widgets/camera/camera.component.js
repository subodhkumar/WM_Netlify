import { ChangeDetectorRef, Component, ElementRef, HostListener, Injector } from '@angular/core';
import { Camera } from '@ionic-native/camera';
import { MediaCapture } from '@ionic-native/media-capture';
import { APPLY_STYLES_TYPE, provideAsWidgetRef, StylableComponent, styler } from '@wm/components';
import { convertToBlob, hasCordova } from '@wm/core';
import { registerProps } from './camera.props';
const DEFAULT_CLS = 'btn app-camera';
const WIDGET_CONFIG = { widgetType: 'wm-camera', hostClass: DEFAULT_CLS };
export var CAPTURE_TYPE;
(function (CAPTURE_TYPE) {
    CAPTURE_TYPE["IMAGE"] = "IMAGE";
    CAPTURE_TYPE["PNG"] = "PNG";
})(CAPTURE_TYPE || (CAPTURE_TYPE = {}));
export var ENCODING_TYPE;
(function (ENCODING_TYPE) {
    ENCODING_TYPE["JPEG"] = "JPEG";
    ENCODING_TYPE["PNG"] = "PNG";
})(ENCODING_TYPE || (ENCODING_TYPE = {}));
export class CameraComponent extends StylableComponent {
    constructor(camera, mediaCapture, inj, elRef, cdr) {
        super(inj, WIDGET_CONFIG);
        this.camera = camera;
        this.mediaCapture = mediaCapture;
        styler(this.nativeElement, this, APPLY_STYLES_TYPE.SCROLLABLE_CONTAINER);
    }
    openCamera($event) {
        if (hasCordova()) {
            if (this.capturetype === CAPTURE_TYPE.IMAGE) {
                this._cameraOptions = {
                    quality: this.imagequality,
                    destinationType: 1,
                    sourceType: 1,
                    allowEdit: this.allowedit,
                    correctOrientation: this.correctorientation,
                    encodingType: this.imageencodingtype === ENCODING_TYPE.JPEG ? 0 : 1,
                    saveToPhotoAlbum: this.savetogallery,
                    targetWidth: this.imagetargetwidth,
                    targetHeight: this.imagetargetheight
                };
                // start camera
                this.camera.getPicture(this._cameraOptions)
                    .then(path => this.updateModel($event, path));
            }
            else {
                this._cameraOptions = {
                    limit: 1
                };
                // start video capture
                this.mediaCapture.captureVideo(this._cameraOptions)
                    .then(mediaFiles => this.updateModel($event, mediaFiles[0].fullPath));
            }
        }
        else {
            this.invokeEventCallback('success', { $event });
        }
    }
    updateModel($event, value) {
        this.localFilePath = this.datavalue = value;
        convertToBlob(value)
            .then(result => {
            this.localFile = result.blob;
            this.invokeEventCallback('success', { $event, localFilePath: this.localFilePath, localFile: this.localFile });
        }, () => {
            this.localFile = undefined;
        });
    }
}
CameraComponent.initializeProps = registerProps();
CameraComponent.decorators = [
    { type: Component, args: [{
                selector: 'button[wmCamera]',
                template: "<i [ngClass]=\"iconclass\" [ngStyle]=\"{'font-size': iconsize}\"></i>",
                providers: [
                    provideAsWidgetRef(CameraComponent)
                ]
            }] }
];
/** @nocollapse */
CameraComponent.ctorParameters = () => [
    { type: Camera },
    { type: MediaCapture },
    { type: Injector },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
CameraComponent.propDecorators = {
    openCamera: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9tb2JpbGUvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIndpZGdldHMvY2FtZXJhL2NhbWVyYS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNELE9BQU8sRUFBRSxpQkFBaUIsRUFBaUIsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakgsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDO0FBQ3JDLE1BQU0sYUFBYSxHQUFrQixFQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBQyxDQUFDO0FBRXZGLE1BQU0sQ0FBTixJQUFZLFlBR1g7QUFIRCxXQUFZLFlBQVk7SUFDcEIsK0JBQWUsQ0FBQTtJQUNmLDJCQUFXLENBQUE7QUFDZixDQUFDLEVBSFcsWUFBWSxLQUFaLFlBQVksUUFHdkI7QUFFRCxNQUFNLENBQU4sSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3JCLDhCQUFhLENBQUE7SUFDYiw0QkFBVyxDQUFBO0FBQ2YsQ0FBQyxFQUhXLGFBQWEsS0FBYixhQUFhLFFBR3hCO0FBU0QsTUFBTSxPQUFPLGVBQWdCLFNBQVEsaUJBQWlCO0lBa0JsRCxZQUFvQixNQUFjLEVBQVUsWUFBMEIsRUFBRSxHQUFhLEVBQUUs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LEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2FtZXJhJztcbmltcG9ydCB7IE1lZGlhQ2FwdHVyZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbWVkaWEtY2FwdHVyZSc7XG5cbmltcG9ydCB7IEFQUExZX1NUWUxFU19UWVBFLCBJV2lkZ2V0Q29uZmlnLCBwcm92aWRlQXNXaWRnZXRSZWYsIFN0eWxhYmxlQ29tcG9uZW50LCBzdHlsZXIgfSBmcm9tICdAd20vY29tcG9uZW50cyc7XG5pbXBvcnQgeyBjb252ZXJ0VG9CbG9iLCBoYXNDb3Jkb3ZhIH0gZnJvbSAnQHdtL2NvcmUnO1xuXG5pbXBvcnQgeyByZWdpc3RlclByb3BzIH0gZnJvbSAnLi9jYW1lcmEucHJvcHMnO1xuXG5jb25zdCBERUZBVUxUX0NMUyA9ICdidG4gYXBwLWNhbWVyYSc7XG5jb25zdCBXSURHRVRfQ09ORklHOiBJV2lkZ2V0Q29uZmlnID0ge3dpZGdldFR5cGU6ICd3bS1jYW1lcmEnLCBob3N0Q2xhc3M6IERFRkFVTFRfQ0xTfTtcblxuZXhwb3J0IGVudW0gQ0FQVFVSRV9UWVBFIHtcbiAgICBJTUFHRSA9ICdJTUFHRScsXG4gICAgUE5HID0gJ1BORydcbn1cblxuZXhwb3J0IGVudW0gRU5DT0RJTkdfVFlQRSB7XG4gICAgSlBFRyA9ICdKUEVHJyxcbiAgICBQTkcgPSAnUE5HJ1xufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2J1dHRvblt3bUNhbWVyYV0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jYW1lcmEuY29tcG9uZW50Lmh0bWwnLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBwcm92aWRlQXNXaWRnZXRSZWYoQ2FtZXJhQ29tcG9uZW50KVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgQ2FtZXJhQ29tcG9uZW50IGV4dGVuZHMgU3R5bGFibGVDb21wb25lbnQge1xuICAgIHN0YXRpYyBpbml0aWFsaXplUHJvcHMgPSByZWdpc3RlclByb3BzKCk7XG4gICAgcHVibGljIGFsbG93ZWRpdDogYm9vbGVhbjtcbiAgICBwdWJsaWMgY29ycmVjdG9yaWVudGF0aW9uOiBib29sZWFuO1xuICAgIHB1YmxpYyBjYXB0dXJldHlwZTogc3RyaW5nO1xuICAgIHB1YmxpYyBkYXRhdmFsdWU6IHN0cmluZztcbiAgICBwdWJsaWMgaW1hZ2VxdWFsaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGltYWdlZW5jb2Rpbmd0eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGltYWdldGFyZ2V0d2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgaW1hZ2V0YXJnZXRoZWlnaHQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbG9jYWxGaWxlOiBhbnk7XG4gICAgcHVibGljIGxvY2FsRmlsZVBhdGg6IHN0cmluZztcbiAgICBwdWJsaWMgc2F2ZXRvZ2FsbGVyeTogYm9vbGVhbjtcbiAgICBwdWJsaWMgaWNvbnNpemU6IGFueTtcbiAgICBwdWJsaWMgaWNvbmNsYXNzOiBhbnk7XG5cbiAgICBwcml2YXRlIF9jYW1lcmFPcHRpb25zOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhbWVyYTogQ2FtZXJhLCBwcml2YXRlIG1lZGlhQ2FwdHVyZTogTWVkaWFDYXB0dXJlLCBpbmo6IEluamVjdG9yLCBlbFJlZjogRWxlbWVudFJlZiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihpbmosIFdJREdFVF9DT05GSUcpO1xuICAgICAgICBzdHlsZXIodGhpcy5uYXRpdmVFbGVtZW50LCB0aGlzLCBBUFBMWV9TVFlMRVNfVFlQRS5TQ1JPTExBQkxFX0NPTlRBSU5FUik7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvcGVuQ2FtZXJhKCRldmVudCkge1xuICAgICAgICBpZiAoaGFzQ29yZG92YSgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYXB0dXJldHlwZSA9PT0gQ0FQVFVSRV9UWVBFLklNQUdFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FtZXJhT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eSAgICAgICAgICAgOiB0aGlzLmltYWdlcXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25UeXBlICAgOiAxLCAvLyAwLWRhdGEgdXJsLDEtIGZpbGUgdXJsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVR5cGUgICAgICAgIDogMSwgLy8gb25seSBjYW1lcmFcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dFZGl0ICAgICAgICAgOiB0aGlzLmFsbG93ZWRpdCxcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdE9yaWVudGF0aW9uOiB0aGlzLmNvcnJlY3RvcmllbnRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RpbmdUeXBlICAgICAgOiB0aGlzLmltYWdlZW5jb2Rpbmd0eXBlID09PSBFTkNPRElOR19UWVBFLkpQRUcgPyAwIDogMSxcbiAgICAgICAgICAgICAgICAgICAgc2F2ZVRvUGhvdG9BbGJ1bSAgOiB0aGlzLnNhdmV0b2dhbGxlcnksXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFdpZHRoICAgICAgIDogdGhpcy5pbWFnZXRhcmdldHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRIZWlnaHQgICAgICA6IHRoaXMuaW1hZ2V0YXJnZXRoZWlnaHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGNhbWVyYVxuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmdldFBpY3R1cmUodGhpcy5fY2FtZXJhT3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocGF0aCA9PiB0aGlzLnVwZGF0ZU1vZGVsKCRldmVudCwgcGF0aCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW1lcmFPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBsaW1pdDogMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgdmlkZW8gY2FwdHVyZVxuICAgICAgICAgICAgICAgIHRoaXMubWVkaWFDYXB0dXJlLmNhcHR1cmVWaWRlbyh0aGlzLl9jYW1lcmFPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihtZWRpYUZpbGVzID0+IHRoaXMudXBkYXRlTW9kZWwoJGV2ZW50LCBtZWRpYUZpbGVzWzBdLmZ1bGxQYXRoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmludm9rZUV2ZW50Q2FsbGJhY2soJ3N1Y2Nlc3MnLCB7JGV2ZW50fSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZU1vZGVsKCRldmVudCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5sb2NhbEZpbGVQYXRoID0gdGhpcy5kYXRhdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY29udmVydFRvQmxvYih2YWx1ZSlcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbEZpbGUgPSByZXN1bHQuYmxvYjtcbiAgICAgICAgICAgICAgICB0aGlzLmludm9rZUV2ZW50Q2FsbGJhY2soJ3N1Y2Nlc3MnLCB7JGV2ZW50LCBsb2NhbEZpbGVQYXRoOiB0aGlzLmxvY2FsRmlsZVBhdGgsIGxvY2FsRmlsZTogdGhpcy5sb2NhbEZpbGV9KTtcbiAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsRmlsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==