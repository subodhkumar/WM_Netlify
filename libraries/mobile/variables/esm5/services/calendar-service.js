import * as tslib_1 from "tslib";
import { DeviceVariableService } from '@wm/variables';
var DEFAULT_TIME = new Date().getTime();
/*3 months timestamp value*/
var DELTA_VALUE_DATE = (3 * 30 * 24 * 60 * 60 * 1000);
var DEFAULT_START_DATE = (DEFAULT_TIME - DELTA_VALUE_DATE);
var DEFAULT_END_DATE = (DEFAULT_TIME + DELTA_VALUE_DATE);
var EVENT_META = {
    title: '',
    message: '',
    location: '',
    startDate: new Date(),
    endDate: new Date()
};
/**
 * this file contains all calendar operations under 'calendar' service.
 */
var CalendarService = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarService, _super);
    function CalendarService(calendar) {
        var _this = _super.call(this) || this;
        _this.name = 'calendar';
        _this.operations = [];
        _this.operations.push(new CreateEventOperation(calendar), new DeleteEventOperation(calendar), new GetEventsOperation(calendar));
        return _this;
    }
    return CalendarService;
}(DeviceVariableService));
export { CalendarService };
var CreateEventOperation = /** @class */ (function () {
    function CreateEventOperation(calendar) {
        this.calendar = calendar;
        this.name = 'createEvent';
        this.properties = [
            { target: 'eventTitle', type: 'string', dataBinding: true },
            { target: 'eventNotes', type: 'string', dataBinding: true },
            { target: 'eventLocation', type: 'string', dataBinding: true },
            { target: 'eventStart', type: 'datetime', dataBinding: true },
            { target: 'eventEnd', type: 'datetime', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CALENDAR'];
    }
    CreateEventOperation.prototype.invoke = function (variable, options, eventInfo) {
        return this.calendar.createEvent(eventInfo.get('eventTitle'), eventInfo.get('eventLocation'), eventInfo.get('eventNotes'), new Date(eventInfo.get('eventStart') || 0), new Date(eventInfo.get('eventEnd') || 0));
    };
    return CreateEventOperation;
}());
var DeleteEventOperation = /** @class */ (function () {
    function DeleteEventOperation(calendar) {
        this.calendar = calendar;
        this.name = 'deleteEvent';
        this.properties = [
            { target: 'eventTitle', type: 'string', dataBinding: true },
            { target: 'eventNotes', type: 'string', dataBinding: true },
            { target: 'eventLocation', type: 'string', dataBinding: true },
            { target: 'eventStart', type: 'datetime', dataBinding: true },
            { target: 'eventEnd', type: 'datetime', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CALENDAR'];
    }
    DeleteEventOperation.prototype.invoke = function (variable, options, eventInfo) {
        return this.calendar.deleteEvent(eventInfo.get('eventTitle'), eventInfo.get('eventLocation'), eventInfo.get('eventNotes'), new Date(eventInfo.get('eventStart') || DEFAULT_START_DATE), new Date(eventInfo.get('eventEnd') || DEFAULT_END_DATE));
    };
    return DeleteEventOperation;
}());
var GetEventsOperation = /** @class */ (function () {
    function GetEventsOperation(calendar) {
        this.calendar = calendar;
        this.name = 'getEvents';
        this.model = [EVENT_META];
        this.properties = [
            { target: 'eventTitle', type: 'string', dataBinding: true },
            { target: 'eventNotes', type: 'string', dataBinding: true },
            { target: 'eventLocation', type: 'string', dataBinding: true },
            { target: 'eventStart', type: 'datetime', dataBinding: true },
            { target: 'eventEnd', type: 'datetime', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CALENDAR'];
    }
    GetEventsOperation.prototype.invoke = function (variable, options, eventInfo) {
        return this.calendar.findEvent(eventInfo.get('eventTitle'), eventInfo.get('eventLocation'), eventInfo.get('eventNotes'), new Date(eventInfo.get('eventStart') || DEFAULT_START_DATE), new Date(eventInfo.get('eventEnd') || DEFAULT_END_DATE));
    };
    return GetEventsOperation;
}());
//# sourceMappingURL=data:application/json;base64,