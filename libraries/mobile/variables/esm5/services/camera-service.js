import * as tslib_1 from "tslib";
import { isNumber } from '@wm/core';
import { DeviceVariableService } from '@wm/variables';
var CameraService = /** @class */ (function (_super) {
    tslib_1.__extends(CameraService, _super);
    function CameraService(camera, mediaCapture) {
        var _this = _super.call(this) || this;
        _this.name = 'camera';
        _this.operations = [];
        _this.operations.push(new CaptureImageOperation(camera), new CaptureVideoOperation(mediaCapture));
        return _this;
    }
    return CameraService;
}(DeviceVariableService));
export { CameraService };
var CaptureImageOperation = /** @class */ (function () {
    function CaptureImageOperation(camera) {
        this.camera = camera;
        this.name = 'captureImage';
        this.model = {
            imagePath: 'resources/images/imagelists/default-image.png'
        };
        this.properties = [
            { target: 'allowImageEdit', type: 'boolean', value: false, dataBinding: true },
            { target: 'imageQuality', type: 'number', value: 80, dataBinding: true },
            { target: 'imageEncodingType', type: 'list', options: { '0': 'JPEG', '1': 'PNG' }, value: '0', dataBinding: true },
            { target: 'correctOrientation', type: 'boolean', value: true, dataBinding: true },
            { target: 'imageTargetWidth', type: 'number', dataBinding: true },
            { target: 'imageTargetHeight', type: 'number', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CAMERA', 'CAPTURE'];
    }
    CaptureImageOperation.prototype.invoke = function (variable, options, dataBindings) {
        var imageTargetWidth = dataBindings.get('imageTargetWidth'), imageTargetHeight = dataBindings.get('imageTargetHeight');
        var imageEncodingType = parseInt(dataBindings.get('imageEncodingType'), 10), cameraOptions;
        if (isNaN(imageEncodingType)) {
            imageEncodingType = (dataBindings.get('imageEncodingType') === 'JPEG' ? 0 : 1);
        }
        cameraOptions = {
            quality: dataBindings.get('imageQuality'),
            destinationType: 1,
            sourceType: 1,
            allowEdit: dataBindings.get('allowImageEdit'),
            encodingType: imageEncodingType,
            mediaType: 0,
            correctOrientation: dataBindings.get('correctOrientation'),
            targetWidth: isNumber(imageTargetWidth) ? imageTargetWidth : undefined,
            targetHeight: isNumber(imageTargetHeight) ? imageTargetHeight : undefined,
        };
        return this.camera.getPicture(cameraOptions).then(function (data) {
            return { imagePath: data };
        });
    };
    return CaptureImageOperation;
}());
var CaptureVideoOperation = /** @class */ (function () {
    function CaptureVideoOperation(mediaCapture) {
        this.mediaCapture = mediaCapture;
        this.name = 'captureVideo';
        this.model = {
            videoPath: ''
        };
        this.properties = [];
        this.requiredCordovaPlugins = ['CAMERA', 'CAPTURE'];
    }
    CaptureVideoOperation.prototype.invoke = function (variable, options) {
        return this.mediaCapture.captureVideo({
            limit: 1
        }).then(function (data) {
            return { videoPath: data[0].fullPath };
        });
    };
    return CaptureVideoOperation;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLXNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vbW9iaWxlL3ZhcmlhYmxlcy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2NhbWVyYS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxxQkFBcUIsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFFaEY7SUFBbUMseUNBQXFCO0lBSXBELHVCQUFZLE1BQWMsRUFBRSxZQUEwQjtRQUF0RCxZQUNJLGlCQUFPLFNBR1Y7UUFQZSxVQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ2hCLGdCQUFVLEdBQStCLEVBQUUsQ0FBQztRQUl4RCxLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxFQUNsRCxJQUFJLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7O0lBQ2pELENBQUM7SUFDTCxvQkFBQztBQUFELENBQUMsQUFURCxDQUFtQyxxQkFBcUIsR0FTdkQ7O0FBRUQ7SUFlSSwrQkFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFkbEIsU0FBSSxHQUFHLGNBQWMsQ0FBQztRQUN0QixVQUFLLEdBQUc7WUFDcEIsU0FBUyxFQUFFLCtDQUErQztTQUM3RCxDQUFDO1FBQ2MsZUFBVSxHQUFHO1lBQ3JCLEVBQUMsTUFBTSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFDO1lBQzVFLEVBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBQztZQUN0RSxFQUFDLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFB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QVEsRUFBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FBQyxBQW5CRCxJQW1CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbWVyYSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2FtZXJhJztcbmltcG9ydCB7IE1lZGlhQ2FwdHVyZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbWVkaWEtY2FwdHVyZSc7XG5cbmltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnQHdtL2NvcmUnO1xuaW1wb3J0IHsgRGV2aWNlVmFyaWFibGVTZXJ2aWNlLCBJRGV2aWNlVmFyaWFibGVPcGVyYXRpb24gfSBmcm9tICdAd20vdmFyaWFibGVzJztcblxuZXhwb3J0IGNsYXNzIENhbWVyYVNlcnZpY2UgZXh0ZW5kcyBEZXZpY2VWYXJpYWJsZVNlcnZpY2Uge1xuICAgIHB1YmxpYyByZWFkb25seSBuYW1lID0gJ2NhbWVyYSc7XG4gICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdGlvbnM6IElEZXZpY2VWYXJpYWJsZU9wZXJhdGlvbltdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihjYW1lcmE6IENhbWVyYSwgbWVkaWFDYXB0dXJlOiBNZWRpYUNhcHR1cmUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zLnB1c2gobmV3IENhcHR1cmVJbWFnZU9wZXJhdGlvbihjYW1lcmEpLFxuICAgICAgICAgICAgbmV3IENhcHR1cmVWaWRlb09wZXJhdGlvbihtZWRpYUNhcHR1cmUpKTtcbiAgICB9XG59XG5cbmNsYXNzIENhcHR1cmVJbWFnZU9wZXJhdGlvbiBpbXBsZW1lbnRzIElEZXZpY2VWYXJpYWJsZU9wZXJhdGlvbiB7XG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWUgPSAnY2FwdHVyZUltYWdlJztcbiAgICBwdWJsaWMgcmVhZG9ubHkgbW9kZWwgPSB7XG4gICAgICAgIGltYWdlUGF0aDogJ3Jlc291cmNlcy9pbWFnZXMvaW1hZ2VsaXN0cy9kZWZhdWx0LWltYWdlLnBuZydcbiAgICB9O1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAge3RhcmdldDogJ2FsbG93SW1hZ2VFZGl0JywgdHlwZTogJ2Jvb2xlYW4nLCB2YWx1ZTogZmFsc2UsIGRhdGFCaW5kaW5nOiB0cnVlfSxcbiAgICAgICAgICAgIHt0YXJnZXQ6ICdpbWFnZVF1YWxpdHknLCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDgwLCBkYXRhQmluZGluZzogdHJ1ZX0sXG4gICAgICAgICAgICB7dGFyZ2V0OiAnaW1hZ2VFbmNvZGluZ1R5cGUnLCB0eXBlOiAnbGlzdCcsIG9wdGlvbnM6IHsnMCc6ICdKUEVHJywgJzEnOiAnUE5HJ30sIHZhbHVlOiAnMCcsIGRhdGFCaW5kaW5nOiB0cnVlfSxcbiAgICAgICAgICAgIHt0YXJnZXQ6ICdjb3JyZWN0T3JpZW50YXRpb24nLCB0eXBlOiAnYm9vbGVhbicsIHZhbHVlOiB0cnVlLCBkYXRhQmluZGluZzogdHJ1ZX0sXG4gICAgICAgICAgICB7dGFyZ2V0OiAnaW1hZ2VUYXJnZXRXaWR0aCcsIHR5cGU6ICdudW1iZXInLCBkYXRhQmluZGluZzogdHJ1ZX0sXG4gICAgICAgICAgICB7dGFyZ2V0OiAnaW1hZ2VUYXJnZXRIZWlnaHQnLCB0eXBlOiAnbnVtYmVyJywgZGF0YUJpbmRpbmc6IHRydWV9XG4gICAgICAgIF07XG4gICAgcHVibGljIHJlYWRvbmx5IHJlcXVpcmVkQ29yZG92YVBsdWdpbnMgPSBbJ0NBTUVSQScsICdDQVBUVVJFJ107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhbWVyYTogQ2FtZXJhKSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgaW52b2tlKHZhcmlhYmxlOiBhbnksIG9wdGlvbnM6IGFueSwgZGF0YUJpbmRpbmdzOiBNYXA8c3RyaW5nLCBhbnk+KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgaW1hZ2VUYXJnZXRXaWR0aCA9IGRhdGFCaW5kaW5ncy5nZXQoJ2ltYWdlVGFyZ2V0V2lkdGgnKSxcbiAgICAgICAgICAgIGltYWdlVGFyZ2V0SGVpZ2h0ID0gZGF0YUJpbmRpbmdzLmdldCgnaW1hZ2VUYXJnZXRIZWlnaHQnKTtcbiAgICAgICAgbGV0IGltYWdlRW5jb2RpbmdUeXBlID0gcGFyc2VJbnQoZGF0YUJpbmRpbmdzLmdldCgnaW1hZ2VFbmNvZGluZ1R5cGUnKSwgMTApLFxuICAgICAgICAgICAgY2FtZXJhT3B0aW9ucztcbiAgICAgICAgaWYgKGlzTmFOKGltYWdlRW5jb2RpbmdUeXBlKSkge1xuICAgICAgICAgICAgaW1hZ2VFbmNvZGluZ1R5cGUgPSAoZGF0YUJpbmRpbmdzLmdldCgnaW1hZ2VFbmNvZGluZ1R5cGUnKSA9PT0gJ0pQRUcnID8gMCA6IDEpO1xuICAgICAgICB9XG4gICAgICAgIGNhbWVyYU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcXVhbGl0eSAgICAgICAgICAgOiBkYXRhQmluZGluZ3MuZ2V0KCdpbWFnZVF1YWxpdHknKSxcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblR5cGUgICA6IDEsIC8vIG9ubHkgZmlsZSB1cmxcbiAgICAgICAgICAgICAgICBzb3VyY2VUeXBlICAgICAgICA6IDEsIC8vIGNhbWVyYVxuICAgICAgICAgICAgICAgIGFsbG93RWRpdCAgICAgICAgIDogZGF0YUJpbmRpbmdzLmdldCgnYWxsb3dJbWFnZUVkaXQnKSxcbiAgICAgICAgICAgICAgICBlbmNvZGluZ1R5cGUgICAgICA6IGltYWdlRW5jb2RpbmdUeXBlLFxuICAgICAgICAgICAgICAgIG1lZGlhVHlwZSAgICAgICAgIDogMCwgLy8gYWx3YXlzIHBpY3R1cmVcbiAgICAgICAgICAgICAgICBjb3JyZWN0T3JpZW50YXRpb246IGRhdGFCaW5kaW5ncy5nZXQoJ2NvcnJlY3RPcmllbnRhdGlvbicpLFxuICAgICAgICAgICAgICAgIHRhcmdldFdpZHRoICAgICAgIDogaXNOdW1iZXIoaW1hZ2VUYXJnZXRXaWR0aCkgPyAgaW1hZ2VUYXJnZXRXaWR0aCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRIZWlnaHQgICAgICA6IGlzTnVtYmVyKGltYWdlVGFyZ2V0SGVpZ2h0KSA/IGltYWdlVGFyZ2V0SGVpZ2h0IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FtZXJhLmdldFBpY3R1cmUoY2FtZXJhT3B0aW9ucykudGhlbiggZGF0YSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge2ltYWdlUGF0aDogZGF0YX07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgQ2FwdHVyZVZpZGVvT3BlcmF0aW9uIGltcGxlbWVudHMgSURldmljZVZhcmlhYmxlT3BlcmF0aW9uIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdjYXB0dXJlVmlkZW8nO1xuICAgIHB1YmxpYyByZWFkb25seSBtb2RlbCA9IHtcbiAgICAgICAgdmlkZW9QYXRoOiAnJ1xuICAgIH07XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BlcnRpZXMgPSBbXTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVxdWlyZWRDb3Jkb3ZhUGx1Z2lucyA9IFsnQ0FNRVJBJywgJ0NBUFRVUkUnXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVkaWFDYXB0dXJlOiBNZWRpYUNhcHR1cmUpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBpbnZva2UodmFyaWFibGU6IGFueSwgb3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFDYXB0dXJlLmNhcHR1cmVWaWRlbyh7XG4gICAgICAgICAgICBsaW1pdCA6IDFcbiAgICAgICAgfSkudGhlbiggZGF0YSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge3ZpZGVvUGF0aDogZGF0YVswXS5mdWxsUGF0aH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==