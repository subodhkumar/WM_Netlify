import { NgModule } from '@angular/core';
import { AppVersion } from '@ionic-native/app-version';
import { BarcodeScanner } from '@ionic-native/barcode-scanner';
import { Calendar } from '@ionic-native/calendar';
import { Camera } from '@ionic-native/camera';
import { Device } from '@ionic-native/device';
import { Contacts } from '@ionic-native/contacts';
import { MediaCapture } from '@ionic-native/media-capture';
import { Geolocation } from '@ionic-native/geolocation';
import { Vibration } from '@ionic-native/vibration';
import { App } from '@wm/core';
import { DeviceFileOpenerService, DeviceFileUploadService, NetworkService } from '@wm/mobile/core';
import { ChangeLogService, LocalDBManagementService, LocalDBDataPullService, OfflineModule } from '@wm/mobile/offline';
import { SecurityService } from '@wm/security';
import { VARIABLE_CONSTANTS, VariableManagerFactory } from '@wm/variables';
import { CalendarService } from './services/calendar-service';
import { CameraService } from './services/camera-service';
import { FileService } from './services/file-service';
import { DatasyncService } from './services/datasync-service';
import { DeviceService } from './services/device-service';
import { ContactsService } from './services/contacts-service';
import { ScanService } from './services/scan-service';
import { FileSelectorService, ProcessManagementService } from '@wm/mobile/components';
export class VariablesModule {
    constructor(app, appVersion, barcodeScanner, changeLogService, calendar, contacts, camera, fileOpener, fileSelectorService, fileUploader, device, geoLocation, localDBDataPullService, localDBManagementService, mediaCapture, processManagementService, securityService, networkService, vibrateService) {
        VariablesModule.initialize(app, appVersion, barcodeScanner, changeLogService, calendar, contacts, camera, fileOpener, fileSelectorService, fileUploader, device, geoLocation, localDBDataPullService, localDBManagementService, mediaCapture, processManagementService, securityService, networkService, vibrateService);
    }
    // Device variable services have to be added only once in the app life-cycle.
    static initialize(app, appVersion, barcodeScanner, changeLogService, calendar, contacts, camera, fileOpener, fileSelectorService, fileUploader, device, geoLocation, localDBDataPullService, localDBManagementService, mediaCapture, processManagementService, securityService, networkService, vibrateService) {
        if (this.initialized) {
            return;
        }
        this.initialized = true;
        const deviceVariableManager = VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.DEVICE);
        deviceVariableManager.registerService(new CameraService(camera, mediaCapture));
        deviceVariableManager.registerService(new CalendarService(calendar));
        deviceVariableManager.registerService(new FileService(fileOpener, fileUploader));
        deviceVariableManager.registerService(new ContactsService(contacts));
        deviceVariableManager.registerService(new DatasyncService(app, changeLogService, fileSelectorService, localDBManagementService, localDBDataPullService, processManagementService, securityService, networkService));
        deviceVariableManager.registerService(new DeviceService(app, appVersion, device, geoLocation, networkService, vibrateService));
        deviceVariableManager.registerService(new ScanService(barcodeScanner));
    }
}
VariablesModule.initialized = false;
VariablesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    OfflineModule
                ],
                declarations: [],
                providers: [
                // add providers to mobile-runtime module.
                ]
            },] }
];
/** @nocollapse */
VariablesModule.ctorParameters = () => [
    { type: App },
    { type: AppVersion },
    { type: BarcodeScanner },
    { type: ChangeLogService },
    { type: Calendar },
    { type: Contacts },
    { type: Camera },
    { type: DeviceFileOpenerService },
    { type: FileSelectorService },
    { type: DeviceFileUploadService },
    { type: Device },
    { type: Geolocation },
    { type: LocalDBDataPullService },
    { type: LocalDBManagementService },
    { type: MediaCapture },
    { type: ProcessManagementService },
    { type: SecurityService },
    { type: NetworkService },
    { type: Vibration }
];
//# sourceMappingURL=data:application/json;base64,