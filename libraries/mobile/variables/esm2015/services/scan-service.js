import { DeviceVariableService } from '@wm/variables';
const barcodeFormatOptions = {
    'ALL': 'ALL',
    'CODABAR': 'CODABAR (not supported in iOS)',
    'CODE_39': 'CODE_39',
    'CODE_93': 'CODE_93 (not supported in iOS)',
    'CODE_128': 'CODE_128',
    'DATA_MATRIX': 'DATA_MATRIX',
    'EAN_8': 'EAN_8',
    'EAN_13': 'EAN_13',
    'ITF': 'ITF',
    'PDF_417': 'PDF_417 (not supported in iOS)',
    'QR_CODE': 'QR_CODE',
    'RSS14': 'RSS14 (not supported in iOS)',
    'RSS_EXPANDED': 'RSS_EXPANDED (not supported in iOS)',
    'UPC_E': 'UPC_E',
    'UPC_A': 'UPC_A'
};
export class ScanService extends DeviceVariableService {
    constructor(barcodeScanner) {
        super();
        this.name = 'scan';
        this.operations = [];
        this.operations.push(new ScanOperation(barcodeScanner));
    }
}
class ScanOperation {
    constructor(barcodeScanner) {
        this.barcodeScanner = barcodeScanner;
        this.name = 'scanBarCode';
        this.model = {
            text: 'BAR CODE',
            format: 'TEXT',
            cancelled: false
        };
        this.properties = [
            {
                target: 'barcodeFormat',
                type: 'list',
                options: barcodeFormatOptions,
                value: 'ALL',
                group: 'properties',
                subGroup: 'behavior',
                hide: false
            }
        ];
        this.requiredCordovaPlugins = ['BARCODE_SCANNER'];
    }
    invoke(variable, options) {
        let scanOptions;
        if (variable.barcodeFormat && variable.barcodeFormat !== 'ALL') {
            scanOptions = { formats: variable.barcodeFormat };
        }
        return this.barcodeScanner.scan(scanOptions);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL21vYmlsZS92YXJpYWJsZXMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9zY2FuLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHFCQUFxQixFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUVoRixNQUFNLG9CQUFvQixHQUFHO0lBQ3pCLEtBQUssRUFBRyxLQUFLO0lBQ2IsU0FBUyxFQUFHLGdDQUFnQztJQUM1QyxTQUFTLEVBQUcsU0FBUztJQUNyQixTQUFTLEVBQUcsZ0NBQWdDO0lBQzVDLFVBQVUsRUFBRyxVQUFVO0lBQ3ZCLGFBQWEsRUFBRyxhQUFhO0lBQzdCLE9BQU8sRUFBRyxPQUFPO0lBQ2pCLFFBQVEsRUFBRyxRQUFRO0lBQ25CLEtBQUssRUFBRyxLQUFLO0lBQ2IsU0FBUyxFQUFHLGdDQUFnQztJQUM1QyxTQUFTLEVBQUcsU0FBUztJQUNyQixPQUFPLEVBQUcsOEJBQThCO0lBQ3hDLGNBQWMsRUFBRyxxQ0FBcUM7SUFDdEQsT0FBTyxFQUFHLE9BQU87SUFDakIsT0FBTyxFQUFHLE9BQU87Q0FDcEIsQ0FBQztBQUVGLE1BQU0sT0FBTyxXQUFZLFNBQVEscUJBQXFCO0lBSWxELFlBQVksY0FBOEI7UUFDdEMsS0FBSyxFQUFFLENBQUM7UUFKWixTQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ2QsZUFBVSxHQUErQixFQUFFLENBQUM7UUFJeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0o7QUFFRCxNQUFNLGFBQWE7SUFvQmYsWUFBb0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBbkJsQyxTQUFJLEdBQUcsYUFBYSxDQUFDO1FBQ3JCLFVBQUssR0FBRztZQUNwQixJQUFJLEVBQUcsVUFBVTtZQUNqQixNQUFNLEVBQUcsTUFBTTtZQUNmLFNBQVMsRUFBRyxLQUFLO1NBQ3BCLENBQUM7UUFDYyxlQUFVLEdBQUc7WUFDekI7Z0JBQ0ksTUFBTSxFQUFNLGVBQWU7Z0JBQzNCLElBQUksRUFBUSxNQUFNO2dCQUNsQixPQUFPLEVBQUssb0JBQW9CO2dCQUNoQyxLQUFLLEVBQU8sS0FBSztnQkFDakIsS0FBSyxFQUFPLFlBQVk7Z0JBQ3hCLFFBQVEsRUFBSSxVQUFVO2dCQUN0QixJQUFJLEVBQVEsS0FBSzthQUNwQjtTQUNKLENBQUM7UUFDYywyQkFBc0IsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFJN0QsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFhLEVBQUUsT0FBWTtRQUNyQyxJQUFJLFdBQVcsQ0FBQztRQUNoQixJQUFJLFFBQVEsQ0FBQyxhQUFhLElBQUksUUFBUSxDQUFDLGFBQWEsS0FBSyxLQUFLLEVBQUU7WUFDNUQsV0FBVyxHQUFHLEVBQUMsT0FBTyxFQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUMsQ0FBQztTQUNwRDtRQUNELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFyY29kZVNjYW5uZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JhcmNvZGUtc2Nhbm5lcic7XG5cbmltcG9ydCB7IERldmljZVZhcmlhYmxlU2VydmljZSwgSURldmljZVZhcmlhYmxlT3BlcmF0aW9uIH0gZnJvbSAnQHdtL3ZhcmlhYmxlcyc7XG5cbmNvbnN0IGJhcmNvZGVGb3JtYXRPcHRpb25zID0ge1xuICAgICdBTEwnIDogJ0FMTCcsXG4gICAgJ0NPREFCQVInIDogJ0NPREFCQVIgKG5vdCBzdXBwb3J0ZWQgaW4gaU9TKScsXG4gICAgJ0NPREVfMzknIDogJ0NPREVfMzknLFxuICAgICdDT0RFXzkzJyA6ICdDT0RFXzkzIChub3Qgc3VwcG9ydGVkIGluIGlPUyknLFxuICAgICdDT0RFXzEyOCcgOiAnQ09ERV8xMjgnLFxuICAgICdEQVRBX01BVFJJWCcgOiAnREFUQV9NQVRSSVgnLFxuICAgICdFQU5fOCcgOiAnRUFOXzgnLFxuICAgICdFQU5fMTMnIDogJ0VBTl8xMycsXG4gICAgJ0lURicgOiAnSVRGJyxcbiAgICAnUERGXzQxNycgOiAnUERGXzQxNyAobm90IHN1cHBvcnRlZCBpbiBpT1MpJyxcbiAgICAnUVJfQ09ERScgOiAnUVJfQ09ERScsXG4gICAgJ1JTUzE0JyA6ICdSU1MxNCAobm90IHN1cHBvcnRlZCBpbiBpT1MpJyxcbiAgICAnUlNTX0VYUEFOREVEJyA6ICdSU1NfRVhQQU5ERUQgKG5vdCBzdXBwb3J0ZWQgaW4gaU9TKScsXG4gICAgJ1VQQ19FJyA6ICdVUENfRScsXG4gICAgJ1VQQ19BJyA6ICdVUENfQSdcbn07XG5cbmV4cG9ydCBjbGFzcyBTY2FuU2VydmljZSBleHRlbmRzIERldmljZVZhcmlhYmxlU2VydmljZSB7XG4gICAgbmFtZSA9ICdzY2FuJztcbiAgICBvcGVyYXRpb25zOiBJRGV2aWNlVmFyaWFibGVPcGVyYXRpb25bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoYmFyY29kZVNjYW5uZXI6IEJhcmNvZGVTY2FubmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BlcmF0aW9ucy5wdXNoKG5ldyBTY2FuT3BlcmF0aW9uKGJhcmNvZGVTY2FubmVyKSk7XG4gICAgfVxufVxuXG5jbGFzcyBTY2FuT3BlcmF0aW9uIGltcGxlbWVudHMgSURldmljZVZhcmlhYmxlT3BlcmF0aW9uIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdzY2FuQmFyQ29kZSc7XG4gICAgcHVibGljIHJlYWRvbmx5IG1vZGVsID0ge1xuICAgICAgICB0ZXh0IDogJ0JBUiBDT0RFJyxcbiAgICAgICAgZm9ybWF0IDogJ1RFWFQnLFxuICAgICAgICBjYW5jZWxsZWQgOiBmYWxzZVxuICAgIH07XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BlcnRpZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRhcmdldCAgICA6ICdiYXJjb2RlRm9ybWF0JyxcbiAgICAgICAgICAgIHR5cGUgICAgICA6ICdsaXN0JyxcbiAgICAgICAgICAgIG9wdGlvbnMgICA6IGJhcmNvZGVGb3JtYXRPcHRpb25zLFxuICAgICAgICAgICAgdmFsdWUgICAgIDogJ0FMTCcsXG4gICAgICAgICAgICBncm91cCAgICAgOiAncHJvcGVydGllcycsXG4gICAgICAgICAgICBzdWJHcm91cCAgOiAnYmVoYXZpb3InLFxuICAgICAgICAgICAgaGlkZSAgICAgIDogZmFsc2VcbiAgICAgICAgfVxuICAgIF07XG4gICAgcHVibGljIHJlYWRvbmx5IHJlcXVpcmVkQ29yZG92YVBsdWdpbnMgPSBbJ0JBUkNPREVfU0NBTk5FUiddO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXJjb2RlU2Nhbm5lcjogQmFyY29kZVNjYW5uZXIpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBpbnZva2UodmFyaWFibGU6IGFueSwgb3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgbGV0IHNjYW5PcHRpb25zO1xuICAgICAgICBpZiAodmFyaWFibGUuYmFyY29kZUZvcm1hdCAmJiB2YXJpYWJsZS5iYXJjb2RlRm9ybWF0ICE9PSAnQUxMJykge1xuICAgICAgICAgICAgc2Nhbk9wdGlvbnMgPSB7Zm9ybWF0cyA6IHZhcmlhYmxlLmJhcmNvZGVGb3JtYXR9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJhcmNvZGVTY2FubmVyLnNjYW4oc2Nhbk9wdGlvbnMpO1xuICAgIH1cbn1cbiJdfQ==