import { $appDigest } from '@wm/core';
import { DeviceVariableService, initiateCallback } from '@wm/variables';
/**
 * this file contains all device operations under 'device' service.
 */
export class DeviceService extends DeviceVariableService {
    constructor(app, appVersion, device, geoLocation, networkService, vibrateService) {
        super();
        this.name = 'device';
        this.operations = [];
        this.operations.push(new AppInfoOperation(device, appVersion), new CurrentGeoPositionOperation(geoLocation), new DeviceInfoOperation(device), new GetNetworkInfoOperation(app, networkService), new GoOfflineOperation(networkService), new GoOnlineOperation(networkService), new VibrateOperation(vibrateService));
        app.subscribe('onNetworkStateChange', data => {
            app.networkStatus = data;
            $appDigest();
        });
        app.networkStatus = {
            isConnecting: false,
            isConnected: true,
            isNetworkAvailable: true,
            isServiceAvailable: true
        };
    }
}
/**
 * This class handles 'getAppInfo' device operation.
 */
class AppInfoOperation {
    constructor(device, appVersion) {
        this.device = device;
        this.appVersion = appVersion;
        this.name = 'getAppInfo';
        this.model = {
            appversion: 'X.X.X',
            cordovaversion: 'X.X.X'
        };
        this.properties = [
            { target: 'startUpdate', type: 'boolean', value: true, hide: true }
        ];
    }
    invoke(variable, options) {
        const cordovaVersion = this.device.cordova;
        return this.appVersion.getVersionNumber().then(appVersion => {
            return {
                appversion: appVersion,
                cordovaversion: cordovaVersion
            };
        });
    }
}
/**
 * This class handles 'getCurrentGeoPosition' device operation.
 */
class CurrentGeoPositionOperation {
    constructor(geoLocation) {
        this.geoLocation = geoLocation;
        this.name = 'getCurrentGeoPosition';
        this.model = {
            coords: {
                latitude: 0,
                longitude: 0,
                altitude: 0,
                accuracy: 0,
                altitudeAccuracy: 0,
                heading: 0,
                speed: 0
            },
            timestamp: 0
        };
        this.properties = [
            { target: 'startUpdate', type: 'boolean', value: true, hide: true },
            { target: 'autoUpdate', type: 'boolean', value: true, hide: true },
            { target: 'geolocationHighAccuracy', type: 'boolean', value: true, dataBinding: true },
            { target: 'geolocationMaximumAge', type: 'number', value: 3, dataBinding: true },
            { target: 'geolocationTimeout', type: 'number', value: 5, dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['GEOLOCATION'];
        this.waitingQueue = [];
        this.options = {
            maximumAge: 3000,
            timeout: (2 * 60) * 1000,
            enableHighAccuracy: true
        };
    }
    watchPosition() {
        if (this.watchId) {
            navigator.geolocation.clearWatch(this.watchId);
            this.watchId = null;
        }
        const options = window['WM_GEO_LOCATION_OPTIONS'] || this.options;
        this.watchId = navigator.geolocation.watchPosition(position => {
            this.lastKnownPosition = {
                coords: {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    altitude: position.coords.altitude,
                    accuracy: position.coords.accuracy,
                    altitudeAccuracy: position.coords.altitudeAccuracy,
                    heading: position.coords.heading,
                    speed: position.coords.speed
                },
                timestamp: position.timestamp
            };
            if (this.waitingQueue.length > 0) {
                this.waitingQueue.forEach(fn => fn(this.lastKnownPosition));
                this.waitingQueue.length = 0;
            }
            $(document).off('touchend.usergesture');
        }, () => {
            this.watchId = null;
        }, options);
    }
    invoke(variable, options, dataBindings) {
        if (!this.watchId || !this.lastKnownPosition) {
            this.watchPosition();
            $(document).on('touchend.usergesture', () => this.watchPosition());
        }
        const geoLocationOptions = {
            maximumAge: dataBindings.get('geolocationMaximumAge') * 1000,
            timeout: dataBindings.get('geolocationTimeout') * 1000,
            enableHighAccuracy: dataBindings.get('geolocationHighAccuracy')
        };
        if (this.lastKnownPosition) {
            return Promise.resolve(this.lastKnownPosition);
        }
        return new Promise(resolve => {
            const c = position => {
                resolve(position);
            };
            setTimeout(() => {
                const index = this.waitingQueue.indexOf(c);
                if (index > -1) {
                    this.waitingQueue.splice(index, 1);
                    resolve(this.model);
                }
            }, this.options.timeout);
            this.waitingQueue.push(c);
        });
    }
}
/**
 * This class handles 'getDeviceInfo' device operation.
 */
class DeviceInfoOperation {
    constructor(device) {
        this.device = device;
        this.name = 'getDeviceInfo';
        this.model = {
            deviceModel: 'DEVICEMODEL',
            os: 'DEVICEOS',
            osVersion: 'X.X.X',
            deviceUUID: 'DEVICEUUID'
        };
        this.properties = [
            { target: 'startUpdate', type: 'boolean', value: true, hide: true }
        ];
    }
    invoke(variable, options) {
        const response = {
            'deviceModel': this.device.model,
            'os': this.device.platform,
            'osVersion': this.device.version,
            'deviceUUID': this.device.uuid
        };
        return Promise.resolve(response);
    }
}
class GetNetworkInfoOperation {
    constructor(app, networkService) {
        this.app = app;
        this.networkService = networkService;
        this.name = 'getNetworkInfo';
        this.model = {
            connectionType: 'NONE',
            isConnecting: false,
            isNetworkAvailable: true,
            isOnline: true,
            isOffline: false
        };
        this.properties = [
            { target: 'autoUpdate', type: 'boolean', value: true, hide: true },
            { target: 'startUpdate', type: 'boolean', value: true, hide: true },
            { target: 'networkStatus', type: 'object', value: 'bind:App.networkStatus', dataBinding: true, hide: true },
            { target: 'onOnline', hide: false },
            { target: 'onOffline', hide: false }
        ];
        this.requiredCordovaPlugins = ['NETWORK'];
    }
    invoke(variable, options, dataBindings) {
        const data = {
            connectionType: navigator.connection.type,
            isConnecting: this.app.networkStatus.isConnecting,
            isNetworkAvailable: this.app.networkStatus.isNetworkAvailable,
            isOnline: this.app.networkStatus.isConnected,
            isOffline: !this.app.networkStatus.isConnected
        };
        if (this.networkService.isConnected()) {
            initiateCallback('onOnline', variable, data);
        }
        else {
            initiateCallback('onOffline', variable, data);
        }
        return Promise.resolve(data);
    }
}
class GoOfflineOperation {
    constructor(networkService) {
        this.networkService = networkService;
        this.name = 'goOffline';
        this.model = {};
        this.properties = [];
        this.requiredCordovaPlugins = ['NETWORK'];
    }
    invoke(variable, options, dataBindings) {
        return this.networkService.disconnect();
    }
}
class GoOnlineOperation {
    constructor(networkService) {
        this.networkService = networkService;
        this.name = 'goOnline';
        this.model = {};
        this.properties = [];
        this.requiredCordovaPlugins = ['NETWORK'];
    }
    invoke(variable, options, dataBindings) {
        return this.networkService.connect();
    }
}
/**
 * This class handles 'vibrate' device operation.
 */
class VibrateOperation {
    constructor(vibrationService) {
        this.vibrationService = vibrationService;
        this.name = 'vibrate';
        this.model = {
            appversion: 'X.X.X',
            cordovaversion: 'X.X.X'
        };
        this.properties = [
            { target: 'vibrationtime', type: 'number', value: 2, dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['VIBRATE'];
    }
    invoke(variable, options, dataBindings) {
        this.vibrationService.vibrate(dataBindings.get('vibrationtime') * 1000);
        return Promise.resolve();
    }
}
//# sourceMappingURL=data:application/json;base64,