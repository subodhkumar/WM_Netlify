import { DeviceVariableService } from '@wm/variables';
const DEFAULT_TIME = new Date().getTime();
/*3 months timestamp value*/
const DELTA_VALUE_DATE = (3 * 30 * 24 * 60 * 60 * 1000);
const DEFAULT_START_DATE = (DEFAULT_TIME - DELTA_VALUE_DATE);
const DEFAULT_END_DATE = (DEFAULT_TIME + DELTA_VALUE_DATE);
const EVENT_META = {
    title: '',
    message: '',
    location: '',
    startDate: new Date(),
    endDate: new Date()
};
/**
 * this file contains all calendar operations under 'calendar' service.
 */
export class CalendarService extends DeviceVariableService {
    constructor(calendar) {
        super();
        this.name = 'calendar';
        this.operations = [];
        this.operations.push(new CreateEventOperation(calendar), new DeleteEventOperation(calendar), new GetEventsOperation(calendar));
    }
}
class CreateEventOperation {
    constructor(calendar) {
        this.calendar = calendar;
        this.name = 'createEvent';
        this.properties = [
            { target: 'eventTitle', type: 'string', dataBinding: true },
            { target: 'eventNotes', type: 'string', dataBinding: true },
            { target: 'eventLocation', type: 'string', dataBinding: true },
            { target: 'eventStart', type: 'datetime', dataBinding: true },
            { target: 'eventEnd', type: 'datetime', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CALENDAR'];
    }
    invoke(variable, options, eventInfo) {
        return this.calendar.createEvent(eventInfo.get('eventTitle'), eventInfo.get('eventLocation'), eventInfo.get('eventNotes'), new Date(eventInfo.get('eventStart') || 0), new Date(eventInfo.get('eventEnd') || 0));
    }
}
class DeleteEventOperation {
    constructor(calendar) {
        this.calendar = calendar;
        this.name = 'deleteEvent';
        this.properties = [
            { target: 'eventTitle', type: 'string', dataBinding: true },
            { target: 'eventNotes', type: 'string', dataBinding: true },
            { target: 'eventLocation', type: 'string', dataBinding: true },
            { target: 'eventStart', type: 'datetime', dataBinding: true },
            { target: 'eventEnd', type: 'datetime', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CALENDAR'];
    }
    invoke(variable, options, eventInfo) {
        return this.calendar.deleteEvent(eventInfo.get('eventTitle'), eventInfo.get('eventLocation'), eventInfo.get('eventNotes'), new Date(eventInfo.get('eventStart') || DEFAULT_START_DATE), new Date(eventInfo.get('eventEnd') || DEFAULT_END_DATE));
    }
}
class GetEventsOperation {
    constructor(calendar) {
        this.calendar = calendar;
        this.name = 'getEvents';
        this.model = [EVENT_META];
        this.properties = [
            { target: 'eventTitle', type: 'string', dataBinding: true },
            { target: 'eventNotes', type: 'string', dataBinding: true },
            { target: 'eventLocation', type: 'string', dataBinding: true },
            { target: 'eventStart', type: 'datetime', dataBinding: true },
            { target: 'eventEnd', type: 'datetime', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CALENDAR'];
    }
    invoke(variable, options, eventInfo) {
        return this.calendar.findEvent(eventInfo.get('eventTitle'), eventInfo.get('eventLocation'), eventInfo.get('eventNotes'), new Date(eventInfo.get('eventStart') || DEFAULT_START_DATE), new Date(eventInfo.get('eventEnd') || DEFAULT_END_DATE));
    }
}
//# sourceMappingURL=data:application/json;base64,