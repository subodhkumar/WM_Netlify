import { DeviceVariableService } from '@wm/variables';
export class ContactsService extends DeviceVariableService {
    constructor(contacts) {
        super();
        this.name = 'contacts';
        this.operations = [];
        this.operations.push(new GetContactsOperation(contacts));
    }
}
class GetContactsOperation {
    constructor(contacts) {
        this.contacts = contacts;
        this.name = 'getContacts';
        this.model = {
            id: '',
            displayName: '',
            phoneNumbers: [{ value: '' }]
        };
        this.properties = [
            { target: 'startUpdate', type: 'boolean' },
            { target: 'autoUpdate', type: 'boolean' },
            { target: 'contactFilter', type: 'string', value: '', dataBinding: true }
        ];
        this.requiredCordovaPlugins = ['CONTACTS'];
        this.waitingCalls = [];
    }
    extractDisplayName(c) {
        const name = c.displayName;
        // In IOS, displayName is undefined, so using the formatted name.
        if (!name || name === '') {
            if (c.name.formatted) {
                return c.name.formatted;
            }
        }
        return name;
    }
    processNextCall() {
        if (this.waitingCalls.length > 0) {
            this.waitingCalls[0]();
        }
    }
    findContacts(requiredFields, findOptions) {
        return new Promise((resolve, reject) => {
            // Contacts plugin is not processing two simultaneous calls. It is anwsering to only call.
            this.waitingCalls.push(() => {
                this.contacts.find(requiredFields, findOptions).then(data => {
                    if (data != null) {
                        const contacts = data.filter(c => {
                            c.displayName = this.extractDisplayName(c);
                            return c.phoneNumbers && c.phoneNumbers.length > 0;
                        });
                        resolve(contacts);
                    }
                }, reject).then(() => {
                    this.waitingCalls.shift();
                    this.processNextCall();
                });
            });
            if (this.waitingCalls.length === 1) {
                this.processNextCall();
            }
        });
    }
    invoke(variable, options, dataBindings) {
        const requiredFields = ['displayName', 'name'];
        const findOptions = {
            filter: dataBindings.get('contactFilter'),
            multiple: true
        };
        return this.findContacts(requiredFields, findOptions);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdHMtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9tb2JpbGUvdmFyaWFibGVzLyIsInNvdXJjZXMiOlsic2VydmljZXMvY29udGFjdHMtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUscUJBQXFCLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRWhGLE1BQU0sT0FBTyxlQUFnQixTQUFRLHFCQUFxQjtJQUl0RCxZQUFZLFFBQWtCO1FBQzFCLEtBQUssRUFBRSxDQUFDO1FBSkksU0FBSSxHQUFHLFVBQVUsQ0FBQztRQUNsQixlQUFVLEdBQStCLEVBQUUsQ0FBQztRQUl4RCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNKO0FBRUQsTUFBTSxvQkFBb0I7SUFnQnRCLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFmdEIsU0FBSSxHQUFHLGFBQWEsQ0FBQztRQUNyQixVQUFLLEdBQUc7WUFDcEIsRUFBRSxFQUFHLEVBQUU7WUFDUCxXQUFXLEVBQUcsRUFBRTtZQUNoQixZQUFZLEVBQUcsQ0FBQyxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUMsQ0FBQztTQUMvQixDQUFDO1FBQ2MsZUFBVSxHQUFHO1lBQ3pCLEVBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDO1lBQ3hDLEVBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDO1lBQ3ZDLEVBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBQztTQUMxRSxDQUFDO1FBQ2MsMkJBQXNCLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvQyxpQkFBWSxHQUFtQixFQUFFLENBQUM7SUFJekMsQ0FBQztJQUVPLGtCQUFrQixDQUFDLENBQVU7UUFDakMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUMzQixpRUFBaUU7UUFDakUsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDM0I7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxlQUFlO1FBQ25CLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyxZQUFZLENBQUMsY0FBYyxFQUFFLFdBQVc7UUFDNUMsT0FBTyxJQUFJLE9BQU8sQ0FBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4QywwRkFBMEY7WUFDMUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN4RCxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7d0JBQ2QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTs0QkFDN0IsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQzNDLE9BQU8sQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7d0JBQ3ZELENBQUMsQ0FBQyxDQUFDO3dCQUNILE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDckI7Z0JBQ0wsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQzFCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7YUFDMUI7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBYSxFQUFFLE9BQVksRUFBRSxZQUE4QjtRQUNyRSxNQUFNLGNBQWMsR0FBdUIsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkUsTUFBTSxXQUFXLEdBQUc7WUFDaEIsTUFBTSxFQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO1lBQzFDLFFBQVEsRUFBRyxJQUFJO1NBQ2xCLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRhY3QsIENvbnRhY3RGaWVsZFR5cGUsIENvbnRhY3RzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb250YWN0cyc7XG5cbmltcG9ydCB7IERldmljZVZhcmlhYmxlU2VydmljZSwgSURldmljZVZhcmlhYmxlT3BlcmF0aW9uIH0gZnJvbSAnQHdtL3ZhcmlhYmxlcyc7XG5cbmV4cG9ydCBjbGFzcyBDb250YWN0c1NlcnZpY2UgZXh0ZW5kcyBEZXZpY2VWYXJpYWJsZVNlcnZpY2Uge1xuICAgIHB1YmxpYyByZWFkb25seSBuYW1lID0gJ2NvbnRhY3RzJztcbiAgICBwdWJsaWMgcmVhZG9ubHkgb3BlcmF0aW9uczogSURldmljZVZhcmlhYmxlT3BlcmF0aW9uW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhY3RzOiBDb250YWN0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnMucHVzaChuZXcgR2V0Q29udGFjdHNPcGVyYXRpb24oY29udGFjdHMpKTtcbiAgICB9XG59XG5cbmNsYXNzIEdldENvbnRhY3RzT3BlcmF0aW9uIGltcGxlbWVudHMgSURldmljZVZhcmlhYmxlT3BlcmF0aW9uIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdnZXRDb250YWN0cyc7XG4gICAgcHVibGljIHJlYWRvbmx5IG1vZGVsID0ge1xuICAgICAgICBpZCA6ICcnLFxuICAgICAgICBkaXNwbGF5TmFtZSA6ICcnLFxuICAgICAgICBwaG9uZU51bWJlcnMgOiBbe3ZhbHVlOiAnJ31dXG4gICAgfTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcGVydGllcyA9IFtcbiAgICAgICAge3RhcmdldDogJ3N0YXJ0VXBkYXRlJywgdHlwZTogJ2Jvb2xlYW4nfSxcbiAgICAgICAge3RhcmdldDogJ2F1dG9VcGRhdGUnLCB0eXBlOiAnYm9vbGVhbid9LFxuICAgICAgICB7dGFyZ2V0OiAnY29udGFjdEZpbHRlcicsIHR5cGU6ICdzdHJpbmcnLCB2YWx1ZTogJycsIGRhdGFCaW5kaW5nOiB0cnVlfVxuICAgIF07XG4gICAgcHVibGljIHJlYWRvbmx5IHJlcXVpcmVkQ29yZG92YVBsdWdpbnMgPSBbJ0NPTlRBQ1RTJ107XG5cbiAgICBwdWJsaWMgd2FpdGluZ0NhbGxzOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250YWN0czogQ29udGFjdHMpIHtcblxuICAgIH1cblxuICAgIHByaXZhdGUgZXh0cmFjdERpc3BsYXlOYW1lKGM6IENvbnRhY3QpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBuYW1lID0gYy5kaXNwbGF5TmFtZTtcbiAgICAgICAgLy8gSW4gSU9TLCBkaXNwbGF5TmFtZSBpcyB1bmRlZmluZWQsIHNvIHVzaW5nIHRoZSBmb3JtYXR0ZWQgbmFtZS5cbiAgICAgICAgaWYgKCFuYW1lIHx8IG5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgICBpZiAoYy5uYW1lLmZvcm1hdHRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjLm5hbWUuZm9ybWF0dGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc05leHRDYWxsKCkge1xuICAgICAgICBpZiAodGhpcy53YWl0aW5nQ2FsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy53YWl0aW5nQ2FsbHNbMF0oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZmluZENvbnRhY3RzKHJlcXVpcmVkRmllbGRzLCBmaW5kT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIENvbnRhY3RzIHBsdWdpbiBpcyBub3QgcHJvY2Vzc2luZyB0d28gc2ltdWx0YW5lb3VzIGNhbGxzLiBJdCBpcyBhbndzZXJpbmcgdG8gb25seSBjYWxsLlxuICAgICAgICAgICAgdGhpcy53YWl0aW5nQ2FsbHMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWN0cy5maW5kKHJlcXVpcmVkRmllbGRzLCBmaW5kT3B0aW9ucykudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFjdHMgPSBkYXRhLmZpbHRlcihjID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmRpc3BsYXlOYW1lID0gdGhpcy5leHRyYWN0RGlzcGxheU5hbWUoYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMucGhvbmVOdW1iZXJzICYmIGMucGhvbmVOdW1iZXJzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29udGFjdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgcmVqZWN0KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YWl0aW5nQ2FsbHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzTmV4dENhbGwoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMud2FpdGluZ0NhbGxzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc05leHRDYWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbnZva2UodmFyaWFibGU6IGFueSwgb3B0aW9uczogYW55LCBkYXRhQmluZGluZ3M6IE1hcDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCByZXF1aXJlZEZpZWxkczogQ29udGFjdEZpZWxkVHlwZVtdID0gWydkaXNwbGF5TmFtZScsICduYW1lJ107XG4gICAgICAgIGNvbnN0IGZpbmRPcHRpb25zID0ge1xuICAgICAgICAgICAgZmlsdGVyIDogZGF0YUJpbmRpbmdzLmdldCgnY29udGFjdEZpbHRlcicpLFxuICAgICAgICAgICAgbXVsdGlwbGUgOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRDb250YWN0cyhyZXF1aXJlZEZpZWxkcywgZmluZE9wdGlvbnMpO1xuICAgIH1cbn1cbiJdfQ==