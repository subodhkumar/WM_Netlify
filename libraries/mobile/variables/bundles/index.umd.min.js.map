{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@wm/mobile/variables/services/calendar-service.ts","ng://@wm/mobile/variables/services/camera-service.ts","ng://@wm/mobile/variables/services/file-service.ts","ng://@wm/mobile/variables/services/datasync-service.ts","ng://@wm/mobile/variables/services/device-service.ts","ng://@wm/mobile/variables/services/contacts-service.ts","ng://@wm/mobile/variables/services/scan-service.ts","ng://@wm/mobile/variables/variables.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DEFAULT_TIME","Date","getTime","DELTA_VALUE_DATE","DEFAULT_START_DATE","DEFAULT_END_DATE","EVENT_META","title","message","location","startDate","endDate","CalendarService","_super","calendar","_this","call","name","operations","push","CreateEventOperation","DeleteEventOperation","GetEventsOperation","tslib_1.__extends","DeviceVariableService","properties","target","type","dataBinding","requiredCordovaPlugins","invoke","variable","options","eventInfo","createEvent","get","deleteEvent","model","findEvent","CameraService","camera","mediaCapture","CaptureImageOperation","CaptureVideoOperation","imagePath","value","0","1","dataBindings","cameraOptions","imageTargetWidth","imageTargetHeight","imageEncodingType","parseInt","isNaN","quality","destinationType","sourceType","allowEdit","encodingType","mediaType","correctOrientation","targetWidth","isNumber","undefined","targetHeight","getPicture","then","data","videoPath","captureVideo","limit","fullPath","FileService","fileOpener","fileUploader","OpenFileOperation","UploadFileOperation","_defaultFileTypesToOpen","doc","label","mimeType","extension","pdf","ppt","xls","_","mapValues","hide","fileType","filePath","isValidWebURL","$rootScope","project","deployedUrl","openRemoteFile","fileName","path","length","success","inlinePath","errorMessage","inProgress","loaded","serverUrl","split","pop","fileSize","upload","uploadResponse","assignIn","JSON","parse","text","OFFLINE_PLUGIN_NOT_FOUND","REQUIRED_PLUGINS","DatasyncService","app","changeLogService","fileSelectorService","localDBManagementService","localDBDataPullService","processManagementService","securityService","networkService","ExportDBOperation","GetOfflineChangesOperation","ImportDBOperation","LastPullInfoOperation","LastPushInfoOperation","PullOperation","PushOperation","window","exportDB","Promise","reject","total","pendingToSync","CHANGE_LOG_SET","failedToSync","getOfflineChanges","database","DATA_CHANGE_TEMPLATE","service","operation","params","dataModelName","entityName","hasError","update","delete","uploads","file","ftOptions","databases","entities","pulledRecordCount","totalPulledRecordCount","startTime","toJSON","endTime","getLastPullInfo","successfulTaskCount","failedTaskCount","completedTaskCount","totalTaskCount","getLastPushInfo","selectFiles","files","importDB","widgettype","group","subGroup","progressInstance","canExecute","showProgress","createInstance","appLocale","LABEL_DATA_PULL_PROGRESS","instance","progressObserver","next","pullInfo","initiateCallback","set","totalRecordsToPull","error","noop","complete","clearData","pullPromise","pullAllDbData","LABEL_DATA_PULL_PROGRESS_STOP_BTN","cancel","catch","destroy","isFlushInProgress","resolve","changes","clone","LABEL_DATA_PUSH_PROGRESS","pushInfo","addOldPropertiesForPushData","pushPromise","flush","LABEL_DATA_PUSH_PROGRESS_STOP_BTN","stop","result","completed","isConnected","toPromise","VARIABLE_CONSTANTS","EVENT","BEFORE","proceed","onUserLogin","generateChangeSet","createChanges","filter","c","updateChanges","getChanges","DeviceService","appVersion","device","geoLocation","vibrateService","AppInfoOperation","CurrentGeoPositionOperation","DeviceInfoOperation","GetNetworkInfoOperation","GoOfflineOperation","GoOnlineOperation","VibrateOperation","subscribe","networkStatus","$appDigest","isConnecting","isNetworkAvailable","isServiceAvailable","appversion","cordovaversion","cordovaVersion","cordova","getVersionNumber","coords","latitude","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","timestamp","waitingQueue","maximumAge","timeout","enableHighAccuracy","watchPosition","watchId","navigator","geolocation","clearWatch","position","lastKnownPosition","forEach","fn","$","document","off","on","setTimeout","index","indexOf","splice","deviceModel","os","osVersion","deviceUUID","response","platform","version","uuid","connectionType","isOnline","isOffline","connection","disconnect","connect","vibrationService","vibrate","ContactsService","contacts","GetContactsOperation","id","displayName","phoneNumbers","waitingCalls","extractDisplayName","formatted","processNextCall","findContacts","requiredFields","findOptions","find","shift","multiple","barcodeFormatOptions","ALL","CODABAR","CODE_39","CODE_93","CODE_128","DATA_MATRIX","EAN_8","EAN_13","ITF","PDF_417","QR_CODE","RSS14","RSS_EXPANDED","UPC_E","UPC_A","ScanService","barcodeScanner","ScanOperation","format","cancelled","scanOptions","barcodeFormat","formats","scan","VariablesModule","initialize","initialized","deviceVariableManager","VariableManagerFactory","CATEGORY","DEVICE","registerService","NgModule","args","imports","OfflineModule","declarations","providers","App","AppVersion","BarcodeScanner","ChangeLogService","Calendar","Contacts","Camera","DeviceFileOpenerService","FileSelectorService","DeviceFileUploadService","Device","Geolocation","LocalDBDataPullService","LocalDBManagementService","MediaCapture","ProcessManagementService","SecurityService","NetworkService","Vibration"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Calendar } from '@ionic-native/calendar';\n\nimport { DeviceVariableService, IDeviceVariableOperation } from '@wm/variables';\n\nconst DEFAULT_TIME = new Date().getTime();\n/*3 months timestamp value*/\nconst DELTA_VALUE_DATE =  (3 * 30 * 24 * 60 * 60 * 1000);\nconst DEFAULT_START_DATE = (DEFAULT_TIME - DELTA_VALUE_DATE);\nconst DEFAULT_END_DATE = (DEFAULT_TIME + DELTA_VALUE_DATE);\nconst EVENT_META = {\n    title: '',\n    message: '',\n    location: '',\n    startDate: new Date(),\n    endDate: new Date()\n};\n\n/**\n * this file contains all calendar operations under 'calendar' service.\n */\nexport class CalendarService extends DeviceVariableService {\n    public readonly name = 'calendar';\n    public readonly operations: IDeviceVariableOperation[] = [];\n\n    constructor(calendar: Calendar) {\n        super();\n        this.operations.push(new CreateEventOperation(calendar),\n            new DeleteEventOperation(calendar),\n            new GetEventsOperation(calendar));\n    }\n}\n\nclass CreateEventOperation implements IDeviceVariableOperation {\n    public readonly name = 'createEvent';\n    public readonly properties = [\n            {target: 'eventTitle', type: 'string', dataBinding: true},\n            {target: 'eventNotes', type: 'string', dataBinding: true},\n            {target: 'eventLocation', type: 'string', dataBinding: true},\n            {target: 'eventStart', type: 'datetime', dataBinding: true},\n            {target: 'eventEnd', type: 'datetime', dataBinding: true}\n        ];\n    public readonly requiredCordovaPlugins = ['CALENDAR'];\n\n    constructor(private calendar: Calendar) {\n\n    }\n\n    public invoke(variable: any, options: any, eventInfo: Map<string, any>): Promise<any> {\n        return this.calendar.createEvent(\n            eventInfo.get('eventTitle'),\n            eventInfo.get('eventLocation'),\n            eventInfo.get('eventNotes'),\n            new Date(eventInfo.get('eventStart') || 0),\n            new Date(eventInfo.get('eventEnd') || 0));\n    }\n}\n\nclass DeleteEventOperation implements IDeviceVariableOperation {\n    public readonly name = 'deleteEvent';\n    public readonly properties = [\n        {target: 'eventTitle', type: 'string', dataBinding: true},\n        {target: 'eventNotes', type: 'string', dataBinding: true},\n        {target: 'eventLocation', type: 'string', dataBinding: true},\n        {target: 'eventStart', type: 'datetime', dataBinding: true},\n        {target: 'eventEnd', type: 'datetime', dataBinding: true}\n    ];\n    public readonly requiredCordovaPlugins = ['CALENDAR'];\n\n    constructor(private calendar: Calendar) {\n\n    }\n\n    public invoke(variable: any, options: any, eventInfo: Map<string, any>): Promise<any> {\n        return this.calendar.deleteEvent(\n            eventInfo.get('eventTitle'),\n            eventInfo.get('eventLocation'),\n            eventInfo.get('eventNotes'),\n            new Date(eventInfo.get('eventStart') || DEFAULT_START_DATE),\n            new Date(eventInfo.get('eventEnd') || DEFAULT_END_DATE));\n    }\n}\n\nclass GetEventsOperation implements IDeviceVariableOperation {\n    public readonly name = 'getEvents';\n    public readonly model = [EVENT_META];\n    public readonly properties = [\n        {target: 'eventTitle', type: 'string', dataBinding: true},\n        {target: 'eventNotes', type: 'string', dataBinding: true},\n        {target: 'eventLocation', type: 'string', dataBinding: true},\n        {target: 'eventStart', type: 'datetime', dataBinding: true},\n        {target: 'eventEnd', type: 'datetime', dataBinding: true}\n    ];\n    public readonly requiredCordovaPlugins = ['CALENDAR'];\n\n    constructor(private calendar: Calendar) {\n\n    }\n\n    public invoke(variable: any, options: any, eventInfo: Map<string, any>): Promise<any> {\n        return this.calendar.findEvent(\n            eventInfo.get('eventTitle'),\n            eventInfo.get('eventLocation'),\n            eventInfo.get('eventNotes'),\n            new Date(eventInfo.get('eventStart') || DEFAULT_START_DATE),\n            new Date(eventInfo.get('eventEnd') || DEFAULT_END_DATE));\n    }\n}\n","import { Camera } from '@ionic-native/camera';\nimport { MediaCapture } from '@ionic-native/media-capture';\n\nimport { isNumber } from '@wm/core';\nimport { DeviceVariableService, IDeviceVariableOperation } from '@wm/variables';\n\nexport class CameraService extends DeviceVariableService {\n    public readonly name = 'camera';\n    public readonly operations: IDeviceVariableOperation[] = [];\n\n    constructor(camera: Camera, mediaCapture: MediaCapture) {\n        super();\n        this.operations.push(new CaptureImageOperation(camera),\n            new CaptureVideoOperation(mediaCapture));\n    }\n}\n\nclass CaptureImageOperation implements IDeviceVariableOperation {\n    public readonly name = 'captureImage';\n    public readonly model = {\n        imagePath: 'resources/images/imagelists/default-image.png'\n    };\n    public readonly properties = [\n            {target: 'allowImageEdit', type: 'boolean', value: false, dataBinding: true},\n            {target: 'imageQuality', type: 'number', value: 80, dataBinding: true},\n            {target: 'imageEncodingType', type: 'list', options: {'0': 'JPEG', '1': 'PNG'}, value: '0', dataBinding: true},\n            {target: 'correctOrientation', type: 'boolean', value: true, dataBinding: true},\n            {target: 'imageTargetWidth', type: 'number', dataBinding: true},\n            {target: 'imageTargetHeight', type: 'number', dataBinding: true}\n        ];\n    public readonly requiredCordovaPlugins = ['CAMERA', 'CAPTURE'];\n\n    constructor(private camera: Camera) {\n\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        const imageTargetWidth = dataBindings.get('imageTargetWidth'),\n            imageTargetHeight = dataBindings.get('imageTargetHeight');\n        let imageEncodingType = parseInt(dataBindings.get('imageEncodingType'), 10),\n            cameraOptions;\n        if (isNaN(imageEncodingType)) {\n            imageEncodingType = (dataBindings.get('imageEncodingType') === 'JPEG' ? 0 : 1);\n        }\n        cameraOptions = {\n                quality           : dataBindings.get('imageQuality'),\n                destinationType   : 1, // only file url\n                sourceType        : 1, // camera\n                allowEdit         : dataBindings.get('allowImageEdit'),\n                encodingType      : imageEncodingType,\n                mediaType         : 0, // always picture\n                correctOrientation: dataBindings.get('correctOrientation'),\n                targetWidth       : isNumber(imageTargetWidth) ?  imageTargetWidth : undefined,\n                targetHeight      : isNumber(imageTargetHeight) ? imageTargetHeight : undefined,\n            };\n        return this.camera.getPicture(cameraOptions).then( data => {\n            return {imagePath: data};\n        });\n    }\n}\n\nclass CaptureVideoOperation implements IDeviceVariableOperation {\n    public readonly name = 'captureVideo';\n    public readonly model = {\n        videoPath: ''\n    };\n    public readonly properties = [];\n    public readonly requiredCordovaPlugins = ['CAMERA', 'CAPTURE'];\n\n    constructor(private mediaCapture: MediaCapture) {\n\n    }\n\n    public invoke(variable: any, options: any): Promise<any> {\n        return this.mediaCapture.captureVideo({\n            limit : 1\n        }).then( data => {\n            return {videoPath: data[0].fullPath};\n        });\n    }\n}\n","import { isValidWebURL } from '@wm/core';\nimport { DeviceFileOpenerService, DeviceFileUploadService } from '@wm/mobile/core';\nimport { $rootScope, DeviceVariableService, IDeviceVariableOperation } from '@wm/variables';\n\ndeclare const _;\n\nexport class FileService extends DeviceVariableService {\n    name = 'file';\n    operations: IDeviceVariableOperation[] = [];\n\n    constructor(fileOpener: DeviceFileOpenerService, fileUploader: DeviceFileUploadService) {\n        super();\n        this.operations.push(new OpenFileOperation(fileOpener),\n            new UploadFileOperation(fileUploader));\n    }\n}\n\nclass OpenFileOperation implements IDeviceVariableOperation {\n\n    private _defaultFileTypesToOpen = {\n        'doc' : {'label' : 'Microsoft Office Word Document', 'mimeType' : 'application/msword', 'extension' : 'doc'},\n        'pdf' : {'label' : 'PDF Document', 'mimeType' : 'application/pdf', 'extension' : 'pdf'},\n        'ppt' : {'label' : 'Microsoft Office Powerpoint', 'mimeType' : 'application/vnd.ms-powerpoint', 'extension' : 'ppt'},\n        'xls' : {'label' : 'Microsoft Office Excel', 'mimeType' : 'application/vnd.ms-excel', 'extension' : 'xls'}\n    };\n\n    public readonly name = 'openFile';\n    public readonly model = {};\n    public readonly properties = [\n        {target: 'filePath', type: 'string', value: '', dataBinding: true},\n        {target: 'fileType', type: 'list', options: _.mapValues(this._defaultFileTypesToOpen, 'label'),  value: 'pdf', dataBinding: true, hide: true},\n        {target: 'spinnerContext', hide: false},\n        {target: 'spinnerMessage', hide: false}\n    ];\n    public readonly requiredCordovaPlugins = [];\n\n    constructor(private fileOpener: DeviceFileOpenerService) {}\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        const fileType = this._defaultFileTypesToOpen[dataBindings.get('fileType')];\n        let filePath = dataBindings.get('filePath');\n        // if relative path is given, then append url with deployedUrl, to access files in resources.\n        if (!isValidWebURL(filePath)) {\n            filePath = $rootScope.project.deployedUrl + filePath;\n        }\n        return this.fileOpener.openRemoteFile(filePath, fileType.extension);\n    }\n}\n\nclass UploadFileOperation implements IDeviceVariableOperation {\n\n    public readonly name = 'upload';\n    public readonly model = {\n        fileName    : '',\n        path        : '',\n        length      : 0,\n        success     : false,\n        inlinePath  : '',\n        errorMessage: '',\n        inProgress  : false,\n        loaded      : 0\n    };\n    public readonly properties = [\n        {target: 'localFile', type: 'string', value: '', dataBinding: true},\n        {target: 'remoteFolder', type: 'string', value: '', dataBinding: true},\n        {target: 'onProgress', hide : false},\n        {target: 'spinnerContext', hide : false},\n        {target: 'spinnerMessage', hide : false}\n    ];\n    public readonly requiredCordovaPlugins = [];\n\n    constructor(private fileUploader: DeviceFileUploadService) {}\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        const serverUrl = $rootScope.project.deployedUrl + 'services/file/uploadFile?relativePath=' + (dataBindings.get('remoteFolder') || ''),\n            filePath = dataBindings.get('localFile'),\n            fileName = filePath.split('/').pop(),\n            data = {\n                fileName    : fileName,\n                fileSize    : 0,\n                inProgress  : true,\n                length      : 0,\n                loaded      : 0\n            };\n        return this.fileUploader.upload(serverUrl, 'files', filePath, fileName)\n            .then(uploadResponse => {\n                _.assignIn(data, JSON.parse(uploadResponse.text)[0]);\n                data.loaded = data.length;\n                return data;\n            });\n    }\n}\n","import { Observer } from 'rxjs/index';\n\nimport { App, noop, toPromise } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\nimport { FileSelectorService, ProcessApi, ProcessManagementService } from '@wm/mobile/components';\nimport { Change, ChangeLogService, LocalDBManagementService, LocalDBDataPullService, PushInfo, PullInfo } from '@wm/mobile/offline';\nimport { DeviceVariableService, IDeviceVariableOperation, initiateCallback, VARIABLE_CONSTANTS } from '@wm/variables';\nimport { SecurityService } from '@wm/security';\n\ndeclare const _;\n\nconst APP_IS_OFFLINE = 'App is offline.';\nconst OFFLINE_PLUGIN_NOT_FOUND = 'Offline DB Plugin is required, but missing.';\nconst ON_BEFORE_BLOCKED = 'onBefore callback returned false.';\nconst REQUIRED_PLUGINS = ['OFFLINE_DB', 'NETWORK'];\n\nexport class DatasyncService extends DeviceVariableService {\n    public readonly name = 'datasync';\n    public readonly operations: IDeviceVariableOperation[] = [];\n\n    constructor(app: App,\n                changeLogService: ChangeLogService,\n                fileSelectorService: FileSelectorService,\n                localDBManagementService: LocalDBManagementService,\n                localDBDataPullService: LocalDBDataPullService,\n                processManagementService: ProcessManagementService,\n                securityService: SecurityService,\n                networkService: NetworkService) {\n        super();\n        this.operations.push(new ExportDBOperation(localDBManagementService));\n        this.operations.push(new GetOfflineChangesOperation(changeLogService));\n        this.operations.push(new ImportDBOperation(fileSelectorService, localDBManagementService));\n        this.operations.push(new LastPullInfoOperation(localDBDataPullService));\n        this.operations.push(new LastPushInfoOperation(changeLogService));\n        this.operations.push(new PullOperation(app, processManagementService, networkService, securityService, localDBDataPullService));\n        this.operations.push(new PushOperation(app, changeLogService, processManagementService, networkService, securityService));\n    }\n}\n\nclass ExportDBOperation implements IDeviceVariableOperation {\n    public readonly name = 'exportDB';\n    public readonly model = {path: ''};\n    public readonly properties = [\n        {target: 'spinnerContext', hide: false},\n        {target: 'spinnerMessage', hide: false}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        if (window['SQLitePlugin']) {\n            return this.localDBManagementService.exportDB();\n        }\n        return Promise.reject(OFFLINE_PLUGIN_NOT_FOUND);\n    }\n}\n\n\nclass GetOfflineChangesOperation implements IDeviceVariableOperation {\n    private static DATA_CHANGE_TEMPLATE = {\n        service: 'DatabaseService',\n        operation: 'operation',\n        params: {\n            data: {},\n            dataModelName: 'dataModelName',\n            entityName: 'entityName'\n        },\n        hasError: 0,\n        errorMessage: ''\n    };\n    private static CHANGE_LOG_SET = {\n        total: 0,\n        database: {\n            create: [GetOfflineChangesOperation.DATA_CHANGE_TEMPLATE],\n            update: [GetOfflineChangesOperation.DATA_CHANGE_TEMPLATE],\n            delete: [GetOfflineChangesOperation.DATA_CHANGE_TEMPLATE]\n        },\n        uploads: [{\n            service: 'OfflineFileUploadService',\n            operation: 'uploadToServer',\n            params: {\n                file: 'localFilePath',\n                serverUrl: 'serverUrl',\n                ftOptions: {}\n            },\n            hasError: 0,\n            errorMessage: ''\n        }]\n    };\n    public readonly name = 'getOfflineChanges';\n    public readonly model = {\n        total: 0,\n        pendingToSync: GetOfflineChangesOperation.CHANGE_LOG_SET,\n        failedToSync: GetOfflineChangesOperation.CHANGE_LOG_SET\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean', value: true, hide: true},\n        {target: 'autoUpdate', type: 'boolean', value: true, hide: true}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(private changeLogService: ChangeLogService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        if (window['SQLitePlugin']) {\n            return getOfflineChanges(this.changeLogService);\n        }\n        return Promise.reject(OFFLINE_PLUGIN_NOT_FOUND);\n    }\n}\n\nclass LastPullInfoOperation implements IDeviceVariableOperation {\n    public readonly name = 'lastPullInfo';\n    public readonly model = {\n        databases : [{\n            name : 'datbaseName',\n            entities: [{\n                entityName: 'entityName',\n                pulledRecordCount: 0\n            }],\n            pulledRecordCount: 0\n        }],\n        totalPulledRecordCount: 0,\n        startTime: new Date().toJSON(),\n        endTime: new Date().toJSON()\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean', value: true, hide: true},\n        {target: 'spinnerContext', hide: false},\n        {target: 'spinnerMessage', hide: false}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(private localDBDataPullService: LocalDBDataPullService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        if (window['SQLitePlugin']) {\n            return this.localDBDataPullService.getLastPullInfo();\n        }\n        return Promise.reject(OFFLINE_PLUGIN_NOT_FOUND);\n    }\n}\n\nclass LastPushInfoOperation implements IDeviceVariableOperation {\n    public readonly name = 'lastPushInfo';\n    public readonly model = {\n        successfulTaskCount: 0,\n        failedTaskCount: 0,\n        completedTaskCount: 0,\n        totalTaskCount: 0,\n        startTime: new Date().toJSON(),\n        endTime: new Date().toJSON()\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean', value: true, hide: true},\n        {target: 'spinnerContext', hide: false},\n        {target: 'spinnerMessage', hide: false}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(private changeLogService: ChangeLogService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        if (window['SQLitePlugin']) {\n            return this.changeLogService.getLastPushInfo();\n        }\n        return Promise.reject(OFFLINE_PLUGIN_NOT_FOUND);\n    }\n}\n\nclass ImportDBOperation implements IDeviceVariableOperation {\n    public readonly name = 'importDB';\n    public readonly model = {};\n    public readonly properties = [\n        {target: 'spinnerContext', hide: false},\n        {target: 'spinnerMessage', hide: false}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(\n        private fileSelectorService: FileSelectorService,\n        private localDBManagementService: LocalDBManagementService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        if (window['SQLitePlugin']) {\n            return this.fileSelectorService.selectFiles(false,  'zip')\n                .then(files => {\n                if (files && files.length) {\n                    return this.localDBManagementService.importDB(files[0].path, true);\n                }\n            });\n        }\n        return Promise.reject(OFFLINE_PLUGIN_NOT_FOUND);\n    }\n}\n\nclass PullOperation implements IDeviceVariableOperation {\n    public readonly name = 'pull';\n    public readonly model = {\n        totalTaskCount: 0,\n        completedTaskCount: 0,\n        inProgress: false\n    };\n    public readonly properties = [\n        {target: 'clearData', type: 'boolean', widgettype: 'boolean-inputfirst', value: true, group: 'properties', subGroup: 'behavior'},\n        {target: 'startUpdate', type: 'boolean', hide: false},\n        {target: 'onBefore', hide: false},\n        {target: 'onProgress', hide: false},\n        {target: 'showProgress', hide: false}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(\n        private app: App,\n        private processManagementService: ProcessManagementService,\n        private networkService: NetworkService,\n        private securityService: SecurityService,\n        private localDBDataPullService: LocalDBDataPullService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        let progressInstance;\n        return canExecute(variable, this.networkService, this.securityService)\n            .then(() => {\n                if (variable.showProgress) {\n                    return this.processManagementService.createInstance(this.app.appLocale.LABEL_DATA_PULL_PROGRESS, 0, 0);\n                }\n                return null;\n            }).then((instance: ProcessApi) => {\n                const progressObserver: Observer<PullInfo> = {\n                    next: (pullInfo: PullInfo) => {\n                        // variable.dataSet = progress; Todo: progress\n                        initiateCallback('onProgress', variable, pullInfo);\n                        if (progressInstance) {\n                            progressInstance.set('max', pullInfo.totalRecordsToPull);\n                            progressInstance.set('value', pullInfo.totalPulledRecordCount);\n                        }\n                    }, error: noop, complete: noop};\n\n                const clearData = variable.clearData === 'true' || variable.clearData === true,\n                    pullPromise = this.localDBDataPullService.pullAllDbData(clearData, progressObserver);\n                if (instance) {\n                    progressInstance = instance;\n                    progressInstance.set('stopButtonLabel', this.app.appLocale.LABEL_DATA_PULL_PROGRESS_STOP_BTN);\n                    progressInstance.set('onStop', () => {\n                        this.localDBDataPullService.cancel(pullPromise);\n                    });\n                }\n            return pullPromise;\n        }).catch(pullInfo => pullInfo)\n            .then(pullInfo => {\n                if (progressInstance) {\n                    progressInstance.destroy();\n                }\n                return pullInfo;\n            });\n    }\n}\n\nclass PushOperation implements IDeviceVariableOperation {\n    public readonly name = 'push';\n    public readonly model = {\n        successfulTaskCount: 0,\n        failedTaskCount: 0,\n        completedTaskCount: 0,\n        totalTaskCount: 0,\n        inProgress: false\n    };\n    public readonly properties = [\n        {target: 'onBefore', hide: false},\n        {target: 'onProgress', hide: false},\n        {target: 'showProgress', 'hide': false, 'value': true}\n    ];\n    public readonly requiredCordovaPlugins = REQUIRED_PLUGINS;\n\n    constructor(private app: App,\n                private changeLogService: ChangeLogService,\n                private processManagementService: ProcessManagementService,\n                private networkService: NetworkService,\n                private securityService: SecurityService) {\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        let progressInstance;\n        if (this.changeLogService.isFlushInProgress()) {\n            return Promise.resolve();\n        }\n        return canExecute(variable, this.networkService, this.securityService)\n            .then(() => getOfflineChanges(this.changeLogService))\n            .then(changes => {\n                if (changes.pendingToSync.total <= 0) {\n                    return Promise.reject(_.clone(this.model));\n                }\n            }).then(() => {\n                if (variable.showProgress) {\n                    return this.processManagementService.createInstance(this.app.appLocale.LABEL_DATA_PUSH_PROGRESS, 0, 0);\n                }\n                return null;\n            }).then((instance: ProcessApi) => {\n                const progressObserver: Observer<PushInfo> = {\n                    next: (pushInfo: PushInfo) => {\n                        pushInfo = addOldPropertiesForPushData(pushInfo);\n                        initiateCallback('onProgress', variable, pushInfo);\n                        if (progressInstance) {\n                            progressInstance.set('max', pushInfo.totalTaskCount);\n                            progressInstance.set('value', pushInfo.completedTaskCount);\n                        }\n                    }, error: noop, complete: noop};\n                const pushPromise = this.changeLogService.flush(progressObserver);\n                if (instance) {\n                    progressInstance = instance;\n                    progressInstance.set('stopButtonLabel', this.app.appLocale.LABEL_DATA_PUSH_PROGRESS_STOP_BTN);\n                    progressInstance.set('onStop', () => this.changeLogService.stop());\n                }\n                return pushPromise;\n            })\n            .catch(pushInfo => pushInfo)\n            .then(pushInfo => {\n                if (progressInstance) {\n                    progressInstance.destroy();\n                }\n                if (pushInfo && pushInfo.totalTaskCount !== undefined) {\n                    pushInfo = addOldPropertiesForPushData(pushInfo);\n                    if (pushInfo.failedTaskCount !== 0) {\n                        return Promise.reject(pushInfo);\n                    }\n                    return pushInfo;\n                }\n                return Promise.reject(pushInfo);\n            });\n    }\n}\n\n/**\n * This function adds the old properties to the push dataSet to support old projects.\n * @param data\n * @returns {*}\n */\nconst addOldPropertiesForPushData = data => {\n    const result = _.clone(data);\n    result.success = data.successfulTaskCount;\n    result.error = data.failedTaskCount;\n    result.completed = data.completedTaskCount;\n    result.total = data.totalTaskCount;\n    return result;\n};\n\nconst canExecute = (variable: any, networkService: NetworkService, securityService: SecurityService) => {\n    if (!window['SQLitePlugin']) {\n        return Promise.reject(OFFLINE_PLUGIN_NOT_FOUND);\n    }\n    if (!networkService.isConnected()) {\n        return Promise.reject(APP_IS_OFFLINE);\n    }\n    return toPromise(initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE, variable, null))\n        .then(proceed => {\n            if (proceed === false) {\n                return Promise.reject(ON_BEFORE_BLOCKED);\n            }\n            // If user is authenticated and online, then start the data pull process.\n            return securityService.onUserLogin();\n        });\n};\n\nconst generateChangeSet = (changes: Change[]) => {\n    const createChanges =  _.filter(changes, c => {\n        return c.service === 'DatabaseService' &&\n            (c.operation === 'insertTableData'\n                || c.operation === 'insertMultiPartTableData');\n    }), updateChanges =  _.filter(changes, c => {\n        return c.service === 'DatabaseService' &&\n            (c.operation === 'updateTableData'\n                || c.operation === 'updateMultiPartTableData');\n    });\n    return {\n        total: changes ? changes.length : 0,\n        database: {\n            create: createChanges,\n            update: updateChanges,\n            delete: _.filter(changes, {service: 'DatabaseService', operation: 'deleteTableData'})\n        },\n        uploads: _.filter(changes, {service: 'OfflineFileUploadService', operation: 'uploadToServer'})\n    };\n};\n\nconst getOfflineChanges = (changeLogService: ChangeLogService) => {\n    return changeLogService.getChanges().then(changes => {\n        return {\n            'total' : changes ? changes.length : 0,\n            'pendingToSync' : generateChangeSet(_.filter(changes, {'hasError' : 0})),\n            'failedToSync' : generateChangeSet(_.filter(changes, {'hasError' : 1}))\n        };\n    });\n};\n","import { AppVersion } from '@ionic-native/app-version';\nimport { Device } from '@ionic-native/device';\nimport { Geolocation, GeolocationOptions } from '@ionic-native/geolocation';\nimport { Vibration } from '@ionic-native/vibration';\n\nimport { $appDigest, App } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\nimport { DeviceVariableService, IDeviceVariableOperation, initiateCallback } from '@wm/variables';\n\ndeclare const navigator, $;\n/**\n * this file contains all device operations under 'device' service.\n */\nexport class DeviceService extends DeviceVariableService {\n    public readonly name = 'device';\n    public readonly operations: IDeviceVariableOperation[] = [];\n\n    constructor(app: App,\n        appVersion: AppVersion,\n        device: Device,\n        geoLocation: Geolocation,\n        networkService: NetworkService,\n        vibrateService: Vibration) {\n        super();\n        this.operations.push(new AppInfoOperation(device, appVersion),\n            new CurrentGeoPositionOperation(geoLocation),\n            new DeviceInfoOperation(device),\n            new GetNetworkInfoOperation(app, networkService),\n            new GoOfflineOperation(networkService),\n            new GoOnlineOperation(networkService),\n            new VibrateOperation(vibrateService));\n        app.subscribe('onNetworkStateChange', data => {\n            app.networkStatus = data;\n            $appDigest();\n        });\n        app.networkStatus = {\n            isConnecting : false,\n            isConnected : true,\n            isNetworkAvailable : true,\n            isServiceAvailable : true\n        };\n    }\n}\n\n\n/**\n * This class handles 'getAppInfo' device operation.\n */\nclass AppInfoOperation implements IDeviceVariableOperation {\n    public readonly name = 'getAppInfo';\n    public readonly model = {\n        appversion: 'X.X.X',\n        cordovaversion: 'X.X.X'\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean', value: true, hide: true}\n    ];\n\n    constructor (private device: Device, private appVersion: AppVersion) {\n\n    }\n\n    public invoke(variable: any, options: any): Promise<any> {\n        const cordovaVersion = this.device.cordova;\n        return this.appVersion.getVersionNumber().then(appVersion => {\n            return {\n                appversion: appVersion,\n                cordovaversion: cordovaVersion\n            };\n        });\n    }\n}\n\n/**\n * This class handles 'getCurrentGeoPosition' device operation.\n */\nclass CurrentGeoPositionOperation implements IDeviceVariableOperation {\n    public readonly name = 'getCurrentGeoPosition';\n    public readonly model = {\n        coords: {\n            latitude: 0,\n            longitude: 0,\n            altitude: 0,\n            accuracy: 0,\n            altitudeAccuracy: 0,\n            heading: 0,\n            speed: 0\n        },\n        timestamp: 0\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean', value: true, hide : true},\n        {target: 'autoUpdate', type: 'boolean', value: true, hide : true},\n        {target: 'geolocationHighAccuracy', type: 'boolean', value: true, dataBinding: true},\n        {target: 'geolocationMaximumAge', type: 'number', value: 3, dataBinding: true},\n        {target: 'geolocationTimeout', type: 'number', value: 5, dataBinding: true}\n    ];\n    public readonly requiredCordovaPlugins = ['GEOLOCATION'];\n\n    private lastKnownPosition;\n    private waitingQueue = [];\n    private watchId;\n    private options = {\n        maximumAge: 3000,\n        timeout: (2 * 60) * 1000,\n        enableHighAccuracy: true\n    };\n\n    constructor (private geoLocation: Geolocation) {}\n\n    private watchPosition() {\n        if (this.watchId) {\n            navigator.geolocation.clearWatch(this.watchId);\n            this.watchId = null;\n        }\n        const options = window['WM_GEO_LOCATION_OPTIONS'] || this.options;\n        this.watchId = navigator.geolocation.watchPosition(position => {\n            this.lastKnownPosition = {\n                coords: {\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude,\n                    altitude: position.coords.altitude,\n                    accuracy: position.coords.accuracy,\n                    altitudeAccuracy: position.coords.altitudeAccuracy,\n                    heading: position.coords.heading,\n                    speed: position.coords.speed\n                },\n                timestamp: position.timestamp\n            };\n            if (this.waitingQueue.length > 0) {\n                this.waitingQueue.forEach(fn => fn(this.lastKnownPosition));\n                this.waitingQueue.length = 0;\n            }\n            $(document).off('touchend.usergesture');\n        }, () => {\n            this.watchId = null;\n        }, options);\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        if (!this.watchId || !this.lastKnownPosition) {\n            this.watchPosition();\n            $(document).on('touchend.usergesture', () => this.watchPosition());\n        }\n        const geoLocationOptions: GeolocationOptions = {\n            maximumAge: dataBindings.get('geolocationMaximumAge') * 1000,\n            timeout: dataBindings.get('geolocationTimeout') * 1000,\n            enableHighAccuracy: dataBindings.get('geolocationHighAccuracy')\n        };\n        if (this.lastKnownPosition) {\n            return Promise.resolve(this.lastKnownPosition);\n        }\n        return new Promise(resolve => {\n            const c = position => {\n                resolve(position);\n            };\n            setTimeout(() => {\n                const index = this.waitingQueue.indexOf(c);\n                if (index > -1) {\n                    this.waitingQueue.splice(index, 1);\n                    resolve(this.model);\n                }\n            }, this.options.timeout);\n\n            this.waitingQueue.push(c);\n        });\n    }\n}\n\n\n\n/**\n * This class handles 'getDeviceInfo' device operation.\n */\nclass DeviceInfoOperation implements IDeviceVariableOperation {\n    public readonly name = 'getDeviceInfo';\n    public readonly model = {\n        deviceModel: 'DEVICEMODEL',\n        os: 'DEVICEOS',\n        osVersion: 'X.X.X',\n        deviceUUID: 'DEVICEUUID'\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean', value: true, hide: true}\n    ];\n\n    constructor (private device: Device) {\n\n    }\n\n    public invoke(variable: any, options: any): Promise<any> {\n        const response = {\n            'deviceModel': this.device.model,\n            'os': this.device.platform,\n            'osVersion': this.device.version,\n            'deviceUUID': this.device.uuid\n        };\n        return Promise.resolve(response);\n    }\n}\n\nclass GetNetworkInfoOperation implements IDeviceVariableOperation {\n    public readonly name = 'getNetworkInfo';\n    public readonly model = {\n        connectionType: 'NONE',\n        isConnecting: false,\n        isNetworkAvailable: true,\n        isOnline: true,\n        isOffline: false\n    };\n    public readonly properties = [\n        {target: 'autoUpdate', type: 'boolean', value: true, hide : true},\n        {target: 'startUpdate', type: 'boolean', value: true, hide : true},\n        {target: 'networkStatus', type: 'object', value: 'bind:App.networkStatus', dataBinding: true, hide: true},\n        {target: 'onOnline', hide : false},\n        {target: 'onOffline', hide : false}\n    ];\n    public readonly requiredCordovaPlugins = ['NETWORK'];\n\n    constructor (private app: App, private networkService: NetworkService) {\n\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        const data = {\n            connectionType: navigator.connection.type,\n            isConnecting: this.app.networkStatus.isConnecting,\n            isNetworkAvailable: this.app.networkStatus.isNetworkAvailable,\n            isOnline: this.app.networkStatus.isConnected,\n            isOffline: !this.app.networkStatus.isConnected\n        };\n        if (this.networkService.isConnected()) {\n            initiateCallback('onOnline', variable, data);\n        } else {\n            initiateCallback('onOffline', variable, data);\n        }\n        return Promise.resolve(data);\n    }\n}\n\nclass GoOfflineOperation implements IDeviceVariableOperation {\n    public readonly name = 'goOffline';\n    public readonly model = {};\n    public readonly properties = [];\n    public readonly requiredCordovaPlugins = ['NETWORK'];\n\n    constructor (private networkService: NetworkService) {\n\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        return this.networkService.disconnect();\n    }\n}\n\nclass GoOnlineOperation implements IDeviceVariableOperation {\n    public readonly name = 'goOnline';\n    public readonly model = {};\n    public readonly properties = [];\n    public readonly requiredCordovaPlugins = ['NETWORK'];\n\n    constructor (private networkService: NetworkService) {\n\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        return this.networkService.connect();\n    }\n}\n\n/**\n * This class handles 'vibrate' device operation.\n */\nclass VibrateOperation implements IDeviceVariableOperation {\n    public readonly name = 'vibrate';\n    public readonly model = {\n        appversion: 'X.X.X',\n        cordovaversion: 'X.X.X'\n    };\n    public readonly properties = [\n        {target: 'vibrationtime', type: 'number', value: 2, dataBinding: true}\n    ];\n    public readonly requiredCordovaPlugins = ['VIBRATE'];\n\n    constructor (private vibrationService: Vibration) {\n\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        this.vibrationService.vibrate(dataBindings.get('vibrationtime') * 1000);\n        return Promise.resolve();\n    }\n}\n","import { Contact, ContactFieldType, Contacts } from '@ionic-native/contacts';\n\nimport { DeviceVariableService, IDeviceVariableOperation } from '@wm/variables';\n\nexport class ContactsService extends DeviceVariableService {\n    public readonly name = 'contacts';\n    public readonly operations: IDeviceVariableOperation[] = [];\n\n    constructor(contacts: Contacts) {\n        super();\n        this.operations.push(new GetContactsOperation(contacts));\n    }\n}\n\nclass GetContactsOperation implements IDeviceVariableOperation {\n    public readonly name = 'getContacts';\n    public readonly model = {\n        id : '',\n        displayName : '',\n        phoneNumbers : [{value: ''}]\n    };\n    public readonly properties = [\n        {target: 'startUpdate', type: 'boolean'},\n        {target: 'autoUpdate', type: 'boolean'},\n        {target: 'contactFilter', type: 'string', value: '', dataBinding: true}\n    ];\n    public readonly requiredCordovaPlugins = ['CONTACTS'];\n\n    public waitingCalls: (() => void)[] = [];\n\n    constructor(private contacts: Contacts) {\n\n    }\n\n    private extractDisplayName(c: Contact): string {\n        const name = c.displayName;\n        // In IOS, displayName is undefined, so using the formatted name.\n        if (!name || name === '') {\n            if (c.name.formatted) {\n                return c.name.formatted;\n            }\n        }\n        return name;\n    }\n\n    private processNextCall() {\n        if (this.waitingCalls.length > 0) {\n            this.waitingCalls[0]();\n        }\n    }\n\n    private findContacts(requiredFields, findOptions): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            // Contacts plugin is not processing two simultaneous calls. It is anwsering to only call.\n            this.waitingCalls.push(() => {\n                this.contacts.find(requiredFields, findOptions).then(data => {\n                    if (data != null) {\n                        const contacts = data.filter(c => {\n                            c.displayName = this.extractDisplayName(c);\n                            return c.phoneNumbers && c.phoneNumbers.length > 0;\n                        });\n                        resolve(contacts);\n                    }\n                }, reject).then(() => {\n                    this.waitingCalls.shift();\n                    this.processNextCall();\n                });\n            });\n            if (this.waitingCalls.length === 1) {\n                this.processNextCall();\n            }\n        });\n    }\n\n    public invoke(variable: any, options: any, dataBindings: Map<string, any>): Promise<any> {\n        const requiredFields: ContactFieldType[] = ['displayName', 'name'];\n        const findOptions = {\n            filter : dataBindings.get('contactFilter'),\n            multiple : true\n        };\n        return this.findContacts(requiredFields, findOptions);\n    }\n}\n","import { BarcodeScanner } from '@ionic-native/barcode-scanner';\n\nimport { DeviceVariableService, IDeviceVariableOperation } from '@wm/variables';\n\nconst barcodeFormatOptions = {\n    'ALL' : 'ALL',\n    'CODABAR' : 'CODABAR (not supported in iOS)',\n    'CODE_39' : 'CODE_39',\n    'CODE_93' : 'CODE_93 (not supported in iOS)',\n    'CODE_128' : 'CODE_128',\n    'DATA_MATRIX' : 'DATA_MATRIX',\n    'EAN_8' : 'EAN_8',\n    'EAN_13' : 'EAN_13',\n    'ITF' : 'ITF',\n    'PDF_417' : 'PDF_417 (not supported in iOS)',\n    'QR_CODE' : 'QR_CODE',\n    'RSS14' : 'RSS14 (not supported in iOS)',\n    'RSS_EXPANDED' : 'RSS_EXPANDED (not supported in iOS)',\n    'UPC_E' : 'UPC_E',\n    'UPC_A' : 'UPC_A'\n};\n\nexport class ScanService extends DeviceVariableService {\n    name = 'scan';\n    operations: IDeviceVariableOperation[] = [];\n\n    constructor(barcodeScanner: BarcodeScanner) {\n        super();\n        this.operations.push(new ScanOperation(barcodeScanner));\n    }\n}\n\nclass ScanOperation implements IDeviceVariableOperation {\n    public readonly name = 'scanBarCode';\n    public readonly model = {\n        text : 'BAR CODE',\n        format : 'TEXT',\n        cancelled : false\n    };\n    public readonly properties = [\n        {\n            target    : 'barcodeFormat',\n            type      : 'list',\n            options   : barcodeFormatOptions,\n            value     : 'ALL',\n            group     : 'properties',\n            subGroup  : 'behavior',\n            hide      : false\n        }\n    ];\n    public readonly requiredCordovaPlugins = ['BARCODE_SCANNER'];\n\n    constructor(private barcodeScanner: BarcodeScanner) {\n\n    }\n\n    public invoke(variable: any, options: any): Promise<any> {\n        let scanOptions;\n        if (variable.barcodeFormat && variable.barcodeFormat !== 'ALL') {\n            scanOptions = {formats : variable.barcodeFormat};\n        }\n        return this.barcodeScanner.scan(scanOptions);\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { AppVersion } from '@ionic-native/app-version';\nimport { BarcodeScanner } from '@ionic-native/barcode-scanner';\nimport { Calendar } from '@ionic-native/calendar';\nimport { Camera } from '@ionic-native/camera';\nimport { Device } from '@ionic-native/device';\nimport { Contacts } from '@ionic-native/contacts';\nimport { MediaCapture } from '@ionic-native/media-capture';\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { Vibration } from '@ionic-native/vibration';\n\nimport { App } from '@wm/core';\nimport { DeviceFileOpenerService, DeviceFileUploadService, NetworkService } from '@wm/mobile/core';\nimport { ChangeLogService, LocalDBManagementService, LocalDBDataPullService, OfflineModule } from '@wm/mobile/offline';\nimport { SecurityService } from '@wm/security';\nimport { DeviceVariableManager, VARIABLE_CONSTANTS, VariableManagerFactory } from '@wm/variables';\n\nimport { CalendarService } from './services/calendar-service';\nimport { CameraService } from './services/camera-service';\nimport { FileService } from './services/file-service';\nimport { DatasyncService } from './services/datasync-service';\nimport { DeviceService } from './services/device-service';\nimport { ContactsService } from './services/contacts-service';\nimport { ScanService } from './services/scan-service';\nimport { FileSelectorService, ProcessManagementService } from '@wm/mobile/components';\n\n@NgModule({\n    imports: [\n        OfflineModule\n    ],\n    declarations: [],\n    providers: [\n        // add providers to mobile-runtime module.\n    ]\n})\nexport class VariablesModule {\n\n    private static initialized = false;\n    // Device variable services have to be added only once in the app life-cycle.\n    private static initialize(app: App,\n                              appVersion: AppVersion,\n                              barcodeScanner: BarcodeScanner,\n                              changeLogService: ChangeLogService,\n                              calendar: Calendar,\n                              contacts: Contacts,\n                              camera: Camera,\n                              fileOpener: DeviceFileOpenerService,\n                              fileSelectorService: FileSelectorService,\n                              fileUploader: DeviceFileUploadService,\n                              device: Device,\n                              geoLocation: Geolocation,\n                              localDBDataPullService: LocalDBDataPullService,\n                              localDBManagementService: LocalDBManagementService,\n                              mediaCapture: MediaCapture,\n                              processManagementService: ProcessManagementService,\n                              securityService: SecurityService,\n                              networkService: NetworkService,\n                              vibrateService: Vibration) {\n        if (this.initialized) {\n            return;\n        }\n        this.initialized = true;\n        const deviceVariableManager = VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.DEVICE) as DeviceVariableManager;\n        deviceVariableManager.registerService(new CameraService(camera, mediaCapture));\n        deviceVariableManager.registerService(new CalendarService(calendar));\n        deviceVariableManager.registerService(new FileService(fileOpener, fileUploader));\n        deviceVariableManager.registerService(new ContactsService(contacts));\n        deviceVariableManager.registerService(new DatasyncService(app, changeLogService, fileSelectorService, localDBManagementService, localDBDataPullService, processManagementService, securityService, networkService));\n        deviceVariableManager.registerService(new DeviceService(app, appVersion, device, geoLocation, networkService, vibrateService));\n        deviceVariableManager.registerService(new ScanService(barcodeScanner));\n    }\n\n    constructor(\n        app: App,\n        appVersion: AppVersion,\n        barcodeScanner: BarcodeScanner,\n        changeLogService: ChangeLogService,\n        calendar: Calendar,\n        contacts: Contacts,\n        camera: Camera,\n        fileOpener: DeviceFileOpenerService,\n        fileSelectorService: FileSelectorService,\n        fileUploader: DeviceFileUploadService,\n        device: Device,\n        geoLocation: Geolocation,\n        localDBDataPullService: LocalDBDataPullService,\n        localDBManagementService: LocalDBManagementService,\n        mediaCapture: MediaCapture,\n        processManagementService: ProcessManagementService,\n        securityService: SecurityService,\n        networkService: NetworkService,\n        vibrateService: Vibration\n    ) {\n        VariablesModule.initialize(app,\n                                    appVersion,\n                                    barcodeScanner,\n                                    changeLogService,\n                                    calendar,\n                                    contacts,\n                                    camera,\n                                    fileOpener,\n                                    fileSelectorService,\n                                    fileUploader,\n                                    device,\n                                    geoLocation,\n                                    localDBDataPullService,\n                                    localDBManagementService,\n                                    mediaCapture,\n                                    processManagementService,\n                                    securityService,\n                                    networkService,\n                                    vibrateService);\n    }\n}\n"]}