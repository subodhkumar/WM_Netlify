{"version":3,"file":"index.umd.js.map","sources":["ng://@wm/mobile/core/services/device-file.service.ts","ng://@wm/mobile/core/services/device-file-download.service.ts","ng://@wm/mobile/core/services/device-file-cache.service.ts","ng://@wm/mobile/core/services/device-file-opener.service.ts","ng://@wm/mobile/core/services/device.service.ts","ng://@wm/mobile/core/services/network.service.ts","ng://@wm/mobile/core/core.module.ts","ng://@wm/mobile/core/services/device-file-upload.service.ts","ng://@wm/mobile/core/services/ext-app-message.service.ts","ng://@wm/mobile/core/index.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { AppVersion } from '@ionic-native/app-version';\nimport { File } from '@ionic-native/file';\n\nimport { isAndroid, noop } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const _;\ndeclare const cordova;\ndeclare const resolveLocalFileSystemURL;\ndeclare const FileReader;\n\nexport enum FileType {\n    AUDIO = 'AUDIO',\n    DOCUMENT = 'DOCUMENT',\n    IMAGE = 'IMAGE',\n    VIDEO = 'VIDEO'\n}\n\nconst IMAGE_EXTENSIONS = ['gif', 'jpg', 'png', 'svg', 'webp', 'jpeg', 'jif', 'jfif', 'jfi'],\n    VIDEO_EXTENSIONS = ['mp4', 'mpg', 'avi', 'wma', 'mp2', '3gp', '3g2', 'm4p', 'm4v', 'mpg', 'fiv'],\n    AUDIO_EXTENSIONS = ['mp3', 'm4p', 'aiff', 'aa', 'aax', 'wma'];\n\nconst APP_FOLDER_STRUCTURE = [{\n    name : '{APP_NAME}',\n    children : [{\n        name : 'Media',\n        children : [\n            {\n                name : '{APP_NAME} Images',\n                fileType : FileType.IMAGE\n            },\n            {\n                name : '{APP_NAME} Audio',\n                fileType : FileType.AUDIO\n            },\n            {\n                name : '{APP_NAME} Vedios',\n                fileType : FileType.VIDEO\n            },\n            {\n                name : '{APP_NAME} Documents',\n                fileType : FileType.DOCUMENT\n            }\n        ]\n    }]\n}];\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileService implements IDeviceStartUpService {\n\n    public serviceName = DeviceFileService.name;\n\n    private _appName: string;\n    private _fileTypeVsPathMap = {\n        'temporary' : {},\n        'persistent' : {}\n    };\n    private _uploadDir: string;\n\n    constructor(private cordovaAppVersion: AppVersion, private cordovaFile: File) {\n\n    }\n\n    public addMediaToGallery(filePath: string): Promise<void> {\n        if (isAndroid() && this.isPersistentType(filePath)) {\n            return new Promise((resolve, reject) => {\n                cordova.plugins.MediaScannerPlugin.scanFile(filePath, resolve, reject);\n            });\n        }\n        return Promise.resolve();\n    }\n\n    public appendToFileName(fileName: string, attachment?: string): string {\n        let splits;\n        attachment = attachment || '_' + _.now();\n        fileName = fileName || 'noname';\n        splits = fileName.split('.');\n        if (splits.length > 1) {\n            splits[splits.length - 2] = splits[splits.length - 2] + attachment;\n            return splits.join('.');\n        }\n        return fileName + attachment;\n    }\n\n    public clearTemporaryStorage(): Promise<any> {\n        return this.cordovaFile.removeRecursively(this.getTemporaryRootPath() + this._appName + '/', 'Media');\n    }\n\n    public copy(persistent: boolean, sourceFilePath: string) {\n        const sourceFilename = sourceFilePath.split('/').pop(),\n            destFolder = this.findFolderPath(persistent, sourceFilename),\n            sourceFolder = sourceFilePath.substring(0, sourceFilePath.lastIndexOf('/'));\n        return this.newFileName(destFolder, sourceFilename)\n            .then( destFilename => this.cordovaFile.copyFile(sourceFolder, sourceFilename, destFolder, destFilename)\n                .then(() => destFolder + destFilename));\n    }\n\n    public findFolderPath(persistent: boolean, fileName: string) {\n        const typeMap = persistent ? this._fileTypeVsPathMap.persistent : this._fileTypeVsPathMap.temporary,\n            fileType = this.findFileType(fileName);\n        return typeMap[fileType] || typeMap[FileType.DOCUMENT];\n    }\n\n    public getPersistentRootPath(): string {\n        return cordova.file.dataDirectory;\n    }\n\n    public getTemporaryRootPath(): string {\n        return cordova.file.cacheDirectory;\n    }\n\n    public getUploadDirectory(): string {\n        return this._uploadDir;\n    }\n\n    public isPersistentType(filePath: string): boolean {\n        return filePath.startsWith(this.getPersistentRootPath());\n    }\n\n    public isValidPath(filePath: string): Promise<string> {\n        let folder, fileName;\n        if (!filePath) {\n            return Promise.reject('File path is required');\n        }\n        folder = filePath.substring(0, filePath.lastIndexOf('/') + 1);\n        fileName = filePath.split('/').pop();\n        return this.cordovaFile.checkFile(folder, fileName)\n            .then(() => filePath);\n    }\n\n    public listFiles(folder: string, search: string | RegExp): Promise<Map<string, any>[]> {\n        return new Promise((resolve, reject) => {\n            resolveLocalFileSystemURL(folder, directory => {\n                if (!directory.files) {\n                    directory.createReader().readEntries(entries => {\n                        if (search) {\n                            entries = entries.filter(e => e.name.match(search));\n                        }\n                        entries = entries.map( e => {\n                            return {\n                                name : e.name,\n                                isDirectory : e.isDirectory,\n                                path : e.nativeURL\n                            };\n                        });\n                        resolve(entries);\n                    }, reject);\n                } else {\n                    resolve([]);\n                }\n            }, reject);\n        });\n    }\n\n    public newFileName(folder: string, fileName: string): Promise<string> {\n        return this.cordovaFile.checkFile(folder, fileName)\n            .then(() => {\n                const extIndex = fileName.lastIndexOf('.');\n                if (extIndex > 0) {\n                    fileName = fileName.substring(0, extIndex) + '_' + _.now() + '.' + fileName.substring(extIndex + 1);\n                } else {\n                    fileName = fileName + '_' + _.now();\n                }\n                return this.newFileName(folder, fileName);\n            }, () => fileName);\n    }\n\n    public removeFile(filePath: string): Promise<any> {\n        const i = filePath.lastIndexOf('/'),\n            dir = filePath.substring(0, i),\n            file = filePath.substring(i + 1);\n        return this.cordovaFile.removeFile(dir, file);\n    }\n\n    /**\n     * removes the directory at the specified location.\n     *\n     * @param dirPath absolute path of directory\n     */\n    public removeDir(dirPath: string): Promise<any> {\n        const i = dirPath.lastIndexOf('/'),\n            parentdir = dirPath.substring(0, i + 1),\n            dir = dirPath.substring(i + 1),\n            movedDir = dir + _.now();\n        return this.cordovaFile.checkDir(parentdir, dir)\n            .then(() => {\n                /**\n                 * If folder is remove directly without moving, then INVALID_MODIFICATION_ERR is thrown in android\n                 * when a copy operation is done with the same directory name. To avoid this, directory will be moved\n                 * first and removed.\n                 */\n                return this.cordovaFile.moveDir(parentdir, dir, parentdir, movedDir)\n                    .then(() => this.cordovaFile.removeDir(parentdir, movedDir));\n            }).catch(noop);\n    }\n\n    public start(): Promise<any> {\n        /**\n         * Default READ_CHUNK_SIZE is 256 Kb. But with that setting readJson method is failing. This is an issue\n         * with cordova file plugin. So, increasing it to 512 Kb to read large database schema files (>256 Kb).\n         */\n        FileReader.READ_CHUNK_SIZE = 512 * 1024;\n        return new Promise((resolve, reject) => {\n            this.cordovaAppVersion.getAppName().then(appName => {\n                const promises = [];\n                this._appName = appName;\n                promises.push(this.createFolderIfNotExists(this.getTemporaryRootPath(),\n                    APP_FOLDER_STRUCTURE,\n                    this._fileTypeVsPathMap.temporary));\n                promises.push(this.createFolderIfNotExists(this.getPersistentRootPath(),\n                    APP_FOLDER_STRUCTURE,\n                    this._fileTypeVsPathMap.persistent));\n                promises.push(this.setupUploadDirectory());\n                return Promise.all(promises);\n            }).then(() => {\n                if (isAndroid()) {\n                    // this is necessary to prevent multiple file permission popup.\n                    return this.cordovaFile.readAsText(cordova.file.externalRootDirectory, 'random-file-for-permission').catch(noop);\n                }\n            }).then(resolve, reject);\n        });\n    }\n\n    private createFolderIfNotExists(parent: string, folders, fileTypeLocationMap) {\n        const childPromises = [];\n        if (folders) {\n            folders.forEach(folder => {\n                let folderPath;\n                folder.name = folder.name.replace('{APP_NAME}', this._appName);\n                folderPath = parent + folder.name + '/';\n                if (folder.fileType && !fileTypeLocationMap[folder.fileType]) {\n                    fileTypeLocationMap[folder.fileType] = folderPath;\n                }\n                const p = this.cordovaFile.createDir(parent, folder.name, false)\n                    .then(() => this.createFolderIfNotExists(folderPath, folder.children, fileTypeLocationMap),\n                        () => this.createFolderIfNotExists(folderPath, folder.children, fileTypeLocationMap));\n                childPromises.push(p);\n            });\n        }\n        if (childPromises.length > 0) {\n            return Promise.all(childPromises);\n        }\n    }\n\n    private findFileType(fileName) {\n        let extension;\n        if (fileName.indexOf('.') > 0) {\n            extension = fileName.split('.').pop().toLowerCase();\n            if (IMAGE_EXTENSIONS.some(a => a === extension)) {\n                return FileType.IMAGE;\n            }\n            if (VIDEO_EXTENSIONS.some(a => a === extension)) {\n                return FileType.VIDEO;\n            }\n            if (AUDIO_EXTENSIONS.some(a => a === extension)) {\n                return FileType.AUDIO;\n            }\n        }\n        return FileType.DOCUMENT;\n    }\n\n    private setupUploadDirectory() {\n        const uploadsDirName = 'uploads',\n            appDir = cordova.file.dataDirectory;\n        return this.cordovaFile.checkDir(appDir, uploadsDirName)\n            .then(() => this._uploadDir = appDir + uploadsDirName,\n                () => this.cordovaFile.createDir(appDir, uploadsDirName, true)\n                    .then(() => this._uploadDir = appDir + uploadsDirName));\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { File } from '@ionic-native/file';\nimport { Observer } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { FileExtensionFromMimePipe } from '@wm/components';\n\nimport { DeviceFileService } from './device-file.service';\n\nconst MAX_CONCURRENT_DOWNLOADS = 2;\ndeclare const _;\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileDownloadService {\n\n    private _downloadQueue = [];\n    private _concurrentDownloads = 0;\n\n    constructor(\n        private cordovaFile: File,\n        private http: HttpClient,\n        private deviceFileService: DeviceFileService,\n        public fileExtensionFromMimePipe: FileExtensionFromMimePipe) {\n\n    }\n\n    public download(url: string, isPersistent: boolean, destFolder?: string, destFile?: string, progressObserver?: Observer<any>): Promise<string> {\n        return this.addToDownloadQueue(url, isPersistent, destFolder, destFile, progressObserver);\n    }\n\n    // Adds to download request queue\n    private addToDownloadQueue(url: string, isPersistent: boolean, destFolder?: string, destFile?: string, progressObserver?: Observer<any>): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            this._downloadQueue.push({\n                url: url,\n                isPersistent: isPersistent,\n                destFolder: destFolder,\n                destFile: destFile,\n                resolve: resolve,\n                reject: reject,\n                progressObserver: progressObserver\n            });\n            if (this._concurrentDownloads < MAX_CONCURRENT_DOWNLOADS) {\n                this.downloadNext();\n            }\n        });\n    }\n\n    private downloadNext(): void {\n        if (this._downloadQueue.length > 0) {\n            const req = this._downloadQueue.shift();\n            this.downloadFile(req).then(filePath => {\n                req.resolve(filePath);\n                this.downloadNext();\n            }, () => {\n                req.reject();\n                this.downloadNext();\n            });\n        }\n    }\n\n    // Start processing a download request\n    private downloadFile(req): Promise<string> {\n        let filePath, blob;\n        this._concurrentDownloads++;\n\n        return this.sendHttpRequest(req.url, req.progressObserver).then((e) => {\n            blob = (e as HttpResponse<Blob>).body;\n            return this.getFileName(e, req, blob.type);\n        }).then((fileName) => {\n            if (!req.destFolder) {\n                req.destFolder = this.deviceFileService.findFolderPath(req.isPersistent, fileName);\n            }\n            filePath = req.destFolder + fileName;\n            return this.cordovaFile.writeFile(req.destFolder, fileName, blob);\n        }).then(() => {\n            this._concurrentDownloads--;\n            return filePath;\n        }, (response) => {\n            this._concurrentDownloads--;\n            this.cordovaFile.removeFile(req.destFolder, req.destFile);\n            return Promise.reject(`Failed to downloaded  ${req.url} with error ${JSON.stringify(response)}`);\n        });\n    }\n\n    /**\n     * Returns the filename\n     * 1. if filename exists just return\n     * 2. retrieve the filename from response headers i.e. content-disposition\n     * 3. pick the filename from the end of the url\n     * If filename doesnt contain the extension then extract using mimeType.\n     * Generates newFileName if filename already exists.\n     * @param response, download file response\n     * @param req, download request params\n     * @param mimeType mime type of file\n     * @returns {Promise<string>}\n     */\n    private getFileName(response, req, mimeType) {\n        const disposition = response.headers.get('Content-Disposition');\n        let filename = req.destFile;\n        if (!filename && disposition && disposition.indexOf('attachment') !== -1) {\n            const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            const matches = filenameRegex.exec(disposition);\n            if (matches !== null && matches[1]) {\n                filename = matches[1].replace(/['\"]/g, '');\n            }\n        }\n        if (!filename) {\n            filename = req.url.split('?')[0];\n            filename = filename.split('/').pop();\n        }\n\n        let fileExtension;\n        if (mimeType) {\n            fileExtension = this.fileExtensionFromMimePipe.transform(mimeType);\n        }\n        let hasFileExtension;\n        // one or more file extensions can have same mimeType then loop over the file extensions.\n        if (_.isArray(fileExtension)) {\n            hasFileExtension = _.find(fileExtension, extension => _.endsWith(filename, extension));\n        }\n        if (!hasFileExtension && !_.endsWith(filename, fileExtension)) {\n            filename = filename + fileExtension;\n        }\n\n        const folder = req.destFolder || this.deviceFileService.findFolderPath(req.isPersistent, filename);\n        return this.deviceFileService.newFileName(folder, filename);\n    }\n\n    private sendHttpRequest(url: string, progressObserver: Observer<HttpEvent<any>>): Promise<HttpResponse<any>> {\n        const req = new HttpRequest('GET', url, {\n            responseType: 'blob',\n            reportProgress: progressObserver != null\n        });\n        return this.http.request(req)\n            .pipe(\n                map(e => {\n                    if (progressObserver && progressObserver.next && e.type === HttpEventType.DownloadProgress) {\n                        progressObserver.next(e);\n                    }\n                    return e;\n                }),\n                filter(e => e.type === HttpEventType.Response),\n                map( e => {\n                    if (progressObserver && progressObserver.complete) {\n                        progressObserver.complete();\n                    }\n                    return (e as HttpResponse<any>);\n                })\n            )\n            .toPromise();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\n\nimport { noop } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\nimport { DeviceFileService } from './device-file.service';\nimport { DeviceFileDownloadService } from './device-file-download.service';\n\ndeclare const cordova;\n\nconst CACHE_FILE_INDEX_NAME = 'appCache.json';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileCacheService implements IDeviceStartUpService {\n\n    public serviceName = DeviceFileCacheService.name;\n\n    private _cacheIndex = {};\n    private _writing;\n    private _saveCache;\n\n    public constructor(private cordovaFile: File,\n       private fileService: DeviceFileService,\n       private downloadService: DeviceFileDownloadService) {\n\n    }\n\n    public addEntry(url, filepath): void {\n        this._cacheIndex[url] = filepath;\n        this.writeCacheIndexToFile();\n    }\n\n    public getLocalPath(url: string, downloadIfNotExists: boolean, isPersistent: boolean): Promise<string> {\n        const filePath = this._cacheIndex[url];\n        return this.fileService.isValidPath(filePath)\n                .catch(() => {\n                    delete this._cacheIndex[url];\n                    if (downloadIfNotExists) {\n                        return this.download(url, isPersistent);\n                    } else {\n                        Promise.reject('No cache entry for ' + url);\n                    }\n                });\n    }\n\n    public invalidateCache(): void {\n        this._cacheIndex = {};\n        this.writeCacheIndexToFile();\n        this.fileService.clearTemporaryStorage();\n    }\n\n    public start(): Promise<void> {\n        return this.cordovaFile.readAsText(cordova.file.dataDirectory, CACHE_FILE_INDEX_NAME)\n            .then(content => {\n                this._cacheIndex = JSON.parse(content);\n            }, noop);\n    }\n\n    private download(url: string, isPersistent: boolean): Promise<string> {\n        return this.downloadService.download(url, isPersistent)\n            .then(filepath => {\n                this._cacheIndex[url] = filepath;\n                this.writeCacheIndexToFile();\n                return filepath;\n            });\n    }\n\n    private writeCacheIndexToFile(): void {\n        if (!this._writing) {\n            this._writing = true;\n            this.cordovaFile.writeFile(cordova.file.dataDirectory, CACHE_FILE_INDEX_NAME, JSON.stringify(this._cacheIndex),\n                {\n                    replace: true\n                })\n                .catch(noop)\n                .then(() => {\n                    if (this._saveCache) {\n                        setTimeout(() => {\n                            this._writing = false;\n                            this._saveCache = false;\n                            this.writeCacheIndexToFile();\n                        }, 5000);\n                    } else {\n                        this._writing = false;\n                    }\n                });\n        } else {\n            this._saveCache = true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\nimport { FileOpener } from '@ionic-native/file-opener';\n\nimport { isAndroid, isIos, noop } from '@wm/core';\n\nimport { DeviceFileCacheService } from './device-file-cache.service';\nimport { DeviceFileDownloadService } from './device-file-download.service';\nimport { DeviceFileService } from './device-file.service';\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const cordova;\ndeclare const _;\ndeclare const resolveLocalFileSystemURL;\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileOpenerService implements IDeviceStartUpService {\n\n    public serviceName = DeviceFileOpenerService.name;\n\n    private _downloadsFolder;\n\n    constructor(private cordovaFile: File,\n                private cordovaFileOpener: FileOpener,\n                private fileService: DeviceFileService,\n                private cacheService: DeviceFileCacheService,\n                private downloadService: DeviceFileDownloadService) {\n\n    }\n\n    // this method returns the mime type of file from the filePath.\n    public getFileMimeType(filePath): Promise<any> {\n        return new Promise<any> ((resolve) => {\n            // Read the file entry from the file URL\n            resolveLocalFileSystemURL(filePath, fileEntry => {\n                fileEntry.file(metadata => {\n                    resolve(metadata.type);\n                });\n            });\n        });\n    }\n\n    public openRemoteFile(url: string, extension: string, fileName?: string): Promise<void> {\n        return this.getLocalPath(url, extension, fileName)\n            .then(filePath => {\n                return this.getFileMimeType(filePath).then(type => {\n                    return this.cordovaFileOpener.open(filePath, type);\n                });\n            });\n    }\n\n    public start(): Promise<void> {\n        let downloadsParent;\n        if (isAndroid()) {\n            downloadsParent = cordova.file.externalCacheDirectory;\n        } else if (isIos()) {\n            downloadsParent = cordova.file.documentsDirectory + 'NoCloud/';\n        } else {\n            downloadsParent = cordova.file.dataDirectory;\n        }\n        return this.cordovaFile.createDir(downloadsParent, 'downloads', false)\n            .catch(noop)\n            .then(() => {\n                this._downloadsFolder = downloadsParent + 'downloads/';\n            });\n    }\n\n    private generateFileName(url: string, extension: string): string {\n        let fileName = url.split('?')[0];\n        fileName = fileName.split('/').pop();\n        fileName = this.fileService.appendToFileName(fileName, '' + _.now());\n        if (extension) {\n            return fileName.split('.')[0] + '.' + extension;\n        }\n        return fileName;\n    }\n\n    private getLocalPath(url: string, extension?: string, filename?: string): Promise<string> {\n        return new Promise( (resolve, reject) => {\n            return this.cacheService.getLocalPath(url, false, false)\n                    .then( filePath => {\n                        let fileName, i, fromDir, fromFile;\n                        // Is it part of downloaded folder.\n                        if (filePath.startsWith(this._downloadsFolder)) {\n                            resolve(filePath);\n                        } else {\n                            fileName = filename || this.generateFileName(url, extension);\n                            i = filePath.lastIndexOf('/');\n                            fromDir = filePath.substring(0, i);\n                            fromFile = filePath.substring(i + 1);\n                            this.cordovaFile.copyFile(fromDir, fromFile, this._downloadsFolder, fileName)\n                                .then(() => {\n                                    const newFilePath = this._downloadsFolder + fileName;\n                                    this.cacheService.addEntry(url, newFilePath);\n                                    resolve(newFilePath);\n                                });\n                        }\n                    }).catch(() => {\n                        this.downloadService.download(url, false, this._downloadsFolder, filename)\n                            .then(filePath => {\n                                this.cacheService.addEntry(url, filePath);\n                                resolve(filePath);\n                            }, reject);\n                    });\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\n\nimport { $appDigest, hasCordova, noop } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const cordova, _;\n\nconst REGISTRY_FILE_NAME = 'registry.info';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceService {\n\n    private _registry = {};\n    private _isReady = false;\n    private _whenReadyPromises = [];\n    private _backBtnTapListeners = [];\n    private _startUpServices: IDeviceStartUpService[] = [];\n\n    public constructor(private file: File) {\n        const maxWaitTime = 10;\n        setTimeout(() => {\n            if (!this._isReady) {\n                console.warn(`Device is not ready even after ${maxWaitTime} seconds`);\n                console.warn('Waiting For %O', this._startUpServices.map(i => i.serviceName));\n            }\n        }, maxWaitTime * 1000);\n        document.addEventListener('backbutton', this.executeBackTapListeners.bind(this));\n    }\n\n    public executeBackTapListeners($event) {\n        _.forEach(this._backBtnTapListeners, fn => {\n            return fn($event) !== false;\n        });\n        // explicitly applying the digest cycle as the backbutton listener is not rendering the page content.\n        // This is because zone is not run (there is no change detection)\n        // https://weblogs.thinktecture.com/thomas/2017/02/cordova-vs-zonejs-or-why-is-angulars-document-event-listener-not-in-a-zone.html\n        $appDigest();\n    }\n\n    public addStartUpService(service: IDeviceStartUpService) {\n        this._startUpServices.push(service);\n    }\n\n    public onBackButtonTap(fn: ($event) => boolean) {\n        this._backBtnTapListeners.unshift(fn);\n        return () => {\n            const i = this._backBtnTapListeners.indexOf(fn);\n            if (i >= 0) {\n                this._backBtnTapListeners.splice(i, 1);\n            }\n        };\n    }\n\n    public start() {\n        if (this._isReady || this._startUpServices.length === 0) {\n            this._isReady = true;\n            return Promise.resolve();\n        } else {\n            return new Promise((resolve) => {\n                if (hasCordova()) {\n                    document.addEventListener('deviceready', () => resolve(), false);\n                } else {\n                    resolve();\n                }\n            }).then(() => {\n                if (window['cordova']) {\n                    return this.file.readAsText(cordova.file.dataDirectory, REGISTRY_FILE_NAME)\n                        .then(content =>  this._registry = JSON.parse(content), noop);\n                }\n            }).then(() => {\n                return Promise.all(this._startUpServices.map(s => {\n                    return s.start().catch((error) => {\n                        console.error('%s failed to start due to: %O', s.serviceName, error);\n                        return Promise.reject(error);\n                    });\n                }));\n            }).then(() => {\n                window['wmDeviceReady'] = true;\n                document.dispatchEvent(new CustomEvent('wmDeviceReady'));\n                this._startUpServices.length = 0;\n                this._whenReadyPromises.forEach(fn => fn());\n                this._isReady = true;\n            });\n        }\n    }\n\n    public whenReady(): Promise<void> {\n        if (this._isReady) {\n            return Promise.resolve();\n        } else {\n            return new Promise<void>((resolve) => {\n                this._whenReadyPromises.push(resolve);\n            });\n        }\n    }\n\n    /**\n     * @returns {Promise<number>} promise resolved with the app build time\n     */\n    public getAppBuildTime(): Promise<number> {\n        return this.file.readAsText(cordova.file.applicationDirectory + 'www', 'config.json')\n            .then(appConfig => (JSON.parse(appConfig).buildTime) as number);\n    }\n\n    /**\n     * Stores an entry that survives app restarts and updates.\n     *\n     * @param {string} key\n     * @param {Object} value\n     * @returns {Promise<any>}\n     */\n    public storeEntry(key: string, value: Object): Promise<any> {\n        this._registry[key] = value;\n        return this.file.writeFile(cordova.file.dataDirectory,\n            REGISTRY_FILE_NAME,\n            JSON.stringify(this._registry),\n            { replace: true });\n    }\n\n    /**\n     * @param {string} key\n     * @returns {any} entry corresponding to the key\n     */\n    public getEntry(key: string): any {\n        return this._registry[key];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Network } from '@ionic-native/network';\n\nimport { App, getAbortableDefer, noop, retryIfFails } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const _, cordova, Connection, navigator;\n\nconst AUTO_CONNECT_KEY = 'WM.NetworkService._autoConnect',\n    IS_CONNECTED_KEY = 'WM.NetworkService.isConnected',\n    excludedList = [new RegExp('/wmProperties.js')],\n    originalXMLHttpRequestOpen = XMLHttpRequest.prototype.open,\n    originalXMLHttpRequestSend = XMLHttpRequest.prototype.send,\n    networkState = {\n        isConnecting : false,\n        isConnected : localStorage.getItem(IS_CONNECTED_KEY) === 'true',\n        isNetworkAvailable : true,\n        isServiceAvailable : true\n    };\n\n/**\n * If server is not connected and url does not match the unblock list of regular expressions,\n * then this function return true. Otherwise, return false.\n * @param url\n * @returns {boolean}\n */\nconst blockUrl = url => {\n    let block = !networkState.isConnected && _.startsWith(url, 'http');\n    if (block) {\n        block = !_.find(excludedList, regExp => regExp.test(url));\n    }\n    return block;\n};\n\n// Intercept all XHR calls\nXMLHttpRequest.prototype.open = function (method: string, url: string, async: boolean = true, user?: string, password?: string) {\n    if (blockUrl(url)) {\n        const urlSplits = url.split('://');\n        const pathIndex = urlSplits[1].indexOf('/');\n        urlSplits[1] = 'localhost' + (pathIndex > 0 ? urlSplits[1].substr(pathIndex) : '/');\n        url = urlSplits.join('://');\n    }\n    return originalXMLHttpRequestOpen.apply(this, [method, url, async, user, password]);\n};\n\n@Injectable({ providedIn: 'root' })\nexport class NetworkService implements IDeviceStartUpService {\n\n    public serviceName = NetworkService.name;\n\n    private _autoConnect = localStorage.getItem(AUTO_CONNECT_KEY) !== 'false';\n    private _lastKnownNetworkState: any;\n    private _isCheckingServer = false;\n\n    constructor(private httpClient: HttpClient, private app: App, private network: Network) {\n    }\n\n    /**\n     * This method attempts to connect app to the server and returns a promise that will be resolved with\n     * a boolean value based on the operation result.\n     *\n     * @returns {object} promise\n     */\n    public connect(): Promise<boolean> {\n        this.setAutoConnect(true);\n        return this.tryToConnect();\n    }\n\n    /**\n     * When the auto connect is enabled, then app is automatically connected  whenever server is available.\n     * Every time when app goes offline, auto connect is enabled. Before app coming to online, one can disable\n     * the auto connection flow using this method.\n     */\n    public disableAutoConnect = () => this.setAutoConnect(false);\n\n    /**\n     * This method disconnects the app from the server and returns a promise that will be resolved with\n     * a boolean value based on the operation result. Use connect method to reconnect.\n     *\n     * @returns {object} promise\n     */\n    public disconnect(): Promise<boolean> {\n        const p = this.tryToDisconnect();\n        this.disableAutoConnect();\n        return p;\n    }\n\n    /**\n     * If pingServer is true, then it returns a promise that will be resolved with boolean based on service availability\n     * check.If pingServer is false, returns a boolean value based on the last known service availability.\n     *\n     * @returns {boolean} if pingServer is true, then a promise is returned. Otherwise, a boolean value.\n     */\n    public isAvailable(pingServer = false): boolean | Promise<boolean> {\n        if (pingServer) {\n            return this.isServiceAvailable().then(() => {\n                this.checkForNetworkStateChange();\n                return networkState.isServiceAvailable;\n            });\n        }\n        return networkState.isServiceAvailable;\n    }\n\n    /**\n     * Returns true, if app is connected to server. Otherwise, returns false.\n     *\n     * @returns {boolean} Returns true, if app is connected to server. Otherwise, returns false.\n     */\n    public isConnected = () => {\n        // checking for connection type.\n        if (_.get(navigator, 'connection') && navigator.connection.type) {\n            networkState.isConnected = networkState.isConnected && (navigator.connection.type !== 'none');\n        }\n        this.checkForNetworkStateChange();\n        return networkState.isConnected;\n    }\n\n    /**\n     * Returns true if app is trying to connect to server. Otherwise, returns false.\n     *\n     * @returns {boolean} Returns true if app is trying to connect to server. Otherwise, returns false.\n     */\n    public isConnecting = () => networkState.isConnecting;\n\n    /**\n     * This method returns a promise that is resolved when connection is established with server.\n     *\n     * @returns {object} promise a promise that is resolved with the returned object of fn\n     */\n    public onConnect() {\n        let defer,\n            cancelSubscription;\n        if (this.isConnected()) {\n            return Promise.resolve();\n        }\n        defer = getAbortableDefer();\n        cancelSubscription = this.app.subscribe('onNetworkStateChange', () => {\n            if (this.isConnected()) {\n                defer.resolve(true);\n                cancelSubscription();\n            }\n        });\n        defer.promise.catch(function () {\n            cancelSubscription();\n        });\n        return defer.promise;\n    }\n\n    /**\n     * This is a util method. If fn cannot execute successfully and network lost connection, then the fn will\n     * be invoked when network is back. The returned can also be aborted.\n     *\n     * @param {function()} fn method to invoke.\n     * @returns {object} promise a promise that is resolved with the returned object of fn\n     */\n    public retryIfNetworkFails(fn) {\n        const defer = getAbortableDefer();\n        retryIfFails(fn, 0, 0, () => {\n            let onConnectPromise;\n            if (!this.isConnected()) {\n                onConnectPromise = this.onConnect();\n                defer.promise.catch(function () {\n                    onConnectPromise.abort();\n                });\n                return onConnectPromise;\n            }\n            return false;\n        }).then(defer.resolve, defer.reject);\n        return defer.promise;\n    }\n\n    public start(): Promise<any> {\n        if (window['cordova']) {\n            // Connection constant will be available only when network plugin is included.\n            if (window['Connection'] && navigator.connection) {\n                networkState.isNetworkAvailable = navigator.connection.type !== 'none';\n                networkState.isConnected = networkState.isNetworkAvailable && networkState.isConnected;\n                /*\n                 * When the device comes online, check is the service is available. If the service is available and auto\n                 * connect flag is true, then app is automatically connected to remote server.\n                 */\n                this.network.onConnect().subscribe(() => {\n                    networkState.isNetworkAvailable = true;\n                    this.tryToConnect().catch(noop);\n                });\n\n                /*\n                 *When device goes offline, then change the network state and emit that notifies about network state change.\n                 */\n                this.network.onDisconnect().subscribe(() => {\n                    networkState.isNetworkAvailable = false;\n                    networkState.isServiceAvailable = false;\n                    this.tryToDisconnect();\n                });\n\n                this.app.subscribe('onNetworkStateChange', (data) => {\n                    /**\n                     * If network is available and server is not available,then\n                     * try to connect when server is available.\n                     */\n                    if (data.isNetworkAvailable && !data.isServiceAvailable && !this._isCheckingServer) {\n                        this._isCheckingServer = true;\n                        this.checkForServiceAvailiblity().then(() => {\n                            this._isCheckingServer = false;\n                            this.connect();\n                        }, () => {\n                            this._isCheckingServer = false;\n                        });\n                    }\n                });\n            }\n        }\n        // to set the default n/w connection values.\n        return this.tryToConnect(true).catch(noop);\n    }\n\n    /**\n     * This function adds the given regular expression to the unblockList. Even app is in offline mode,\n     * the urls matching with the given regular expression are not blocked by NetworkService.\n     *\n     * @param {string} urlRegex regular expression\n     */\n    public unblock(urlRegex: string) {\n        excludedList.push(new RegExp(urlRegex));\n    }\n\n    private checkForNetworkStateChange() {\n        if (!_.isEqual(this._lastKnownNetworkState, networkState)) {\n            this._lastKnownNetworkState = _.clone(networkState);\n            this.app.notify('onNetworkStateChange', this._lastKnownNetworkState);\n        }\n    }\n\n    /**\n     * Returns a promise that is resolved when server is available.\n     * @returns {*}\n     */\n    private checkForServiceAvailiblity(): Promise<void> {\n        const maxTimeout = 4500;\n        return new Promise<void>(resolve => {\n            const intervalId = setInterval(() => {\n                if (networkState.isNetworkAvailable) {\n                    this.isServiceAvailable(maxTimeout).then(available => {\n                        if (available) {\n                            clearInterval(intervalId);\n                            resolve();\n                        }\n                    });\n                }\n            }, 5000);\n        });\n    }\n\n    /**\n     * Pings server to check whether server is available. Based on ping response network state is modified.\n     * @returns {*} a promise that resolved with true, if server responds with valid status.\n     * Otherwise, the promise is resolved with false.\n     */\n    private isServiceAvailable(maxTimeout?: number): Promise<boolean> {\n        return this.pingServer(maxTimeout).then(response => {\n            networkState.isServiceAvailable = response;\n            if (!networkState.isServiceAvailable) {\n                networkState.isConnecting = false;\n                networkState.isConnected = false;\n            }\n            return response;\n        });\n    }\n\n    /**\n     * Pings server\n     * @returns {*} a promise that resolved with true, if server responds with valid status.\n     * Otherwise, the promise is resolved with false.\n     * default timeout value is 1min.\n     */\n    private pingServer(maxTimeout = 60000): Promise<boolean> {\n        return new Promise<boolean>(resolve => {\n            const oReq = new XMLHttpRequest();\n            let baseURL = this.app.deployedUrl;\n            if (baseURL && !_.endsWith(baseURL, '/')) {\n                baseURL += '/';\n            } else {\n                baseURL = baseURL || '';\n            }\n\n            const timer = setTimeout(() => {\n                oReq.abort(); // abort request\n                resolve(false);\n            }, maxTimeout);\n\n            oReq.addEventListener('load', () => {\n                if (oReq.status === 200) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            });\n\n            oReq.addEventListener('error', () => resolve(false));\n            oReq.open('GET', baseURL + 'services/application/wmProperties.js?t=' + Date.now());\n            oReq.send();\n        });\n    }\n\n    private setAutoConnect(flag: boolean): void {\n        this._autoConnect = flag;\n        localStorage.setItem(AUTO_CONNECT_KEY, '' + flag);\n    }\n\n    /**\n     * Tries to connect to remote server. Network State will be changed based on the success of connection\n     * operation and emits an event notifying the network state change.\n     *\n     * @param silentMode {boolean} if true and connection is successful, then no event is emitted. Otherwise,\n     * events are emitted for network status change.\n     * @returns {*} a promise\n     */\n    private tryToConnect(silentMode = false): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.isServiceAvailable(5000).then(() => {\n                if (networkState.isServiceAvailable && this._autoConnect) {\n                    networkState.isConnecting = true;\n                    if (!silentMode) {\n                        this.checkForNetworkStateChange();\n                    }\n                    setTimeout(() => {\n                        networkState.isConnecting = false;\n                        networkState.isConnected = true;\n                        localStorage.setItem(IS_CONNECTED_KEY, '' + true);\n                        if (!silentMode) {\n                            this.checkForNetworkStateChange();\n                        }\n                        resolve(true);\n                    }, silentMode ? 0 : 5000);\n                } else {\n                    networkState.isConnecting = false;\n                    networkState.isConnected = false;\n                    localStorage.setItem(IS_CONNECTED_KEY, '' + false);\n                    reject();\n                    this.checkForNetworkStateChange();\n                }\n            });\n        });\n    }\n\n    private tryToDisconnect(): Promise<boolean> {\n        networkState.isConnected = false;\n        networkState.isConnecting = false;\n        this.checkForNetworkStateChange();\n        localStorage.setItem(IS_CONNECTED_KEY, '' + networkState.isConnected);\n        return Promise.resolve(networkState.isConnected);\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { hasCordova } from '@wm/core';\n\nimport { DeviceFileCacheService } from './services/device-file-cache.service';\nimport { DeviceFileOpenerService } from './services/device-file-opener.service';\nimport { DeviceFileService } from './services/device-file.service';\nimport { DeviceService } from './services/device.service';\nimport { NetworkService } from './services/network.service';\n\n@NgModule({\n    declarations: [],\n    imports: [],\n    providers: [\n        // add providers to mobile-runtime module.\n    ],\n    bootstrap: []\n})\nexport class MobileCoreModule {\n    static initialized = false;\n    // Startup services have to be added only once in the app life-cycle.\n    static addStartupServices(deviceService: DeviceService,\n                      deviceFileService: DeviceFileService,\n                      fileCacheService: DeviceFileCacheService,\n                      fileOpener: DeviceFileOpenerService,\n                      networkService: NetworkService) {\n        if (this.initialized) {\n            return;\n        }\n        deviceService.addStartUpService(networkService);\n        if (hasCordova()) {\n            deviceService.addStartUpService(deviceFileService);\n            deviceService.addStartUpService(fileCacheService);\n            deviceService.addStartUpService(fileOpener);\n        }\n        this.initialized = true;\n    }\n\n    constructor(\n        deviceService: DeviceService,\n        deviceFileService: DeviceFileService,\n        fileCacheService: DeviceFileCacheService,\n        fileOpener: DeviceFileOpenerService,\n        networkService: NetworkService\n    ) {\n        MobileCoreModule.addStartupServices(deviceService, deviceFileService,  fileCacheService, fileOpener, networkService);\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\n\nimport { convertToBlob } from '@wm/core';\n\ndeclare const _;\n\nexport interface IUploadResponse {\n    text: string;\n    response: any;\n    headers: (string) => string;\n}\n\nexport class UploadRequest {\n\n    private _files = [];\n    private _params = [];\n    private _headers = [];\n\n    constructor (private url: string, private cordovaFile: File) {\n\n    }\n\n    public addFile(name: string, path: string, filename: string): UploadRequest {\n        this._files.push({\n            name: name,\n            path: path,\n            fileName: filename\n        });\n        return this;\n    }\n\n    public addHeader(name: string, value: string): UploadRequest {\n        this._headers.push({\n            name: name,\n            value: value\n        });\n        return this;\n    }\n\n    public addParam(name: string, value: string): UploadRequest {\n        this._params.push({\n            name: name,\n            value: value\n        });\n        return this;\n    }\n\n    public post(): Promise<IUploadResponse> {\n        const formData = new FormData();\n        this._params.forEach( e => formData.append(e.name, e.value));\n        return Promise.all(this._files.map( e => {\n            if (e.path) {\n                return convertToBlob(e.path)\n                    .then(result => {\n                        return {\n                            name: e.name,\n                            fileName: e.fileName,\n                            blob: result.blob\n                        };\n                    });\n            }\n            return e;\n        })).then(params => {\n            params.forEach(e => formData.append(e.name, e.blob || e.path, e.fileName));\n            return new Promise<IUploadResponse>((resolve, reject) => {\n                const request = new XMLHttpRequest();\n                request.open('POST', this.url);\n                this._headers.forEach(e => request.setRequestHeader(e.name, e.value));\n                request.onload = () => {\n                    resolve({\n                        headers: (name: string) => request.getResponseHeader(name),\n                        response: request.response,\n                        text: request.responseText as string\n                    });\n                };\n                request.onerror = reject;\n                request.onabort = reject;\n                request.send(formData);\n            });\n        });\n    }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileUploadService {\n\n    constructor(private cordovaFile: File) {}\n\n    public upload(url: string, fileParamName: string, path: string, fileName?: string, params?: any, headers?: any): Promise<IUploadResponse> {\n        const req = new UploadRequest(url, this.cordovaFile)\n            .addFile(fileParamName, path, fileName);\n        _.forEach(params, (k, v) => req.addParam(k, v));\n        _.forEach(headers, (k, v) => req.addHeader(k, v));\n        return req.post();\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { App } from '@wm/core';\n\ndeclare const _;\n\ninterface Message {\n    address: string;\n    data: Map<string, string>;\n}\n\ninterface Handler {\n    pattern: string;\n    callback: (msg: string) => any;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ExtAppMessageService {\n\n    private handlers = [];\n\n    constructor(private app: App) {\n        document.addEventListener('externalAppMessageReceived', e => {\n            const message = (e['detail'].message) as Message;\n            this.handlers.forEach(handler => {\n                const matches = handler && message.address.match(handler.pattern);\n                if (matches && matches.length > 0) {\n                    handler.callBack(message);\n                }\n            });\n        });\n    }\n\n    /**\n     * adds a listener for a message whose address matches with the given regex pattern.\n     *\n     * @param {string} messageAddressPattern a regex pattern that is used to target messages to listen.\n     * @param {Function} listener function to invoke when message that matches regex is received.\n     *                  message received will be sent as first argument.\n     * @returns {Function} a function which removes the listener when invoked.\n     */\n    public subscribe(messageAddressPattern, listener: (msg: Message) => any) {\n        const handler = {\n            pattern : new RegExp(messageAddressPattern),\n            callBack : listener\n        };\n        this.handlers.push(handler);\n        return () => _.remove(this.handlers, handler);\n    }\n\n}\n\n(function (window, document) {\n    'use strict';\n    // listen app-to-app communication via url schemes\n    function subString(str, begin, end) {\n        end = end < 0 ? undefined : end;\n        return (str && begin >= 0 && str.length > begin && str.substring(begin, end)) || undefined;\n    }\n    function indexOf(str, pattern) {\n        return str && str.indexOf(pattern);\n    }\n    function extractData(url) {\n        const str = subString(url, indexOf(url, '?') + 1, indexOf(url, '#')),\n            data = {};\n        _.forEach(_.split(str, '&'), entry => {\n            const esplits = entry.split('=');\n            data[esplits[0]] = esplits[1];\n        });\n        return data;\n    }\n    function extractAddress(url) {\n        return subString(url, indexOf(url, '://') + 3, indexOf(url, '?'));\n    }\n    function createMessage(url) {\n        return {\n            'address': extractAddress(url),\n            'data': extractData(url)\n        };\n    }\n    window['handleOpenURL'] = function (url) {\n        const handleOpenURL = window['handleOpenURL'];\n        if (handleOpenURL.isReady && !_.startsWith(url, 'http')) {\n            const message = createMessage(url);\n            const e = new window['CustomEvent']('externalAppMessageReceived', {\n                'detail': {\n                    'message': message\n                }\n            });\n            document.dispatchEvent(e);\n        }\n        handleOpenURL.lastURL = url;\n    };\n}(window, document));\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["FileType","isAndroid","noop","Injectable","AppVersion","File","HttpRequest","map","HttpEventType","filter","HttpClient","FileExtensionFromMimePipe","isIos","FileOpener","$appDigest","hasCordova","getAbortableDefer","retryIfFails","App","Network","NgModule","convertToBlob"],"mappings":"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"}
