{"version":3,"file":"index.js.map","sources":["ng://@wm/mobile/core/services/device-file.service.ts","ng://@wm/mobile/core/services/device-file-download.service.ts","ng://@wm/mobile/core/services/device-file-cache.service.ts","ng://@wm/mobile/core/services/device-file-opener.service.ts","ng://@wm/mobile/core/services/device.service.ts","ng://@wm/mobile/core/services/network.service.ts","ng://@wm/mobile/core/core.module.ts","ng://@wm/mobile/core/services/device-file-upload.service.ts","ng://@wm/mobile/core/services/ext-app-message.service.ts","ng://@wm/mobile/core/index.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { AppVersion } from '@ionic-native/app-version';\nimport { File } from '@ionic-native/file';\n\nimport { isAndroid, noop } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const _;\ndeclare const cordova;\ndeclare const resolveLocalFileSystemURL;\ndeclare const FileReader;\n\nexport enum FileType {\n    AUDIO = 'AUDIO',\n    DOCUMENT = 'DOCUMENT',\n    IMAGE = 'IMAGE',\n    VIDEO = 'VIDEO'\n}\n\nconst IMAGE_EXTENSIONS = ['gif', 'jpg', 'png', 'svg', 'webp', 'jpeg', 'jif', 'jfif', 'jfi'],\n    VIDEO_EXTENSIONS = ['mp4', 'mpg', 'avi', 'wma', 'mp2', '3gp', '3g2', 'm4p', 'm4v', 'mpg', 'fiv'],\n    AUDIO_EXTENSIONS = ['mp3', 'm4p', 'aiff', 'aa', 'aax', 'wma'];\n\nconst APP_FOLDER_STRUCTURE = [{\n    name : '{APP_NAME}',\n    children : [{\n        name : 'Media',\n        children : [\n            {\n                name : '{APP_NAME} Images',\n                fileType : FileType.IMAGE\n            },\n            {\n                name : '{APP_NAME} Audio',\n                fileType : FileType.AUDIO\n            },\n            {\n                name : '{APP_NAME} Vedios',\n                fileType : FileType.VIDEO\n            },\n            {\n                name : '{APP_NAME} Documents',\n                fileType : FileType.DOCUMENT\n            }\n        ]\n    }]\n}];\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileService implements IDeviceStartUpService {\n\n    public serviceName = DeviceFileService.name;\n\n    private _appName: string;\n    private _fileTypeVsPathMap = {\n        'temporary' : {},\n        'persistent' : {}\n    };\n    private _uploadDir: string;\n\n    constructor(private cordovaAppVersion: AppVersion, private cordovaFile: File) {\n\n    }\n\n    public addMediaToGallery(filePath: string): Promise<void> {\n        if (isAndroid() && this.isPersistentType(filePath)) {\n            return new Promise((resolve, reject) => {\n                cordova.plugins.MediaScannerPlugin.scanFile(filePath, resolve, reject);\n            });\n        }\n        return Promise.resolve();\n    }\n\n    public appendToFileName(fileName: string, attachment?: string): string {\n        let splits;\n        attachment = attachment || '_' + _.now();\n        fileName = fileName || 'noname';\n        splits = fileName.split('.');\n        if (splits.length > 1) {\n            splits[splits.length - 2] = splits[splits.length - 2] + attachment;\n            return splits.join('.');\n        }\n        return fileName + attachment;\n    }\n\n    public clearTemporaryStorage(): Promise<any> {\n        return this.cordovaFile.removeRecursively(this.getTemporaryRootPath() + this._appName + '/', 'Media');\n    }\n\n    public copy(persistent: boolean, sourceFilePath: string) {\n        const sourceFilename = sourceFilePath.split('/').pop(),\n            destFolder = this.findFolderPath(persistent, sourceFilename),\n            sourceFolder = sourceFilePath.substring(0, sourceFilePath.lastIndexOf('/'));\n        return this.newFileName(destFolder, sourceFilename)\n            .then( destFilename => this.cordovaFile.copyFile(sourceFolder, sourceFilename, destFolder, destFilename)\n                .then(() => destFolder + destFilename));\n    }\n\n    public findFolderPath(persistent: boolean, fileName: string) {\n        const typeMap = persistent ? this._fileTypeVsPathMap.persistent : this._fileTypeVsPathMap.temporary,\n            fileType = this.findFileType(fileName);\n        return typeMap[fileType] || typeMap[FileType.DOCUMENT];\n    }\n\n    public getPersistentRootPath(): string {\n        return cordova.file.dataDirectory;\n    }\n\n    public getTemporaryRootPath(): string {\n        return cordova.file.cacheDirectory;\n    }\n\n    public getUploadDirectory(): string {\n        return this._uploadDir;\n    }\n\n    public isPersistentType(filePath: string): boolean {\n        return filePath.startsWith(this.getPersistentRootPath());\n    }\n\n    public isValidPath(filePath: string): Promise<string> {\n        let folder, fileName;\n        if (!filePath) {\n            return Promise.reject('File path is required');\n        }\n        folder = filePath.substring(0, filePath.lastIndexOf('/') + 1);\n        fileName = filePath.split('/').pop();\n        return this.cordovaFile.checkFile(folder, fileName)\n            .then(() => filePath);\n    }\n\n    public listFiles(folder: string, search: string | RegExp): Promise<Map<string, any>[]> {\n        return new Promise((resolve, reject) => {\n            resolveLocalFileSystemURL(folder, directory => {\n                if (!directory.files) {\n                    directory.createReader().readEntries(entries => {\n                        if (search) {\n                            entries = entries.filter(e => e.name.match(search));\n                        }\n                        entries = entries.map( e => {\n                            return {\n                                name : e.name,\n                                isDirectory : e.isDirectory,\n                                path : e.nativeURL\n                            };\n                        });\n                        resolve(entries);\n                    }, reject);\n                } else {\n                    resolve([]);\n                }\n            }, reject);\n        });\n    }\n\n    public newFileName(folder: string, fileName: string): Promise<string> {\n        return this.cordovaFile.checkFile(folder, fileName)\n            .then(() => {\n                const extIndex = fileName.lastIndexOf('.');\n                if (extIndex > 0) {\n                    fileName = fileName.substring(0, extIndex) + '_' + _.now() + '.' + fileName.substring(extIndex + 1);\n                } else {\n                    fileName = fileName + '_' + _.now();\n                }\n                return this.newFileName(folder, fileName);\n            }, () => fileName);\n    }\n\n    public removeFile(filePath: string): Promise<any> {\n        const i = filePath.lastIndexOf('/'),\n            dir = filePath.substring(0, i),\n            file = filePath.substring(i + 1);\n        return this.cordovaFile.removeFile(dir, file);\n    }\n\n    /**\n     * removes the directory at the specified location.\n     *\n     * @param dirPath absolute path of directory\n     */\n    public removeDir(dirPath: string): Promise<any> {\n        const i = dirPath.lastIndexOf('/'),\n            parentdir = dirPath.substring(0, i + 1),\n            dir = dirPath.substring(i + 1),\n            movedDir = dir + _.now();\n        return this.cordovaFile.checkDir(parentdir, dir)\n            .then(() => {\n                /**\n                 * If folder is remove directly without moving, then INVALID_MODIFICATION_ERR is thrown in android\n                 * when a copy operation is done with the same directory name. To avoid this, directory will be moved\n                 * first and removed.\n                 */\n                return this.cordovaFile.moveDir(parentdir, dir, parentdir, movedDir)\n                    .then(() => this.cordovaFile.removeDir(parentdir, movedDir));\n            }).catch(noop);\n    }\n\n    public start(): Promise<any> {\n        /**\n         * Default READ_CHUNK_SIZE is 256 Kb. But with that setting readJson method is failing. This is an issue\n         * with cordova file plugin. So, increasing it to 512 Kb to read large database schema files (>256 Kb).\n         */\n        FileReader.READ_CHUNK_SIZE = 512 * 1024;\n        return new Promise((resolve, reject) => {\n            this.cordovaAppVersion.getAppName().then(appName => {\n                const promises = [];\n                this._appName = appName;\n                promises.push(this.createFolderIfNotExists(this.getTemporaryRootPath(),\n                    APP_FOLDER_STRUCTURE,\n                    this._fileTypeVsPathMap.temporary));\n                promises.push(this.createFolderIfNotExists(this.getPersistentRootPath(),\n                    APP_FOLDER_STRUCTURE,\n                    this._fileTypeVsPathMap.persistent));\n                promises.push(this.setupUploadDirectory());\n                return Promise.all(promises);\n            }).then(() => {\n                if (isAndroid()) {\n                    // this is necessary to prevent multiple file permission popup.\n                    return this.cordovaFile.readAsText(cordova.file.externalRootDirectory, 'random-file-for-permission').catch(noop);\n                }\n            }).then(resolve, reject);\n        });\n    }\n\n    private createFolderIfNotExists(parent: string, folders, fileTypeLocationMap) {\n        const childPromises = [];\n        if (folders) {\n            folders.forEach(folder => {\n                let folderPath;\n                folder.name = folder.name.replace('{APP_NAME}', this._appName);\n                folderPath = parent + folder.name + '/';\n                if (folder.fileType && !fileTypeLocationMap[folder.fileType]) {\n                    fileTypeLocationMap[folder.fileType] = folderPath;\n                }\n                const p = this.cordovaFile.createDir(parent, folder.name, false)\n                    .then(() => this.createFolderIfNotExists(folderPath, folder.children, fileTypeLocationMap),\n                        () => this.createFolderIfNotExists(folderPath, folder.children, fileTypeLocationMap));\n                childPromises.push(p);\n            });\n        }\n        if (childPromises.length > 0) {\n            return Promise.all(childPromises);\n        }\n    }\n\n    private findFileType(fileName) {\n        let extension;\n        if (fileName.indexOf('.') > 0) {\n            extension = fileName.split('.').pop().toLowerCase();\n            if (IMAGE_EXTENSIONS.some(a => a === extension)) {\n                return FileType.IMAGE;\n            }\n            if (VIDEO_EXTENSIONS.some(a => a === extension)) {\n                return FileType.VIDEO;\n            }\n            if (AUDIO_EXTENSIONS.some(a => a === extension)) {\n                return FileType.AUDIO;\n            }\n        }\n        return FileType.DOCUMENT;\n    }\n\n    private setupUploadDirectory() {\n        const uploadsDirName = 'uploads',\n            appDir = cordova.file.dataDirectory;\n        return this.cordovaFile.checkDir(appDir, uploadsDirName)\n            .then(() => this._uploadDir = appDir + uploadsDirName,\n                () => this.cordovaFile.createDir(appDir, uploadsDirName, true)\n                    .then(() => this._uploadDir = appDir + uploadsDirName));\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { File } from '@ionic-native/file';\nimport { Observer } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { FileExtensionFromMimePipe } from '@wm/components';\n\nimport { DeviceFileService } from './device-file.service';\n\nconst MAX_CONCURRENT_DOWNLOADS = 2;\ndeclare const _;\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileDownloadService {\n\n    private _downloadQueue = [];\n    private _concurrentDownloads = 0;\n\n    constructor(\n        private cordovaFile: File,\n        private http: HttpClient,\n        private deviceFileService: DeviceFileService,\n        public fileExtensionFromMimePipe: FileExtensionFromMimePipe) {\n\n    }\n\n    public download(url: string, isPersistent: boolean, destFolder?: string, destFile?: string, progressObserver?: Observer<any>): Promise<string> {\n        return this.addToDownloadQueue(url, isPersistent, destFolder, destFile, progressObserver);\n    }\n\n    // Adds to download request queue\n    private addToDownloadQueue(url: string, isPersistent: boolean, destFolder?: string, destFile?: string, progressObserver?: Observer<any>): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            this._downloadQueue.push({\n                url: url,\n                isPersistent: isPersistent,\n                destFolder: destFolder,\n                destFile: destFile,\n                resolve: resolve,\n                reject: reject,\n                progressObserver: progressObserver\n            });\n            if (this._concurrentDownloads < MAX_CONCURRENT_DOWNLOADS) {\n                this.downloadNext();\n            }\n        });\n    }\n\n    private downloadNext(): void {\n        if (this._downloadQueue.length > 0) {\n            const req = this._downloadQueue.shift();\n            this.downloadFile(req).then(filePath => {\n                req.resolve(filePath);\n                this.downloadNext();\n            }, () => {\n                req.reject();\n                this.downloadNext();\n            });\n        }\n    }\n\n    // Start processing a download request\n    private downloadFile(req): Promise<string> {\n        let filePath, blob;\n        this._concurrentDownloads++;\n\n        return this.sendHttpRequest(req.url, req.progressObserver).then((e) => {\n            blob = (e as HttpResponse<Blob>).body;\n            return this.getFileName(e, req, blob.type);\n        }).then((fileName) => {\n            if (!req.destFolder) {\n                req.destFolder = this.deviceFileService.findFolderPath(req.isPersistent, fileName);\n            }\n            filePath = req.destFolder + fileName;\n            return this.cordovaFile.writeFile(req.destFolder, fileName, blob);\n        }).then(() => {\n            this._concurrentDownloads--;\n            return filePath;\n        }, (response) => {\n            this._concurrentDownloads--;\n            this.cordovaFile.removeFile(req.destFolder, req.destFile);\n            return Promise.reject(`Failed to downloaded  ${req.url} with error ${JSON.stringify(response)}`);\n        });\n    }\n\n    /**\n     * Returns the filename\n     * 1. if filename exists just return\n     * 2. retrieve the filename from response headers i.e. content-disposition\n     * 3. pick the filename from the end of the url\n     * If filename doesnt contain the extension then extract using mimeType.\n     * Generates newFileName if filename already exists.\n     * @param response, download file response\n     * @param req, download request params\n     * @param mimeType mime type of file\n     * @returns {Promise<string>}\n     */\n    private getFileName(response, req, mimeType) {\n        const disposition = response.headers.get('Content-Disposition');\n        let filename = req.destFile;\n        if (!filename && disposition && disposition.indexOf('attachment') !== -1) {\n            const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            const matches = filenameRegex.exec(disposition);\n            if (matches !== null && matches[1]) {\n                filename = matches[1].replace(/['\"]/g, '');\n            }\n        }\n        if (!filename) {\n            filename = req.url.split('?')[0];\n            filename = filename.split('/').pop();\n        }\n\n        let fileExtension;\n        if (mimeType) {\n            fileExtension = this.fileExtensionFromMimePipe.transform(mimeType);\n        }\n        let hasFileExtension;\n        // one or more file extensions can have same mimeType then loop over the file extensions.\n        if (_.isArray(fileExtension)) {\n            hasFileExtension = _.find(fileExtension, extension => _.endsWith(filename, extension));\n        }\n        if (!hasFileExtension && !_.endsWith(filename, fileExtension)) {\n            filename = filename + fileExtension;\n        }\n\n        const folder = req.destFolder || this.deviceFileService.findFolderPath(req.isPersistent, filename);\n        return this.deviceFileService.newFileName(folder, filename);\n    }\n\n    private sendHttpRequest(url: string, progressObserver: Observer<HttpEvent<any>>): Promise<HttpResponse<any>> {\n        const req = new HttpRequest('GET', url, {\n            responseType: 'blob',\n            reportProgress: progressObserver != null\n        });\n        return this.http.request(req)\n            .pipe(\n                map(e => {\n                    if (progressObserver && progressObserver.next && e.type === HttpEventType.DownloadProgress) {\n                        progressObserver.next(e);\n                    }\n                    return e;\n                }),\n                filter(e => e.type === HttpEventType.Response),\n                map( e => {\n                    if (progressObserver && progressObserver.complete) {\n                        progressObserver.complete();\n                    }\n                    return (e as HttpResponse<any>);\n                })\n            )\n            .toPromise();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\n\nimport { noop } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\nimport { DeviceFileService } from './device-file.service';\nimport { DeviceFileDownloadService } from './device-file-download.service';\n\ndeclare const cordova;\n\nconst CACHE_FILE_INDEX_NAME = 'appCache.json';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileCacheService implements IDeviceStartUpService {\n\n    public serviceName = DeviceFileCacheService.name;\n\n    private _cacheIndex = {};\n    private _writing;\n    private _saveCache;\n\n    public constructor(private cordovaFile: File,\n       private fileService: DeviceFileService,\n       private downloadService: DeviceFileDownloadService) {\n\n    }\n\n    public addEntry(url, filepath): void {\n        this._cacheIndex[url] = filepath;\n        this.writeCacheIndexToFile();\n    }\n\n    public getLocalPath(url: string, downloadIfNotExists: boolean, isPersistent: boolean): Promise<string> {\n        const filePath = this._cacheIndex[url];\n        return this.fileService.isValidPath(filePath)\n                .catch(() => {\n                    delete this._cacheIndex[url];\n                    if (downloadIfNotExists) {\n                        return this.download(url, isPersistent);\n                    } else {\n                        Promise.reject('No cache entry for ' + url);\n                    }\n                });\n    }\n\n    public invalidateCache(): void {\n        this._cacheIndex = {};\n        this.writeCacheIndexToFile();\n        this.fileService.clearTemporaryStorage();\n    }\n\n    public start(): Promise<void> {\n        return this.cordovaFile.readAsText(cordova.file.dataDirectory, CACHE_FILE_INDEX_NAME)\n            .then(content => {\n                this._cacheIndex = JSON.parse(content);\n            }, noop);\n    }\n\n    private download(url: string, isPersistent: boolean): Promise<string> {\n        return this.downloadService.download(url, isPersistent)\n            .then(filepath => {\n                this._cacheIndex[url] = filepath;\n                this.writeCacheIndexToFile();\n                return filepath;\n            });\n    }\n\n    private writeCacheIndexToFile(): void {\n        if (!this._writing) {\n            this._writing = true;\n            this.cordovaFile.writeFile(cordova.file.dataDirectory, CACHE_FILE_INDEX_NAME, JSON.stringify(this._cacheIndex),\n                {\n                    replace: true\n                })\n                .catch(noop)\n                .then(() => {\n                    if (this._saveCache) {\n                        setTimeout(() => {\n                            this._writing = false;\n                            this._saveCache = false;\n                            this.writeCacheIndexToFile();\n                        }, 5000);\n                    } else {\n                        this._writing = false;\n                    }\n                });\n        } else {\n            this._saveCache = true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\nimport { FileOpener } from '@ionic-native/file-opener';\n\nimport { isAndroid, isIos, noop } from '@wm/core';\n\nimport { DeviceFileCacheService } from './device-file-cache.service';\nimport { DeviceFileDownloadService } from './device-file-download.service';\nimport { DeviceFileService } from './device-file.service';\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const cordova;\ndeclare const _;\ndeclare const resolveLocalFileSystemURL;\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileOpenerService implements IDeviceStartUpService {\n\n    public serviceName = DeviceFileOpenerService.name;\n\n    private _downloadsFolder;\n\n    constructor(private cordovaFile: File,\n                private cordovaFileOpener: FileOpener,\n                private fileService: DeviceFileService,\n                private cacheService: DeviceFileCacheService,\n                private downloadService: DeviceFileDownloadService) {\n\n    }\n\n    // this method returns the mime type of file from the filePath.\n    public getFileMimeType(filePath): Promise<any> {\n        return new Promise<any> ((resolve) => {\n            // Read the file entry from the file URL\n            resolveLocalFileSystemURL(filePath, fileEntry => {\n                fileEntry.file(metadata => {\n                    resolve(metadata.type);\n                });\n            });\n        });\n    }\n\n    public openRemoteFile(url: string, extension: string, fileName?: string): Promise<void> {\n        return this.getLocalPath(url, extension, fileName)\n            .then(filePath => {\n                return this.getFileMimeType(filePath).then(type => {\n                    return this.cordovaFileOpener.open(filePath, type);\n                });\n            });\n    }\n\n    public start(): Promise<void> {\n        let downloadsParent;\n        if (isAndroid()) {\n            downloadsParent = cordova.file.externalCacheDirectory;\n        } else if (isIos()) {\n            downloadsParent = cordova.file.documentsDirectory + 'NoCloud/';\n        } else {\n            downloadsParent = cordova.file.dataDirectory;\n        }\n        return this.cordovaFile.createDir(downloadsParent, 'downloads', false)\n            .catch(noop)\n            .then(() => {\n                this._downloadsFolder = downloadsParent + 'downloads/';\n            });\n    }\n\n    private generateFileName(url: string, extension: string): string {\n        let fileName = url.split('?')[0];\n        fileName = fileName.split('/').pop();\n        fileName = this.fileService.appendToFileName(fileName, '' + _.now());\n        if (extension) {\n            return fileName.split('.')[0] + '.' + extension;\n        }\n        return fileName;\n    }\n\n    private getLocalPath(url: string, extension?: string, filename?: string): Promise<string> {\n        return new Promise( (resolve, reject) => {\n            return this.cacheService.getLocalPath(url, false, false)\n                    .then( filePath => {\n                        let fileName, i, fromDir, fromFile;\n                        // Is it part of downloaded folder.\n                        if (filePath.startsWith(this._downloadsFolder)) {\n                            resolve(filePath);\n                        } else {\n                            fileName = filename || this.generateFileName(url, extension);\n                            i = filePath.lastIndexOf('/');\n                            fromDir = filePath.substring(0, i);\n                            fromFile = filePath.substring(i + 1);\n                            this.cordovaFile.copyFile(fromDir, fromFile, this._downloadsFolder, fileName)\n                                .then(() => {\n                                    const newFilePath = this._downloadsFolder + fileName;\n                                    this.cacheService.addEntry(url, newFilePath);\n                                    resolve(newFilePath);\n                                });\n                        }\n                    }).catch(() => {\n                        this.downloadService.download(url, false, this._downloadsFolder, filename)\n                            .then(filePath => {\n                                this.cacheService.addEntry(url, filePath);\n                                resolve(filePath);\n                            }, reject);\n                    });\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\n\nimport { $appDigest, hasCordova, noop } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const cordova, _;\n\nconst REGISTRY_FILE_NAME = 'registry.info';\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceService {\n\n    private _registry = {};\n    private _isReady = false;\n    private _whenReadyPromises = [];\n    private _backBtnTapListeners = [];\n    private _startUpServices: IDeviceStartUpService[] = [];\n\n    public constructor(private file: File) {\n        const maxWaitTime = 10;\n        setTimeout(() => {\n            if (!this._isReady) {\n                console.warn(`Device is not ready even after ${maxWaitTime} seconds`);\n                console.warn('Waiting For %O', this._startUpServices.map(i => i.serviceName));\n            }\n        }, maxWaitTime * 1000);\n        document.addEventListener('backbutton', this.executeBackTapListeners.bind(this));\n    }\n\n    public executeBackTapListeners($event) {\n        _.forEach(this._backBtnTapListeners, fn => {\n            return fn($event) !== false;\n        });\n        // explicitly applying the digest cycle as the backbutton listener is not rendering the page content.\n        // This is because zone is not run (there is no change detection)\n        // https://weblogs.thinktecture.com/thomas/2017/02/cordova-vs-zonejs-or-why-is-angulars-document-event-listener-not-in-a-zone.html\n        $appDigest();\n    }\n\n    public addStartUpService(service: IDeviceStartUpService) {\n        this._startUpServices.push(service);\n    }\n\n    public onBackButtonTap(fn: ($event) => boolean) {\n        this._backBtnTapListeners.unshift(fn);\n        return () => {\n            const i = this._backBtnTapListeners.indexOf(fn);\n            if (i >= 0) {\n                this._backBtnTapListeners.splice(i, 1);\n            }\n        };\n    }\n\n    public start() {\n        if (this._isReady || this._startUpServices.length === 0) {\n            this._isReady = true;\n            return Promise.resolve();\n        } else {\n            return new Promise((resolve) => {\n                if (hasCordova()) {\n                    document.addEventListener('deviceready', () => resolve(), false);\n                } else {\n                    resolve();\n                }\n            }).then(() => {\n                if (window['cordova']) {\n                    return this.file.readAsText(cordova.file.dataDirectory, REGISTRY_FILE_NAME)\n                        .then(content =>  this._registry = JSON.parse(content), noop);\n                }\n            }).then(() => {\n                return Promise.all(this._startUpServices.map(s => {\n                    return s.start().catch((error) => {\n                        console.error('%s failed to start due to: %O', s.serviceName, error);\n                        return Promise.reject(error);\n                    });\n                }));\n            }).then(() => {\n                window['wmDeviceReady'] = true;\n                document.dispatchEvent(new CustomEvent('wmDeviceReady'));\n                this._startUpServices.length = 0;\n                this._whenReadyPromises.forEach(fn => fn());\n                this._isReady = true;\n            });\n        }\n    }\n\n    public whenReady(): Promise<void> {\n        if (this._isReady) {\n            return Promise.resolve();\n        } else {\n            return new Promise<void>((resolve) => {\n                this._whenReadyPromises.push(resolve);\n            });\n        }\n    }\n\n    /**\n     * @returns {Promise<number>} promise resolved with the app build time\n     */\n    public getAppBuildTime(): Promise<number> {\n        return this.file.readAsText(cordova.file.applicationDirectory + 'www', 'config.json')\n            .then(appConfig => (JSON.parse(appConfig).buildTime) as number);\n    }\n\n    /**\n     * Stores an entry that survives app restarts and updates.\n     *\n     * @param {string} key\n     * @param {Object} value\n     * @returns {Promise<any>}\n     */\n    public storeEntry(key: string, value: Object): Promise<any> {\n        this._registry[key] = value;\n        return this.file.writeFile(cordova.file.dataDirectory,\n            REGISTRY_FILE_NAME,\n            JSON.stringify(this._registry),\n            { replace: true });\n    }\n\n    /**\n     * @param {string} key\n     * @returns {any} entry corresponding to the key\n     */\n    public getEntry(key: string): any {\n        return this._registry[key];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Network } from '@ionic-native/network';\n\nimport { App, getAbortableDefer, noop, retryIfFails } from '@wm/core';\n\nimport { IDeviceStartUpService } from './device-start-up-service';\n\ndeclare const _, cordova, Connection, navigator;\n\nconst AUTO_CONNECT_KEY = 'WM.NetworkService._autoConnect',\n    IS_CONNECTED_KEY = 'WM.NetworkService.isConnected',\n    excludedList = [new RegExp('/wmProperties.js')],\n    originalXMLHttpRequestOpen = XMLHttpRequest.prototype.open,\n    originalXMLHttpRequestSend = XMLHttpRequest.prototype.send,\n    networkState = {\n        isConnecting : false,\n        isConnected : localStorage.getItem(IS_CONNECTED_KEY) === 'true',\n        isNetworkAvailable : true,\n        isServiceAvailable : true\n    };\n\n/**\n * If server is not connected and url does not match the unblock list of regular expressions,\n * then this function return true. Otherwise, return false.\n * @param url\n * @returns {boolean}\n */\nconst blockUrl = url => {\n    let block = !networkState.isConnected && _.startsWith(url, 'http');\n    if (block) {\n        block = !_.find(excludedList, regExp => regExp.test(url));\n    }\n    return block;\n};\n\n// Intercept all XHR calls\nXMLHttpRequest.prototype.open = function (method: string, url: string, async: boolean = true, user?: string, password?: string) {\n    if (blockUrl(url)) {\n        const urlSplits = url.split('://');\n        const pathIndex = urlSplits[1].indexOf('/');\n        urlSplits[1] = 'localhost' + (pathIndex > 0 ? urlSplits[1].substr(pathIndex) : '/');\n        url = urlSplits.join('://');\n    }\n    return originalXMLHttpRequestOpen.apply(this, [method, url, async, user, password]);\n};\n\n@Injectable({ providedIn: 'root' })\nexport class NetworkService implements IDeviceStartUpService {\n\n    public serviceName = NetworkService.name;\n\n    private _autoConnect = localStorage.getItem(AUTO_CONNECT_KEY) !== 'false';\n    private _lastKnownNetworkState: any;\n    private _isCheckingServer = false;\n\n    constructor(private httpClient: HttpClient, private app: App, private network: Network) {\n    }\n\n    /**\n     * This method attempts to connect app to the server and returns a promise that will be resolved with\n     * a boolean value based on the operation result.\n     *\n     * @returns {object} promise\n     */\n    public connect(): Promise<boolean> {\n        this.setAutoConnect(true);\n        return this.tryToConnect();\n    }\n\n    /**\n     * When the auto connect is enabled, then app is automatically connected  whenever server is available.\n     * Every time when app goes offline, auto connect is enabled. Before app coming to online, one can disable\n     * the auto connection flow using this method.\n     */\n    public disableAutoConnect = () => this.setAutoConnect(false);\n\n    /**\n     * This method disconnects the app from the server and returns a promise that will be resolved with\n     * a boolean value based on the operation result. Use connect method to reconnect.\n     *\n     * @returns {object} promise\n     */\n    public disconnect(): Promise<boolean> {\n        const p = this.tryToDisconnect();\n        this.disableAutoConnect();\n        return p;\n    }\n\n    /**\n     * If pingServer is true, then it returns a promise that will be resolved with boolean based on service availability\n     * check.If pingServer is false, returns a boolean value based on the last known service availability.\n     *\n     * @returns {boolean} if pingServer is true, then a promise is returned. Otherwise, a boolean value.\n     */\n    public isAvailable(pingServer = false): boolean | Promise<boolean> {\n        if (pingServer) {\n            return this.isServiceAvailable().then(() => {\n                this.checkForNetworkStateChange();\n                return networkState.isServiceAvailable;\n            });\n        }\n        return networkState.isServiceAvailable;\n    }\n\n    /**\n     * Returns true, if app is connected to server. Otherwise, returns false.\n     *\n     * @returns {boolean} Returns true, if app is connected to server. Otherwise, returns false.\n     */\n    public isConnected = () => {\n        // checking for connection type.\n        if (_.get(navigator, 'connection') && navigator.connection.type) {\n            networkState.isConnected = networkState.isConnected && (navigator.connection.type !== 'none');\n        }\n        this.checkForNetworkStateChange();\n        return networkState.isConnected;\n    }\n\n    /**\n     * Returns true if app is trying to connect to server. Otherwise, returns false.\n     *\n     * @returns {boolean} Returns true if app is trying to connect to server. Otherwise, returns false.\n     */\n    public isConnecting = () => networkState.isConnecting;\n\n    /**\n     * This method returns a promise that is resolved when connection is established with server.\n     *\n     * @returns {object} promise a promise that is resolved with the returned object of fn\n     */\n    public onConnect() {\n        let defer,\n            cancelSubscription;\n        if (this.isConnected()) {\n            return Promise.resolve();\n        }\n        defer = getAbortableDefer();\n        cancelSubscription = this.app.subscribe('onNetworkStateChange', () => {\n            if (this.isConnected()) {\n                defer.resolve(true);\n                cancelSubscription();\n            }\n        });\n        defer.promise.catch(function () {\n            cancelSubscription();\n        });\n        return defer.promise;\n    }\n\n    /**\n     * This is a util method. If fn cannot execute successfully and network lost connection, then the fn will\n     * be invoked when network is back. The returned can also be aborted.\n     *\n     * @param {function()} fn method to invoke.\n     * @returns {object} promise a promise that is resolved with the returned object of fn\n     */\n    public retryIfNetworkFails(fn) {\n        const defer = getAbortableDefer();\n        retryIfFails(fn, 0, 0, () => {\n            let onConnectPromise;\n            if (!this.isConnected()) {\n                onConnectPromise = this.onConnect();\n                defer.promise.catch(function () {\n                    onConnectPromise.abort();\n                });\n                return onConnectPromise;\n            }\n            return false;\n        }).then(defer.resolve, defer.reject);\n        return defer.promise;\n    }\n\n    public start(): Promise<any> {\n        if (window['cordova']) {\n            // Connection constant will be available only when network plugin is included.\n            if (window['Connection'] && navigator.connection) {\n                networkState.isNetworkAvailable = navigator.connection.type !== 'none';\n                networkState.isConnected = networkState.isNetworkAvailable && networkState.isConnected;\n                /*\n                 * When the device comes online, check is the service is available. If the service is available and auto\n                 * connect flag is true, then app is automatically connected to remote server.\n                 */\n                this.network.onConnect().subscribe(() => {\n                    networkState.isNetworkAvailable = true;\n                    this.tryToConnect().catch(noop);\n                });\n\n                /*\n                 *When device goes offline, then change the network state and emit that notifies about network state change.\n                 */\n                this.network.onDisconnect().subscribe(() => {\n                    networkState.isNetworkAvailable = false;\n                    networkState.isServiceAvailable = false;\n                    this.tryToDisconnect();\n                });\n\n                this.app.subscribe('onNetworkStateChange', (data) => {\n                    /**\n                     * If network is available and server is not available,then\n                     * try to connect when server is available.\n                     */\n                    if (data.isNetworkAvailable && !data.isServiceAvailable && !this._isCheckingServer) {\n                        this._isCheckingServer = true;\n                        this.checkForServiceAvailiblity().then(() => {\n                            this._isCheckingServer = false;\n                            this.connect();\n                        }, () => {\n                            this._isCheckingServer = false;\n                        });\n                    }\n                });\n            }\n        }\n        // to set the default n/w connection values.\n        return this.tryToConnect(true).catch(noop);\n    }\n\n    /**\n     * This function adds the given regular expression to the unblockList. Even app is in offline mode,\n     * the urls matching with the given regular expression are not blocked by NetworkService.\n     *\n     * @param {string} urlRegex regular expression\n     */\n    public unblock(urlRegex: string) {\n        excludedList.push(new RegExp(urlRegex));\n    }\n\n    private checkForNetworkStateChange() {\n        if (!_.isEqual(this._lastKnownNetworkState, networkState)) {\n            this._lastKnownNetworkState = _.clone(networkState);\n            this.app.notify('onNetworkStateChange', this._lastKnownNetworkState);\n        }\n    }\n\n    /**\n     * Returns a promise that is resolved when server is available.\n     * @returns {*}\n     */\n    private checkForServiceAvailiblity(): Promise<void> {\n        const maxTimeout = 4500;\n        return new Promise<void>(resolve => {\n            const intervalId = setInterval(() => {\n                if (networkState.isNetworkAvailable) {\n                    this.isServiceAvailable(maxTimeout).then(available => {\n                        if (available) {\n                            clearInterval(intervalId);\n                            resolve();\n                        }\n                    });\n                }\n            }, 5000);\n        });\n    }\n\n    /**\n     * Pings server to check whether server is available. Based on ping response network state is modified.\n     * @returns {*} a promise that resolved with true, if server responds with valid status.\n     * Otherwise, the promise is resolved with false.\n     */\n    private isServiceAvailable(maxTimeout?: number): Promise<boolean> {\n        return this.pingServer(maxTimeout).then(response => {\n            networkState.isServiceAvailable = response;\n            if (!networkState.isServiceAvailable) {\n                networkState.isConnecting = false;\n                networkState.isConnected = false;\n            }\n            return response;\n        });\n    }\n\n    /**\n     * Pings server\n     * @returns {*} a promise that resolved with true, if server responds with valid status.\n     * Otherwise, the promise is resolved with false.\n     * default timeout value is 1min.\n     */\n    private pingServer(maxTimeout = 60000): Promise<boolean> {\n        return new Promise<boolean>(resolve => {\n            const oReq = new XMLHttpRequest();\n            let baseURL = this.app.deployedUrl;\n            if (baseURL && !_.endsWith(baseURL, '/')) {\n                baseURL += '/';\n            } else {\n                baseURL = baseURL || '';\n            }\n\n            const timer = setTimeout(() => {\n                oReq.abort(); // abort request\n                resolve(false);\n            }, maxTimeout);\n\n            oReq.addEventListener('load', () => {\n                if (oReq.status === 200) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            });\n\n            oReq.addEventListener('error', () => resolve(false));\n            oReq.open('GET', baseURL + 'services/application/wmProperties.js?t=' + Date.now());\n            oReq.send();\n        });\n    }\n\n    private setAutoConnect(flag: boolean): void {\n        this._autoConnect = flag;\n        localStorage.setItem(AUTO_CONNECT_KEY, '' + flag);\n    }\n\n    /**\n     * Tries to connect to remote server. Network State will be changed based on the success of connection\n     * operation and emits an event notifying the network state change.\n     *\n     * @param silentMode {boolean} if true and connection is successful, then no event is emitted. Otherwise,\n     * events are emitted for network status change.\n     * @returns {*} a promise\n     */\n    private tryToConnect(silentMode = false): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.isServiceAvailable(5000).then(() => {\n                if (networkState.isServiceAvailable && this._autoConnect) {\n                    networkState.isConnecting = true;\n                    if (!silentMode) {\n                        this.checkForNetworkStateChange();\n                    }\n                    setTimeout(() => {\n                        networkState.isConnecting = false;\n                        networkState.isConnected = true;\n                        localStorage.setItem(IS_CONNECTED_KEY, '' + true);\n                        if (!silentMode) {\n                            this.checkForNetworkStateChange();\n                        }\n                        resolve(true);\n                    }, silentMode ? 0 : 5000);\n                } else {\n                    networkState.isConnecting = false;\n                    networkState.isConnected = false;\n                    localStorage.setItem(IS_CONNECTED_KEY, '' + false);\n                    reject();\n                    this.checkForNetworkStateChange();\n                }\n            });\n        });\n    }\n\n    private tryToDisconnect(): Promise<boolean> {\n        networkState.isConnected = false;\n        networkState.isConnecting = false;\n        this.checkForNetworkStateChange();\n        localStorage.setItem(IS_CONNECTED_KEY, '' + networkState.isConnected);\n        return Promise.resolve(networkState.isConnected);\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { hasCordova } from '@wm/core';\n\nimport { DeviceFileCacheService } from './services/device-file-cache.service';\nimport { DeviceFileOpenerService } from './services/device-file-opener.service';\nimport { DeviceFileService } from './services/device-file.service';\nimport { DeviceService } from './services/device.service';\nimport { NetworkService } from './services/network.service';\n\n@NgModule({\n    declarations: [],\n    imports: [],\n    providers: [\n        // add providers to mobile-runtime module.\n    ],\n    bootstrap: []\n})\nexport class MobileCoreModule {\n    static initialized = false;\n    // Startup services have to be added only once in the app life-cycle.\n    static addStartupServices(deviceService: DeviceService,\n                      deviceFileService: DeviceFileService,\n                      fileCacheService: DeviceFileCacheService,\n                      fileOpener: DeviceFileOpenerService,\n                      networkService: NetworkService) {\n        if (this.initialized) {\n            return;\n        }\n        deviceService.addStartUpService(networkService);\n        if (hasCordova()) {\n            deviceService.addStartUpService(deviceFileService);\n            deviceService.addStartUpService(fileCacheService);\n            deviceService.addStartUpService(fileOpener);\n        }\n        this.initialized = true;\n    }\n\n    constructor(\n        deviceService: DeviceService,\n        deviceFileService: DeviceFileService,\n        fileCacheService: DeviceFileCacheService,\n        fileOpener: DeviceFileOpenerService,\n        networkService: NetworkService\n    ) {\n        MobileCoreModule.addStartupServices(deviceService, deviceFileService,  fileCacheService, fileOpener, networkService);\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { File } from '@ionic-native/file';\n\nimport { convertToBlob } from '@wm/core';\n\ndeclare const _;\n\nexport interface IUploadResponse {\n    text: string;\n    response: any;\n    headers: (string) => string;\n}\n\nexport class UploadRequest {\n\n    private _files = [];\n    private _params = [];\n    private _headers = [];\n\n    constructor (private url: string, private cordovaFile: File) {\n\n    }\n\n    public addFile(name: string, path: string, filename: string): UploadRequest {\n        this._files.push({\n            name: name,\n            path: path,\n            fileName: filename\n        });\n        return this;\n    }\n\n    public addHeader(name: string, value: string): UploadRequest {\n        this._headers.push({\n            name: name,\n            value: value\n        });\n        return this;\n    }\n\n    public addParam(name: string, value: string): UploadRequest {\n        this._params.push({\n            name: name,\n            value: value\n        });\n        return this;\n    }\n\n    public post(): Promise<IUploadResponse> {\n        const formData = new FormData();\n        this._params.forEach( e => formData.append(e.name, e.value));\n        return Promise.all(this._files.map( e => {\n            if (e.path) {\n                return convertToBlob(e.path)\n                    .then(result => {\n                        return {\n                            name: e.name,\n                            fileName: e.fileName,\n                            blob: result.blob\n                        };\n                    });\n            }\n            return e;\n        })).then(params => {\n            params.forEach(e => formData.append(e.name, e.blob || e.path, e.fileName));\n            return new Promise<IUploadResponse>((resolve, reject) => {\n                const request = new XMLHttpRequest();\n                request.open('POST', this.url);\n                this._headers.forEach(e => request.setRequestHeader(e.name, e.value));\n                request.onload = () => {\n                    resolve({\n                        headers: (name: string) => request.getResponseHeader(name),\n                        response: request.response,\n                        text: request.responseText as string\n                    });\n                };\n                request.onerror = reject;\n                request.onabort = reject;\n                request.send(formData);\n            });\n        });\n    }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class DeviceFileUploadService {\n\n    constructor(private cordovaFile: File) {}\n\n    public upload(url: string, fileParamName: string, path: string, fileName?: string, params?: any, headers?: any): Promise<IUploadResponse> {\n        const req = new UploadRequest(url, this.cordovaFile)\n            .addFile(fileParamName, path, fileName);\n        _.forEach(params, (k, v) => req.addParam(k, v));\n        _.forEach(headers, (k, v) => req.addHeader(k, v));\n        return req.post();\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { App } from '@wm/core';\n\ndeclare const _;\n\ninterface Message {\n    address: string;\n    data: Map<string, string>;\n}\n\ninterface Handler {\n    pattern: string;\n    callback: (msg: string) => any;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ExtAppMessageService {\n\n    private handlers = [];\n\n    constructor(private app: App) {\n        document.addEventListener('externalAppMessageReceived', e => {\n            const message = (e['detail'].message) as Message;\n            this.handlers.forEach(handler => {\n                const matches = handler && message.address.match(handler.pattern);\n                if (matches && matches.length > 0) {\n                    handler.callBack(message);\n                }\n            });\n        });\n    }\n\n    /**\n     * adds a listener for a message whose address matches with the given regex pattern.\n     *\n     * @param {string} messageAddressPattern a regex pattern that is used to target messages to listen.\n     * @param {Function} listener function to invoke when message that matches regex is received.\n     *                  message received will be sent as first argument.\n     * @returns {Function} a function which removes the listener when invoked.\n     */\n    public subscribe(messageAddressPattern, listener: (msg: Message) => any) {\n        const handler = {\n            pattern : new RegExp(messageAddressPattern),\n            callBack : listener\n        };\n        this.handlers.push(handler);\n        return () => _.remove(this.handlers, handler);\n    }\n\n}\n\n(function (window, document) {\n    'use strict';\n    // listen app-to-app communication via url schemes\n    function subString(str, begin, end) {\n        end = end < 0 ? undefined : end;\n        return (str && begin >= 0 && str.length > begin && str.substring(begin, end)) || undefined;\n    }\n    function indexOf(str, pattern) {\n        return str && str.indexOf(pattern);\n    }\n    function extractData(url) {\n        const str = subString(url, indexOf(url, '?') + 1, indexOf(url, '#')),\n            data = {};\n        _.forEach(_.split(str, '&'), entry => {\n            const esplits = entry.split('=');\n            data[esplits[0]] = esplits[1];\n        });\n        return data;\n    }\n    function extractAddress(url) {\n        return subString(url, indexOf(url, '://') + 3, indexOf(url, '?'));\n    }\n    function createMessage(url) {\n        return {\n            'address': extractAddress(url),\n            'data': extractData(url)\n        };\n    }\n    window['handleOpenURL'] = function (url) {\n        const handleOpenURL = window['handleOpenURL'];\n        if (handleOpenURL.isReady && !_.startsWith(url, 'http')) {\n            const message = createMessage(url);\n            const e = new window['CustomEvent']('externalAppMessageReceived', {\n                'detail': {\n                    'message': message\n                }\n            });\n            document.dispatchEvent(e);\n        }\n        handleOpenURL.lastURL = url;\n    };\n}(window, document));\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}
