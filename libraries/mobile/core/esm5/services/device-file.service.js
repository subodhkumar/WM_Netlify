import { Injectable } from '@angular/core';
import { AppVersion } from '@ionic-native/app-version';
import { File } from '@ionic-native/file';
import { isAndroid, noop } from '@wm/core';
import * as i0 from "@angular/core";
import * as i1 from "@ionic-native/app-version";
import * as i2 from "@ionic-native/file";
export var FileType;
(function (FileType) {
    FileType["AUDIO"] = "AUDIO";
    FileType["DOCUMENT"] = "DOCUMENT";
    FileType["IMAGE"] = "IMAGE";
    FileType["VIDEO"] = "VIDEO";
})(FileType || (FileType = {}));
var IMAGE_EXTENSIONS = ['gif', 'jpg', 'png', 'svg', 'webp', 'jpeg', 'jif', 'jfif', 'jfi'], VIDEO_EXTENSIONS = ['mp4', 'mpg', 'avi', 'wma', 'mp2', '3gp', '3g2', 'm4p', 'm4v', 'mpg', 'fiv'], AUDIO_EXTENSIONS = ['mp3', 'm4p', 'aiff', 'aa', 'aax', 'wma'];
var APP_FOLDER_STRUCTURE = [{
        name: '{APP_NAME}',
        children: [{
                name: 'Media',
                children: [
                    {
                        name: '{APP_NAME} Images',
                        fileType: FileType.IMAGE
                    },
                    {
                        name: '{APP_NAME} Audio',
                        fileType: FileType.AUDIO
                    },
                    {
                        name: '{APP_NAME} Vedios',
                        fileType: FileType.VIDEO
                    },
                    {
                        name: '{APP_NAME} Documents',
                        fileType: FileType.DOCUMENT
                    }
                ]
            }]
    }];
var DeviceFileService = /** @class */ (function () {
    function DeviceFileService(cordovaAppVersion, cordovaFile) {
        this.cordovaAppVersion = cordovaAppVersion;
        this.cordovaFile = cordovaFile;
        this.serviceName = DeviceFileService.name;
        this._fileTypeVsPathMap = {
            'temporary': {},
            'persistent': {}
        };
    }
    DeviceFileService.prototype.addMediaToGallery = function (filePath) {
        if (isAndroid() && this.isPersistentType(filePath)) {
            return new Promise(function (resolve, reject) {
                cordova.plugins.MediaScannerPlugin.scanFile(filePath, resolve, reject);
            });
        }
        return Promise.resolve();
    };
    DeviceFileService.prototype.appendToFileName = function (fileName, attachment) {
        var splits;
        attachment = attachment || '_' + _.now();
        fileName = fileName || 'noname';
        splits = fileName.split('.');
        if (splits.length > 1) {
            splits[splits.length - 2] = splits[splits.length - 2] + attachment;
            return splits.join('.');
        }
        return fileName + attachment;
    };
    DeviceFileService.prototype.clearTemporaryStorage = function () {
        return this.cordovaFile.removeRecursively(this.getTemporaryRootPath() + this._appName + '/', 'Media');
    };
    DeviceFileService.prototype.copy = function (persistent, sourceFilePath) {
        var _this = this;
        var sourceFilename = sourceFilePath.split('/').pop(), destFolder = this.findFolderPath(persistent, sourceFilename), sourceFolder = sourceFilePath.substring(0, sourceFilePath.lastIndexOf('/'));
        return this.newFileName(destFolder, sourceFilename)
            .then(function (destFilename) { return _this.cordovaFile.copyFile(sourceFolder, sourceFilename, destFolder, destFilename)
            .then(function () { return destFolder + destFilename; }); });
    };
    DeviceFileService.prototype.findFolderPath = function (persistent, fileName) {
        var typeMap = persistent ? this._fileTypeVsPathMap.persistent : this._fileTypeVsPathMap.temporary, fileType = this.findFileType(fileName);
        return typeMap[fileType] || typeMap[FileType.DOCUMENT];
    };
    DeviceFileService.prototype.getPersistentRootPath = function () {
        return cordova.file.dataDirectory;
    };
    DeviceFileService.prototype.getTemporaryRootPath = function () {
        return cordova.file.cacheDirectory;
    };
    DeviceFileService.prototype.getUploadDirectory = function () {
        return this._uploadDir;
    };
    DeviceFileService.prototype.isPersistentType = function (filePath) {
        return filePath.startsWith(this.getPersistentRootPath());
    };
    DeviceFileService.prototype.isValidPath = function (filePath) {
        var folder, fileName;
        if (!filePath) {
            return Promise.reject('File path is required');
        }
        folder = filePath.substring(0, filePath.lastIndexOf('/') + 1);
        fileName = filePath.split('/').pop();
        return this.cordovaFile.checkFile(folder, fileName)
            .then(function () { return filePath; });
    };
    DeviceFileService.prototype.listFiles = function (folder, search) {
        return new Promise(function (resolve, reject) {
            resolveLocalFileSystemURL(folder, function (directory) {
                if (!directory.files) {
                    directory.createReader().readEntries(function (entries) {
                        if (search) {
                            entries = entries.filter(function (e) { return e.name.match(search); });
                        }
                        entries = entries.map(function (e) {
                            return {
                                name: e.name,
                                isDirectory: e.isDirectory,
                                path: e.nativeURL
                            };
                        });
                        resolve(entries);
                    }, reject);
                }
                else {
                    resolve([]);
                }
            }, reject);
        });
    };
    DeviceFileService.prototype.newFileName = function (folder, fileName) {
        var _this = this;
        return this.cordovaFile.checkFile(folder, fileName)
            .then(function () {
            var extIndex = fileName.lastIndexOf('.');
            if (extIndex > 0) {
                fileName = fileName.substring(0, extIndex) + '_' + _.now() + '.' + fileName.substring(extIndex + 1);
            }
            else {
                fileName = fileName + '_' + _.now();
            }
            return _this.newFileName(folder, fileName);
        }, function () { return fileName; });
    };
    DeviceFileService.prototype.removeFile = function (filePath) {
        var i = filePath.lastIndexOf('/'), dir = filePath.substring(0, i), file = filePath.substring(i + 1);
        return this.cordovaFile.removeFile(dir, file);
    };
    /**
     * removes the directory at the specified location.
     *
     * @param dirPath absolute path of directory
     */
    DeviceFileService.prototype.removeDir = function (dirPath) {
        var _this = this;
        var i = dirPath.lastIndexOf('/'), parentdir = dirPath.substring(0, i + 1), dir = dirPath.substring(i + 1), movedDir = dir + _.now();
        return this.cordovaFile.checkDir(parentdir, dir)
            .then(function () {
            /**
             * If folder is remove directly without moving, then INVALID_MODIFICATION_ERR is thrown in android
             * when a copy operation is done with the same directory name. To avoid this, directory will be moved
             * first and removed.
             */
            return _this.cordovaFile.moveDir(parentdir, dir, parentdir, movedDir)
                .then(function () { return _this.cordovaFile.removeDir(parentdir, movedDir); });
        }).catch(noop);
    };
    DeviceFileService.prototype.start = function () {
        var _this = this;
        /**
         * Default READ_CHUNK_SIZE is 256 Kb. But with that setting readJson method is failing. This is an issue
         * with cordova file plugin. So, increasing it to 512 Kb to read large database schema files (>256 Kb).
         */
        FileReader.READ_CHUNK_SIZE = 512 * 1024;
        return new Promise(function (resolve, reject) {
            _this.cordovaAppVersion.getAppName().then(function (appName) {
                var promises = [];
                _this._appName = appName;
                promises.push(_this.createFolderIfNotExists(_this.getTemporaryRootPath(), APP_FOLDER_STRUCTURE, _this._fileTypeVsPathMap.temporary));
                promises.push(_this.createFolderIfNotExists(_this.getPersistentRootPath(), APP_FOLDER_STRUCTURE, _this._fileTypeVsPathMap.persistent));
                promises.push(_this.setupUploadDirectory());
                return Promise.all(promises);
            }).then(function () {
                if (isAndroid()) {
                    // this is necessary to prevent multiple file permission popup.
                    return _this.cordovaFile.readAsText(cordova.file.externalRootDirectory, 'random-file-for-permission').catch(noop);
                }
            }).then(resolve, reject);
        });
    };
    DeviceFileService.prototype.createFolderIfNotExists = function (parent, folders, fileTypeLocationMap) {
        var _this = this;
        var childPromises = [];
        if (folders) {
            folders.forEach(function (folder) {
                var folderPath;
                folder.name = folder.name.replace('{APP_NAME}', _this._appName);
                folderPath = parent + folder.name + '/';
                if (folder.fileType && !fileTypeLocationMap[folder.fileType]) {
                    fileTypeLocationMap[folder.fileType] = folderPath;
                }
                var p = _this.cordovaFile.createDir(parent, folder.name, false)
                    .then(function () { return _this.createFolderIfNotExists(folderPath, folder.children, fileTypeLocationMap); }, function () { return _this.createFolderIfNotExists(folderPath, folder.children, fileTypeLocationMap); });
                childPromises.push(p);
            });
        }
        if (childPromises.length > 0) {
            return Promise.all(childPromises);
        }
    };
    DeviceFileService.prototype.findFileType = function (fileName) {
        var extension;
        if (fileName.indexOf('.') > 0) {
            extension = fileName.split('.').pop().toLowerCase();
            if (IMAGE_EXTENSIONS.some(function (a) { return a === extension; })) {
                return FileType.IMAGE;
            }
            if (VIDEO_EXTENSIONS.some(function (a) { return a === extension; })) {
                return FileType.VIDEO;
            }
            if (AUDIO_EXTENSIONS.some(function (a) { return a === extension; })) {
                return FileType.AUDIO;
            }
        }
        return FileType.DOCUMENT;
    };
    DeviceFileService.prototype.setupUploadDirectory = function () {
        var _this = this;
        var uploadsDirName = 'uploads', appDir = cordova.file.dataDirectory;
        return this.cordovaFile.checkDir(appDir, uploadsDirName)
            .then(function () { return _this._uploadDir = appDir + uploadsDirName; }, function () { return _this.cordovaFile.createDir(appDir, uploadsDirName, true)
            .then(function () { return _this._uploadDir = appDir + uploadsDirName; }); });
    };
    DeviceFileService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    DeviceFileService.ctorParameters = function () { return [
        { type: AppVersion },
        { type: File }
    ]; };
    DeviceFileService.ngInjectableDef = i0.defineInjectable({ factory: function DeviceFileService_Factory() { return new DeviceFileService(i0.inject(i1.AppVersion), i0.inject(i2.File)); }, token: DeviceFileService, providedIn: "root" });
    return DeviceFileService;
}());
export { DeviceFileService };
//# sourceMappingURL=data:application/json;base64,