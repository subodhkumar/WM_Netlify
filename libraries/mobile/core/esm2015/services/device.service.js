import { Injectable } from '@angular/core';
import { File } from '@ionic-native/file';
import { $appDigest, hasCordova, noop } from '@wm/core';
import * as i0 from "@angular/core";
import * as i1 from "@ionic-native/file";
const REGISTRY_FILE_NAME = 'registry.info';
export class DeviceService {
    constructor(file) {
        this.file = file;
        this._registry = {};
        this._isReady = false;
        this._whenReadyPromises = [];
        this._backBtnTapListeners = [];
        this._startUpServices = [];
        const maxWaitTime = 10;
        setTimeout(() => {
            if (!this._isReady) {
                console.warn(`Device is not ready even after ${maxWaitTime} seconds`);
                console.warn('Waiting For %O', this._startUpServices.map(i => i.serviceName));
            }
        }, maxWaitTime * 1000);
        document.addEventListener('backbutton', this.executeBackTapListeners.bind(this));
    }
    executeBackTapListeners($event) {
        _.forEach(this._backBtnTapListeners, fn => {
            return fn($event) !== false;
        });
        // explicitly applying the digest cycle as the backbutton listener is not rendering the page content.
        // This is because zone is not run (there is no change detection)
        // https://weblogs.thinktecture.com/thomas/2017/02/cordova-vs-zonejs-or-why-is-angulars-document-event-listener-not-in-a-zone.html
        $appDigest();
    }
    addStartUpService(service) {
        this._startUpServices.push(service);
    }
    onBackButtonTap(fn) {
        this._backBtnTapListeners.unshift(fn);
        return () => {
            const i = this._backBtnTapListeners.indexOf(fn);
            if (i >= 0) {
                this._backBtnTapListeners.splice(i, 1);
            }
        };
    }
    start() {
        if (this._isReady || this._startUpServices.length === 0) {
            this._isReady = true;
            return Promise.resolve();
        }
        else {
            return new Promise((resolve) => {
                if (hasCordova()) {
                    document.addEventListener('deviceready', () => resolve(), false);
                }
                else {
                    resolve();
                }
            }).then(() => {
                if (window['cordova']) {
                    return this.file.readAsText(cordova.file.dataDirectory, REGISTRY_FILE_NAME)
                        .then(content => this._registry = JSON.parse(content), noop);
                }
            }).then(() => {
                return Promise.all(this._startUpServices.map(s => {
                    return s.start().catch((error) => {
                        console.error('%s failed to start due to: %O', s.serviceName, error);
                        return Promise.reject(error);
                    });
                }));
            }).then(() => {
                window['wmDeviceReady'] = true;
                document.dispatchEvent(new CustomEvent('wmDeviceReady'));
                this._startUpServices.length = 0;
                this._whenReadyPromises.forEach(fn => fn());
                this._isReady = true;
            });
        }
    }
    whenReady() {
        if (this._isReady) {
            return Promise.resolve();
        }
        else {
            return new Promise((resolve) => {
                this._whenReadyPromises.push(resolve);
            });
        }
    }
    /**
     * @returns {Promise<number>} promise resolved with the app build time
     */
    getAppBuildTime() {
        return this.file.readAsText(cordova.file.applicationDirectory + 'www', 'config.json')
            .then(appConfig => (JSON.parse(appConfig).buildTime));
    }
    /**
     * Stores an entry that survives app restarts and updates.
     *
     * @param {string} key
     * @param {Object} value
     * @returns {Promise<any>}
     */
    storeEntry(key, value) {
        this._registry[key] = value;
        return this.file.writeFile(cordova.file.dataDirectory, REGISTRY_FILE_NAME, JSON.stringify(this._registry), { replace: true });
    }
    /**
     * @param {string} key
     * @returns {any} entry corresponding to the key
     */
    getEntry(key) {
        return this._registry[key];
    }
}
DeviceService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DeviceService.ctorParameters = () => [
    { type: File }
];
DeviceService.ngInjectableDef = i0.defineInjectable({ factory: function DeviceService_Factory() { return new DeviceService(i0.inject(i1.File)); }, token: DeviceService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,