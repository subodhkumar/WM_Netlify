import { Injectable } from '@angular/core';
import { File } from '@ionic-native/file';
import { convertToBlob } from '@wm/core';
import * as i0 from "@angular/core";
import * as i1 from "@ionic-native/file";
export class UploadRequest {
    constructor(url, cordovaFile) {
        this.url = url;
        this.cordovaFile = cordovaFile;
        this._files = [];
        this._params = [];
        this._headers = [];
    }
    addFile(name, path, filename) {
        this._files.push({
            name: name,
            path: path,
            fileName: filename
        });
        return this;
    }
    addHeader(name, value) {
        this._headers.push({
            name: name,
            value: value
        });
        return this;
    }
    addParam(name, value) {
        this._params.push({
            name: name,
            value: value
        });
        return this;
    }
    post() {
        const formData = new FormData();
        this._params.forEach(e => formData.append(e.name, e.value));
        return Promise.all(this._files.map(e => {
            if (e.path) {
                return convertToBlob(e.path)
                    .then(result => {
                    return {
                        name: e.name,
                        fileName: e.fileName,
                        blob: result.blob
                    };
                });
            }
            return e;
        })).then(params => {
            params.forEach(e => formData.append(e.name, e.blob || e.path, e.fileName));
            return new Promise((resolve, reject) => {
                const request = new XMLHttpRequest();
                request.open('POST', this.url);
                this._headers.forEach(e => request.setRequestHeader(e.name, e.value));
                request.onload = () => {
                    resolve({
                        headers: (name) => request.getResponseHeader(name),
                        response: request.response,
                        text: request.responseText
                    });
                };
                request.onerror = reject;
                request.onabort = reject;
                request.send(formData);
            });
        });
    }
}
export class DeviceFileUploadService {
    constructor(cordovaFile) {
        this.cordovaFile = cordovaFile;
    }
    upload(url, fileParamName, path, fileName, params, headers) {
        const req = new UploadRequest(url, this.cordovaFile)
            .addFile(fileParamName, path, fileName);
        _.forEach(params, (k, v) => req.addParam(k, v));
        _.forEach(headers, (k, v) => req.addHeader(k, v));
        return req.post();
    }
}
DeviceFileUploadService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DeviceFileUploadService.ctorParameters = () => [
    { type: File }
];
DeviceFileUploadService.ngInjectableDef = i0.defineInjectable({ factory: function DeviceFileUploadService_Factory() { return new DeviceFileUploadService(i0.inject(i1.File)); }, token: DeviceFileUploadService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,