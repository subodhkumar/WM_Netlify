import { Injectable } from '@angular/core';
import { File } from '@ionic-native/file';
import { from, Subject } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { App, executePromiseChain, getWmProjectProperties, hasCordova, noop, removeExtraSlashes } from '@wm/core';
import { DeviceFileDownloadService, DeviceService, NetworkService } from '@wm/mobile/core';
import { SecurityService } from '@wm/security';
import { CONSTANTS } from '@wm/variables';
export class MobileHttpInterceptor {
    constructor(app, file, deviceFileDownloadService, deviceService, networkService, securityService) {
        this.app = app;
        this.deviceService = deviceService;
        this.networkService = networkService;
        this.requestInterceptors = [];
        if (hasCordova() && !CONSTANTS.isWaveLens) {
            this.requestInterceptors.push(new SecurityInterceptor(app, file, securityService));
            this.requestInterceptors.push(new RemoteSyncInterceptor(app, deviceFileDownloadService, deviceService, file, networkService));
            this.requestInterceptors.push(new ServiceCallInterceptor(app));
        }
    }
    intercept(request, next) {
        const subject = new Subject();
        const token = localStorage.getItem(CONSTANTS.XSRF_COOKIE_NAME);
        if (token) {
            // Clone the request to add the new header
            request = request.clone({ headers: request.headers.set(getWmProjectProperties().xsrf_header_name, token) });
        }
        const data = { request: request };
        // invoke the request only when device is ready.
        const obs = from(this.deviceService.whenReady()
            .then(() => executePromiseChain(this.getInterceptors(), [data])));
        return obs.pipe(mergeMap(() => {
            return next.handle(data.request);
        }));
    }
    getInterceptors() {
        return this.requestInterceptors.map(i => {
            return (data) => i.intercept(data.request).then(req => data.request = req);
        });
    }
    onHttpError(response) {
        if (hasCordova
            && (!response || !response.status || response.status < 0 || response.status === 404)
            && (this.networkService.isConnected())) {
            this.networkService.isAvailable(true);
        }
    }
}
MobileHttpInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MobileHttpInterceptor.ctorParameters = () => [
    { type: App },
    { type: File },
    { type: DeviceFileDownloadService },
    { type: DeviceService },
    { type: NetworkService },
    { type: SecurityService }
];
class ServiceCallInterceptor {
    constructor(app) {
        this.app = app;
    }
    intercept(request) {
        let modifiedRequest = request;
        let url = request.url;
        // if necessary, prepend deployed url
        if (url.indexOf('://') < 0
            && ServiceCallInterceptor.REMOTE_SERVICE_URL_PATTERNS.find(r => r.test(url))) {
            url = this.app.deployedUrl + url;
        }
        url = removeExtraSlashes(url);
        if (url !== request.url) {
            modifiedRequest = request.clone({
                url: url
            });
        }
        return Promise.resolve(modifiedRequest);
    }
}
ServiceCallInterceptor.REMOTE_SERVICE_URL_PATTERNS = [
    new RegExp('^((./)|/)?services/'),
    new RegExp('j_spring_security_check'),
    new RegExp('j_spring_security_logout')
];
class RemoteSyncInterceptor {
    constructor(app, deviceFileDownloadService, deviceService, file, networkService) {
        this.app = app;
        this.deviceFileDownloadService = deviceFileDownloadService;
        this.deviceService = deviceService;
        this.file = file;
        this.networkService = networkService;
        this.checkRemoteDirectory = true;
        this.hasRemoteChanges = false;
        this.file.checkDir(cordova.file.dataDirectory, 'remote').then(() => this.hasRemoteChanges = true, noop);
    }
    intercept(request) {
        const isRemoteSyncEnabled = localStorage.getItem('remoteSync') === 'true';
        if (this.hasRemoteChanges || isRemoteSyncEnabled) {
            return Promise.resolve(request.url).then(url => {
                if (url.indexOf('://') < 0
                    && RemoteSyncInterceptor.URL_TO_SYNC.find(r => r.test(url))) {
                    const fileNameFromUrl = _.last(_.split(url, '/'));
                    return this.download(url, fileNameFromUrl, isRemoteSyncEnabled);
                }
                return url;
            }).then(url => {
                if (url !== request.url) {
                    this.hasRemoteChanges = true;
                    return request.clone({
                        url: url
                    });
                }
                return request;
            });
        }
        else {
            return Promise.resolve(request);
        }
    }
    createFolderStructure(parentFolder, folderNamesList) {
        const folderName = folderNamesList[0];
        if (!_.isEmpty(folderName)) {
            return this.file.createDir(parentFolder, folderName, false)
                .catch(noop)
                .then(() => {
                parentFolder = parentFolder + folderName + '/';
                folderNamesList.shift();
                return this.createFolderStructure(parentFolder, folderNamesList);
            });
        }
        return Promise.resolve(parentFolder);
    }
    init(pageUrl, isRemoteSyncEnabled) {
        const fileName = _.last(_.split(pageUrl, '/')), path = _.replace(pageUrl, fileName, ''), folderPath = 'remote' + _.replace(path, this.app.deployedUrl, ''), downloadsParent = cordova.file.dataDirectory;
        return new Promise((resolve, reject) => {
            if (this.checkRemoteDirectory) {
                return this.deviceService.getAppBuildTime().then(buildTime => {
                    const remoteSyncInfo = this.deviceService.getEntry('remote-sync') || {};
                    if (!remoteSyncInfo.lastBuildTime || remoteSyncInfo.lastBuildTime !== buildTime) {
                        return this.file.removeDir(cordova.file.dataDirectory, 'remote')
                            .catch(noop).then(() => {
                            remoteSyncInfo.lastBuildTime = buildTime;
                            this.hasRemoteChanges = false;
                            return this.deviceService.storeEntry('remote-sync', remoteSyncInfo);
                        });
                    }
                }).then(() => this.checkRemoteDirectory = false)
                    .then(resolve, reject);
            }
            resolve();
        })
            .then(() => this.file.checkDir(downloadsParent, folderPath))
            .then(() => downloadsParent + folderPath, () => {
            if (isRemoteSyncEnabled) {
                return this.createFolderStructure(downloadsParent, _.split(folderPath, '/'));
            }
            return Promise.reject('Could not find equivalent remote path');
        });
    }
    download(url, fileName, isRemoteSyncEnabled) {
        const pageUrl = this.app.deployedUrl + '/' + url;
        let folderPath;
        return this.init(pageUrl, isRemoteSyncEnabled)
            .then(pathToRemote => {
            folderPath = pathToRemote;
            return this.file.checkFile(folderPath + fileName, '');
        }).then(() => {
            if (isRemoteSyncEnabled && this.networkService.isConnected()) {
                return this.file.removeFile(folderPath, fileName)
                    .then(() => folderPath + fileName);
            }
            return folderPath + fileName;
        }, () => url)
            .then(path => {
            if (isRemoteSyncEnabled && this.networkService.isConnected()) {
                return this.deviceFileDownloadService.download(pageUrl, false, folderPath, fileName);
            }
            return path;
        });
    }
}
RemoteSyncInterceptor.URL_TO_SYNC = [
    new RegExp('page.min.json$'),
    new RegExp('app.js$'),
    new RegExp('app.variables.json$')
];
class SecurityInterceptor {
    constructor(app, file, securityService) {
        this.app = app;
        this.file = file;
        this.securityService = securityService;
        this.initialized = false;
    }
    intercept(request) {
        return new Promise((resolve, reject) => {
            if (SecurityInterceptor.PAGE_URL_PATTERN.test(request.url)) {
                return Promise.resolve().then(() => {
                    if (!this.initialized) {
                        return this.init();
                    }
                }).then(() => {
                    const urlSplits = _.split(request.url, '/');
                    const pageName = urlSplits[urlSplits.length - 2];
                    if (!this.publicPages || this.publicPages[pageName]) {
                        return Promise.resolve(request);
                    }
                    else {
                        this.securityService.getConfig(config => {
                            if (!config.securityEnabled || config.authenticated) {
                                resolve(request);
                            }
                            else {
                                reject(`Page '${pageName}' is not accessible to the user.`);
                                this.app.notify('http401', { page: pageName });
                            }
                        }, () => reject(`Security call failed.`));
                    }
                    return Promise.resolve(request);
                }).then(resolve, reject);
            }
            return resolve(request);
        });
    }
    /**
     * loads public pages from 'metadata/app/public-pages.info' and overrides canAccess method SecurityService
     */
    init() {
        const folderPath = cordova.file.applicationDirectory + 'www/metadata/app', fileName = 'public-pages.json';
        return this.file.readAsText(folderPath, fileName).then(text => {
            if (!this.initialized) {
                this.publicPages = {};
                this.initialized = true;
                _.forEach(JSON.parse(text), pageName => this.publicPages[pageName] = true);
            }
        }).catch(() => {
            this.initialized = true;
        });
    }
}
SecurityInterceptor.PAGE_URL_PATTERN = new RegExp('page.min.json$');
//# sourceMappingURL=data:application/json;base64,