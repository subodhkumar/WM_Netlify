import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
const STORAGE_KEY = 'wavemaker.persistedcookies';
export class CookieService {
    constructor() {
        this.cookieInfo = {};
        this.serviceName = 'CookeService';
    }
    persistCookie(hostname, cookieName, cookieValue) {
        return new Promise(resolve => {
            if (cookieValue) {
                resolve(cookieValue);
            }
            else {
                this.getCookie(hostname, cookieName)
                    .then(data => resolve(data.cookieValue));
            }
        }).then(value => {
            this.cookieInfo[hostname + '-' + cookieName] = {
                hostname: hostname.replace(/:[0-9]+/, ''),
                name: cookieName,
                value: this.rotateLTR(value)
            };
            localStorage.setItem(STORAGE_KEY, JSON.stringify(this.cookieInfo));
        });
    }
    getCookie(hostname, cookieName) {
        return new Promise((resolve, reject) => {
            window['cookieEmperor'].getCookie(hostname, cookieName, resolve, reject);
        });
    }
    setCookie(hostname, cookieName, cookieValue) {
        return new Promise((resolve, reject) => {
            window['cookieEmperor'].setCookie(hostname, cookieName, cookieValue, resolve, reject);
        });
    }
    clearAll() {
        return new Promise((resolve, reject) => window['cookieEmperor'].clearAll(resolve, reject));
    }
    /**
     * Loads persisted cookies from local storage and adds them to the browser.
     * @returns {*}
     */
    start() {
        const cookieInfoStr = localStorage.getItem(STORAGE_KEY), promises = [];
        if (cookieInfoStr) {
            const cookieInfo = JSON.parse(cookieInfoStr);
            _.forEach(cookieInfo, c => {
                if (c.name && c.value) {
                    const promise = new Promise((resolve, reject) => {
                        window['cookieEmperor'].setCookie(c.hostname, c.name, this.rotateRTL(c.value), resolve, reject);
                    });
                    promises.push(promise);
                }
            });
        }
        return Promise.all(promises);
    }
    /**
     * Just rotates the given string exactly from 1/3 of string length in left to right direction.
     * @param str
     * @returns {string}
     */
    rotateLTR(str) {
        const arr = str.split(''), tArr = [], shift = Math.floor(str.length / 3);
        arr.forEach((v, i) => {
            tArr[(i + shift) % arr.length] = arr[i];
        });
        return tArr.join('');
    }
    /**
     * Just rotates the given string exactly from 1/3 of string length in  right to left direction..
     * @param str
     * @returns {string}
     */
    rotateRTL(str) {
        const arr = str.split(''), tArr = [], shift = Math.floor(str.length / 3);
        arr.forEach((v, i) => {
            tArr[(arr.length + i - shift) % arr.length] = arr[i];
        });
        return tArr.join('');
    }
}
CookieService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CookieService.ngInjectableDef = i0.defineInjectable({ factory: function CookieService_Factory() { return new CookieService(); }, token: CookieService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,