import * as tslib_1 from "tslib";
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { AppVersion } from '@ionic-native/app-version';
import { BarcodeScanner } from '@ionic-native/barcode-scanner';
import { Calendar } from '@ionic-native/calendar';
import { Camera } from '@ionic-native/camera';
import { Contacts } from '@ionic-native/contacts';
import { File } from '@ionic-native/file';
import { FileOpener } from '@ionic-native/file-opener';
import { Device } from '@ionic-native/device';
import { MediaCapture } from '@ionic-native/media-capture';
import { Geolocation } from '@ionic-native/geolocation';
import { Network } from '@ionic-native/network';
import { SQLite } from '@ionic-native/sqlite';
import { Vibration } from '@ionic-native/vibration';
import { App, AbstractHttpService, fetchContent, hasCordova, insertAfter, isIpad, isIphone, isIpod, isObject, loadStyleSheet, noop, removeNode } from '@wm/core';
import { FileExtensionFromMimePipe } from '@wm/components';
import { WmMobileComponentsModule } from '@wm/mobile/components';
import { DeviceFileOpenerService, DeviceService, ExtAppMessageService, MobileCoreModule, NetworkService } from '@wm/mobile/core';
import { PushService, PushServiceImpl } from '@wm/mobile/offline';
import { SecurityService } from '@wm/security';
import { VariablesModule } from '@wm/mobile/variables';
import { $rootScope, CONSTANTS } from '@wm/variables';
import { AppExtComponent } from './components/app-ext.component';
import { CookieService } from './services/cookie.service';
import { MobileHttpInterceptor } from './services/http-interceptor.service';
import { WebProcessService } from './services/webprocess.service';
export var MAX_WAIT_TIME_4_OAUTH_MESSAGE = 60000;
var OS;
(function (OS) {
    OS["IOS"] = "ios";
    OS["ANDROID"] = "android";
})(OS || (OS = {}));
var MINIMUM_TAB_WIDTH = 768;
var KEYBOARD_CLASS = 'keyboard';
var ionicServices = [
    AppVersion,
    BarcodeScanner,
    Calendar,
    Camera,
    Contacts,
    File,
    FileOpener,
    Device,
    Geolocation,
    MediaCapture,
    Network,
    SQLite,
    Vibration
];
var MobileRuntimeModule = /** @class */ (function () {
    function MobileRuntimeModule(app, cookieService, deviceFileOpenerService, deviceService, securityService, httpService, extAppMessageService, networkService, webProcessService) {
        this.app = app;
        this.cookieService = cookieService;
        this.deviceFileOpenerService = deviceFileOpenerService;
        this.deviceService = deviceService;
        this.securityService = securityService;
        this.httpService = httpService;
        this.extAppMessageService = extAppMessageService;
        this.networkService = networkService;
        this.webProcessService = webProcessService;
        this._$appEl = $('.wm-app:first');
        if (this._$appEl.width() >= MINIMUM_TAB_WIDTH) {
            app.isTabletApplicationType = true;
            this._$appEl.addClass('wm-tablet-app');
        }
        else {
            this._$appEl.addClass('wm-mobile-app');
        }
        MobileRuntimeModule.initializeRuntime(this, this.app, this.cookieService, this.deviceFileOpenerService, this.deviceService);
    }
    MobileRuntimeModule.forRoot = function () {
        /* add all providers that are required for mobile here. This is to simplify placeholder.*/
        return {
            ngModule: MobileRuntimeModule,
            providers: tslib_1.__spread([
                WebProcessService,
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: MobileHttpInterceptor,
                    multi: true
                }
            ], ionicServices, [
                FileExtensionFromMimePipe,
                { provide: PushService, useClass: PushServiceImpl }
            ])
        };
    };
    // Startup services have to be added only once in the app life-cycle.
    MobileRuntimeModule.initializeRuntime = function (runtimeModule, app, cookieService, deviceFileOpenerService, deviceService) {
        if (this.initialized) {
            return;
        }
        this.initialized = true;
        app.deployedUrl = runtimeModule.getDeployedUrl();
        runtimeModule.getDeviceOS().then(function (os) {
            app.selectedViewPort = {
                os: os
            };
            runtimeModule.applyOSTheme(os);
        });
        if (hasCordova()) {
            runtimeModule.handleKeyBoardClass();
            deviceService.addStartUpService(cookieService);
            app.subscribe('userLoggedIn', function () {
                var url = $rootScope.project.deployedUrl;
                if (url.endsWith('/')) {
                    url = url.substr(0, url.length - 1);
                }
                cookieService.persistCookie(url, 'JSESSIONID').catch(noop);
                cookieService.persistCookie(url, 'SPRING_SECURITY_REMEMBER_ME_COOKIE').catch(noop);
            });
            app.subscribe('device-file-download', function (data) {
                deviceFileOpenerService.openRemoteFile(data.url, data.extension, data.name).then(data.successCb, data.errorCb);
            });
            var __zone_symbol__FileReader = window['__zone_symbol__FileReader'];
            if (__zone_symbol__FileReader && __zone_symbol__FileReader.READ_CHUNK_SIZE) {
                // cordova File Reader is required. Otherwise, file operations are failing.
                window['FileReader'] = __zone_symbol__FileReader;
            }
            if (!CONSTANTS.isWaveLens) {
                window.remoteSync = function (flag) {
                    if (flag === void 0) { flag = true; }
                    localStorage.setItem('remoteSync', flag ? 'true' : 'false');
                };
            }
            runtimeModule.addAuthInBrowser();
        }
        deviceService.start();
        deviceService.whenReady().then(function () {
            if (hasCordova()) {
                runtimeModule._$appEl.addClass('cordova');
                runtimeModule.exposeOAuthService();
                navigator.splashscreen.hide();
                // Fix for issue: ios device is not considering the background style, eventhough value is set in config.xml.
                if (window['StatusBar']) {
                    window['StatusBar'].overlaysWebView(false);
                }
            }
        });
    };
    MobileRuntimeModule.prototype.exposeOAuthService = function () {
        var _this = this;
        window['OAuthInMobile'] = function (providerId) {
            return new Promise(function (resolve, reject) {
                var oauthAdress = '^services/oauth/' + providerId + '$';
                var deregister = _this.extAppMessageService.subscribe(oauthAdress, function (message) {
                    resolve(message.data['access_token']);
                    deregister();
                    clearTimeout(timerId);
                });
                var timerId = setTimeout(function () {
                    deregister();
                    reject("Time out for oauth message after " + MAX_WAIT_TIME_4_OAUTH_MESSAGE % 1000 + " seconds");
                }, MAX_WAIT_TIME_4_OAUTH_MESSAGE);
            });
        };
        var handleOpenURL = window['handleOpenURL'];
        handleOpenURL.isReady = true;
        handleOpenURL(handleOpenURL.lastURL);
    };
    MobileRuntimeModule.prototype.applyOSTheme = function (os) {
        var oldStyleSheet = $('link[theme="wmtheme"]:first');
        var themeUrl = oldStyleSheet.attr('href').replace(new RegExp('/[a-z]*/style.css$'), "/" + os.toLowerCase() + "/style.css"), newStyleSheet = loadStyleSheet(themeUrl, { name: 'theme', value: 'wmtheme' });
        oldStyleSheet = oldStyleSheet.length > 0 && oldStyleSheet[0];
        if (newStyleSheet && oldStyleSheet) {
            insertAfter(newStyleSheet, oldStyleSheet);
            removeNode(oldStyleSheet);
        }
    };
    MobileRuntimeModule.prototype.handleKeyBoardClass = function () {
        var _this = this;
        var initialScreenSize = window.innerHeight;
        // keyboard class is added when keyboard is open.
        window.addEventListener('resize', function () {
            if (window.innerHeight < initialScreenSize) {
                _this._$appEl.addClass(KEYBOARD_CLASS);
            }
            else {
                _this._$appEl.removeClass(KEYBOARD_CLASS);
            }
        });
    };
    MobileRuntimeModule.prototype.getDeployedUrl = function () {
        var waveLensAppUrl = window['WaveLens'] && window['WaveLens']['appUrl'];
        var deployedUrl = $rootScope.project.deployedUrl;
        if (hasCordova()) {
            if (waveLensAppUrl) {
                // TODO: Temporary Fix for WMS-13072, baseUrl is {{DEVELOPMENT_URL}} in wavelens
                deployedUrl = waveLensAppUrl;
            }
            else {
                fetchContent('json', './config.json', true, (function (response) {
                    if (!response.error && response.baseUrl) {
                        deployedUrl = response.baseUrl;
                    }
                }));
            }
        }
        if (!deployedUrl.endsWith('/')) {
            deployedUrl = deployedUrl + '/';
        }
        $rootScope.project.deployedUrl = deployedUrl;
        return deployedUrl;
    };
    MobileRuntimeModule.prototype.getDeviceOS = function () {
        return new Promise(function (resolve, reject) {
            var msgContent = { key: 'on-load' };
            // Notify preview window that application is ready. Otherwise, identify the OS.
            if (window.top !== window) {
                window.top.postMessage(msgContent, '*');
                // This is for preview page
                window.onmessage = function (msg) {
                    var data = msg.data;
                    if (isObject(data) && data.key === 'switch-device') {
                        resolve(data.device.os);
                    }
                };
            }
            else if (isIphone() || isIpod() || isIpad()) {
                resolve(OS.IOS);
            }
            else {
                resolve(OS.ANDROID);
            }
        });
    };
    MobileRuntimeModule.prototype.addAuthInBrowser = function () {
        var _this = this;
        this.securityService.authInBrowser = function () {
            if (!_this.networkService.isConnected()) {
                return Promise.reject('In offline, app cannot contact the server.');
            }
            return _this.webProcessService.execute('LOGIN', '/')
                .then(function (output) {
                var url = _this.app.deployedUrl;
                if (url.endsWith('/')) {
                    url = url.substr(0, url.length - 1);
                }
                output = JSON.parse(output);
                if (output[CONSTANTS.XSRF_COOKIE_NAME]) {
                    localStorage.setItem(CONSTANTS.XSRF_COOKIE_NAME, output[CONSTANTS.XSRF_COOKIE_NAME]);
                }
                return _this.cookieService.clearAll()
                    .then(function () {
                    var promises = _.keys(output).map(function (k) {
                        return _this.cookieService.setCookie(url, k, output[k]);
                    });
                    return Promise.all(promises);
                });
            })
                .then(function () { return _this.app.notify('userLoggedIn', {}); });
        };
    };
    MobileRuntimeModule.initialized = false;
    MobileRuntimeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        AppExtComponent
                    ],
                    exports: [
                        AppExtComponent,
                        WmMobileComponentsModule
                    ],
                    imports: [
                        MobileCoreModule,
                        VariablesModule,
                        WmMobileComponentsModule
                    ],
                    bootstrap: []
                },] }
    ];
    /** @nocollapse */
    MobileRuntimeModule.ctorParameters = function () { return [
        { type: App },
        { type: CookieService },
        { type: DeviceFileOpenerService },
        { type: DeviceService },
        { type: SecurityService },
        { type: AbstractHttpService },
        { type: ExtAppMessageService },
        { type: NetworkService },
        { type: WebProcessService }
    ]; };
    return MobileRuntimeModule;
}());
export { MobileRuntimeModule };
//# sourceMappingURL=data:application/json;base64,