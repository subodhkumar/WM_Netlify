import { Injectable } from '@angular/core';
import { File } from '@ionic-native/file';
import { from, Subject } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { App, executePromiseChain, getWmProjectProperties, hasCordova, noop, removeExtraSlashes } from '@wm/core';
import { DeviceFileDownloadService, DeviceService, NetworkService } from '@wm/mobile/core';
import { SecurityService } from '@wm/security';
import { CONSTANTS } from '@wm/variables';
var MobileHttpInterceptor = /** @class */ (function () {
    function MobileHttpInterceptor(app, file, deviceFileDownloadService, deviceService, networkService, securityService) {
        this.app = app;
        this.deviceService = deviceService;
        this.networkService = networkService;
        this.requestInterceptors = [];
        if (hasCordova() && !CONSTANTS.isWaveLens) {
            this.requestInterceptors.push(new SecurityInterceptor(app, file, securityService));
            this.requestInterceptors.push(new RemoteSyncInterceptor(app, deviceFileDownloadService, deviceService, file, networkService));
            this.requestInterceptors.push(new ServiceCallInterceptor(app));
        }
    }
    MobileHttpInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        var subject = new Subject();
        var token = localStorage.getItem(CONSTANTS.XSRF_COOKIE_NAME);
        if (token) {
            // Clone the request to add the new header
            request = request.clone({ headers: request.headers.set(getWmProjectProperties().xsrf_header_name, token) });
        }
        var data = { request: request };
        // invoke the request only when device is ready.
        var obs = from(this.deviceService.whenReady()
            .then(function () { return executePromiseChain(_this.getInterceptors(), [data]); }));
        return obs.pipe(mergeMap(function () {
            return next.handle(data.request);
        }));
    };
    MobileHttpInterceptor.prototype.getInterceptors = function () {
        return this.requestInterceptors.map(function (i) {
            return function (data) { return i.intercept(data.request).then(function (req) { return data.request = req; }); };
        });
    };
    MobileHttpInterceptor.prototype.onHttpError = function (response) {
        if (hasCordova
            && (!response || !response.status || response.status < 0 || response.status === 404)
            && (this.networkService.isConnected())) {
            this.networkService.isAvailable(true);
        }
    };
    MobileHttpInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MobileHttpInterceptor.ctorParameters = function () { return [
        { type: App },
        { type: File },
        { type: DeviceFileDownloadService },
        { type: DeviceService },
        { type: NetworkService },
        { type: SecurityService }
    ]; };
    return MobileHttpInterceptor;
}());
export { MobileHttpInterceptor };
var ServiceCallInterceptor = /** @class */ (function () {
    function ServiceCallInterceptor(app) {
        this.app = app;
    }
    ServiceCallInterceptor.prototype.intercept = function (request) {
        var modifiedRequest = request;
        var url = request.url;
        // if necessary, prepend deployed url
        if (url.indexOf('://') < 0
            && ServiceCallInterceptor.REMOTE_SERVICE_URL_PATTERNS.find(function (r) { return r.test(url); })) {
            url = this.app.deployedUrl + url;
        }
        url = removeExtraSlashes(url);
        if (url !== request.url) {
            modifiedRequest = request.clone({
                url: url
            });
        }
        return Promise.resolve(modifiedRequest);
    };
    ServiceCallInterceptor.REMOTE_SERVICE_URL_PATTERNS = [
        new RegExp('^((./)|/)?services/'),
        new RegExp('j_spring_security_check'),
        new RegExp('j_spring_security_logout')
    ];
    return ServiceCallInterceptor;
}());
var RemoteSyncInterceptor = /** @class */ (function () {
    function RemoteSyncInterceptor(app, deviceFileDownloadService, deviceService, file, networkService) {
        var _this = this;
        this.app = app;
        this.deviceFileDownloadService = deviceFileDownloadService;
        this.deviceService = deviceService;
        this.file = file;
        this.networkService = networkService;
        this.checkRemoteDirectory = true;
        this.hasRemoteChanges = false;
        this.file.checkDir(cordova.file.dataDirectory, 'remote').then(function () { return _this.hasRemoteChanges = true; }, noop);
    }
    RemoteSyncInterceptor.prototype.intercept = function (request) {
        var _this = this;
        var isRemoteSyncEnabled = localStorage.getItem('remoteSync') === 'true';
        if (this.hasRemoteChanges || isRemoteSyncEnabled) {
            return Promise.resolve(request.url).then(function (url) {
                if (url.indexOf('://') < 0
                    && RemoteSyncInterceptor.URL_TO_SYNC.find(function (r) { return r.test(url); })) {
                    var fileNameFromUrl = _.last(_.split(url, '/'));
                    return _this.download(url, fileNameFromUrl, isRemoteSyncEnabled);
                }
                return url;
            }).then(function (url) {
                if (url !== request.url) {
                    _this.hasRemoteChanges = true;
                    return request.clone({
                        url: url
                    });
                }
                return request;
            });
        }
        else {
            return Promise.resolve(request);
        }
    };
    RemoteSyncInterceptor.prototype.createFolderStructure = function (parentFolder, folderNamesList) {
        var _this = this;
        var folderName = folderNamesList[0];
        if (!_.isEmpty(folderName)) {
            return this.file.createDir(parentFolder, folderName, false)
                .catch(noop)
                .then(function () {
                parentFolder = parentFolder + folderName + '/';
                folderNamesList.shift();
                return _this.createFolderStructure(parentFolder, folderNamesList);
            });
        }
        return Promise.resolve(parentFolder);
    };
    RemoteSyncInterceptor.prototype.init = function (pageUrl, isRemoteSyncEnabled) {
        var _this = this;
        var fileName = _.last(_.split(pageUrl, '/')), path = _.replace(pageUrl, fileName, ''), folderPath = 'remote' + _.replace(path, this.app.deployedUrl, ''), downloadsParent = cordova.file.dataDirectory;
        return new Promise(function (resolve, reject) {
            if (_this.checkRemoteDirectory) {
                return _this.deviceService.getAppBuildTime().then(function (buildTime) {
                    var remoteSyncInfo = _this.deviceService.getEntry('remote-sync') || {};
                    if (!remoteSyncInfo.lastBuildTime || remoteSyncInfo.lastBuildTime !== buildTime) {
                        return _this.file.removeDir(cordova.file.dataDirectory, 'remote')
                            .catch(noop).then(function () {
                            remoteSyncInfo.lastBuildTime = buildTime;
                            _this.hasRemoteChanges = false;
                            return _this.deviceService.storeEntry('remote-sync', remoteSyncInfo);
                        });
                    }
                }).then(function () { return _this.checkRemoteDirectory = false; })
                    .then(resolve, reject);
            }
            resolve();
        })
            .then(function () { return _this.file.checkDir(downloadsParent, folderPath); })
            .then(function () { return downloadsParent + folderPath; }, function () {
            if (isRemoteSyncEnabled) {
                return _this.createFolderStructure(downloadsParent, _.split(folderPath, '/'));
            }
            return Promise.reject('Could not find equivalent remote path');
        });
    };
    RemoteSyncInterceptor.prototype.download = function (url, fileName, isRemoteSyncEnabled) {
        var _this = this;
        var pageUrl = this.app.deployedUrl + '/' + url;
        var folderPath;
        return this.init(pageUrl, isRemoteSyncEnabled)
            .then(function (pathToRemote) {
            folderPath = pathToRemote;
            return _this.file.checkFile(folderPath + fileName, '');
        }).then(function () {
            if (isRemoteSyncEnabled && _this.networkService.isConnected()) {
                return _this.file.removeFile(folderPath, fileName)
                    .then(function () { return folderPath + fileName; });
            }
            return folderPath + fileName;
        }, function () { return url; })
            .then(function (path) {
            if (isRemoteSyncEnabled && _this.networkService.isConnected()) {
                return _this.deviceFileDownloadService.download(pageUrl, false, folderPath, fileName);
            }
            return path;
        });
    };
    RemoteSyncInterceptor.URL_TO_SYNC = [
        new RegExp('page.min.json$'),
        new RegExp('app.js$'),
        new RegExp('app.variables.json$')
    ];
    return RemoteSyncInterceptor;
}());
var SecurityInterceptor = /** @class */ (function () {
    function SecurityInterceptor(app, file, securityService) {
        this.app = app;
        this.file = file;
        this.securityService = securityService;
        this.initialized = false;
    }
    SecurityInterceptor.prototype.intercept = function (request) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (SecurityInterceptor.PAGE_URL_PATTERN.test(request.url)) {
                return Promise.resolve().then(function () {
                    if (!_this.initialized) {
                        return _this.init();
                    }
                }).then(function () {
                    var urlSplits = _.split(request.url, '/');
                    var pageName = urlSplits[urlSplits.length - 2];
                    if (!_this.publicPages || _this.publicPages[pageName]) {
                        return Promise.resolve(request);
                    }
                    else {
                        _this.securityService.getConfig(function (config) {
                            if (!config.securityEnabled || config.authenticated) {
                                resolve(request);
                            }
                            else {
                                reject("Page '" + pageName + "' is not accessible to the user.");
                                _this.app.notify('http401', { page: pageName });
                            }
                        }, function () { return reject("Security call failed."); });
                    }
                    return Promise.resolve(request);
                }).then(resolve, reject);
            }
            return resolve(request);
        });
    };
    /**
     * loads public pages from 'metadata/app/public-pages.info' and overrides canAccess method SecurityService
     */
    SecurityInterceptor.prototype.init = function () {
        var _this = this;
        var folderPath = cordova.file.applicationDirectory + 'www/metadata/app', fileName = 'public-pages.json';
        return this.file.readAsText(folderPath, fileName).then(function (text) {
            if (!_this.initialized) {
                _this.publicPages = {};
                _this.initialized = true;
                _.forEach(JSON.parse(text), function (pageName) { return _this.publicPages[pageName] = true; });
            }
        }).catch(function () {
            _this.initialized = true;
        });
    };
    SecurityInterceptor.PAGE_URL_PATTERN = new RegExp('page.min.json$');
    return SecurityInterceptor;
}());
//# sourceMappingURL=data:application/json;base64,