{"version":3,"file":"index.umd.js.map","sources":["ng://@wm/mobile/offline/services/local-key-value.service.ts","ng://@wm/mobile/offline/utils/utils.ts","ng://@wm/mobile/offline/models/local-db-store.ts","ng://@wm/mobile/offline/models/config.ts","ng://@wm/mobile/offline/services/local-db-management.service.ts","ng://@wm/mobile/offline/services/change-log.service.ts","ng://@wm/mobile/offline/services/local-db.service.ts","ng://@wm/mobile/offline/services/workers/file-handler.ts","ng://@wm/mobile/offline/services/workers/error-blocker.ts","ng://@wm/mobile/offline/services/workers/id-resolver.ts","ng://@wm/mobile/offline/services/workers/multi-part-param-transformer.ts","ng://@wm/mobile/offline/utils/live-variable.utils.ts","ng://@wm/mobile/offline/utils/file-upload.utils.ts","ng://@wm/mobile/offline/utils/query-executor.utils.ts","ng://@wm/mobile/offline/utils/security.utils.ts","ng://@wm/mobile/offline/offline.module.ts","ng://@wm/mobile/offline/services/push.service.ts","ng://@wm/mobile/offline/services/local-db-data-pull.service.ts","ng://@wm/mobile/offline/index.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { LocalDBStore } from '../models/local-db-store';\n\n@Injectable({providedIn: 'root'})\nexport class LocalKeyValueService {\n\n    private store: LocalDBStore;\n\n    /**\n     * retrieves the value mapped to the key.\n     *\n     * @param {string} key key\n     * @returns {object} a promise that is resolved when value is retrieved from store.\n     */\n    public get(key: string): any {\n        return this.fetchEntry(key)\n            .then(result => {\n                let value;\n                if (result && result.length > 0) {\n                    value = result[0].value;\n                    if (value) {\n                        value = JSON.parse(value);\n                    }\n                }\n                return value;\n            });\n    }\n\n    /**\n     * Initializes the service with the given store.\n     *\n     * @param {object} storeToUse a store with id, key, value with fields.\n     * @returns {object} a promise that is resolved when data is persisted.\n     */\n    public init(storeToUse: LocalDBStore) {\n        this.store = storeToUse;\n    }\n\n    /**\n     * clear data in all databases.\n     *\n     * @param {string} key key\n     * @param {string} value value\n     * @returns {object} a promise that is resolved when data is persisted.\n     */\n    public put(key, value) {\n        if (value) {\n            value = JSON.stringify(value);\n        }\n        return this.fetchEntry(key).then(result => {\n            if (result && result.length > 0) {\n                return this.store.save({\n                    'id' : result[0].id,\n                    'key' : key,\n                    'value' : value\n                });\n            }\n            return this.store.add({\n                'key' : key,\n                'value' : value\n            });\n        });\n    }\n\n    /**\n     * clear data in all databases.\n     *\n     * @param {string} key key\n     * @returns {object} a promise that is resolved when respective value is removed from store.\n     */\n    public remove(key) {\n        return this.fetchEntry(key).then(result => {\n            if (result && result.length > 0) {\n                return this.store.delete(result[0].id);\n            }\n        });\n    }\n\n    private fetchEntry(key) {\n        const filterCriteria = [{\n            'attributeName' : 'key',\n            'attributeValue' : key,\n            'attributeType' : 'STRING',\n            'filterCondition' : 'EQUALS'\n        }];\n        return this.store.filter(filterCriteria);\n    }\n}\n","export const WM_LOCAL_OFFLINE_CALL = 'WM_LOCAL_OFFLINE_CALL';\n\nexport const escapeName = (name) => {\n    if (name) {\n        name = name.replace(/\"/g, '\"\"');\n        return '\"' + name + '\"';\n    }\n};\n","import { File } from '@ionic-native/file';\nimport { SQLiteObject } from '@ionic-native/sqlite';\n\nimport { convertToBlob, isDefined } from '@wm/core';\nimport { DeviceFileService } from '@wm/mobile/core';\nimport { SWAGGER_CONSTANTS } from '@wm/variables';\n\nimport { ColumnInfo, EntityInfo } from './config';\nimport { escapeName } from '../utils/utils';\nimport { LocalDBManagementService } from '../services/local-db-management.service';\n\ndeclare const _;\n\nexport interface FilterCriterion {\n    attributeName: string;\n    attributeValue: any;\n    attributeType: string;\n    filterCondition: string;\n}\n\nexport interface Pagination {\n    offset: number;\n    limit: number;\n}\n\nconst insertRecordSqlTemplate = (schema: EntityInfo) => {\n    const columnNames = [],\n        placeHolder = [];\n    _.forEach(schema.columns, col => {\n        columnNames.push(escapeName(col.name));\n        placeHolder.push('?');\n    });\n    return `INSERT INTO ${escapeName(schema.name)} (${columnNames.join(',')}) VALUES (${placeHolder.join(',')})`;\n};\n\nconst replaceRecordSqlTemplate = (schema: EntityInfo) => {\n    const columnNames = [],\n        placeHolder = [];\n    _.forEach(schema.columns, col => {\n        columnNames.push(escapeName(col.name));\n        placeHolder.push('?');\n    });\n    return `REPLACE INTO ${escapeName(schema.name)} (${columnNames.join(',')}) VALUES (${placeHolder.join(',')})`;\n};\n\nconst deleteRecordTemplate = (schema: EntityInfo) => {\n    const primaryKeyField = _.find(schema.columns, 'primaryKey');\n    if (primaryKeyField) {\n        return `DELETE FROM ${escapeName(schema.name)} WHERE ${escapeName(primaryKeyField.name)} = ?`;\n    }\n    return '';\n};\n\nconst selectSqlTemplate = (schema: EntityInfo) => {\n    const columns = [],\n        joins = [];\n    schema.columns.forEach( col => {\n        let childTableName;\n        columns.push(escapeName(schema.name) + '.' + escapeName(col.name) + ' as ' + col.fieldName);\n        if (col.foreignRelations) {\n            col.foreignRelations.forEach(foreignRelation => {\n                childTableName = foreignRelation.sourceFieldName;\n                _.forEach(foreignRelation.dataMapper, (childCol, childFiledName) => {\n                    columns.push(childTableName + '.' + escapeName(childCol.name) + ' as \\'' + childFiledName + '\\'');\n                });\n                joins.push(` LEFT JOIN ${escapeName(foreignRelation.targetTable)} ${childTableName}\n                         ON ${childTableName}.${escapeName(foreignRelation.targetColumn)} = ${escapeName(schema.name)}.${escapeName(col.name)}`);\n            });\n        }\n    });\n    return `SELECT ${columns.join(',')} FROM ${escapeName(schema.name)} ${joins.join(' ')}`;\n};\n\nconst countQueryTemplate = (schema: EntityInfo) => {\n    const joins = [];\n    schema.columns.forEach( col => {\n        let childTableName;\n        if (col.foreignRelations) {\n            col.foreignRelations.forEach(foreignRelation => {\n                childTableName = foreignRelation.sourceFieldName;\n                joins.push(` LEFT JOIN ${escapeName(foreignRelation.targetTable)} ${childTableName}\n                         ON ${childTableName}.${escapeName(foreignRelation.targetColumn)} = ${escapeName(schema.name)}.${escapeName(col.name)}`);\n            });\n        }\n    });\n    return `SELECT count(*) as count FROM ${escapeName(schema.name)} ${joins.join(' ')}`;\n};\n\nconst generateWherClause = (store: LocalDBStore, filterCriteria: FilterCriterion[]) => {\n    let conditions;\n    const fieldToColumnMapping = store.fieldToColumnMapping,\n        tableName = store.entitySchema.name;\n    if (!_.isEmpty(filterCriteria) && _.isString(filterCriteria)) {\n        return ' WHERE ' + filterCriteria;\n    }\n    if (filterCriteria) {\n        conditions = filterCriteria.map(filterCriterion => {\n            const colName = fieldToColumnMapping[filterCriterion.attributeName],\n                condition = filterCriterion.filterCondition;\n            let target = filterCriterion.attributeValue,\n                operator = '=';\n            if (filterCriterion.attributeType === 'STRING') {\n                if (condition === 'STARTING_WITH') {\n                    target = target + '%';\n                    operator = 'like';\n                } else if (condition === 'ENDING_WITH') {\n                    target = '%' + target;\n                    operator = 'like';\n                } else if (condition === 'CONTAINING') {\n                    target = '%' + target + '%';\n                    operator = 'like';\n                }\n                target = `'${target}'`;\n            } else if (filterCriterion.attributeType === 'BOOLEAN') {\n                target = (target === true ? 1 : 0);\n            }\n            return `${escapeName(tableName)}.${escapeName(colName)} ${operator} ${target}`;\n        });\n    }\n    return conditions && conditions.length > 0 ? ' WHERE ' + conditions.join(' AND ') : '';\n};\n\nconst generateOrderByClause = (store: LocalDBStore, sort: string) => {\n    if (sort) {\n        return ' ORDER BY ' + _.map(sort.split(','), field => {\n            const splits =  _.trim(field).split(' ');\n            splits[0] = escapeName(store.entitySchema.name) + '.' + escapeName(store.fieldToColumnMapping[splits[0]]);\n            return splits.join(' ');\n        }).join(',');\n    }\n    return '';\n};\n\nconst geneateLimitClause = page => {\n    page = page || {};\n    return ' LIMIT ' + (page.limit || 100) + ' OFFSET ' + (page.offset || 0);\n};\n\nconst mapRowDataToObj = (schema: EntityInfo, dataObj: any) => {\n    schema.columns.forEach(col => {\n        const val = dataObj[col.fieldName];\n        if (col.foreignRelations) {\n            col.foreignRelations.forEach(foreignRelation => {\n                let childEntity = null;\n                _.forEach(foreignRelation.dataMapper, function (childCol, childFieldName) {\n                    const fieldValue = dataObj[childFieldName];\n                    if (isDefined(fieldValue) && fieldValue !== null && fieldValue !== '') {\n                        childEntity = childEntity || {};\n                        childEntity[childCol.fieldName] = dataObj[childFieldName];\n                    }\n                    delete dataObj[childFieldName];\n                });\n                dataObj[foreignRelation.sourceFieldName] = childEntity;\n            });\n        } else if (col.sqlType === 'boolean' && !_.isNil(val)) {\n            dataObj[col.fieldName] = (val === 1);\n        }\n    });\n    return dataObj;\n};\n\nconst getValue = (entity: any, col: ColumnInfo) => {\n    let value = entity[col.fieldName];\n    if (col.foreignRelations) {\n        col.foreignRelations.some(foreignRelation => {\n            if (foreignRelation.targetEntity && entity[foreignRelation.sourceFieldName]) {\n                value = entity[foreignRelation.sourceFieldName][foreignRelation.targetFieldName];\n                return true;\n            }\n            return false;\n        });\n    }\n    if (_.isNil(value)) {\n        return col.defaultValue;\n    } else if (col.sqlType === 'boolean') {\n        return (value === true ? 1 : 0);\n    } else {\n        return value;\n    }\n};\n\nconst mapObjToRow = (store: LocalDBStore, entity: any) => {\n    const row = {};\n    store.entitySchema.columns.forEach(col => row[col.name] = getValue(entity, col));\n    return row;\n};\n\nexport class LocalDBStore {\n\n    public readonly primaryKeyField: ColumnInfo;\n    public readonly primaryKeyName: string;\n    public readonly fieldToColumnMapping: object = {};\n\n    private insertRecordSqlTemplate: string;\n    private replaceRecordSqlTemplate: string;\n    private deleteRecordTemplate: string;\n    private selectSqlTemplate: string;\n    private countQuery: string;\n\n    constructor(\n        private deviceFileService: DeviceFileService,\n        public readonly entitySchema: EntityInfo,\n        private file: File,\n        private localDbManagementService: LocalDBManagementService,\n        private sqliteObject: SQLiteObject\n    ) {\n        this.primaryKeyField = _.find(this.entitySchema.columns, 'primaryKey');\n        this.primaryKeyName = this.primaryKeyField ? this.primaryKeyField.fieldName : undefined;\n        this.entitySchema.columns.forEach(c => {\n            this.fieldToColumnMapping[c.fieldName] = c.name;\n            if (c.foreignRelations) {\n                c.foreignRelations.forEach( foreignRelation => {\n                    this.fieldToColumnMapping[foreignRelation.targetPath] = c.name;\n                    _.forEach(foreignRelation.dataMapper, (childCol, childFieldName) => {\n                        this.fieldToColumnMapping[childFieldName] = foreignRelation.sourceFieldName + '.' + childCol.name;\n                    });\n                });\n            }\n        });\n\n        this.insertRecordSqlTemplate = insertRecordSqlTemplate(this.entitySchema);\n        this.replaceRecordSqlTemplate = replaceRecordSqlTemplate(this.entitySchema);\n        this.deleteRecordTemplate = deleteRecordTemplate(this.entitySchema);\n        this.selectSqlTemplate = selectSqlTemplate(this.entitySchema);\n        this.countQuery = countQueryTemplate(this.entitySchema);\n    }\n\n    public add(entity: any): Promise<any> {\n        if (this.primaryKeyName) {\n            const idValue = entity[this.primaryKeyName];\n            if (this.primaryKeyField.sqlType === 'number'\n                && (!isDefined(idValue) || (_.isString(idValue) && _.isEmpty(_.trim(idValue))))) {\n                if (this.primaryKeyField.generatorType === 'identity') {\n                    // updating the id with the latest id obtained from nextId.\n                    entity[this.primaryKeyName] = this.localDbManagementService.nextIdCount();\n                } else {\n                    // for assigned type, get the primaryKeyValue from the relatedTableData which is inside the entity\n                    const primaryKeyValue = this.getValue(entity, this.primaryKeyName);\n                    entity[this.primaryKeyName] = primaryKeyValue;\n                }\n            }\n        }\n        const rowData = mapObjToRow(this, entity);\n        const params = this.entitySchema.columns.map(f => rowData[f.name]);\n        return this.sqliteObject.executeSql(this.insertRecordSqlTemplate, params)\n            .then(result => result.insertId);\n    }\n\n    /**\n     * clears all data of this store.\n     * @returns {object} promise\n     */\n    public clear(): Promise<any> {\n        return this.sqliteObject.executeSql('DELETE FROM ' + escapeName(this.entitySchema.name));\n    }\n\n    /**\n     * creates the stores if it does not exist\n     * @returns {Promise<any>}\n     */\n    public create(): Promise<any> {\n        return this.sqliteObject.executeSql(this.createTableSql(this.entitySchema)).then(() => this);\n    }\n\n    /**\n     * counts the number of records that satisfy the given filter criteria.\n     * @param {FilterCriterion[]} filterCriteria\n     * @returns {object} promise that is resolved with count\n     */\n    public count(filterCriteria?: FilterCriterion[]): Promise<number> {\n        const sql = this.countQuery + generateWherClause(this, filterCriteria);\n        return this.sqliteObject.executeSql(sql).then(result => result.rows.item(0)['count']);\n    }\n\n    /**\n     * This function deserializes the given map object to FormData, provided that map object was\n     * serialized by using serialize method of this store.\n     * @param  {object} map object to deserialize\n     * @returns {object} promise that is resolved with the deserialized FormData.\n     */\n    public deserialize(map: any) {\n        return this.deserializeMapToFormData(map);\n    }\n\n    /**\n     * filters data of this store that statisfy the given filter criteria.\n     * @param {FilterCriterion[]} filterCriteria\n     * @param  {string=} sort ex: 'filedname asc/desc'\n     * @param  {object=} page {'offset' : 0, \"limit\" : 20}\n     * @returns {object} promise that is resolved with the filtered data.\n     */\n    public filter(filterCriteria?: FilterCriterion[], sort?: string, page?: Pagination): Promise<any[]> {\n        let sql = this.selectSqlTemplate;\n        sql += generateWherClause(this, filterCriteria);\n        sql += generateOrderByClause(this, sort);\n        sql += geneateLimitClause(page);\n        return this.sqliteObject.executeSql(sql)\n            .then(result => {\n            const objArr = [],\n                rowCount = result.rows.length;\n            for (let i = 0; i < rowCount; i++) {\n                objArr.push(mapRowDataToObj(this.entitySchema, result.rows.item(i)));\n            }\n            return objArr;\n        });\n    }\n\n    // fetches all the data related to the primaryKey\n    public refresh(data) {\n        const primaryKeyName = this.primaryKeyName;\n        const primaryKey = this.getValue(data, primaryKeyName);\n        if (!primaryKey) {\n            return Promise.resolve(data);\n        }\n        return this.get(primaryKey);\n    }\n\n    /**\n     * deletes the record with the given primary key.\n     * @param  {object} primaryKey primary key of the record\n     * @returns {object} promise\n     */\n    public delete(primaryKey: any) {\n        return this.sqliteObject.executeSql(this.deleteRecordTemplate, [primaryKey]);\n    }\n\n    /**\n     * finds the record with the given primary key.\n     * @param  {object} primaryKey primary key of the record\n     * @returns {object} promise that is resolved with entity\n     */\n    public get(primaryKey: any) {\n        const filterCriteria = [{\n            attributeName: this.primaryKeyName,\n            filterCondition: '=',\n            attributeValue: primaryKey,\n            attributeType: this.primaryKeyField.sqlType.toUpperCase() }];\n        return this.filter(filterCriteria).then(function (obj) {\n            return obj && obj.length === 1 ? obj[0] : undefined;\n        });\n    }\n\n    /**\n     * retrieve the value for the given field.\n     *\n     * @param entity\n     * @param {string} fieldName\n     * @returns {undefined | any | number}\n     */\n    public getValue(entity: any, fieldName: string) {\n        const column = this.entitySchema.columns.find( col => col.fieldName === fieldName);\n        return getValue(entity, column);\n    }\n\n    /**\n     * saves the given entity to the store. If the record is not available, then a new record will be created.\n     * @param {object} entity the entity to save\n     * @returns {object} promise\n     */\n    public save(entity) {\n        return this.saveAll([entity]);\n    }\n\n    /**\n     * saves the given entity to the store. If the record is not available, then a new record will be created.\n     * @param {object} entities the entity to save\n     * @returns {object} promise\n     */\n    public saveAll(entities: any[]) {\n        // filtering the null entities\n        entities = _.filter(entities, null);\n        const queries = _.map(entities, entity => {\n            const rowData = mapObjToRow(this, entity);\n            const params = this.entitySchema.columns.map(f => rowData[f.name]);\n            return [this.replaceRecordSqlTemplate, params];\n        });\n        return this.sqliteObject.sqlBatch(queries);\n    }\n\n    /**\n     * Based on this store columns, this function converts the given FormData to a map object.\n     * Multipart file is stored as a local file. If form data cannot be serialized,\n     * then formData is returned back.\n     * @param  {FormData} formData object to serialize\n     * @returns {object} promise that is resolved with a map.\n     */\n    public serialize(formData: any) {\n        return this.serializeFormDataToMap(formData);\n    }\n\n    /**\n     * Save blob to a local file\n     * @param blob\n     * @returns {*}\n     */\n    private saveBlobToFile(blob: any) {\n        const fileName = this.deviceFileService.appendToFileName(blob.name),\n            uploadDir = this.deviceFileService.getUploadDirectory();\n        return this.file.writeFile(uploadDir, fileName, blob).then(function () {\n            return {\n                'name' : blob.name,\n                'type' : blob.type,\n                'lastModified' : blob.lastModified,\n                'lastModifiedDate' : blob.lastModifiedDate,\n                'size' : blob.size,\n                'wmLocalPath' : uploadDir + '/' + fileName\n            };\n        });\n    }\n\n    /**\n     * Converts form data object to map for storing request in local database..\n     */\n    private serializeFormDataToMap(formData) {\n        const blobColumns = _.filter(this.entitySchema.columns, {\n                'sqlType' : 'blob'\n            }),\n            promises = [];\n        let map = {};\n        if (formData && typeof formData.append === 'function' && formData.rowData) {\n            _.forEach(formData.rowData, (fieldData, fieldName) => {\n                if (fieldData && _.find(blobColumns, {'fieldName' : fieldName})) {\n                    promises.push(this.saveBlobToFile(fieldData).then(localFile => {\n                        map[fieldName] = localFile;\n                    }));\n                } else {\n                    map[fieldName] = fieldData;\n                }\n            });\n        } else {\n            map = formData;\n        }\n        return Promise.all(promises).then(() => map);\n    }\n\n    /**\n     * Converts map object back to form data.\n     */\n    private deserializeMapToFormData(map) {\n        const formData = new FormData(),\n            blobColumns = this.entitySchema.columns.filter(c => c.sqlType === 'blob'),\n            promises = [];\n        _.forEach(blobColumns, column => {\n            const value = map[column.fieldName];\n            if (value && value.wmLocalPath) {\n                promises.push(convertToBlob(value.wmLocalPath)\n                    .then(result => formData.append(column.fieldName, result.blob, value.name)));\n                map[column.fieldName] = '';\n            }\n        });\n        formData.append(SWAGGER_CONSTANTS.WM_DATA_JSON, new Blob([JSON.stringify(map)], {\n            type: 'application/json'\n        }));\n        return Promise.all(promises).then(() => formData);\n    }\n\n    private createTableSql(schema) {\n        const fieldStr = _.reduce(schema.columns, (result, f) => {\n            let str = escapeName(f.name);\n            if (f.primaryKey) {\n                if (f.sqlType === 'number' && f.generatorType === 'databaseIdentity') {\n                    str += ' INTEGER PRIMARY KEY AUTOINCREMENT';\n                } else {\n                    str += ' PRIMARY KEY';\n                }\n            }\n            return result ? result + ',' + str : str;\n        }, false);\n        return `CREATE TABLE IF NOT EXISTS ${escapeName(schema.name)} (${fieldStr})`;\n    }\n}\n","import { SQLiteObject } from '@ionic-native/sqlite';\n\nimport { LocalDBStore } from './local-db-store';\n\nexport class DBInfo {\n    public schema = {\n        name: '',\n        isInternal: false,\n        entities: new Map<string, EntityInfo>()\n    };\n    public stores = new Map<string, LocalDBStore>();\n    public queries = new Map<string, NamedQueryInfo>();\n    public sqliteObject: SQLiteObject;\n}\n\nexport class EntityInfo {\n    public columns = new Array<ColumnInfo>();\n    public pullConfig: PullConfig;\n    public pushConfig: PushConfig;\n\n    constructor(public name: string, public entityName?: string) {\n        this.entityName = this.entityName || this.name;\n    }\n}\n\nexport class ColumnInfo {\n    public generatorType: string;\n    public sqlType: string;\n    public primaryKey = false;\n    public defaultValue: any;\n    public foreignRelations?: ForeignRelationInfo[];\n\n    constructor(public name: string, public fieldName?: string) {\n        this.fieldName = this.fieldName || this.name;\n    }\n}\n\nexport class ForeignRelationInfo {\n    public sourceFieldName: string;\n    public targetEntity: string;\n    public targetTable: string;\n    public targetColumn: string;\n    public targetFieldName: string;\n    public targetPath: string;\n    public dataMapper: Array<ColumnInfo>;\n}\n\nexport class NamedQueryInfo {\n    public params: NamedQueryParamInfo[];\n    public response = {\n        properties: []\n    };\n    constructor(public name: string, public query: string) {\n\n    }\n}\n\nexport class NamedQueryParamInfo {\n    constructor(public name: string, public type?: string, public variableType?: string) {\n\n    }\n}\n\nexport class PullConfig {\n    public size: number;\n    public query: string;\n    public orderBy: string;\n    public maxNoOfRecords: number;\n    public defaultType: string;\n    public pullType: PullType;\n    public filter: OfflineDataFilter[];\n}\n\nexport enum PullType {\n    LIVE = 'LIVE',\n    BUNDLED = 'BUNDLED',\n    APP_START = 'APP_START'\n}\n\nexport class OfflineDataFilter {\n    public attributeName: string;\n    public attributeValue: any;\n    public attributeType: string;\n    public filterCondition: string;\n}\n\nexport class PushConfig {\n    public insertEnabled = false;\n    public updateEnabled = false;\n    public deleteEnabled = false;\n    public readEnabled = true;\n}\n","import { Injectable } from '@angular/core';\n\nimport { AppVersion } from '@ionic-native/app-version';\nimport { File } from '@ionic-native/file';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite';\n\nimport { DataType, DEFAULT_FORMATS, executePromiseChain, extractType, isAndroid, isArray, isIos, noop, toPromise } from '@wm/core';\nimport { DeviceFileService, DeviceService } from '@wm/mobile/core';\nimport { SecurityService } from '@wm/security';\nimport { formatDate } from '@wm/variables';\n\nimport { LocalKeyValueService } from './local-key-value.service';\nimport { LocalDBStore } from '../models/local-db-store';\nimport { escapeName } from '../utils/utils';\nimport { ColumnInfo, DBInfo, EntityInfo, NamedQueryInfo, PullType } from '../models/config';\n\ndeclare const _;\ndeclare const cordova;\ndeclare const moment;\ndeclare const Zeep;\n\nconst  NEXT_ID_COUNT = 'localDBStore.nextIdCount';\nconst META_LOCATION = 'www/metadata/app';\nconst OFFLINE_WAVEMAKER_DATABASE_SCHEMA = {\n    name: 'wavemaker',\n    version: 1,\n    isInternal: true,\n    tables: [\n        {\n            name: 'key_value',\n            entityName: 'key-value',\n            columns: [{\n                fieldName: 'id',\n                name: 'id',\n                generatorType : 'databaseIdentity',\n                sqlType : 'number',\n                primaryKey: true\n            }, {\n                fieldName: 'key',\n                name: 'key'\n            }, {\n                name: 'value',\n                fieldName: 'value'\n            }]\n        },\n        {\n            name: 'offlineChangeLog',\n            entityName: 'offlineChangeLog',\n            columns: [{\n                fieldName: 'id',\n                name: 'id',\n                generatorType: 'databaseIdentity',\n                sqlType: 'number',\n                primaryKey: true\n            }, {\n                name: 'service',\n                fieldName: 'service'\n            }, {\n                name: 'operation',\n                fieldName: 'operation'\n            }, {\n                name: 'params',\n                fieldName: 'params'\n            }, {\n                name: 'timestamp',\n                fieldName: 'timestamp'\n            }, {\n                name: 'hasError',\n                fieldName: 'hasError'\n            }, {\n                name: 'errorMessage',\n                fieldName: 'errorMessage'\n            }]\n        }\n    ]\n};\n\nexport interface CallBack {\n    onDbCreate?: (info: any) => any;\n    postImport?: (importFolderPath: string, metaInfo: any) => any;\n    preExport?: (folderToExportFullPath: string, metaInfo: any) => any;\n}\n\n@Injectable({providedIn: 'root'})\nexport class LocalDBManagementService {\n\n    private callbacks: CallBack[] = [];\n    private dbInstallDirectory: string;\n    private dbInstallDirectoryName: string;\n    private dbInstallParentDirectory: string;\n    private databases: Map<string, DBInfo>;\n    private _logSql = false;\n    public nextId = 100000000000;\n    private readonly systemProperties = {\n        'USER_ID' : {\n            'name' : 'USER_ID',\n            'value' : () => this.securityService.getLoggedInUser().then( userInfo => userInfo.userId)\n        },\n        'USER_NAME' : {\n            'name' : 'USER_NAME',\n            'value' : () => this.securityService.getLoggedInUser().then( userInfo => userInfo.userName)\n        },\n        'DATE_TIME' : {\n            'name' : 'DATE_TIME',\n            'value' : () => moment().format('YYYY-MM-DDThh:mm:ss')\n        },\n        'DATE' : {\n            'name' : 'CURRENT_DATE',\n            'value' : () => moment().format('YYYY-MM-DD')\n        },\n        'TIME' : {\n            'name' : 'TIME',\n            'value' : () => moment().format('hh:mm:ss')\n        }\n    };\n\n    constructor(\n        private appVersion: AppVersion,\n        private deviceService: DeviceService,\n        private deviceFileService: DeviceFileService,\n        private file: File,\n        private localKeyValueService: LocalKeyValueService,\n        private securityService: SecurityService,\n        private sqlite: SQLite\n    ) {}\n\n    /**\n     * Closes all databases.\n     *\n     * @returns {object} a promise.\n     */\n    public close(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            // Before closing databases, give some time for the pending transactions (if any).\n            setTimeout(() => {\n                const closePromises = _.map(_.values(this.databases), db => db.sqliteObject.close());\n                Promise.all(closePromises).then(resolve, reject);\n            }, 1000);\n        });\n    }\n\n    public nextIdCount() {\n        this.nextId = this.nextId + 1;\n        this.localKeyValueService.put(NEXT_ID_COUNT, this.nextId);\n        return this.nextId;\n    }\n\n    /**\n     * Executes a named query.\n     *\n     * @param {string} dbName name of database on which the named query has to be run\n     * @param {string} queryName name of the query to execute\n     * @param {object} params parameters required for query.\n     * @returns {object} a promise.\n     */\n    public executeNamedQuery(dbName: string, queryName: string, params: any) {\n        let queryData, paramPromises;\n        if (!this.databases[dbName] || !this.databases[dbName].queries[queryName]) {\n            return Promise.reject(`Query by name ' ${queryName} ' Not Found`);\n        }\n        queryData = this.databases[dbName].queries[queryName];\n        paramPromises = _.chain(queryData.params)\n            .filter(p => p.variableType !== 'PROMPT')\n            .forEach(p => {\n                const paramValue = this.systemProperties[p.variableType].value(p.name, params);\n                return toPromise(paramValue).then(v => params[p.name] = v);\n            }).value();\n        return Promise.all(paramPromises).then(() => {\n            params = _.map(queryData.params, p => {\n                // Sqlite will accept DateTime value as below format.\n                if (typeof params[p.name] !== 'string'\n                    && (p.type === DataType.DATETIME || p.type === DataType.LOCALDATETIME)) {\n                    return formatDate(params[p.name], p.type);\n                }\n                // sqlite accepts the bool val as 1,0 hence convert the boolean value to number\n                if (p.type === DataType.BOOLEAN) {\n                    return this.convertBoolToInt(params[p.name]);\n                }\n                return params[p.name];\n            });\n            return this.executeSQLQuery(dbName, queryData.query, params)\n                .then(result => {\n                    let firstRow,\n                        needTransform;\n                    if (!_.isEmpty(result.rows)) {\n                        firstRow = result.rows[0];\n                        needTransform = _.find(queryData.response.properties, p => !firstRow.hasOwnProperty(p.fieldName));\n                        if (!_.isUndefined(needTransform)) {\n                            result.rows = _.map(result.rows, row => {\n                                const transformedRow = {},\n                                    rowWithUpperKeys = {};\n                                // This is to make search for data as case-insensitive\n                                _.forEach(row, (v, k) => rowWithUpperKeys[k.toUpperCase()] = v);\n                                _.forEach(queryData.response.properties, p => {\n                                    // format the value depending on the typeRef specified in properties.\n                                    const propType = extractType(p.fieldType.typeRef);\n                                    const formatValue = DEFAULT_FORMATS[_.toUpper(propType)];\n                                    const fieldVal = row[p.name];\n                                    if (fieldVal && typeof fieldVal !== 'string'\n                                        && (propType === DataType.DATETIME || propType === DataType.LOCALDATETIME || propType === DataType.DATE)) {\n                                        if (moment(fieldVal).isValid()) {\n                                            row[p.name] = formatDate(fieldVal, propType);\n                                        } else if (moment(fieldVal, 'HH:mm').isValid()) {\n                                            // if the value is in HH:mm:ss format, it returns a wrong date. So append the date to the given value to get date\n                                            row[p.name] = moment().format('YYYY-MM-DD') + 'T' + fieldVal;\n                                        }\n                                    }\n                                    if (propType === DataType.BOOLEAN) {\n                                        row[p.name] = this.convertIntToBool(fieldVal);\n                                    }\n                                    rowWithUpperKeys[p.nameInUpperCase] = row[p.name];\n                                    transformedRow[p.name] = row[p.name];\n                                    transformedRow[p.fieldName] = row[p.fieldName] || rowWithUpperKeys[p.nameInUpperCase];\n                                });\n                                return transformedRow;\n                            });\n                        }\n                    }\n                    return result;\n                });\n        });\n    }\n\n    /**\n     * This function will export the databases in a zip format.\n     *\n     * @returns {object} a promise that is resolved when zip is created.\n     */\n    public exportDB(): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const folderToExport = 'offline_temp_' + _.now(),\n                folderToExportFullPath = cordova.file.cacheDirectory + folderToExport + '/',\n                zipFileName = '_offline_data.zip',\n                metaInfo = {\n                    app: null,\n                    OS: '',\n                    createdOn: 0\n                };\n            let zipDirectory;\n            if (isIos()) {\n                // In IOS, save zip to documents directory so that user can export the file from IOS devices using iTUNES.\n                zipDirectory = cordova.file.documentsDirectory;\n            } else {\n                // In Android, save zip to download directory.\n                zipDirectory = cordova.file.externalRootDirectory + 'Download/';\n            }\n            // Create a temporary folder to copy all the content to export\n            this.file.createDir(cordova.file.cacheDirectory, folderToExport, false)\n                .then(() => {\n                    // Copy databases to temporary folder for export\n                    return this.file.copyDir(this.dbInstallParentDirectory, this.dbInstallDirectoryName, folderToExportFullPath, 'databases')\n                        .then(() => {\n                            // Prepare meta info to identify the zip and other info\n                            return this.getAppInfo();\n                        }).then(appInfo => {\n                            metaInfo.app = (appInfo as any);\n                            if (isIos()) {\n                                metaInfo.OS = 'IOS';\n                            } else if (isAndroid()) {\n                                metaInfo.OS = 'ANDROID';\n                            }\n                            metaInfo.createdOn = _.now();\n                            return metaInfo;\n                        }).then(() => executePromiseChain(this.getCallbacksFor('preExport'), [folderToExportFullPath, metaInfo]))\n                        .then(() => {\n                            // Write meta data to META.json\n                            return this.file.writeFile(folderToExportFullPath, 'META.json', JSON.stringify(metaInfo));\n                        });\n                }).then(() => {\n                    // Prepare name to use for the zip.\n                    let appName = metaInfo.app.name;\n                    appName = appName.replace(/\\s+/g, '_');\n                    return this.deviceFileService.newFileName(zipDirectory, appName + zipFileName)\n                        .then(fileName => {\n                            // Zip the temporary folder for export\n                            return new Promise((rs, re) => {\n                                Zeep.zip({\n                                    from : folderToExportFullPath,\n                                    to   : zipDirectory + fileName\n                                }, () => rs(zipDirectory + fileName), re);\n                            });\n                        });\n                }).then(resolve, reject)\n                .catch(noop).then(() => {\n                    // Remove temporary folder for export\n                    return this.deviceFileService.removeDir(cordova.file.cacheDirectory + folderToExport);\n                });\n        });\n    }\n\n    /**\n     *  returns store bound to the dataModelName and entityName.\n     *\n     * @param dataModelName\n     * @param entityName\n     * @returns {*}\n     */\n    public getStore(dataModelName: string, entityName: string): Promise<LocalDBStore> {\n        return new Promise((resolve, reject) => {\n            if (this.databases[dataModelName]) {\n                resolve(this.databases[dataModelName].stores[entityName]);\n            }\n            reject(`store with name'${entityName}' in datamodel '${dataModelName}' is not found`);\n        });\n    }\n\n    /**\n     * This function will replace the databases with the files provided in zip. If import gets failed,\n     * then app reverts back to use old databases.\n     *\n     * @param {string} zipPath location of the zip file.\n     * @param {boolean} revertIfFails If true, then a backup is created and when import fails, backup is reverted back.\n     * @returns {object} a promise that is resolved when zip is created.\n     */\n    public importDB(zipPath: string, revertIfFails: boolean): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const importFolder = 'offline_temp_' + _.now(),\n                importFolderFullPath = cordova.file.cacheDirectory + importFolder + '/';\n            let zipMeta;\n            // Create a temporary folder to unzip the contents of the zip.\n            this.file.createDir(cordova.file.cacheDirectory, importFolder, false)\n                .then( () => {\n                    return new Promise<void>((rs, re) => {\n                        // Unzip to temporary location\n                        Zeep.unzip({\n                            from: zipPath,\n                            to: importFolderFullPath\n                        }, rs, re);\n                    });\n                }).then(() => {\n                /*\n                 * read meta data and allow import only package name of the app from which this zip is created\n                 * and the package name of this app are same.\n                 */\n                return this.file.readAsText(importFolderFullPath, 'META.json')\n                    .then(text => {\n                    zipMeta = JSON.parse(text);\n                    return this.getAppInfo();\n                }).then(appInfo => {\n                    if (!zipMeta.app) {\n                        return Promise.reject('meta information is not found in zip');\n                    }\n                    if (zipMeta.app.packageName !== appInfo.packageName) {\n                        return Promise.reject('database zip of app with same package name can only be imported');\n                    }\n                });\n            }).then(() => {\n                let backupZip;\n                return this.close()\n                    .then(() => {\n                        if (revertIfFails) {\n                            // create backup\n                            return this.exportDB()\n                                .then(path => backupZip = path);\n                        }\n                    }).then(() => {\n                        // delete existing databases\n                        return this.deviceFileService.removeDir(this.dbInstallDirectory);\n                    }).then(() => {\n                        // copy imported databases\n                        return this.file.copyDir(importFolderFullPath, 'databases', this.dbInstallParentDirectory, this.dbInstallDirectoryName);\n                    }).then(() => {\n                        // reload databases\n                        this.databases = null;\n                        return this.loadDatabases();\n                    }).then(() => executePromiseChain(this.getCallbacksFor('postImport'), [importFolderFullPath, zipMeta]))\n                    .then(() => {\n                        if (backupZip) {\n                            return this.deviceFileService.removeFile(backupZip);\n                        }\n                    }, (reason) => {\n                        if (backupZip) {\n                            return this.importDB(backupZip, false)\n                                .then(() => {\n                                    this.deviceFileService.removeFile(backupZip);\n                                    return Promise.reject(reason);\n                                });\n                        }\n                        return Promise.reject(reason);\n                    });\n            }).then(resolve, reject)\n            .catch(noop)\n            .then(() => {\n                return this.deviceFileService.removeDir(cordova.file.cacheDirectory + importFolder);\n            });\n        });\n    }\n\n    /**\n     * @param {string} dataModelName Name of the data model\n     * @param {string} entityName Name of the entity\n     * @param {string} operation Name of the operation (READ, INSERT, UPDATE, DELETE)\n     * @returns {boolean} returns true, if the given operation can be performed as per configuration.\n     */\n    public isOperationAllowed(dataModelName: string, entityName: string, operation: string): Promise<boolean> {\n        return this.getStore(dataModelName, entityName).then( store => {\n            if (!store) {\n                return false;\n            }\n            if (operation === 'READ') {\n                return store.entitySchema.pushConfig.readEnabled;\n            }\n            if (operation === 'INSERT') {\n                return store.entitySchema.pushConfig.insertEnabled;\n            }\n            if (operation === 'UPDATE') {\n                return store.entitySchema.pushConfig.updateEnabled;\n            }\n            if (operation === 'DELETE') {\n                return store.entitySchema.pushConfig.deleteEnabled;\n            }\n            return false;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    public loadDatabases(): Promise<any> {\n        let newDatabasesCreated = false;\n        if (this.databases) {\n            return Promise.resolve(this.databases);\n        } else {\n            if (isIos()) {\n                this.dbInstallDirectoryName = 'LocalDatabase';\n                this.dbInstallParentDirectory = cordova.file.applicationStorageDirectory +  'Library/';\n            } else {\n                this.dbInstallDirectoryName = 'databases';\n                this.dbInstallParentDirectory = cordova.file.applicationStorageDirectory;\n            }\n            this.dbInstallDirectory = this.dbInstallParentDirectory + this.dbInstallDirectoryName;\n\n            this.databases = new Map<string, DBInfo>();\n            return this.setUpDatabases()\n                .then( flag => newDatabasesCreated = flag)\n                .then(() => this.loadDBSchemas())\n                .then(metadata => this.loadNamedQueries(metadata))\n                .then(metadata => this.loadOfflineConfig(metadata))\n                .then(metadata => {\n                    return Promise.all(_.map(metadata, dbMetadata => {\n                        return this.openDatabase(dbMetadata)\n                            .then(database => {\n                                this.databases[dbMetadata.schema.name] = database;\n                            });\n                    }));\n                }).then(() => {\n                    return this.getStore('wavemaker', 'key-value').then( store => {\n                        this.localKeyValueService.init(store);\n                        return this.localKeyValueService.get(NEXT_ID_COUNT).then(val => {\n                           this.nextId = val || this.nextId;\n                        });\n                    });\n                }).then(() => {\n                    if (newDatabasesCreated) {\n                        return this.normalizeData()\n                            .then(() => this.disableForeignKeys())\n                            .then(() => this.deviceService.getAppBuildTime())\n                            .then(dbSeedCreationTime => {\n                                return executePromiseChain(_.map(this.callbacks, 'onDbCreate'), [{\n                                    'databases' : this.databases,\n                                    'dbCreatedOn' : _.now(),\n                                    'dbSeedCreatedOn' : dbSeedCreationTime\n                                }]);\n                            }).then(() => this.databases);\n                    } else {\n                        return this.databases;\n                    }\n                });\n        }\n    }\n\n    /**\n     * using this function one can listen events such as onDbCreate, 'preExport' and 'postImport'.\n     *\n     * @param {object} listener an object with functions mapped to event names.\n     */\n    public registerCallback(listener: CallBack) {\n        this.callbacks.push(listener);\n    }\n\n    public setLogSQl(flag: boolean) {\n        this._logSql = flag;\n    }\n\n    /**\n     * Deletes any existing databases (except wavemaker db) and copies the databases that are packaged with the app.\n     *\n     * @returns {*}\n     */\n    private cleanAndCopyDatabases(): Promise<any> {\n        const dbSeedFolder = cordova.file.applicationDirectory + META_LOCATION;\n        return this.file.createDir(this.dbInstallParentDirectory, this.dbInstallDirectoryName, false)\n            .catch(noop)\n            .then(() => this.deviceFileService.listFiles(this.dbInstallDirectory, /.+\\.db$/))\n            .then(files => {\n                if (files && files.length > 0) {\n                    return Promise.all(files.map(f => {\n                        if (f['name'] !== 'wavemaker.db') {\n                            return this.file.removeFile(this.dbInstallDirectory, f['name']);\n                        }\n                    }));\n                }\n            })\n            .then( () => this.deviceFileService.listFiles(dbSeedFolder, /.+\\.db$/))\n            .then(files => {\n                if (files && files.length > 0) {\n                    return this.file.createDir(this.dbInstallParentDirectory, this.dbInstallDirectoryName, false)\n                        .catch(noop)\n                        .then(() => Promise.all(files.map(\n                                f => this.file.copyFile(dbSeedFolder, f['name'], this.dbInstallDirectory, f['name'])\n                            ))\n                        );\n                }\n            });\n    }\n\n    // Picks essential details from the given schema.\n    private compactEntitySchema(schema, entity, transformedSchemas): EntityInfo {\n        const reqEntity = transformedSchemas[entity['entityName']] as EntityInfo;\n        reqEntity.entityName = entity['entityName'];\n        reqEntity.name = entity['name'];\n        reqEntity.columns = [];\n        entity.columns.forEach(col => {\n            let defaultValue = col.columnValue ? col.columnValue.defaultValue : '';\n            const type = col.sqlType;\n            if (type === 'number' && !col.primaryKey) {\n                defaultValue = _.isEmpty(defaultValue) ? null : _.parseInt(defaultValue);\n            } else if (type === 'boolean') {\n                defaultValue = _.isEmpty(defaultValue) ? null : (defaultValue === 'true' ? 1 : 0);\n            } else {\n                defaultValue = _.isEmpty(defaultValue) ? null : defaultValue;\n            }\n            reqEntity.columns.push({\n                name: col['name'],\n                fieldName: col['fieldName'],\n                generatorType: col['generatorType'],\n                sqlType: col['sqlType'],\n                primaryKey: col['primaryKey'],\n                defaultValue: defaultValue\n            });\n        });\n\n        _.forEach(entity.relations, r => {\n            let targetEntitySchema, targetEntity, col, sourceColumn, mapping;\n            if (r.cardinality === 'ManyToOne' || r.cardinality === 'OneToOne') {\n                targetEntity = _.find(schema.tables, t => t.name === r.targetTable);\n                mapping = r.mappings[0];\n                if (targetEntity) {\n                    targetEntity = targetEntity.entityName;\n                    sourceColumn = mapping.sourceColumn;\n                    col = reqEntity.columns.find(column => column.name === sourceColumn);\n                    targetEntitySchema = schema.tables.find(table => table.name === r.targetTable);\n                    const foreignRelation = {\n                        sourceFieldName: r.fieldName,\n                        targetEntity: targetEntity,\n                        targetTable: r.targetTable,\n                        targetColumn: mapping.targetColumn,\n                        targetPath: '',\n                        dataMapper: [],\n                        targetFieldName: targetEntitySchema.columns.find(column => column.name === mapping.targetColumn).fieldName\n                    };\n                    foreignRelation.targetPath = foreignRelation.sourceFieldName + '.' + foreignRelation.targetFieldName;\n                    foreignRelation.dataMapper = _.chain(targetEntitySchema.columns)\n                        .keyBy(childCol => foreignRelation.sourceFieldName + '.' + childCol.fieldName)\n                        .mapValues(childCol => new ColumnInfo(childCol.name, childCol.fieldName)).value();\n                    col.foreignRelations = col.foreignRelations || [];\n                    col.foreignRelations.push(foreignRelation);\n                }\n            }\n        });\n        return reqEntity;\n    }\n\n    // Loads necessary details of queries\n    private compactQueries(queriesByDB): Map<string, NamedQueryInfo> {\n        const queries = new Map<string, NamedQueryInfo>();\n\n        _.forEach(queriesByDB.queries, queryData => {\n            let query, params;\n            if (queryData.nativeSql && queryData.type === 'SELECT') {\n                query = _.isEmpty(queryData.offlineQueryString) ? queryData.queryString : queryData.offlineQueryString;\n                params = _.map(this.extractQueryParams(query), p => {\n                    const paramObj = _.find(queryData.parameters, {'name': p});\n                    return {\n                        name: paramObj.name,\n                        type: paramObj.type,\n                        variableType: paramObj.variableType\n                    };\n                });\n                params.forEach(p => query = _.replace(query, ':' + p.name, '?'));\n                queries[queryData.name] = {\n                    name: queryData.name,\n                    query: query,\n                    params: params,\n                    response: {\n                        properties: _.map(queryData.response.properties, p => {\n                            p.nameInUpperCase = p.name.toUpperCase();\n                            return p;\n                        })\n                    }\n                };\n            }\n        });\n        return queries;\n    }\n\n    // Loads necessary details of remote schema\n    private compactSchema(schema): DBInfo {\n        const dbInfo = new DBInfo();\n        const transformedSchemas = new Map<string, EntityInfo>();\n        schema.tables.forEach(entitySchema => {\n            transformedSchemas[entitySchema.entityName] = {};\n        });\n        schema.tables.forEach(entitySchema => {\n            this.compactEntitySchema(schema, entitySchema, transformedSchemas);\n        });\n        dbInfo.schema.name = schema.name;\n        dbInfo.schema.isInternal = schema.isInternal;\n        dbInfo.schema.entities = transformedSchemas;\n        return dbInfo;\n    }\n\n    private convertBoolToInt(bool: boolean) {\n        return _.toString(bool) === 'true' ? 1 : 0;\n    }\n\n    private convertIntToBool(int: number) {\n        return int ? true : false;\n    }\n\n    /**\n     * Turns off foreign keys\n     * @returns {*}\n     */\n    private disableForeignKeys() {\n        return Promise.all(_.map(this.databases, db =>\n            this.executeSQLQuery(db.schema.name, 'PRAGMA foreign_keys = OFF')\n        ));\n    }\n\n    /**\n     * Executes SQL query;\n     *\n     * @param dbName\n     * @param sql\n     * @param params\n     * @returns {*}\n     */\n    public executeSQLQuery(dbName, sql, params?: any[], logOutput?: boolean) {\n        const db = this.databases[dbName];\n        if (db) {\n            return db.sqliteObject.executeSql(sql, params, logOutput)\n                .then(result => {\n                    const data = [],\n                        rows = result.rows;\n                    for (let i = 0; i < rows.length; i++) {\n                        data.push(rows.item(i));\n                    }\n                    return {\n                        'rowsAffected'  : result.rowsAffected,\n                        'rows'          : data\n                    };\n                });\n        }\n        return Promise.reject(`No Database with name ${dbName} found`);\n    }\n\n    // get the params of the query or procedure.\n    private extractQueryParams(query) {\n        let params, aliasParams;\n        aliasParams = query.match(/[^\"'\\w\\\\]:\\s*\\w+\\s*/g) || [];\n        if (aliasParams.length) {\n            params = aliasParams.map(x => (/[=|\\W]/g.test(x)) ? x.replace(/\\W/g, '').trim() : x.trim());\n        } else {\n            params = null;\n        }\n        return params;\n    }\n\n    /**\n     * Returns a promise that is resolved with application info such as packageName, appName, versionNumber, versionCode.\n     * @returns {*}\n     */\n    private getAppInfo() {\n        const appInfo = {\n            name: '',\n            packageName: '',\n            versionNumber: '',\n            versionCode: null\n        };\n        return this.appVersion.getPackageName()\n            .then(packageName => {\n                appInfo.packageName = packageName;\n                return this.appVersion.getAppName();\n            }).then(appName => {\n                appInfo.name = appName;\n                return this.appVersion.getVersionNumber();\n            }).then(versionNumber => {\n                appInfo.versionNumber = versionNumber;\n                return this.appVersion.getVersionCode();\n            }).then(versionCode => {\n                appInfo.versionCode = (versionCode as any);\n                return appInfo;\n            });\n    }\n\n    private getCallbacksFor(event: string): any[] {\n        return this.callbacks.map(c => {\n            if (c[event]) {\n                return c[event].bind(c);\n            }\n            return null;\n        });\n    }\n\n    /**\n     * Searches for the files with given regex in 'www/metadata/app'and returns an array that contains the JSON\n     * content present in each file.\n     *\n     * @param {string} fileNameRegex regex pattern to search for files.\n     * @returns {*} A promise that is resolved with an array\n     */\n    private getMetaInfo(fileNameRegex: RegExp) {\n        const folder = cordova.file.applicationDirectory + META_LOCATION + '/';\n        return this.deviceFileService.listFiles(folder, fileNameRegex)\n            .then(files => Promise.all(_.map(files, f => {\n                    return new Promise((resolve, reject) => {\n                        // Cordova File reader has buffer issues with large files.\n                        // so, using ajax to retrieve local json\n                        $.getJSON( folder + f['name'], data => resolve(data));\n                    });\n                }))\n            );\n    }\n\n    /**\n     * Returns true, if the given entity's data is bundled along with application installer.\n     * @param dataModelName name of the data model\n     * @param entityName name of the entity\n     * @returns {Promise<any>}\n     */\n    public isBundled(dataModelName, entityName): Promise<any> {\n        return this.getStore(dataModelName, entityName).then(store => {\n            return store.entitySchema.pullConfig.pullType === PullType.BUNDLED;\n        });\n    }\n\n    /**\n     * Loads local database schemas from *_data_model.json.\n     *\n     * @returns {*} A promise that is resolved with metadata.\n     */\n    private loadDBSchemas(): Promise<Map<string, DBInfo>> {\n        return this.getMetaInfo(/.+_dataModel\\.json$/)\n            .then( (schemas: any) => {\n                const metadata = new Map<string, DBInfo>();\n                schemas = isArray(schemas) ? schemas : [schemas];\n                schemas.push(OFFLINE_WAVEMAKER_DATABASE_SCHEMA);\n                schemas.map(s => this.compactSchema(s))\n                    .forEach(s =>  {\n                        metadata[s.schema.name] = s;\n                    });\n                return metadata;\n            });\n    }\n\n    /**\n     * Load named queries from *_query.json.\n     *\n     * @param {*} metadata\n     * @returns {*} A promise that is resolved with metadata\n     */\n    private loadNamedQueries(metadata) {\n        return this.getMetaInfo(/.+_query\\.json$/)\n            .then((queriesByDBs: any) => {\n                queriesByDBs = _.isArray(queriesByDBs) ? queriesByDBs : [queriesByDBs];\n                queriesByDBs.map(e => metadata[e.name].queries = this.compactQueries(e));\n                return metadata;\n            });\n    }\n\n    /**\n     * Load offline configuration from *_offline.json.\n     *\n     * @param {*} metadata\n     * @returns {*} A promise that is resolved with metadata\n     */\n    private loadOfflineConfig(metadata) {\n        return this.getMetaInfo(/.+_offline\\.json$/)\n            .then(configs => {\n                _.forEach(configs, config => {\n                    _.forEach(config.entities, entityConfig => {\n                        const entitySchema = _.find(metadata[config.name].schema.entities, schema => schema.name === entityConfig.name);\n                        _.assignIn(entitySchema, entityConfig);\n                    });\n                });\n                return metadata;\n            });\n    }\n\n    private logSql(sqliteObject: SQLiteObject) {\n        const logger = console,\n            originalExecuteSql = sqliteObject.executeSql;\n        sqliteObject.executeSql = (sql, params, logOutput?: boolean) => {\n            const startTime = _.now();\n            return originalExecuteSql.call(sqliteObject, sql, params).then(result => {\n                if (logOutput || this._logSql) {\n                    const objArr = [],\n                        rowCount = result.rows.length;\n                    for (let i = 0; i < rowCount; i++) {\n                        objArr.push(result.rows.item(i));\n                    }\n                    logger.debug('SQL \"%s\"  with params %O took [%d ms]. And the result is %O', sql, params, _.now() - startTime, objArr);\n                }\n                return result;\n            }, error => {\n                logger.error('SQL \"%s\" with params %O failed with error message %s', sql, params, error.message);\n                return Promise.reject(error);\n            });\n        };\n    }\n\n    /**\n     * SQLite does not support boolean data. Instead of using boolean values, data will be changed to 0 or 1.\n     * If the value is 'true', then 1 is set as value. If value is not 1 nor null, then column value is set as 0.\n     * @param dbName\n     * @param tableName\n     * @param colName\n     * @returns {*}\n     */\n    private normalizeBooleanData(dbName, tableName, colName) {\n        const trueTo1Query = `update ${escapeName(tableName)} set ${escapeName(colName)} = 1 where ${escapeName(colName)} = 'true'`,\n            exceptNullAnd1to0Query = `update ${escapeName(tableName)} set ${escapeName(colName)} = 0\n                                  where ${escapeName(colName)} is not null and ${escapeName(colName)} != 1`;\n        return this.executeSQLQuery(dbName, trueTo1Query)\n            .then(() => this.executeSQLQuery(dbName, exceptNullAnd1to0Query));\n    }\n\n    /**\n     * Converts data to support SQLite.\n     * @returns {*}\n     */\n    private normalizeData() {\n        return Promise.all(_.map(this.databases, database => {\n            return Promise.all(_.map(database.schema.entities, entitySchema => {\n                return Promise.all(_.map(entitySchema.columns, column => {\n                    if (column.sqlType === 'boolean') {\n                        return this.normalizeBooleanData(database.schema.name, entitySchema.name, column.name);\n                    }\n                }));\n            }));\n        }));\n    }\n\n    private openDatabase(database: DBInfo) {\n        return this.sqlite.create({\n                name: database.schema.name + '.db',\n                location: 'default'\n        }).then(sqliteObject => {\n            database.sqliteObject = sqliteObject;\n            this.logSql(sqliteObject);\n            const storePromises = _.map(database.schema.entities, entitySchema => {\n                const store = new LocalDBStore(this.deviceFileService,\n                    entitySchema,\n                    this.file,\n                    this,\n                    sqliteObject\n                    );\n                return store.create();\n            });\n            return Promise.all(storePromises).then(stores => {\n                _.forEach(stores, store => {\n                    database.stores[store.entitySchema.entityName] = store;\n                });\n                return database;\n            });\n        });\n    }\n\n    /**\n     * When app is opened for first time  after a fresh install or update, then old databases are removed and\n     * new databases are created using bundled databases.\n     *\n     * @returns {*} a promise that is resolved with true, if the databases are newly created or resolved with false\n     * if existing databases are being used.\n     */\n    private setUpDatabases(): Promise<boolean> {\n        return this.deviceService.getAppBuildTime()\n            .then((buildTime) => {\n                const dbInfo = this.deviceService.getEntry('database') || {};\n                if (!dbInfo.lastBuildTime || dbInfo.lastBuildTime !== buildTime) {\n                    return this.cleanAndCopyDatabases()\n                        .then(() => {\n                            dbInfo.lastBuildTime = buildTime;\n                            return this.deviceService.storeEntry('database', dbInfo);\n                        }).then(() => true);\n                }\n                return false;\n            });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observer } from 'rxjs/index';\n\nimport { executePromiseChain, getAbortableDefer, isString, noop } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\n\nimport { LocalDBManagementService } from './local-db-management.service';\nimport { LocalKeyValueService } from './local-key-value.service';\nimport { LocalDBStore } from '../models/local-db-store';\n\ndeclare const _;\n\nexport interface Change {\n    id?: number;\n    errorMessage?: string;\n    hasError: number;\n    operation: string;\n    params: any;\n    service: string;\n}\n\nexport interface FlushContext {\n    clear: () => Promise<any>;\n    get: (key: string) => any;\n    save: () => Promise<any>;\n}\n\nexport interface Worker {\n    onAddCall?: (change: Change) => (Promise<any> | void);\n    preFlush?: (context: FlushContext) => (Promise<any> | void);\n    postFlush?: (pushInfo: PushInfo, context: FlushContext) => (Promise<any> | void);\n    preCall?: (change: Change) => (Promise<any> | void);\n    postCallError?: (change: Change, error: any) => (Promise<any> | void);\n    postCallSuccess?: (change: Change, response: any) => (Promise<any> | void);\n    transformParamsToMap?: (change: Change) => (Promise<any> | void);\n    transformParamsFromMap?: (change: Change) => (Promise<any> | void);\n}\n\nexport interface PullInfo {\n    databases: Array<any>;\n    totalRecordsToPull: number;\n    totalPulledRecordCount: number;\n    startTime: Date;\n    endTime: Date;\n}\n\nexport interface PushInfo {\n    completedTaskCount: number;\n    endTime: Date;\n    failedTaskCount: number;\n    inProgress: boolean;\n    startTime: Date;\n    successfulTaskCount: number;\n    totalTaskCount: number;\n}\n\nexport abstract class PushService {\n    public abstract push(change: Change): Promise<any>;\n}\n\nexport const CONTEXT_KEY = 'changeLogService.flushContext';\nexport const LAST_PUSH_INFO_KEY = 'changeLogService.lastPushInfo';\n\n@Injectable({providedIn: 'root'})\nexport class ChangeLogService {\n\n    private workers: Worker[] = [];\n\n    private flushContext: FlushContext;\n\n    private currentPushInfo: PushInfo;\n\n    private deferredFlush;\n\n    constructor(private localDBManagementService: LocalDBManagementService,\n                private localKeyValueService: LocalKeyValueService,\n                private pushService: PushService,\n                private networkService: NetworkService) {\n        this.currentPushInfo = {} as PushInfo;\n        this.addWorker(new FlushTracker(this,  this.localKeyValueService, this.currentPushInfo));\n    }\n\n\n    /**\n     * adds a service call to the log. Call will be invoked in next flush.\n     *\n     * @Param {string} name of service (This should be available through $injector)\n     * @Param {string} name of method to invoke.\n     * @Param {object} params\n     */\n    public add(service: string, operation: string, params: any): Promise<void> {\n        const change: Change = {\n            service: service,\n            operation: operation,\n            params: params,\n            hasError: 0\n        };\n        return executePromiseChain(this.getWorkers('transformParamsToMap'), [change])\n            .then(() => executePromiseChain(this.getWorkers('onAddCall'), [change]))\n            .then(() => {\n                change.params = JSON.stringify(change.params);\n                return this.getStore().then(store => store.add(change)).then(noop);\n            });\n    }\n\n    public addWorker(worker: Worker) {\n        this.workers.push(worker);\n    }\n\n    /**\n     * Clears the current log.\n     */\n    public clearLog() {\n        return this.getStore().then( s => s.clear());\n    }\n\n    /**\n     * Flush the current log. If a flush is already running, then the promise of that flush is returned back.\n     */\n    public flush(progressObserver: Observer<PushInfo>): Promise<PushInfo> {\n        let flushPromise;\n        if (!this.deferredFlush) {\n            this.deferredFlush = getAbortableDefer();\n            this.createContext().then(context => {\n                this.flushContext = context;\n                return executePromiseChain(this.getWorkers('preFlush'), [this.flushContext]);\n            })\n                .then(() => {\n                    flushPromise = this._flush(progressObserver);\n                    this.deferredFlush.onAbort = () => flushPromise.abort();\n                    return flushPromise;\n                })\n                .catch(noop)\n                .then(() => {\n                    Promise.resolve().then(() => {\n                        if (this.currentPushInfo.totalTaskCount === this.currentPushInfo.completedTaskCount) {\n                            return this.flushContext.clear().then(() => this.flushContext = null);\n                        }\n                    }).then(() => {\n                        progressObserver.complete();\n                        if (this.currentPushInfo.failedTaskCount > 0) {\n                            this.deferredFlush.reject(this.currentPushInfo);\n                        } else {\n                            this.deferredFlush.resolve(this.currentPushInfo);\n                        }\n                        this.deferredFlush = null;\n                    }).then(() => {\n                        return executePromiseChain(this.getWorkers('postFlush'), [this.currentPushInfo, this.flushContext]);\n                    });\n                });\n        }\n        return this.deferredFlush.promise;\n    }\n\n    /**\n     * Returns the complete change list\n     */\n    public getChanges() {\n        return this.getStore().then( s => s.filter(undefined, 'id', {\n            offset: 0,\n            limit: 500\n        })).then(changes => {\n            changes.forEach(change => {\n                change.params = JSON.parse(change.params);\n            });\n            return changes;\n        });\n    }\n\n\n    /**\n     * @returns {array} an array of changes that failed with error.\n     */\n    public getErrors(): Promise<Change[]> {\n        return this.getStore().then( s => s.filter([{\n            attributeName: 'hasError',\n            attributeValue: 1,\n            attributeType: 'NUMBER',\n            filterCondition: 'EQUALS'\n        }]));\n    }\n\n\n    public getLastPushInfo(): Promise<PushInfo> {\n        return this.localKeyValueService.get(LAST_PUSH_INFO_KEY)\n            .then(info => {\n                if (isString(info.startTime)) {\n                    info.startTime = new Date(info.startTime);\n                }\n                if (isString(info.endTime)) {\n                    info.endTime = new Date(info.endTime);\n                }\n                return info;\n            });\n    }\n    /**\n     * @returns {number} number of changes that are pending to push.\n     */\n    public getLogLength(): Promise<number> {\n        return this.getStore().then( s => s.count([{\n            attributeName: 'hasError',\n            attributeValue: 0,\n            attributeType: 'NUMBER',\n            filterCondition: 'EQUALS'\n        }]));\n    }\n\n    /*\n    * Retrieves the entity store to use by ChangeLogService.\n    */\n    public getStore(): Promise<LocalDBStore> {\n        return this.localDBManagementService.getStore('wavemaker', 'offlineChangeLog');\n    }\n\n    /**\n     * Returns true, if a flush process is in progress. Otherwise, returns false.\n     *\n     * @returns {boolean} returns true, if a flush process is in progress. Otherwise, returns false.\n     */\n    public isFlushInProgress(): boolean {\n        return !(_.isUndefined(this.deferredFlush) || _.isNull(this.deferredFlush));\n    }\n\n    /**\n     * Stops the ongoing flush process.\n     *\n     * @returns {object} a promise that is resolved when the flush process is stopped.\n     */\n    public stop(): Promise<void> {\n        return new Promise( resolve => {\n            if (this.deferredFlush) {\n                this.deferredFlush.promise.catch().then(resolve);\n                this.deferredFlush.promise.abort();\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    private createContext() {\n        return this.localKeyValueService.get(CONTEXT_KEY)\n            .then(context => {\n                context = context || {};\n                return {\n                    'clear' : () => {\n                        context = {};\n                        return this.localKeyValueService.remove(CONTEXT_KEY);\n                    },\n                    'get' : key => {\n                        let value = context[key];\n                        if (!value) {\n                            value = {};\n                            context[key] = value;\n                        }\n                        return value;\n                    },\n                    'save' : () => this.localKeyValueService.put(CONTEXT_KEY, context)\n                };\n            });\n    }\n\n    // Flushes the complete log one after another.\n    private _flush(progressObserver: Observer<PushInfo>, defer?: any) {\n        defer = defer || getAbortableDefer();\n        if (defer.isAborted) {\n            return Promise.resolve();\n        }\n        this.getNextChange()\n            .then(change => {\n                if (change) {\n                    change.params = JSON.parse(change.params);\n                    return this.flushChange(change);\n                }\n            })\n            .then(change => {\n                progressObserver.next(this.currentPushInfo);\n                if (change) {\n                    return this.getStore()\n                        .then(s => s.delete(change.id))\n                        .then(() => this._flush(progressObserver, defer));\n                } else {\n                    defer.resolve();\n                }\n            }, change => {\n                if (this.networkService.isConnected()) {\n                    change.hasError = 1;\n                    change.params = JSON.stringify(change.params);\n                    this.getStore()\n                        .then(s => s.save(change))\n                        .then(() => this._flush(progressObserver, defer));\n                } else {\n                    let connectPromise = this.networkService.onConnect();\n                    defer.promise.catch(function () {\n                        if (connectPromise) {\n                            connectPromise.abort();\n                        }\n                    });\n                    connectPromise.then(() => {\n                        this._flush(progressObserver, defer);\n                        connectPromise = null;\n                    });\n                }\n            });\n        return defer.promise;\n    }\n\n    private flushChange(change: Change): Promise<Change> {\n        const self = this;\n        return executePromiseChain(this.getWorkers('preCall'), [change])\n            .then(() => change.hasError ? Promise.reject(change.errorMessage) : '')\n            .then(() => executePromiseChain(this.getWorkers('transformParamsFromMap'), [change]))\n            .then(() => this.pushService.push(change))\n            .then(function() {\n                return executePromiseChain(_.reverse(self.getWorkers('postCallSuccess')), [change, arguments])\n                    .then(() => change);\n            }).catch(function() {\n                if (self.networkService.isConnected()) {\n                    return executePromiseChain(_.reverse(self.getWorkers('postCallError')), [change, arguments])\n                        .catch(noop).then(() => Promise.reject(change));\n                }\n                return Promise.reject(change);\n            });\n    }\n\n\n\n    // Flushes the first registered change.\n    private getNextChange(): Promise<Change> {\n        const filterCriteria = [{\n            attributeName: 'hasError',\n            attributeValue: 0,\n            attributeType: 'NUMBER',\n            filterCondition: 'EQUALS'\n        }];\n        return this.getStore().then(s => s.filter(filterCriteria, 'id', {\n            offset: 0,\n            limit: 1\n        })).then((changes: Array<Change>) => {\n            return changes && changes[0];\n        });\n    }\n\n    private getWorkers(type) {\n        return _.map(this.workers, w => w[type] && w[type].bind(w));\n    }\n}\n\nclass FlushTracker {\n\n    private flushContext: FlushContext;\n    private logger: any;\n\n    constructor(private changeLogService: ChangeLogService,\n                private localKeyValueService: LocalKeyValueService,\n                private pushInfo: PushInfo) {\n        this.logger = window.console;\n    }\n\n    public onAddCall(change: Change) {\n        this.logger.debug('Added the following call %o to log.', change);\n    }\n\n    public preFlush(flushContext: FlushContext) {\n        this.pushInfo.totalTaskCount = 0;\n        this.pushInfo.successfulTaskCount = 0;\n        this.pushInfo.failedTaskCount = 0;\n        this.pushInfo.completedTaskCount = 0;\n        this.pushInfo.inProgress = true;\n        this.pushInfo.startTime = new Date();\n        this.flushContext = flushContext;\n        this.logger.debug('Starting flush');\n        return this.changeLogService.getStore().then(store => {\n            return store.count([{\n                attributeName: 'hasError',\n                attributeValue: 0,\n                attributeType: 'NUMBER',\n                filterCondition: 'EQUALS'\n            }]);\n        }).then(count => this.pushInfo.totalTaskCount = count);\n    }\n\n    public postFlush(stats: PushInfo , flushContext: FlushContext) {\n        this.logger.debug('flush completed. {Success : %i , Error : %i , completed : %i, total : %i }.',\n            this.pushInfo.successfulTaskCount, this.pushInfo.failedTaskCount, this.pushInfo.completedTaskCount, this.pushInfo.totalTaskCount);\n        this.pushInfo.inProgress = false;\n        this.pushInfo.endTime = new Date();\n        this.localKeyValueService.put(LAST_PUSH_INFO_KEY, this.pushInfo);\n        this.flushContext = null;\n    }\n\n    public preCall(change: Change) {\n        this.logger.debug('%i. Invoking call %o', (1 + this.pushInfo.completedTaskCount), change);\n    }\n\n    public postCallError(change: Change, response: any) {\n        this.pushInfo.completedTaskCount++;\n        this.pushInfo.failedTaskCount++;\n        this.logger.error('call failed with the response %o.', response);\n        return this.flushContext.save();\n    }\n\n    public postCallSuccess(change: Change, response: any) {\n        this.pushInfo.completedTaskCount++;\n        this.pushInfo.successfulTaskCount++;\n        this.logger.debug('call returned the following response %o.', response);\n        return this.flushContext.save();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { LocalDBManagementService } from './local-db-management.service';\nimport { LocalDBStore } from '../models/local-db-store';\n\ndeclare const _;\n\n@Injectable({providedIn: 'root'})\nexport class LocalDbService {\n\n    private searchTableData;\n    private searchTableDataWithQuery;\n    private getDistinctDataByFields;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n        this.searchTableData = this.readTableData.bind(this);\n        this.searchTableDataWithQuery = this.readTableData.bind(this);\n        this.getDistinctDataByFields = this.readTableData.bind(this);\n    }\n\n    public getStore(params: any): Promise<LocalDBStore> {\n        return this.localDBManagementService.getStore(params.dataModelName, params.entityName);\n    }\n\n    /**\n     * Method to insert data into the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public insertTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            const isPKAutoIncremented = (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity');\n            if (isPKAutoIncremented && params.data[store.primaryKeyName]) {\n                delete params.data[store.primaryKeyName];\n            }\n            return store.add(params.data).then(() => {\n                store.refresh(params.data).then(successCallback);\n            });\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to insert multi part data into the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public insertMultiPartTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            store.serialize(params.data).then(data => {\n                params.data = data;\n                this.insertTableData(params, successCallback, failureCallback);\n            });\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to update data in the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be updated.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public updateTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            return store.save(params.data)\n                .then(() => {\n                    store.refresh(params.data).then(successCallback);\n                });\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to update multi part data in the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be updated.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public updateMultiPartTableData(params: any, successCallback?: any, failureCallback?: any)  {\n        const data = (params.data && params.data.rowData) || params.data;\n        this.getStore(params).then(store => {\n            return store.save(data);\n        }).then(() => {\n            if (successCallback) {\n                successCallback(data);\n            }\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to delete data in the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public deleteTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            const pkField = store.primaryKeyField,\n                id = params[pkField.fieldName] || params[pkField.name] || (params.data && params.data[pkField.fieldName]) || params.id;\n            store.delete(id).then(successCallback);\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to read data from a specified table.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public readTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            let filter = params.filter((filterGroup, filterFields) => {\n                this.convertFieldNameToColumnName(store, filterGroup, filterFields);\n            }, true);\n            // convert wm_bool function with boolean value to 0/1\n            filter = filter.replace(/wm_bool\\('true'\\)/g, 1).replace(/wm_bool\\('false'\\)/g, 0);\n            return store.count(filter).then(totalElements => {\n                const sort = params.sort.split('=')[1];\n                return store.filter(filter, sort, {\n                    offset: (params.page - 1) * params.size,\n                    limit: params.size\n                }).then(data => {\n                    const totalPages = Math.ceil(totalElements / params.size);\n                    successCallback({\n                        'content'         : data,\n                        'first'           : (params.page === 1),\n                        'last'            : (params.page === totalPages),\n                        'number'          : (params.page - 1),\n                        'numberOfElements': data.length,\n                        'size'            : params.size,\n                        'sort'            : {\n                            'sorted' : !!sort,\n                            'unsorted' : !sort\n                        },\n                        'totalElements'   : totalElements,\n                        'totalPages'      : totalPages\n                    });\n                });\n            });\n        }).catch(failureCallback);\n    }\n\n    private escapeName(name: string): string {\n        if (name) {\n            name = name.replace(/\"/g, '\"\"');\n            return '\"' + name.replace(/\\./g, '\".\"') + '\"';\n        }\n        return name;\n    }\n\n    // returns the columnName appending with the schema name.\n    private getColumnName(store, fieldName) {\n        if (store.fieldToColumnMapping[fieldName]) {\n            const columnName = this.escapeName(store.fieldToColumnMapping[fieldName]);\n            if (columnName.indexOf('.') < 0) {\n                return this.escapeName(store.entitySchema.name) + '.' + columnName;\n            }\n            return columnName;\n        }\n        return fieldName;\n    }\n\n    private convertFieldNameToColumnName(store: LocalDBStore, filterGroup: any, options?: any) {\n        _.forEach(filterGroup.rules, rule => {\n            if (rule.rules) {\n                this.convertFieldNameToColumnName(store, rule);\n            } else {\n                rule.target = this.getColumnName(store, rule.target);\n            }\n        });\n        // handling the scenario where variable options can have filterField. For example: search filter query\n        if (options && options.filterFields) {\n            options.filterFields = _.mapKeys(options.filterFields, (v, k) => {\n                return this.getColumnName(store, k);\n            });\n        }\n    }\n}\n","import { File } from '@ionic-native/file';\n\nimport { noop } from '@wm/core';\nimport { DeviceFileService } from '@wm/mobile/core';\n\nimport { Change, ChangeLogService, FlushContext, Worker } from '../change-log.service';\nimport { CallBack, LocalDBManagementService } from '../local-db-management.service';\n\ndeclare const _;\n\nconst STORE_KEY = 'offlineFileUpload';\n\nexport class FileHandler implements Worker {\n\n    private fileStore;\n    private logger = window.console;\n\n    public preFlush(context: FlushContext) {\n        this.fileStore = context.get(STORE_KEY);\n    }\n\n    /**\n     * Replaces all local paths with the remote path using mappings created during 'uploadToServer'.\n     */\n    public preCall(change: Change) {\n        if (change.service === 'DatabaseService') {\n            change.params.data = _.mapValues(change.params.data, v => {\n                const remoteUrl = this.fileStore[v];\n                if (remoteUrl) {\n                    this.logger.debug('swapped file path from %s -> %s', v, remoteUrl);\n                    return remoteUrl;\n                }\n                return v;\n            });\n        }\n    }\n\n    public postCallSuccess(change: Change, response: any) {\n        if (change.service === 'OfflineFileUploadService'\n            && change.operation === 'uploadToServer') {\n            const remoteFile = JSON.parse(response[0].text)[0];\n            /*\n             * A mapping will be created between local path and remote path.\n             * This will be used to resolve local paths in entities.\n             */\n            this.fileStore[change.params.file]             = remoteFile.path;\n            this.fileStore[change.params.file + '?inline'] = remoteFile.inlinePath;\n        }\n    }\n\n}\n\nexport class UploadedFilesImportAndExportService implements CallBack {\n    private uploadDir;\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private deviceFileService: DeviceFileService,\n        private localDBManagementService: LocalDBManagementService,\n        private file: File\n    ) {\n\n    }\n\n    public preExport(folderToExport: string, meta: any): Promise<any> {\n        // copy offline uploads\n        const uploadFullPath = this.deviceFileService.getUploadDirectory(),\n            lastIndexOfSep = uploadFullPath.lastIndexOf('/'),\n            uploadParentDir = uploadFullPath.substring(0, lastIndexOfSep + 1),\n            uploadDirName = uploadFullPath.substring(lastIndexOfSep + 1);\n        meta.uploadDir = uploadFullPath;\n        return this.file.copyDir(uploadParentDir, uploadDirName, folderToExport, 'uploads');\n    }\n\n    public postImport(importedFolder: string, meta: any): Promise<any> {\n        const uploadFullPath = this.deviceFileService.getUploadDirectory(),\n            lastIndexOfSep = uploadFullPath.lastIndexOf('/'),\n            uploadParentDir = uploadFullPath.substring(0, lastIndexOfSep + 1),\n            uploadDirName = uploadFullPath.substring(lastIndexOfSep + 1);\n        this.uploadDir = uploadFullPath;\n        return this.file.checkDir(importedFolder, 'uploads')\n            .then(() => {\n                return this.deviceFileService.removeDir(uploadFullPath)\n                    .then(() => this.file.copyDir(importedFolder, 'uploads', uploadParentDir, uploadDirName))\n                    .then(() => this.updateChanges(meta));\n            }, noop);\n    }\n\n    /**\n     * returns back the changes that were logged.\n     * @param page page number\n     * @param size size of page\n     * @returns {*}\n     */\n    private getChanges(page: number, size: number): Promise<Change[]> {\n        return this.changeLogService.getStore().then(strore => {\n            return (strore.filter([], 'id', {\n                offset: (page - 1) * size,\n                limit: size\n            })) as Promise<Change[]>;\n        });\n    }\n\n    /**\n     * If this is a database change, then it will replace old upload directory with the current upload directory\n     * and its corresponding owner object, if  it has primary key.\n     *\n     * @param change\n     * @param oldUploadDir\n     * @param uploadDir\n     * @returns {*}\n     */\n    private updateDBChange(change: Change, oldUploadDir: string, uploadDir: string) {\n        const modifiedProperties = {},\n            entityName = change.params.entityName,\n            dataModelName = change.params.dataModelName;\n        change.params.data = _.mapValues(change.params.data, function (v, k) {\n            let mv = v, isModified = false;\n            if (_.isString(v)) {\n                mv = _.replace(v, oldUploadDir, uploadDir);\n                isModified = !_.isEqual(mv, v);\n            } else if (_.isObject(v) && v.wmLocalPath) {\n                // insertMultiPartData and updateMultiPartData\n                mv = _.replace(v.wmLocalPath, oldUploadDir, uploadDir);\n                isModified = !_.isEqual(mv, v.wmLocalPath);\n            }\n            if (isModified) {\n                modifiedProperties[k] = mv;\n            }\n            return mv;\n        });\n        if (!_.isEmpty(modifiedProperties)) {\n            this.localDBManagementService.getStore(dataModelName, entityName)\n                .then(store => {\n                    // If there is a primary for the entity, then update actual row with the modifications\n                    if (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity') {\n                        const primaryKeyName = store.primaryKeyName;\n                        const primaryKey = change.params.data[primaryKeyName];\n                        return store.get(primaryKey)\n                            .then(obj => store.save(_.assignIn(obj, modifiedProperties)));\n                    }\n                }).then(() => {\n                change.params = JSON.stringify(change.params);\n                return this.changeLogService.getStore().then( store => store.save(change));\n            });\n        }\n    }\n\n    /**\n     * This function check this change to update old upload directory path.\n     *\n     * @param change\n     * @param metaInfo\n     * @returns {*}\n     */\n    private updateChange(change: Change, metaInfo: any) {\n        change.params = JSON.parse(change.params);\n        if (change.service === 'OfflineFileUploadService'\n            && change.operation === 'uploadToServer') {\n            change.params.file = _.replace(change.params.file, metaInfo.uploadDir, this.uploadDir);\n            change.params = JSON.stringify(change.params);\n            return this.changeLogService.getStore().then( store => store.save(change));\n        }\n        if (change.service === 'DatabaseService') {\n            return this.updateDBChange(change, metaInfo.uploadDir, this.uploadDir);\n        }\n    }\n\n    /**\n     * This function will visit all the changes and modify them, if necessary.\n     * @param metaInfo\n     * @param page\n     * @returns {*}\n     */\n    private updateChanges(metaInfo: any, page = 1): Promise<any> {\n        const size = 10;\n        return this.getChanges(page, size)\n            .then(changes => {\n                if (changes && changes.length > 0) {\n                    return Promise.all(changes.map(change => this.updateChange(change, metaInfo)));\n                }\n            }).then(result => {\n                if (result && result.length === size) {\n                    return this.updateChanges(metaInfo, page + 1);\n                }\n            });\n    }\n}\n","import { Change, FlushContext, Worker } from '../change-log.service';\nimport { LocalDBStore } from '../../models/local-db-store';\nimport { LocalDBManagementService } from '../local-db-management.service';\n\ndeclare const _;\n\nconst STORE_KEY = 'errorBlockerStore';\n\nexport class ErrorBlocker implements Worker {\n\n    private errorStore;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n    }\n\n    public preFlush(context: FlushContext) {\n        this.errorStore = context.get(STORE_KEY);\n    }\n\n    // block all calls related to the error entities\n    public preCall(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            switch (change.operation) {\n                case 'insertTableData':\n                case 'insertMultiPartTableData':\n                case 'updateTableData':\n                case 'updateMultiPartTableData':\n                    return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                        this.blockCall(store, change, dataModelName, entityName, change.params.data);\n                    });\n                case 'deleteTableData':\n                    return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                        this.blockCall(store, change, dataModelName, entityName, change.params);\n                    });\n            }\n        }\n    }\n\n    // store error entity id\n    public postCallSuccess(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                const id = change['dataLocalId'] || change.params.data[store.primaryKeyName];\n                if (!(_.isUndefined(id) || _.isNull(id))) {\n                    this.removeError(dataModelName, entityName, id);\n                }\n            });\n        }\n    }\n\n    // store error entity id\n    public postCallError(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                const id = change['dataLocalId'] || (change.params.data && change.params.data[store.primaryKeyName]) || change.params[store.primaryKeyName] || change.params.id;\n                if (!(_.isUndefined(id) || _.isNull(id))) {\n                    this.recordError(dataModelName, entityName, id);\n                }\n            });\n        }\n    }\n\n    /**\n     * If there is an earlier call of the object or its relations that got failed, then this call will be\n     * marked for discard.\n     *\n     * @param store LocalDBStore\n     * @param change change to block\n     * @param dataModelName\n     * @param entityName\n     * @param data\n     */\n    private blockCall(store: LocalDBStore, change: Change, dataModelName: string, entityName: string, data: any) {\n        if (change.hasError === 0) {\n            this.checkForPreviousError(store, change, dataModelName, entityName, data);\n            store.entitySchema.columns.forEach(col => {\n                if (col.foreignRelations) {\n                    col.foreignRelations.some(foreignRelation => {\n                        if (data[foreignRelation.sourceFieldName]) {\n                            this.blockCall(store, change, dataModelName, foreignRelation.targetEntity, data[foreignRelation.sourceFieldName]);\n                        } else if (data[col.fieldName]) {\n                            this.checkForPreviousError(store, change, dataModelName, foreignRelation.targetEntity, data, col.fieldName);\n                        }\n                        return change.hasError === 1;\n                    });\n                }\n            });\n        }\n    }\n\n    // A helper function to check for earlier failures.\n    private checkForPreviousError(store: LocalDBStore, change: Change, dataModelName: string, entityName: string, data: any, key?: any) {\n        const primaryKey = key || store.primaryKeyName;\n        if (this.hasError(dataModelName, entityName, data[primaryKey])) {\n            change.hasError = 1;\n            change.errorMessage = `Blocked call due to error in previous call of entity [ ${entityName} ] with id [ ${data[primaryKey]} ]`;\n        }\n    }\n\n    private hasError(dataModelName: string, entityName: string, id: any) {\n        if (this.errorStore[dataModelName]\n            && this.errorStore[dataModelName][entityName]\n            && this.errorStore[dataModelName][entityName][id]) {\n            return true;\n        }\n        return false;\n    }\n\n    // Removes entity identifier from error list.\n    private removeError(dataModelName: string, entityName: string, id: any) {\n        if (this.errorStore[dataModelName]\n            && this.errorStore[dataModelName][entityName]\n            && this.errorStore[dataModelName][entityName][id]) {\n            delete this.errorStore[dataModelName][entityName][id];\n        }\n    }\n\n    // Save error entity identifier.\n    private recordError(dataModelName: string, entityName: string, id: any) {\n        this.errorStore[dataModelName] = this.errorStore[dataModelName] || {};\n        this.errorStore[dataModelName][entityName] = this.errorStore[dataModelName][entityName] || {};\n        this.errorStore[dataModelName][entityName][id] = true;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { isDefined, noop } from '@wm/core';\n\nimport { Change, FlushContext, Worker } from './../change-log.service';\nimport { LocalDBManagementService } from './../local-db-management.service';\nimport { LocalDBStore } from './../../models/local-db-store';\n\nconst STORE_KEY  = 'idConflictResolution';\n\n/**\n * In offline database, a insert could generate the Id of an entity. During flush, id of that entity might get changed.\n * Due to that, relationship inconsistency arises. To prevent that, wherever this entity is referred in the next flush\n * call, Id has to be replaced with that of new one.\n */\n@Injectable()\nexport class IdResolver implements Worker {\n\n    private idStore;\n    private logger;\n    private transactionLocalId;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n        this.logger = window.console;\n    }\n\n    public preFlush(context: FlushContext) {\n        this.idStore = context.get(STORE_KEY);\n    }\n\n    // Exchane Ids, Before any database operation.\n    public preCall(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            switch (change.operation) {\n                case 'insertTableData':\n                case 'insertMultiPartTableData':\n                    change.params.skipLocalDB = true ;\n                    return this.localDBManagementService.getStore(dataModelName, entityName)\n                        .then(store => {\n                            const primaryKeyName = store.primaryKeyName;\n                            if (primaryKeyName) {\n                                this.transactionLocalId = change.params.data[primaryKeyName];\n                                change['dataLocalId'] = this.transactionLocalId;\n                            }\n                            return this.exchangeIds(store, dataModelName, entityName, change.params.data)\n                                .then(() => {\n                                    if (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity') {\n                                        delete change.params.data[primaryKeyName];\n                                    } else {\n                                        const relationalPrimaryKeyValue = store.getValue(change.params.data, store.primaryKeyName);\n                                        // for the data referring to the relational table based on primary key assign the primaryField values to the relationalPrimaryKeyValue\n                                        if (isDefined(relationalPrimaryKeyValue)) {\n                                            change.params.data[primaryKeyName] = relationalPrimaryKeyValue;\n                                            if (this.transactionLocalId !== null) {\n                                                this.pushIdToStore(dataModelName, entityName, this.transactionLocalId, relationalPrimaryKeyValue);\n                                            }\n                                        }\n                                        this.transactionLocalId = null;\n                                    }\n                                });\n                    });\n                case 'updateTableData':\n                case 'updateMultiPartTableData':\n                case 'deleteTableData':\n                    return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {\n                        // on update call, passing id to exchangeId as change.params id(local value 10000000+) is not updated with the latest id from db\n                        this.exchangeId(store, dataModelName, entityName, change.params, 'id');\n                        if (change.params.data) {\n                            return this.exchangeIds(store, dataModelName, entityName, change.params.data);\n                        }\n                    });\n            }\n        }\n    }\n    // After every database insert, track the Id change.\n    public postCallSuccess(change: Change, response: any) {\n        if (change && change.service === 'DatabaseService'\n            && (change.operation === 'insertTableData' || change.operation === 'insertMultiPartTableData')\n            && this.transactionLocalId) {\n            const data = response[0].body;\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {\n                this.pushIdToStore(dataModelName, entityName, this.transactionLocalId, data[store.primaryKeyName]);\n                return store.delete(this.transactionLocalId).catch(noop).then(() => {\n                    this.transactionLocalId = null;\n                    return store.save(data);\n                });\n            });\n        }\n    }\n    // store error entity id\n    public postCallError(change: Change) {\n        if (change && change.service === 'DatabaseService'\n            && (change.operation === 'insertTableData' || change.operation === 'insertMultiPartTableData')\n            && this.transactionLocalId) {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {\n                change.params.data[store.primaryKeyName] = this.transactionLocalId;\n            });\n        }\n    }\n\n    private getEntityIdStore(dataModelName: string, entityName: string) {\n        this.idStore[dataModelName] = this.idStore[dataModelName] || {};\n        this.idStore[dataModelName][entityName] = this.idStore[dataModelName][entityName] || {};\n        return this.idStore[dataModelName][entityName];\n    }\n\n    // if local id is different, then create a mapping for exchange.\n    private pushIdToStore(dataModelName: string, entityName: string, transactionLocalId: any, remoteId: any) {\n        if (transactionLocalId !== remoteId) {\n            this.getEntityIdStore(dataModelName, entityName)[transactionLocalId] = remoteId;\n            this.logger.debug('Conflict found for entity (%s) with local id (%i) and remote Id (%i)', entityName, transactionLocalId, remoteId);\n        }\n    }\n\n    private logResolution(entityName: string, localId: any, remoteId: any) {\n        this.logger.debug('Conflict resolved found for entity (%s) with local id (%i) and remote Id (%i)', entityName, localId, remoteId);\n    }\n\n    // Exchange primary key  of the given entity\n    private exchangeId(store: LocalDBStore, dataModelName: string, entityName: string, data?: any, keyName?: string) {\n        const primaryKeyName = keyName || store.primaryKeyName;\n        const entityIdStore = this.getEntityIdStore(dataModelName, entityName);\n        if (data && primaryKeyName) {\n            const localId = data[primaryKeyName];\n            let remoteId = localId;\n            while (entityIdStore[remoteId]) {\n                remoteId = entityIdStore[remoteId];\n            }\n            if (remoteId !== localId) {\n                data[primaryKeyName] = remoteId;\n                this.logResolution(entityName, localId, remoteId);\n            }\n        }\n    }\n\n    // Looks primary key changes in the given entity or in the relations\n    private exchangeIds(store: LocalDBStore, dataModelName: string, entityName: string, data: any): Promise<any> {\n        this.exchangeId(store, dataModelName, entityName, data);\n        const exchangeIdPromises = [];\n        store.entitySchema.columns.forEach(col => {\n            if (col.foreignRelations) {\n                col.foreignRelations.forEach( foreignRelation => {\n                    if (data[col.fieldName]) {// if id value\n                        this.exchangeId(store, dataModelName, foreignRelation.targetEntity, data, col.fieldName);\n                    }\n                    if (data[foreignRelation.sourceFieldName]) {// if object reference\n                        exchangeIdPromises.push(this.localDBManagementService.getStore(dataModelName, foreignRelation.targetEntity)\n                            .then(refStore => {\n                                return this.exchangeIds(refStore, dataModelName, foreignRelation.targetEntity, data[foreignRelation.sourceFieldName]);\n                            }));\n                    }\n                });\n            }\n        });\n        return Promise.all(exchangeIdPromises);\n    }\n}\n","import { DeviceFileService } from '@wm/mobile/core';\n\nimport { Change, Worker } from '../change-log.service';\nimport { LocalDBManagementService } from '../local-db-management.service';\n\ndeclare const _;\n\nexport class MultiPartParamTransformer implements Worker {\n\n    constructor(\n        private deviceFileService: DeviceFileService,\n        private localDBManagementService: LocalDBManagementService\n    ) {}\n\n    public postCallSuccess(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            switch (change.operation) {\n                case 'insertMultiPartTableData':\n                case 'updateMultiPartTableData':\n                    // clean up files\n                    _.forEach(change.params.data, v => {\n                        if (_.isObject(v) && v.wmLocalPath) {\n                            this.deviceFileService.removeFile(v.wmLocalPath);\n                        }\n                    });\n                    break;\n            }\n        }\n    }\n\n    public transformParamsFromMap(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            switch (change.operation) {\n                case 'insertMultiPartTableData':\n                case 'updateMultiPartTableData':\n                    return this.localDBManagementService.getStore(change.params.dataModelName, change.params.entityName)\n                        .then( store => {\n                            // construct Form data\n                            return store.deserialize(change.params.data).then(function (formData) {\n                                change.params.data = formData;\n                            });\n                        });\n            }\n        }\n    }\n\n    public transformParamsToMap(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            switch (change.operation) {\n                case 'insertMultiPartTableData':\n                case 'updateMultiPartTableData':\n                    return this.localDBManagementService.getStore(change.params.dataModelName, change.params.entityName)\n                        .then( store => {\n                            return store.serialize(change.params.data).then(function (map) {\n                                change.params.data = map;\n                                /**\n                                 * As save method called with FormData object, empty row is inserted.\n                                 * Since FormData is converted to map, update the record details now.\n                                 */\n                                store.save(_.mapValues(map, function (v) {\n                                    return (_.isObject(v) && v.wmLocalPath) || v;\n                                }));\n                                return map;\n                            });\n                        });\n            }\n        }\n    }\n}\n","import { from } from 'rxjs';\n\nimport { LVService } from '@wm/variables';\n\nimport { NetworkService } from '@wm/mobile/core';\nimport { AbstractHttpService, noop, triggerFn } from '@wm/core';\n\nimport { ColumnInfo, ForeignRelationInfo } from '../models/config';\nimport { LocalDBStore } from '../models/local-db-store';\nimport { ChangeLogService } from '../services/change-log.service';\nimport { LocalDBManagementService } from '../services/local-db-management.service';\nimport { LocalDbService } from '../services/local-db.service';\nimport { WM_LOCAL_OFFLINE_CALL } from './utils';\n\ndeclare const _;\n\nconst apiConfiguration = [{\n        'name' : 'insertTableData',\n        'type' : 'INSERT'\n    }, {\n        'name' : 'insertMultiPartTableData',\n        'type' : 'INSERT'\n    }, {\n        'name' : 'updateTableData',\n        'type' : 'UPDATE'\n    }, {\n        'name' : 'updateMultiPartTableData',\n        'type' : 'UPDATE'\n    }, {\n        'name' : 'deleteTableData',\n        'type' : 'DELETE'\n    }, {\n        'name' : 'readTableData',\n        'type' : 'READ',\n        'saveResponse': true\n    }, {\n        'name' : 'searchTableData',\n        'type' : 'READ',\n        'saveResponse': true\n    }, {\n        'name' : 'searchTableDataWithQuery',\n        'type' : 'READ',\n        'saveResponse': true\n    }, {\n        'name' : 'getDistinctDataByFields',\n        'type' : 'READ',\n        'saveResponse': false\n    }];\n\nlet isOfflineBehaviorAdded = false;\n\nexport class LiveVariableOfflineBehaviour {\n\n    private onlineDBService = LVService;\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private httpService: AbstractHttpService,\n        private localDBManagementService: LocalDBManagementService,\n        private networkService: NetworkService,\n        private offlineDBService: LocalDbService\n    ) {}\n\n    public add () {\n        if (!isOfflineBehaviorAdded) {\n            isOfflineBehaviorAdded = true;\n            const onlineHandler = this.httpService.sendCallAsObservable;\n            if (onlineHandler) {\n                this.httpService.sendCallAsObservable = (reqParams, params): any => {\n                    if (!params && _.get(reqParams, 'url')) {\n                        params = {url: reqParams.url};\n                    }\n                    // reqParams will contain the full path of insert/update call which will be processed again in parseConfig method\n                    // and will be appended again with '/services/./.' which will result in deployedUrl + '/service/./.' + '/service/./.' which is wrong.\n                    // Hence passing url in params\n                    const clonedParamsUrl = _.clone(params.url);\n                    params = _.extend(params, reqParams);\n                    const operation = _.find(apiConfiguration, {name: _.get(params, 'operation')});\n                    if (this.networkService.isConnected() || params.onlyOnline || !operation || !params.dataModelName) {\n                        return from(this.remoteDBcall(operation, onlineHandler, params));\n                    }\n                    // converting promise to observable as LVService returns a observable\n                    return from(this.localDBManagementService.isOperationAllowed(params.dataModelName, params.entityName, operation.type)\n                        .then(isAllowedInOffline => {\n                            if (!isAllowedInOffline) {\n                                return this.remoteDBcall(operation, onlineHandler, params);\n                            } else {\n                                let cascader;\n                                return Promise.resolve().then(() => {\n                                    if (!params.isCascadingStopped &&\n                                        (operation.name === 'insertTableData'\n                                            || operation.name === 'updateTableData')) {\n                                        return this.prepareToCascade(params).then(c => cascader = c);\n                                    }\n                                }).then(() => {\n                                    return new Promise((resolve, reject) => {\n                                        this.localDBcall(operation, params, resolve, reject, clonedParamsUrl);\n                                    });\n                                }).then( (response: any) => {\n                                    if (cascader) {\n                                        return cascader.cascade().then(() => {\n                                            return this.getStore(params).then(store => {\n                                                return store.refresh(response.body);\n                                            }).then(data => {\n                                                // data includes parent and child data.\n                                                if (response && response.body) {\n                                                    response.body = data;\n                                                }\n                                                return response;\n                                            });\n                                        });\n                                    }\n                                    return response;\n                                });\n                            }\n                        }));\n                };\n            }\n        }\n    }\n\n    public getStore(params: any): Promise<LocalDBStore> {\n        return this.localDBManagementService.getStore(params.dataModelName, params.entityName);\n    }\n\n    // set hasBlob flag on params when blob field is present\n    private hasBlob(store) {\n        const blobColumns = _.filter(store.entitySchema.columns, {\n            'sqlType' : 'blob'\n        });\n        return !!blobColumns.length;\n    }\n\n    /*\n     * During offline, LocalDBService will answer to all the calls. All data modifications will be recorded\n     * and will be reported to DatabaseService when device goes online.\n     */\n    private localDBcall(operation, params, successCallback, failureCallback, clonedParamsUrl): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.offlineDBService[operation.name](params, response => {\n                if (operation.type === 'READ') {\n                    resolve(response);\n                } else {\n                    // add to change log\n                    params.onlyOnline = true;\n                    params.url = clonedParamsUrl;\n                    return this.changeLogService.add('DatabaseService', operation.name, params)\n                        .then(() => resolve(response));\n                }\n            });\n        }).then((response) => {\n            response = {body : response, type: WM_LOCAL_OFFLINE_CALL};\n            triggerFn(successCallback, response);\n            return response;\n        }, failureCallback);\n    }\n\n    /*\n     * During online, all read operations data will be pushed to offline database. Similarly, Update and Delete\n     * operations are synced with the offline database.\n     */\n    private remoteDBcall(operation, onlineHandler, params): Promise<any> {\n        return new Promise((resolve, reject) => {\n            onlineHandler.call(this.httpService, params).subscribe(response => {\n                if (response && response.type) {\n                    if (!params.skipLocalDB) {\n                        this.offlineDBService.getStore(params).then((store) => {\n                            if (operation.type === 'READ' && operation.saveResponse) {\n                                store.saveAll(response.body.content);\n                            } else if (operation.type === 'INSERT') {\n                                params = _.clone(params);\n                                params.data = _.clone(response.body);\n                                this.offlineDBService[operation.name](params, noop, noop);\n                            } else {\n                                this.offlineDBService[operation.name](params, noop, noop);\n                            }\n                        }).catch(noop);\n                    }\n                    resolve(response);\n                }\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Finds out the nested objects to save and prepares a cloned params.\n     */\n    private prepareToCascade(params): Promise<any> {\n        return this.getStore(params).then(store => {\n            const childObjectPromises = [];\n            _.forEach(params.data, (v, k) => {\n                let column: ColumnInfo,\n                    foreignRelation: ForeignRelationInfo,\n                    childParams;\n                // NOTE: Save only one-to-one relations for cascade\n                if (_.isObject(v) && !_.isArray(v)) {\n                    column = store.entitySchema.columns.find(c => {\n                        if (c.primaryKey && c.foreignRelations) {\n                            foreignRelation = c.foreignRelations.find( f => f.sourceFieldName === k);\n                        }\n                        return !!foreignRelation;\n                    });\n                }\n                if (column) {\n                    childParams = _.cloneDeep(params);\n                    childParams.entityName = foreignRelation.targetEntity;\n                    childParams.data = v;\n                    const childPromise = this.getStore(childParams).then(childStore => {\n                        const parent = params.data;\n                        const targetColumns = childStore.entitySchema.columns.find(c => c.name === foreignRelation.targetColumn);\n                        if (targetColumns && targetColumns.foreignRelations) {\n                            const parentFieldName = targetColumns.foreignRelations.find( f => f.targetTable === store.entitySchema.name).sourceFieldName;\n                            childParams.data[parentFieldName] = parent;\n                        }\n                        parent[k] = null;\n                        childParams.onlyOnline = false;\n                        childParams.isCascadingStopped = true;\n                        childParams.hasBlob = this.hasBlob(childStore);\n                        childParams.url = '';\n                        return () => {\n                            return Promise.resolve().then(() => {\n                                    const primaryKeyValue = childStore.getValue(childParams.data, childStore.primaryKeyField.fieldName);\n                                    return primaryKeyValue ? childStore.get(primaryKeyValue) : null;\n                                }).then(object => {\n                                    let operation;\n                                    if (object) {\n                                        operation = childParams.hasBlob ? 'updateMultiPartTableData' : 'updateTableData';\n                                    } else {\n                                        operation = childParams.hasBlob ? 'insertMultiPartTableData' : 'insertTableData';\n                                    }\n                                    return this.onlineDBService[operation](childParams).toPromise();\n                                });\n                        };\n                    });\n                    childObjectPromises.push(childPromise);\n                }\n            });\n            return Promise.all(childObjectPromises).then(result => {\n                return {\n                    cascade: () => Promise.all(result.map(fn => fn()))\n                };\n            });\n        });\n    }\n}\n","import { File } from '@ionic-native/file';\n\nimport { DeviceFileService, DeviceFileUploadService, IUploadResponse, NetworkService, UploadRequest } from '@wm/mobile/core';\n\nimport { ChangeLogService } from '../services/change-log.service';\n\nlet isOfflineBehaviourAdded = false;\n\nexport class FileUploadOfflineBehaviour {\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private deviceFileService: DeviceFileService,\n        private deviceFileUploadService: DeviceFileUploadService,\n        private file: File,\n        private networkService: NetworkService,\n        private uploadDir: string\n    ) {\n\n    }\n\n    public add() {\n        if (isOfflineBehaviourAdded) {\n            return;\n        }\n        isOfflineBehaviourAdded = true;\n        const orig = this.deviceFileUploadService.upload;\n        this.deviceFileUploadService['uploadToServer'] = orig;\n        this.deviceFileUploadService.upload = (url: string, fileParamName: string, localPath: string, fileName?: string, params?: any, headers?: any): Promise<IUploadResponse> => {\n            if (this.networkService.isConnected()) {\n                return orig.call(this.deviceFileUploadService, url, fileParamName, localPath, fileName, params, headers);\n            } else {\n                return this.uploadLater(url, fileParamName, localPath, fileName, params, headers).then(response => {\n                    return {\n                        text: JSON.stringify(response),\n                        headers: null,\n                        response: response\n                    };\n                });\n            }\n        };\n    }\n\n    public uploadLater(url: string, fileParamName: string, localPath: string, fileName?: string, params?: any, headers?: any): Promise<any> {\n        const i = localPath.lastIndexOf('/'),\n            soureDir = localPath.substring(0, i),\n            soureFile = localPath.substring(i + 1),\n            destFile = this.deviceFileService.appendToFileName(soureFile),\n            filePath = this.uploadDir + '/' + destFile;\n        return this.file.copyFile(soureDir, soureFile, this.uploadDir, destFile)\n            .then(() => {\n                return this.changeLogService.add('OfflineFileUploadService', 'uploadToServer', {\n                    file: filePath,\n                    ftOptions: {\n                        fileKey: fileParamName,\n                        fileName: fileName\n                    },\n                    params: params,\n                    headers: headers,\n                    serverUrl: url,\n                    deleteOnUpload: true\n                });\n            }).then(() => {\n                return [{\n                    fileName: soureFile,\n                    path: filePath,\n                    length: 0,\n                    success: true,\n                    inlinePath: filePath + '?inline'\n                }];\n            });\n    }\n}\n","import { from, Observable } from 'rxjs';\n\nimport { AbstractHttpService } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\n\nimport { ChangeLogService } from '../services/change-log.service';\nimport { LocalDBManagementService } from '../services/local-db-management.service';\nimport { WM_LOCAL_OFFLINE_CALL } from './utils';\n\ndeclare const _;\nconst NUMBER_REGEX = /^\\d+(\\.\\d+)?$/;\nlet isOfflineBehaviourAdded = false;\nexport class NamedQueryExecutionOfflineBehaviour {\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private httpService: AbstractHttpService,\n        private localDBManagementService: LocalDBManagementService,\n        private networkService: NetworkService\n    ) {\n\n    }\n\n    public add () {\n        if (isOfflineBehaviourAdded) {\n            return;\n        }\n        isOfflineBehaviourAdded = true;\n        const orig = this.httpService.sendCallAsObservable;\n        this.httpService.sendCallAsObservable = (reqParams: any, params?: any): Observable<any> => {\n            if (!params && _.get(reqParams, 'url')) {\n                params = {url: reqParams.url};\n            }\n            if (!this.networkService.isConnected() && params.url.indexOf('/queryExecutor/') > 0) {\n                return from(this.executeLocally(params));\n            } else {\n                return orig.call(this.httpService, reqParams, params);\n            }\n        };\n    }\n\n    private executeLocally(params: any): Promise<any> {\n        const url = params.url,\n            hasUrlParams = url.indexOf('?') > 0,\n            dbName = this.substring(url, 'services/', '/queryExecutor'),\n            queryName = this.substring(url, 'queries/', hasUrlParams ? '?' : undefined),\n            urlParams = hasUrlParams ? this.getHttpParamMap(this.substring(url, '?', undefined)) : {},\n            dataParams = this.getHttpParamMap(params.dataParams),\n            queryParams = _.extend(urlParams, dataParams);\n        return this.localDBManagementService.executeNamedQuery(dbName, queryName, queryParams)\n            .then(result => {\n                const rows = result.rows;\n                if (result.rowsAffected) {\n                    return this.changeLogService.add('WebService', 'invokeJavaService', params)\n                        .then(() => result.rowsAffected);\n                } else {\n                    return {\n                        type: WM_LOCAL_OFFLINE_CALL,\n                        body: {\n                            totalPages: rows && rows.length > 0 ? 1 : 0,\n                            totalElements: rows.length,\n                            first: true,\n                            sort: null,\n                            numberOfElements: rows.length,\n                            last: true,\n                            size: params.size,\n                            number: 0,\n                            content: rows\n                        }\n                    };\n                }\n            });\n    }\n\n    private substring(source: string, start: string, end: string): string {\n        if (start) {\n            const startIndex = source.indexOf(start) + start.length,\n                endIndex = end ? source.indexOf(end) : undefined;\n            return source.substring(startIndex, endIndex);\n        }\n        return undefined;\n    }\n\n    private getHttpParamMap(str: string): any {\n        const result = {};\n        if (str) {\n            str = decodeURIComponent(str);\n            str.split('&').forEach(c => {\n                const csplits = c.split('=');\n                if (_.isEmpty(_.trim(csplits[1])) || !NUMBER_REGEX.test(csplits[1])) {\n                    result[csplits[0]] = csplits[1];\n                } else {\n                    result[csplits[0]] = parseInt(csplits[1], 10);\n                }\n            });\n        }\n        return result;\n    }\n}\n","import { File } from '@ionic-native/file';\n\nimport { App, noop, triggerFn } from '@wm/core';\nimport { DeviceService, NetworkService } from '@wm/mobile/core';\nimport { SecurityService } from '@wm/security';\n\ndeclare const _;\ndeclare const cordova;\nconst SECURITY_FILE = 'logged-in-user.info';\ndeclare const resolveLocalFileSystemURL;\n\nlet isOfflineBehaviourAdded = false;\n\nexport class SecurityOfflineBehaviour {\n\n    private saveSecurityConfigLocally;\n    private securityConfig: any;\n\n    constructor(\n        private app: App,\n        private file: File,\n        private deviceService: DeviceService,\n        private networkService: NetworkService,\n        private securityService: SecurityService\n    ) {\n        this.saveSecurityConfigLocally = _.debounce((config: any) => {\n            this._saveSecurityConfigLocally(config);\n        }, 1000);\n    }\n\n    public add() {\n        if (isOfflineBehaviourAdded) {\n            return;\n        }\n        isOfflineBehaviourAdded = true;\n        const origLoad = this.securityService.load;\n        const origAppLogout = this.securityService.appLogout;\n        /**\n         * Add offline behaviour to SecurityService.getConfig. When offline, this funcation returns security\n         * config of last logged-in user will be returned, provided the user did not logout last time.\n         *\n         * @param successCallback\n         * @param failureCallback\n         */\n        this.securityService.load = () => {\n            return new Promise((resolve, reject) => {\n                if (this.networkService.isConnected()) {\n                    origLoad.call(this.securityService).then(config => {\n                        this.securityConfig = config;\n                        this.saveSecurityConfigLocally(config);\n                        resolve(this.securityConfig);\n                    }, reject);\n                } else {\n                    this.readLocalSecurityConfig().then((config = {}) => {\n                        this.securityConfig = config;\n                        this.securityService.config = config;\n                        return config;\n                    }, () => origLoad.call(this.securityConfig)).then(resolve, reject);\n                }\n            });\n        };\n\n        /**\n         * When users logs out, local config will be removed. If the user is offline and logs out, then user\n         * will be logged out from the app and cookies are invalidated when app goes online next time.\n         *\n         * @param successCallback\n         * @param failureCallback\n         */\n        this.securityService.appLogout = (successCallback, failureCallback) => {\n            this.securityConfig = {\n                authenticated: false,\n                loggedOut: true,\n                securityEnabled: this.securityConfig && this.securityConfig.securityEnabled,\n                loggedOutOffline: !this.networkService.isConnected(),\n                loginConfig: this.securityConfig && this.securityConfig.loginConfig,\n                userInfo: null\n            };\n            this._saveSecurityConfigLocally(this.securityConfig).catch(noop).then(() => {\n                if (this.networkService.isConnected()) {\n                    origAppLogout.call(this.securityService, successCallback, failureCallback);\n                } else {\n                    location.assign(window.location.origin + window.location.pathname);\n                }\n            });\n        };\n        /**\n         * @param successCallback\n         */\n        this.securityService.isAuthenticated = successCallback => {\n            triggerFn(successCallback, this.securityConfig.authenticated === true);\n        };\n        this.deviceService.whenReady().then(() => this.clearLastLoggedInUser());\n        /**\n         * If the user has chosen to logout while app is offline, then invalidation of cookies happens when\n         * app comes online next time.\n         */\n        this.app.subscribe('onNetworkStateChange', data => {\n            if (data.isConnected) {\n                this.clearLastLoggedInUser();\n            }\n        });\n    }\n\n    private _saveSecurityConfigLocally(config: any): Promise<any> {\n        return this.file.writeFile(cordova.file.dataDirectory, SECURITY_FILE, JSON.stringify(config), { replace : true });\n    }\n\n    private clearLastLoggedInUser() {\n        return this.readLocalSecurityConfig().then(config => {\n            if (config && config.loggedOutOffline) {\n                this.securityService.appLogout(null, null);\n            } else if (!this.networkService.isConnected()) {\n                this.securityConfig = config || {};\n            }\n        });\n    }\n\n    private readLocalSecurityConfig(): Promise<any> {\n        // reading the security info from file in dataDirectory but when this file is not available then fetching the config from the app directory\n        return new Promise((resolve, reject) => {\n            const rootDir = cordova.file.dataDirectory;\n            this.file.checkFile(rootDir, SECURITY_FILE).then(() => {\n                return this.readFileAsTxt(rootDir, SECURITY_FILE).then(resolve, reject);\n            }, () => {\n                const folderPath = cordova.file.applicationDirectory + 'www/metadata/app',\n                    fileName = 'security-config.json';\n                return this.readFileAsTxt(folderPath, fileName).then(resolve, reject);\n            });\n        });\n    }\n\n    private readFileAsTxt(folderPath, fileName): Promise<any> {\n        return this.file.readAsText(folderPath, fileName).then(JSON.parse).catch(noop);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { File } from '@ionic-native/file';\n\nimport { AbstractHttpService, App, hasCordova, noop } from '@wm/core';\nimport { DeviceFileService, DeviceFileUploadService, DeviceService, NetworkService } from '@wm/mobile/core';\nimport { SecurityService } from '@wm/security';\n\nimport { ChangeLogService } from './services/change-log.service';\nimport { LocalDBManagementService } from './services/local-db-management.service';\nimport { LocalDbService } from './services/local-db.service';\nimport { FileHandler, UploadedFilesImportAndExportService } from './services/workers/file-handler';\nimport { ErrorBlocker } from './services/workers/error-blocker';\nimport { IdResolver } from './services/workers/id-resolver';\nimport { MultiPartParamTransformer } from './services/workers/multi-part-param-transformer';\nimport { LiveVariableOfflineBehaviour } from './utils/live-variable.utils';\nimport { FileUploadOfflineBehaviour } from './utils/file-upload.utils';\nimport { NamedQueryExecutionOfflineBehaviour } from './utils/query-executor.utils';\nimport { SecurityOfflineBehaviour } from './utils/security.utils';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n    exports: [],\n    providers: [\n        // add providers to mobile-runtime module.\n    ],\n    entryComponents: []\n})\nexport class OfflineModule {\n    static initialized = false;\n    // Startup services have to be added only once in the app life-cycle.\n    static initialize(app: App,\n                      changeLogService: ChangeLogService,\n                      deviceService: DeviceService,\n                      deviceFileService: DeviceFileService,\n                      deviceFileUploadService: DeviceFileUploadService,\n                      file: File,\n                      httpService: AbstractHttpService,\n                      localDBManagementService: LocalDBManagementService,\n                      localDbService: LocalDbService,\n                      networkService: NetworkService,\n                      securityService: SecurityService) {\n        if (this.initialized) {\n            return;\n        }\n\n        deviceService.addStartUpService({\n            serviceName: 'OfflineStartupService',\n            start: () => {\n                if (window['SQLitePlugin']) {\n                    localDBManagementService.setLogSQl((sessionStorage.getItem('wm.logSql') === 'true') || (sessionStorage.getItem('debugMode') === 'true'));\n                    (window as any).logSql = (flag = true) => {\n                        localDBManagementService.setLogSQl(flag);\n                        sessionStorage.setItem('wm.logSql', flag ? 'true' : 'false');\n                    };\n                    (window as any).executeLocalSql = (dbName, query, params?) => {\n                        localDBManagementService.executeSQLQuery(dbName, query, params, true);\n                    };\n                    return localDBManagementService.loadDatabases().then(() => {\n                        changeLogService.addWorker(new IdResolver(localDBManagementService));\n                        changeLogService.addWorker(new ErrorBlocker(localDBManagementService));\n                        changeLogService.addWorker(new FileHandler());\n                        changeLogService.addWorker(new MultiPartParamTransformer(deviceFileService, localDBManagementService));\n                        new LiveVariableOfflineBehaviour(changeLogService, httpService, localDBManagementService, networkService, localDbService).add();\n                        new FileUploadOfflineBehaviour(changeLogService, deviceFileService, deviceFileUploadService, file, networkService, deviceFileService.getUploadDirectory()).add();\n                        new NamedQueryExecutionOfflineBehaviour(changeLogService, httpService, localDBManagementService, networkService).add();\n                        localDBManagementService.registerCallback(new UploadedFilesImportAndExportService(changeLogService, deviceFileService, localDBManagementService, file));\n                        changeLogService.addWorker({\n                            onAddCall: () => {\n                                if (!networkService.isConnected()) {\n                                    networkService.disableAutoConnect();\n                                }\n                            },\n                            postFlush: stats => {\n                                if (stats.totalTaskCount > 0) {\n                                    localDBManagementService.close()\n                                        .catch(noop)\n                                        .then(() => {\n                                            location.assign(window.location.origin + window.location.pathname);\n                                        });\n                                }\n                            }\n                        });\n                    });\n                }\n                return Promise.resolve();\n            }\n        });\n        new SecurityOfflineBehaviour(app, file, deviceService, networkService, securityService).add();\n    }\n\n\n    constructor(\n        app: App,\n        changeLogService: ChangeLogService,\n        deviceService: DeviceService,\n        deviceFileService: DeviceFileService,\n        deviceFileUploadService: DeviceFileUploadService,\n        file: File,\n        httpService: AbstractHttpService,\n        localDBManagementService: LocalDBManagementService,\n        localDbService: LocalDbService,\n        networkService: NetworkService,\n        securityService: SecurityService\n    ) {\n        if (hasCordova()) {\n            OfflineModule.initialize(app,\n                changeLogService,\n                deviceService,\n                deviceFileService,\n                deviceFileUploadService,\n                file,\n                httpService,\n                localDBManagementService,\n                localDbService,\n                networkService,\n                securityService);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\n\nimport { DeviceFileUploadService } from '@wm/mobile/core';\nimport { LVService } from '@wm/variables';\n\nimport { Change, PushService } from './change-log.service';\n\n@Injectable()\nexport class PushServiceImpl implements PushService {\n\n    constructor(\n        private deviceFileUploadService: DeviceFileUploadService\n    ) {}\n\n    // Returns a promise from the observable.\n    private getPromiseFromObs(cb) {\n        return new Promise((resolve, reject) => {\n            cb.subscribe(response => {\n                if (response && response.type) {\n                    resolve(response);\n                }\n            }, reject);\n        });\n    }\n\n    public push(change: Change): Promise<any> {\n        const params = change.params;\n        switch (change.service) {\n            case 'DatabaseService':\n                switch (change.operation) {\n                    case 'insertTableData':\n                        return this.getPromiseFromObs(LVService.insertTableData(change.params, null, null));\n                    case 'insertMultiPartTableData':\n                        return this.getPromiseFromObs(LVService.insertMultiPartTableData(change.params, null, null));\n                    case 'updateTableData':\n                        return this.getPromiseFromObs(LVService.updateTableData(change.params, null, null));\n                    case 'updateMultiPartTableData':\n                        return this.getPromiseFromObs(LVService.updateMultiPartTableData(change.params, null, null));\n                    case 'deleteTableData':\n                        return this.getPromiseFromObs(LVService.deleteTableData(change.params, null, null));\n                }\n            case 'OfflineFileUploadService':\n                if (change.operation === 'uploadToServer') {\n                    return this.deviceFileUploadService['uploadToServer'].call(\n                        this.deviceFileUploadService,\n                        params.serverUrl,\n                        params.ftOptions.fileKey,\n                        params.file,\n                        params.ftOptions.fileName,\n                        params.params,\n                        params.headers);\n                }\n        }\n        return Promise.reject( `${change.service} service with operation ${change.operation} is not supported for push.`);\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observer } from 'rxjs/Observer';\n\nimport { $parseExpr, App, defer, getAbortableDefer, noop } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\n\nimport { LiveVariableUtils, LVService } from '@wm/variables';\n\nimport { LocalDBManagementService } from './local-db-management.service';\nimport { PullInfo } from './change-log.service';\nimport { LocalKeyValueService } from './local-key-value.service';\nimport { DBInfo, EntityInfo, PullType } from '../models/config';\n\ndeclare const _, moment;\nconst  LAST_PULL_INFO_KEY = 'localDBManager.lastPullInfo';\n\n/**\n * a utility api to abort pull process.\n *\n * @type {{start, add, remove, abort}}\n */\nconst pullProcessManager = (() => {\n    const promises = {};\n    return {\n        start: promise => {\n            promise.$$pullProcessId = 'PULL_' + _.now();\n        },\n        add: (pullPromise: Promise<PullInfo>, promise: Promise<any>) => {\n            const pullProcessId = (pullPromise as any).$$pullProcessId;\n            if (!promises[pullProcessId]) {\n                promises[pullProcessId] = [];\n            }\n            promises[pullProcessId].push(promise);\n        },\n        remove: (pullPromise: Promise<PullInfo>, promise: Promise<any>) => {\n            const pullProcessId = (pullPromise as any).$$pullProcessId;\n            _.remove(promises[pullProcessId], promise);\n            if (_.isEmpty(promises[pullProcessId])) {\n                delete promises[pullProcessId];\n            }\n        },\n        abort: (pullPromise: Promise<PullInfo>) => {\n            const pullProcessId = (pullPromise as any).$$pullProcessId;\n            if (promises[pullProcessId]) {\n                _.forEach(promises[pullProcessId], function (p) {\n                    if (p && p.abort) {\n                        p.abort();\n                    }\n                });\n                delete promises[pullProcessId];\n            }\n            (pullPromise as any).$$isMarkedToAbort = true;\n            return pullPromise.catch(function () {\n                return 'cancelled';\n            });\n        }\n    };\n})();\n\n/**\n * LocalDBDataPullService has API to pull data from remote Server to local Database.\n */\n@Injectable({providedIn: 'root'})\nexport class LocalDBDataPullService {\n\n    constructor(\n        private app: App,\n        private localDBManagementService: LocalDBManagementService,\n        private localKeyValueService: LocalKeyValueService,\n        private networkService: NetworkService\n    ) {\n        // Listen for db creation. When db is created, then initialize last pull info.\n        this.localDBManagementService.registerCallback({\n            onDbCreate: (info) => {\n                this.localKeyValueService.put(LAST_PULL_INFO_KEY, {\n                    databases: [],\n                    totalRecordsToPull: 0,\n                    totalPulledRecordCount: 0,\n                    startTime: new Date(0),\n                    endTime: new Date(info.dbSeedCreatedOn)\n                });\n            }\n        });\n    }\n\n    /**\n     * If deltaFieldName is set,last pull time is greater than zero and query used in last pull is same as the\n     * query for the current pull, then delta criteria is attached to the query.\n     *\n     * @param db\n     * @param entityName\n     * @param query\n     * @returns {any}\n     */\n    private addDeltaCriteria(db: DBInfo, entityName: string, query: string): Promise<string> {\n        const entitySchema = db.schema.entities[entityName],\n            deltaFieldName = entitySchema.pullConfig.deltaFieldName,\n            deltaField = _.find(entitySchema.columns, {'fieldName' : deltaFieldName}) || {};\n\n        let isBundledEntity;\n\n        if (!_.isEmpty(deltaFieldName)) {\n            return this.localDBManagementService.isBundled(db.schema.name, entityName)\n                .then(flag => isBundledEntity = flag)\n                .then(() => this.getLastPullInfo())\n                .then(lastPullInfo => {\n                    let lastPullTime = (lastPullInfo && lastPullInfo.startTime && lastPullInfo.startTime.getTime());\n                    const lastPullDBInfo = _.find(lastPullInfo && lastPullInfo.databases, {'name' : db.schema.name}),\n                        lastPullEntityInfo = _.find(lastPullDBInfo && lastPullDBInfo.entities, {'entityName' : entityName}) || {};\n\n                    if (!lastPullTime && isBundledEntity) {\n                        // For bundled entity when there is no last pull, fetch records that got modified after db creation.\n                        lastPullTime = (lastPullInfo && lastPullInfo.endTime && lastPullInfo.endTime.getTime());\n                        lastPullEntityInfo.query = query;\n                    }\n                    if (lastPullEntityInfo.query === query && lastPullTime > 0) {\n                        if (_.isEmpty(query)) {\n                            query = '';\n                        } else {\n                            query += ' AND ';\n                        }\n                        if (deltaField.sqlType === 'datetime') {\n                            query += deltaFieldName + ' > wm_dt(\\'' + moment(lastPullTime).utc().format('YYYY-MM-DDTHH:mm:ss') + '\\')';\n                        } else {\n                            query += deltaFieldName + ' > wm_ts(\\'' + lastPullTime + '\\')';\n                        }\n                    }\n                    return query;\n                }, () => Promise.resolve(query));\n        }\n        return Promise.resolve(query);\n    }\n\n    /**\n     * copies the data from remote db to local db\n     * @param {DBInfo} db\n     * @param {string} entityName\n     * @param {boolean} clearDataBeforePull\n     * @param pullPromise\n     * @param {Observer<any>} progressObserver\n     * @returns {Promise<any>}\n     */\n    private copyDataFromRemoteDBToLocalDB(db: DBInfo, entityName: string, clearDataBeforePull: boolean, pullPromise: Promise<PullInfo>, progressObserver: Observer<any>) {\n        const store = (db as any).stores[entityName],\n            entitySchema = db.schema.entities[entityName],\n            result = {\n                entityName: entityName,\n                totalRecordsToPull: 0,\n                pulledRecordCount: 0\n            };\n\n        let inProgress = 0,\n            pullComplete = false,\n            filter;\n\n        return new Promise((resolve, reject) => {\n            this.prepareQuery(db, entityName)\n                .then(query => {\n                    (result as any).query = query;\n                    return this.addDeltaCriteria(db, entityName, query);\n                }).then(query => {\n                    // Clear if clearDataBeforePull is true and delta query is not used\n                    if (clearDataBeforePull && (result as any).query === query) {\n                        return store.clear()\n                            .then(() => {\n                                return query;\n                            });\n                    }\n                    return query;\n                }).then(query => {\n                    filter = _.isEmpty(query) ? '' : 'q=' + query;\n                    return this.getTotalRecordsToPull(db, entitySchema, filter, pullPromise);\n                }).then(maxNoOfRecords => {\n                    const pageSize = entitySchema.pullConfig.size || 100,\n                        maxNoOfPages = Math.ceil(maxNoOfRecords / pageSize);\n\n                    result.totalRecordsToPull = maxNoOfRecords;\n\n                    let sort = entitySchema.pullConfig.orderBy;\n                    sort = (_.isEmpty(sort) ? '' : sort + ',') + store.primaryKeyName;\n\n                    progressObserver.next(result);\n\n                    const _progressObserver = { next: data => {\n                            inProgress++;\n                            data = _.slice(data, 0, result.totalRecordsToPull - result.pulledRecordCount);\n                            store.saveAll(data).then(() => {\n                                result.pulledRecordCount += data ? data.length : 0;\n                                progressObserver.next(result);\n                            }).catch(noop)\n                                .then(() => {\n                                    inProgress--;\n                                    if (inProgress === 0 && pullComplete) {\n                                        resolve(result);\n                                    }\n                                });\n                        }, error: null, complete: null\n                    };\n\n                return this._pullEntityData(db, entityName, filter, sort, maxNoOfPages, pageSize, 1, pullPromise, undefined, _progressObserver);\n                }).then(null, reject)\n                    .catch(noop)\n                    .then(() => {\n                        pullComplete = true;\n                        if (inProgress === 0) {\n                            resolve(result);\n                        }\n                    });\n            });\n    }\n\n    // If expression starts with 'bind:', then expression is evaluated and result is returned.\n    private evalIfBind(expression: string) {\n        if (_.startsWith(expression, 'bind:')) {\n            expression = expression.replace(/\\[\\$\\i\\]/g, '[0]');\n            return $parseExpr(expression.replace('bind:', ''))(this.app);\n        }\n        return expression;\n    }\n\n    /**\n     * Executes DatabaseService.countTableDataWithQuery as a promise API.\n     * @param params\n     * @returns Promise\n     */\n    private executeDatabaseCountQuery(params: Object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            LVService.countTableDataWithQuery(params, null, null).subscribe(response => resolve(response.body), reject);\n        });\n    }\n\n    /**\n     * Executes DatabaseService.searchTableDataWithQuery as a promise API.\n     * @param params\n     * @returns Promise\n     */\n    private executeDatabaseSearchQuery(params: Object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            return LVService.searchTableDataWithQuery(params, null, null).subscribe(response => resolve(response && response.body && response.body.content), reject);\n        });\n    }\n\n    /**\n     * Computes the maximum number of records to pull.\n     *\n     * @param db\n     * @param entitySchema\n     * @param filter\n     * @param pullPromise\n     * @returns {*}\n     */\n    private getTotalRecordsToPull(db: DBInfo, entitySchema: EntityInfo, filter: string, pullPromise: Promise<PullInfo>): Promise<number> {\n        const params = {\n            dataModelName: db.schema.name,\n            entityName: entitySchema.entityName,\n            data: filter\n        };\n        return this.retryIfNetworkFails(() => {\n            return this.executeDatabaseCountQuery(params).then(function (response) {\n                const totalRecordCount = response,\n                    maxRecordsToPull = _.parseInt((entitySchema.pullConfig as any).maxNumberOfRecords);\n                if (_.isNaN(maxRecordsToPull) || maxRecordsToPull <= 0 || totalRecordCount < maxRecordsToPull) {\n                    return totalRecordCount;\n                }\n                return maxRecordsToPull;\n            });\n        }, pullPromise);\n    }\n\n    private prepareQuery(db: DBInfo, entityName: string): Promise<string> {\n        let query;\n        const entitySchema = db.schema.entities[entityName];\n\n        return this.localDBManagementService.isBundled(db.schema.name, entityName)\n            .then(isBundledEntity => {\n                let hasNullAttributeValue = false;\n                if (isBundledEntity || _.isEmpty(entitySchema.pullConfig.query)) {\n                    query = _.cloneDeep(entitySchema.pullConfig.filter);\n                    query = _.map(query, v => {\n                        v.attributeValue = this.evalIfBind(v.attributeValue);\n                        hasNullAttributeValue = hasNullAttributeValue || _.isNil(v.attributeValue);\n                        return v;\n                    });\n                    if (hasNullAttributeValue) {\n                        return Promise.reject('Null criteria values are present');\n                    }\n                    query = _.sortBy(query, 'attributeName');\n                    query = LiveVariableUtils.getSearchQuery(query, ' AND ', true);\n                } else {\n                    query = this.evalIfBind(entitySchema.pullConfig.query);\n                }\n                if (_.isNil(query)) {\n                    return Promise.resolve(null);\n                }\n\n                return Promise.resolve(encodeURIComponent(query));\n        });\n    }\n\n    /**\n     *\n     * @param db\n     * @param clearDataBeforePull\n     * @param pullPromise\n     * @param progressObserver\n     * @returns {*}\n     */\n    private _pullDbData(db: DBInfo, clearDataBeforePull: boolean, pullPromise: Promise<PullInfo>, progressObserver: Observer<any>): Promise<any> {\n        const datamodelName = db.schema.name,\n            result = {\n                name: db.schema.name,\n                entities: [],\n                totalRecordsToPull: 0,\n                pulledRecordCount: 0,\n                completedTaskCount: 0,\n                totalTaskCount: 0\n            };\n\n        const storePromises = [];\n\n        _.forEach(db.schema.entities, entity => {\n            storePromises.push(this.localDBManagementService.getStore(datamodelName, entity.entityName));\n        });\n\n        return new Promise((resolve, reject) => {\n            Promise.all(storePromises)\n                .then((stores) => {\n                    const entities = [];\n                    stores.forEach(store => {\n                        const pullConfig = store.entitySchema.pullConfig;\n                        const pullType = pullConfig.pullType;\n                        if (pullType === PullType.APP_START || (pullType === PullType.BUNDLED && (pullConfig as any).deltaFieldName)) {\n                            entities.push(store.entitySchema);\n                        }\n                    });\n                    const pullPromises = _.chain(entities)\n                        .map(entity => {\n                        const _progressObserver = {\n                            next: info => {\n                                const i = _.findIndex(result.entities, {'entityName': info.entityName});\n                                if (i >= 0) {\n                                    result.entities[i] = info;\n                                } else {\n                                    result.entities.push(info);\n                                }\n                                result.pulledRecordCount = _.reduce(result.entities, function (sum, entityPullInfo) {\n                                    return sum + entityPullInfo.pulledRecordCount;\n                                }, 0);\n                                result.totalRecordsToPull = _.reduce(result.entities, function (sum, entityPullInfo) {\n                                    return sum + entityPullInfo.totalRecordsToPull;\n                                }, 0);\n                                progressObserver.next(result);\n                            }, error: null, complete: null\n                        };\n                        return this.copyDataFromRemoteDBToLocalDB(db, entity.entityName, clearDataBeforePull, pullPromise, _progressObserver)\n                            .then(function (info) {\n                                result.completedTaskCount++;\n                                progressObserver.next(result);\n                                return info;\n                            }, null);\n                    }).value();\n\n                result.totalTaskCount = pullPromises.length;\n                progressObserver.next(result);\n\n                Promise.all(pullPromises).then(resolve, reject);\n            });\n        });\n    }\n\n    /**\n     * Pulls data of the given entity from remote server.\n     * @param db\n     * @param entityName\n     * @param sort\n     * @param maxNoOfPages\n     * @param pageSize\n     * @param currentPage\n     * @param filter\n     * @param pullPromise\n     * @param promise\n     * @returns {*}\n     */\n    private _pullEntityData(db: DBInfo, entityName: string, filter: string, sort, maxNoOfPages: number, pageSize: number, currentPage: number, pullPromise: Promise<PullInfo>, deferred: any, progressObserver?: Observer<any>) {\n        const dataModelName = db.schema.name;\n\n        if (!deferred) {\n            deferred = defer();\n        }\n\n        if (currentPage > maxNoOfPages) {\n            return deferred.resolve();\n        }\n        const params = {\n            dataModelName: dataModelName,\n            entityName: entityName,\n            page: currentPage,\n            size: pageSize,\n            data: filter,\n            sort: sort,\n            onlyOnline: true,\n            skipLocalDB: true\n        };\n        this.retryIfNetworkFails(() => {\n            return this.executeDatabaseSearchQuery(params);\n        }, pullPromise).then(response => {\n            progressObserver.next(response);\n            this._pullEntityData(db, entityName, filter, sort, maxNoOfPages, pageSize, currentPage + 1, pullPromise, deferred, progressObserver);\n        }, deferred.reject);\n\n        return deferred.promise;\n    }\n\n\n    /**\n     * If fn fails and network is not there\n     * @param fn\n     * @param pullPromise\n     * @returns {*}\n     */\n    private retryIfNetworkFails(fn: Function, pullPromise: Promise<PullInfo>) {\n        if ((pullPromise as any).$$isMarkedToAbort) {\n            return Promise.reject('aborted');\n        }\n        const promise = this.networkService.retryIfNetworkFails(fn);\n        pullProcessManager.add(pullPromise, promise);\n        promise.catch(noop)\n            .then(() => {\n            pullProcessManager.remove(pullPromise, promise);\n        });\n        return promise;\n    }\n\n    /**\n     * Tries to cancel the corresponding pull process that gave the given promise.\n     * @param promise\n     * @returns {any}\n     */\n    public cancel(promise: Promise<any>) {\n        return pullProcessManager.abort(promise);\n    }\n\n    /**\n     * fetches the database from the dbName.\n     * @param dbName\n     * @returns {Promise<any>}\n     */\n    public getDb(dbName: string) {\n        return this.localDBManagementService.loadDatabases()\n            .then(databases => {\n                const db = _.find(databases, {'name' : dbName});\n                return db || Promise.reject('Local database (' + dbName + ') not found');\n            });\n    }\n\n    /**\n     * @returns {any} that has total no of records fetched, start and end timestamps of last successful pull\n     * of data from remote server.\n     */\n    public getLastPullInfo(): Promise<PullInfo> {\n        return this.localKeyValueService.get(LAST_PULL_INFO_KEY).then(info => {\n            if (_.isString(info.startTime)) {\n                info.startTime = new Date(info.startTime);\n            }\n            if (_.isString(info.endTime)) {\n                info.endTime = new Date(info.endTime);\n            }\n            return info;\n        });\n    }\n\n    /**\n     * Clears (based on parameter) and pulls data ('BUNDLED' data based on parameter) from server using the\n     * configured rules in offline configuration.\n     *\n     * @param clearDataBeforePull boolean\n     * @param {Observer<any>} progressObserver\n     * @returns {any}\n     */\n    public pullAllDbData(clearDataBeforePull: boolean, progressObserver: Observer<any>): Promise<PullInfo> {\n        const deferred = getAbortableDefer(),\n            pullInfo = {\n            completedTaskCount: 0,\n            totalTaskCount: 0,\n            inProgress: true,\n            databases: [],\n            totalRecordsToPull: 0,\n            totalPulledRecordCount: 0,\n            startTime: new Date(),\n            endTime: new Date()\n        };\n\n        this.localDBManagementService.loadDatabases()\n            .then(databases => {\n                const dataPullPromises = _.chain(databases).filter(function (db) {\n                    return !db.schema.isInternal;\n                }).map(db => {\n                    pullProcessManager.start(deferred.promise);\n\n                    const _progressObserver: Observer<any> = {next: data => {\n                                const i = _.findIndex(pullInfo.databases, {'name' : data.name});\n                                if (i >= 0) {\n                                    pullInfo.databases[i] = data;\n                                } else {\n                                    pullInfo.databases.push(data);\n                                }\n                                pullInfo.totalTaskCount = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.totalTaskCount;\n                                }, 0);\n                                pullInfo.completedTaskCount = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.completedTaskCount;\n                                }, 0);\n                                pullInfo.totalPulledRecordCount = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.pulledRecordCount;\n                                }, 0);\n                                pullInfo.totalRecordsToPull = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.totalRecordsToPull;\n                                }, 0);\n                                progressObserver.next(pullInfo);\n                            }, error: null, complete: null\n                        };\n\n                    return this._pullDbData(db, clearDataBeforePull, deferred.promise, _progressObserver);\n                }).value();\n                return Promise.all(dataPullPromises);\n            }).then(() => {\n                pullInfo.endTime = new Date();\n                pullInfo.inProgress = false;\n                this.localKeyValueService.put(LAST_PULL_INFO_KEY, pullInfo);\n                deferred.resolve(pullInfo);\n        }, deferred.reject);\n\n        return deferred.promise;\n    }\n\n    /**\n     * Clears (based on parameter) and pulls data ('BUNDLED' data based on parameter) of the given database from server using\n     * the configured rules in offline configuration.\n     *\n     * @param {string} databaseName\n     * @param {boolean} clearDataBeforePull\n     * @param {Observer<any>} progressObserver\n     * @returns {Promise}\n     */\n    public pullDbData(databaseName: string, clearDataBeforePull: boolean, progressObserver: Observer<any>): Promise<any> {\n        const deferred = getAbortableDefer();\n\n        this.getDb(databaseName).then(db => {\n            return this._pullDbData(db, clearDataBeforePull, deferred.promise, progressObserver);\n        }).then(deferred.resolve, deferred.reject);\n\n        return deferred.promise;\n    }\n\n    /**\n     * Clears (based on parameter) and pulls data of the given entity and database from\n     * server using the configured rules in offline configuration.\n     * @param databaseName, name of the database from which data has to be pulled.\n     * @param entityName, name of the entity from which data has to be pulled\n     * @param clearDataBeforePull, if set to true, then data of the entity will be deleted.\n     * @param progressObserver, observer the progress values\n     */\n    public pullEntityData(databaseName: string, entityName: string, clearDataBeforePull: boolean, progressObserver: Observer<any>): Promise<any> {\n        const deferred = getAbortableDefer();\n\n        this.getDb(databaseName)\n            .then((db) => {\n                return this.copyDataFromRemoteDBToLocalDB(db, entityName, clearDataBeforePull, deferred.promise, progressObserver);\n        }).then(deferred.resolve, deferred.reject);\n\n        return deferred.promise;\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {LocalKeyValueService as Éµa} from './services/local-key-value.service';"],"names":["Injectable","isDefined","convertToBlob","SWAGGER_CONSTANTS","toPromise","DataType","formatDate","extractType","DEFAULT_FORMATS","isIos","isAndroid","executePromiseChain","noop","isArray","AppVersion","DeviceService","DeviceFileService","File","SecurityService","SQLite","getAbortableDefer","isString","NetworkService","STORE_KEY","LVService","from","triggerFn","isOfflineBehaviourAdded","hasCordova","NgModule","CommonModule","App","DeviceFileUploadService","AbstractHttpService","$parseExpr","LiveVariableUtils","defer"],"mappings":"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"}
