{"version":3,"file":"index.js.map","sources":["ng://@wm/mobile/offline/services/local-key-value.service.ts","ng://@wm/mobile/offline/utils/utils.ts","ng://@wm/mobile/offline/models/local-db-store.ts","ng://@wm/mobile/offline/models/config.ts","ng://@wm/mobile/offline/services/local-db-management.service.ts","ng://@wm/mobile/offline/services/change-log.service.ts","ng://@wm/mobile/offline/services/local-db.service.ts","ng://@wm/mobile/offline/services/workers/file-handler.ts","ng://@wm/mobile/offline/services/workers/error-blocker.ts","ng://@wm/mobile/offline/services/workers/id-resolver.ts","ng://@wm/mobile/offline/services/workers/multi-part-param-transformer.ts","ng://@wm/mobile/offline/utils/live-variable.utils.ts","ng://@wm/mobile/offline/utils/file-upload.utils.ts","ng://@wm/mobile/offline/utils/query-executor.utils.ts","ng://@wm/mobile/offline/utils/security.utils.ts","ng://@wm/mobile/offline/offline.module.ts","ng://@wm/mobile/offline/services/push.service.ts","ng://@wm/mobile/offline/services/local-db-data-pull.service.ts","ng://@wm/mobile/offline/index.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { LocalDBStore } from '../models/local-db-store';\n\n@Injectable({providedIn: 'root'})\nexport class LocalKeyValueService {\n\n    private store: LocalDBStore;\n\n    /**\n     * retrieves the value mapped to the key.\n     *\n     * @param {string} key key\n     * @returns {object} a promise that is resolved when value is retrieved from store.\n     */\n    public get(key: string): any {\n        return this.fetchEntry(key)\n            .then(result => {\n                let value;\n                if (result && result.length > 0) {\n                    value = result[0].value;\n                    if (value) {\n                        value = JSON.parse(value);\n                    }\n                }\n                return value;\n            });\n    }\n\n    /**\n     * Initializes the service with the given store.\n     *\n     * @param {object} storeToUse a store with id, key, value with fields.\n     * @returns {object} a promise that is resolved when data is persisted.\n     */\n    public init(storeToUse: LocalDBStore) {\n        this.store = storeToUse;\n    }\n\n    /**\n     * clear data in all databases.\n     *\n     * @param {string} key key\n     * @param {string} value value\n     * @returns {object} a promise that is resolved when data is persisted.\n     */\n    public put(key, value) {\n        if (value) {\n            value = JSON.stringify(value);\n        }\n        return this.fetchEntry(key).then(result => {\n            if (result && result.length > 0) {\n                return this.store.save({\n                    'id' : result[0].id,\n                    'key' : key,\n                    'value' : value\n                });\n            }\n            return this.store.add({\n                'key' : key,\n                'value' : value\n            });\n        });\n    }\n\n    /**\n     * clear data in all databases.\n     *\n     * @param {string} key key\n     * @returns {object} a promise that is resolved when respective value is removed from store.\n     */\n    public remove(key) {\n        return this.fetchEntry(key).then(result => {\n            if (result && result.length > 0) {\n                return this.store.delete(result[0].id);\n            }\n        });\n    }\n\n    private fetchEntry(key) {\n        const filterCriteria = [{\n            'attributeName' : 'key',\n            'attributeValue' : key,\n            'attributeType' : 'STRING',\n            'filterCondition' : 'EQUALS'\n        }];\n        return this.store.filter(filterCriteria);\n    }\n}\n","export const WM_LOCAL_OFFLINE_CALL = 'WM_LOCAL_OFFLINE_CALL';\n\nexport const escapeName = (name) => {\n    if (name) {\n        name = name.replace(/\"/g, '\"\"');\n        return '\"' + name + '\"';\n    }\n};\n","import { File } from '@ionic-native/file';\nimport { SQLiteObject } from '@ionic-native/sqlite';\n\nimport { convertToBlob, isDefined } from '@wm/core';\nimport { DeviceFileService } from '@wm/mobile/core';\nimport { SWAGGER_CONSTANTS } from '@wm/variables';\n\nimport { ColumnInfo, EntityInfo } from './config';\nimport { escapeName } from '../utils/utils';\nimport { LocalDBManagementService } from '../services/local-db-management.service';\n\ndeclare const _;\n\nexport interface FilterCriterion {\n    attributeName: string;\n    attributeValue: any;\n    attributeType: string;\n    filterCondition: string;\n}\n\nexport interface Pagination {\n    offset: number;\n    limit: number;\n}\n\nconst insertRecordSqlTemplate = (schema: EntityInfo) => {\n    const columnNames = [],\n        placeHolder = [];\n    _.forEach(schema.columns, col => {\n        columnNames.push(escapeName(col.name));\n        placeHolder.push('?');\n    });\n    return `INSERT INTO ${escapeName(schema.name)} (${columnNames.join(',')}) VALUES (${placeHolder.join(',')})`;\n};\n\nconst replaceRecordSqlTemplate = (schema: EntityInfo) => {\n    const columnNames = [],\n        placeHolder = [];\n    _.forEach(schema.columns, col => {\n        columnNames.push(escapeName(col.name));\n        placeHolder.push('?');\n    });\n    return `REPLACE INTO ${escapeName(schema.name)} (${columnNames.join(',')}) VALUES (${placeHolder.join(',')})`;\n};\n\nconst deleteRecordTemplate = (schema: EntityInfo) => {\n    const primaryKeyField = _.find(schema.columns, 'primaryKey');\n    if (primaryKeyField) {\n        return `DELETE FROM ${escapeName(schema.name)} WHERE ${escapeName(primaryKeyField.name)} = ?`;\n    }\n    return '';\n};\n\nconst selectSqlTemplate = (schema: EntityInfo) => {\n    const columns = [],\n        joins = [];\n    schema.columns.forEach( col => {\n        let childTableName;\n        columns.push(escapeName(schema.name) + '.' + escapeName(col.name) + ' as ' + col.fieldName);\n        if (col.foreignRelations) {\n            col.foreignRelations.forEach(foreignRelation => {\n                childTableName = foreignRelation.sourceFieldName;\n                _.forEach(foreignRelation.dataMapper, (childCol, childFiledName) => {\n                    columns.push(childTableName + '.' + escapeName(childCol.name) + ' as \\'' + childFiledName + '\\'');\n                });\n                joins.push(` LEFT JOIN ${escapeName(foreignRelation.targetTable)} ${childTableName}\n                         ON ${childTableName}.${escapeName(foreignRelation.targetColumn)} = ${escapeName(schema.name)}.${escapeName(col.name)}`);\n            });\n        }\n    });\n    return `SELECT ${columns.join(',')} FROM ${escapeName(schema.name)} ${joins.join(' ')}`;\n};\n\nconst countQueryTemplate = (schema: EntityInfo) => {\n    const joins = [];\n    schema.columns.forEach( col => {\n        let childTableName;\n        if (col.foreignRelations) {\n            col.foreignRelations.forEach(foreignRelation => {\n                childTableName = foreignRelation.sourceFieldName;\n                joins.push(` LEFT JOIN ${escapeName(foreignRelation.targetTable)} ${childTableName}\n                         ON ${childTableName}.${escapeName(foreignRelation.targetColumn)} = ${escapeName(schema.name)}.${escapeName(col.name)}`);\n            });\n        }\n    });\n    return `SELECT count(*) as count FROM ${escapeName(schema.name)} ${joins.join(' ')}`;\n};\n\nconst generateWherClause = (store: LocalDBStore, filterCriteria: FilterCriterion[]) => {\n    let conditions;\n    const fieldToColumnMapping = store.fieldToColumnMapping,\n        tableName = store.entitySchema.name;\n    if (!_.isEmpty(filterCriteria) && _.isString(filterCriteria)) {\n        return ' WHERE ' + filterCriteria;\n    }\n    if (filterCriteria) {\n        conditions = filterCriteria.map(filterCriterion => {\n            const colName = fieldToColumnMapping[filterCriterion.attributeName],\n                condition = filterCriterion.filterCondition;\n            let target = filterCriterion.attributeValue,\n                operator = '=';\n            if (filterCriterion.attributeType === 'STRING') {\n                if (condition === 'STARTING_WITH') {\n                    target = target + '%';\n                    operator = 'like';\n                } else if (condition === 'ENDING_WITH') {\n                    target = '%' + target;\n                    operator = 'like';\n                } else if (condition === 'CONTAINING') {\n                    target = '%' + target + '%';\n                    operator = 'like';\n                }\n                target = `'${target}'`;\n            } else if (filterCriterion.attributeType === 'BOOLEAN') {\n                target = (target === true ? 1 : 0);\n            }\n            return `${escapeName(tableName)}.${escapeName(colName)} ${operator} ${target}`;\n        });\n    }\n    return conditions && conditions.length > 0 ? ' WHERE ' + conditions.join(' AND ') : '';\n};\n\nconst generateOrderByClause = (store: LocalDBStore, sort: string) => {\n    if (sort) {\n        return ' ORDER BY ' + _.map(sort.split(','), field => {\n            const splits =  _.trim(field).split(' ');\n            splits[0] = escapeName(store.entitySchema.name) + '.' + escapeName(store.fieldToColumnMapping[splits[0]]);\n            return splits.join(' ');\n        }).join(',');\n    }\n    return '';\n};\n\nconst geneateLimitClause = page => {\n    page = page || {};\n    return ' LIMIT ' + (page.limit || 100) + ' OFFSET ' + (page.offset || 0);\n};\n\nconst mapRowDataToObj = (schema: EntityInfo, dataObj: any) => {\n    schema.columns.forEach(col => {\n        const val = dataObj[col.fieldName];\n        if (col.foreignRelations) {\n            col.foreignRelations.forEach(foreignRelation => {\n                let childEntity = null;\n                _.forEach(foreignRelation.dataMapper, function (childCol, childFieldName) {\n                    const fieldValue = dataObj[childFieldName];\n                    if (isDefined(fieldValue) && fieldValue !== null && fieldValue !== '') {\n                        childEntity = childEntity || {};\n                        childEntity[childCol.fieldName] = dataObj[childFieldName];\n                    }\n                    delete dataObj[childFieldName];\n                });\n                dataObj[foreignRelation.sourceFieldName] = childEntity;\n            });\n        } else if (col.sqlType === 'boolean' && !_.isNil(val)) {\n            dataObj[col.fieldName] = (val === 1);\n        }\n    });\n    return dataObj;\n};\n\nconst getValue = (entity: any, col: ColumnInfo) => {\n    let value = entity[col.fieldName];\n    if (col.foreignRelations) {\n        col.foreignRelations.some(foreignRelation => {\n            if (foreignRelation.targetEntity && entity[foreignRelation.sourceFieldName]) {\n                value = entity[foreignRelation.sourceFieldName][foreignRelation.targetFieldName];\n                return true;\n            }\n            return false;\n        });\n    }\n    if (_.isNil(value)) {\n        return col.defaultValue;\n    } else if (col.sqlType === 'boolean') {\n        return (value === true ? 1 : 0);\n    } else {\n        return value;\n    }\n};\n\nconst mapObjToRow = (store: LocalDBStore, entity: any) => {\n    const row = {};\n    store.entitySchema.columns.forEach(col => row[col.name] = getValue(entity, col));\n    return row;\n};\n\nexport class LocalDBStore {\n\n    public readonly primaryKeyField: ColumnInfo;\n    public readonly primaryKeyName: string;\n    public readonly fieldToColumnMapping: object = {};\n\n    private insertRecordSqlTemplate: string;\n    private replaceRecordSqlTemplate: string;\n    private deleteRecordTemplate: string;\n    private selectSqlTemplate: string;\n    private countQuery: string;\n\n    constructor(\n        private deviceFileService: DeviceFileService,\n        public readonly entitySchema: EntityInfo,\n        private file: File,\n        private localDbManagementService: LocalDBManagementService,\n        private sqliteObject: SQLiteObject\n    ) {\n        this.primaryKeyField = _.find(this.entitySchema.columns, 'primaryKey');\n        this.primaryKeyName = this.primaryKeyField ? this.primaryKeyField.fieldName : undefined;\n        this.entitySchema.columns.forEach(c => {\n            this.fieldToColumnMapping[c.fieldName] = c.name;\n            if (c.foreignRelations) {\n                c.foreignRelations.forEach( foreignRelation => {\n                    this.fieldToColumnMapping[foreignRelation.targetPath] = c.name;\n                    _.forEach(foreignRelation.dataMapper, (childCol, childFieldName) => {\n                        this.fieldToColumnMapping[childFieldName] = foreignRelation.sourceFieldName + '.' + childCol.name;\n                    });\n                });\n            }\n        });\n\n        this.insertRecordSqlTemplate = insertRecordSqlTemplate(this.entitySchema);\n        this.replaceRecordSqlTemplate = replaceRecordSqlTemplate(this.entitySchema);\n        this.deleteRecordTemplate = deleteRecordTemplate(this.entitySchema);\n        this.selectSqlTemplate = selectSqlTemplate(this.entitySchema);\n        this.countQuery = countQueryTemplate(this.entitySchema);\n    }\n\n    public add(entity: any): Promise<any> {\n        if (this.primaryKeyName) {\n            const idValue = entity[this.primaryKeyName];\n            if (this.primaryKeyField.sqlType === 'number'\n                && (!isDefined(idValue) || (_.isString(idValue) && _.isEmpty(_.trim(idValue))))) {\n                if (this.primaryKeyField.generatorType === 'identity') {\n                    // updating the id with the latest id obtained from nextId.\n                    entity[this.primaryKeyName] = this.localDbManagementService.nextIdCount();\n                } else {\n                    // for assigned type, get the primaryKeyValue from the relatedTableData which is inside the entity\n                    const primaryKeyValue = this.getValue(entity, this.primaryKeyName);\n                    entity[this.primaryKeyName] = primaryKeyValue;\n                }\n            }\n        }\n        const rowData = mapObjToRow(this, entity);\n        const params = this.entitySchema.columns.map(f => rowData[f.name]);\n        return this.sqliteObject.executeSql(this.insertRecordSqlTemplate, params)\n            .then(result => result.insertId);\n    }\n\n    /**\n     * clears all data of this store.\n     * @returns {object} promise\n     */\n    public clear(): Promise<any> {\n        return this.sqliteObject.executeSql('DELETE FROM ' + escapeName(this.entitySchema.name));\n    }\n\n    /**\n     * creates the stores if it does not exist\n     * @returns {Promise<any>}\n     */\n    public create(): Promise<any> {\n        return this.sqliteObject.executeSql(this.createTableSql(this.entitySchema)).then(() => this);\n    }\n\n    /**\n     * counts the number of records that satisfy the given filter criteria.\n     * @param {FilterCriterion[]} filterCriteria\n     * @returns {object} promise that is resolved with count\n     */\n    public count(filterCriteria?: FilterCriterion[]): Promise<number> {\n        const sql = this.countQuery + generateWherClause(this, filterCriteria);\n        return this.sqliteObject.executeSql(sql).then(result => result.rows.item(0)['count']);\n    }\n\n    /**\n     * This function deserializes the given map object to FormData, provided that map object was\n     * serialized by using serialize method of this store.\n     * @param  {object} map object to deserialize\n     * @returns {object} promise that is resolved with the deserialized FormData.\n     */\n    public deserialize(map: any) {\n        return this.deserializeMapToFormData(map);\n    }\n\n    /**\n     * filters data of this store that statisfy the given filter criteria.\n     * @param {FilterCriterion[]} filterCriteria\n     * @param  {string=} sort ex: 'filedname asc/desc'\n     * @param  {object=} page {'offset' : 0, \"limit\" : 20}\n     * @returns {object} promise that is resolved with the filtered data.\n     */\n    public filter(filterCriteria?: FilterCriterion[], sort?: string, page?: Pagination): Promise<any[]> {\n        let sql = this.selectSqlTemplate;\n        sql += generateWherClause(this, filterCriteria);\n        sql += generateOrderByClause(this, sort);\n        sql += geneateLimitClause(page);\n        return this.sqliteObject.executeSql(sql)\n            .then(result => {\n            const objArr = [],\n                rowCount = result.rows.length;\n            for (let i = 0; i < rowCount; i++) {\n                objArr.push(mapRowDataToObj(this.entitySchema, result.rows.item(i)));\n            }\n            return objArr;\n        });\n    }\n\n    // fetches all the data related to the primaryKey\n    public refresh(data) {\n        const primaryKeyName = this.primaryKeyName;\n        const primaryKey = this.getValue(data, primaryKeyName);\n        if (!primaryKey) {\n            return Promise.resolve(data);\n        }\n        return this.get(primaryKey);\n    }\n\n    /**\n     * deletes the record with the given primary key.\n     * @param  {object} primaryKey primary key of the record\n     * @returns {object} promise\n     */\n    public delete(primaryKey: any) {\n        return this.sqliteObject.executeSql(this.deleteRecordTemplate, [primaryKey]);\n    }\n\n    /**\n     * finds the record with the given primary key.\n     * @param  {object} primaryKey primary key of the record\n     * @returns {object} promise that is resolved with entity\n     */\n    public get(primaryKey: any) {\n        const filterCriteria = [{\n            attributeName: this.primaryKeyName,\n            filterCondition: '=',\n            attributeValue: primaryKey,\n            attributeType: this.primaryKeyField.sqlType.toUpperCase() }];\n        return this.filter(filterCriteria).then(function (obj) {\n            return obj && obj.length === 1 ? obj[0] : undefined;\n        });\n    }\n\n    /**\n     * retrieve the value for the given field.\n     *\n     * @param entity\n     * @param {string} fieldName\n     * @returns {undefined | any | number}\n     */\n    public getValue(entity: any, fieldName: string) {\n        const column = this.entitySchema.columns.find( col => col.fieldName === fieldName);\n        return getValue(entity, column);\n    }\n\n    /**\n     * saves the given entity to the store. If the record is not available, then a new record will be created.\n     * @param {object} entity the entity to save\n     * @returns {object} promise\n     */\n    public save(entity) {\n        return this.saveAll([entity]);\n    }\n\n    /**\n     * saves the given entity to the store. If the record is not available, then a new record will be created.\n     * @param {object} entities the entity to save\n     * @returns {object} promise\n     */\n    public saveAll(entities: any[]) {\n        // filtering the null entities\n        entities = _.filter(entities, null);\n        const queries = _.map(entities, entity => {\n            const rowData = mapObjToRow(this, entity);\n            const params = this.entitySchema.columns.map(f => rowData[f.name]);\n            return [this.replaceRecordSqlTemplate, params];\n        });\n        return this.sqliteObject.sqlBatch(queries);\n    }\n\n    /**\n     * Based on this store columns, this function converts the given FormData to a map object.\n     * Multipart file is stored as a local file. If form data cannot be serialized,\n     * then formData is returned back.\n     * @param  {FormData} formData object to serialize\n     * @returns {object} promise that is resolved with a map.\n     */\n    public serialize(formData: any) {\n        return this.serializeFormDataToMap(formData);\n    }\n\n    /**\n     * Save blob to a local file\n     * @param blob\n     * @returns {*}\n     */\n    private saveBlobToFile(blob: any) {\n        const fileName = this.deviceFileService.appendToFileName(blob.name),\n            uploadDir = this.deviceFileService.getUploadDirectory();\n        return this.file.writeFile(uploadDir, fileName, blob).then(function () {\n            return {\n                'name' : blob.name,\n                'type' : blob.type,\n                'lastModified' : blob.lastModified,\n                'lastModifiedDate' : blob.lastModifiedDate,\n                'size' : blob.size,\n                'wmLocalPath' : uploadDir + '/' + fileName\n            };\n        });\n    }\n\n    /**\n     * Converts form data object to map for storing request in local database..\n     */\n    private serializeFormDataToMap(formData) {\n        const blobColumns = _.filter(this.entitySchema.columns, {\n                'sqlType' : 'blob'\n            }),\n            promises = [];\n        let map = {};\n        if (formData && typeof formData.append === 'function' && formData.rowData) {\n            _.forEach(formData.rowData, (fieldData, fieldName) => {\n                if (fieldData && _.find(blobColumns, {'fieldName' : fieldName})) {\n                    promises.push(this.saveBlobToFile(fieldData).then(localFile => {\n                        map[fieldName] = localFile;\n                    }));\n                } else {\n                    map[fieldName] = fieldData;\n                }\n            });\n        } else {\n            map = formData;\n        }\n        return Promise.all(promises).then(() => map);\n    }\n\n    /**\n     * Converts map object back to form data.\n     */\n    private deserializeMapToFormData(map) {\n        const formData = new FormData(),\n            blobColumns = this.entitySchema.columns.filter(c => c.sqlType === 'blob'),\n            promises = [];\n        _.forEach(blobColumns, column => {\n            const value = map[column.fieldName];\n            if (value && value.wmLocalPath) {\n                promises.push(convertToBlob(value.wmLocalPath)\n                    .then(result => formData.append(column.fieldName, result.blob, value.name)));\n                map[column.fieldName] = '';\n            }\n        });\n        formData.append(SWAGGER_CONSTANTS.WM_DATA_JSON, new Blob([JSON.stringify(map)], {\n            type: 'application/json'\n        }));\n        return Promise.all(promises).then(() => formData);\n    }\n\n    private createTableSql(schema) {\n        const fieldStr = _.reduce(schema.columns, (result, f) => {\n            let str = escapeName(f.name);\n            if (f.primaryKey) {\n                if (f.sqlType === 'number' && f.generatorType === 'databaseIdentity') {\n                    str += ' INTEGER PRIMARY KEY AUTOINCREMENT';\n                } else {\n                    str += ' PRIMARY KEY';\n                }\n            }\n            return result ? result + ',' + str : str;\n        }, false);\n        return `CREATE TABLE IF NOT EXISTS ${escapeName(schema.name)} (${fieldStr})`;\n    }\n}\n","import { SQLiteObject } from '@ionic-native/sqlite';\n\nimport { LocalDBStore } from './local-db-store';\n\nexport class DBInfo {\n    public schema = {\n        name: '',\n        isInternal: false,\n        entities: new Map<string, EntityInfo>()\n    };\n    public stores = new Map<string, LocalDBStore>();\n    public queries = new Map<string, NamedQueryInfo>();\n    public sqliteObject: SQLiteObject;\n}\n\nexport class EntityInfo {\n    public columns = new Array<ColumnInfo>();\n    public pullConfig: PullConfig;\n    public pushConfig: PushConfig;\n\n    constructor(public name: string, public entityName?: string) {\n        this.entityName = this.entityName || this.name;\n    }\n}\n\nexport class ColumnInfo {\n    public generatorType: string;\n    public sqlType: string;\n    public primaryKey = false;\n    public defaultValue: any;\n    public foreignRelations?: ForeignRelationInfo[];\n\n    constructor(public name: string, public fieldName?: string) {\n        this.fieldName = this.fieldName || this.name;\n    }\n}\n\nexport class ForeignRelationInfo {\n    public sourceFieldName: string;\n    public targetEntity: string;\n    public targetTable: string;\n    public targetColumn: string;\n    public targetFieldName: string;\n    public targetPath: string;\n    public dataMapper: Array<ColumnInfo>;\n}\n\nexport class NamedQueryInfo {\n    public params: NamedQueryParamInfo[];\n    public response = {\n        properties: []\n    };\n    constructor(public name: string, public query: string) {\n\n    }\n}\n\nexport class NamedQueryParamInfo {\n    constructor(public name: string, public type?: string, public variableType?: string) {\n\n    }\n}\n\nexport class PullConfig {\n    public size: number;\n    public query: string;\n    public orderBy: string;\n    public maxNoOfRecords: number;\n    public defaultType: string;\n    public pullType: PullType;\n    public filter: OfflineDataFilter[];\n}\n\nexport enum PullType {\n    LIVE = 'LIVE',\n    BUNDLED = 'BUNDLED',\n    APP_START = 'APP_START'\n}\n\nexport class OfflineDataFilter {\n    public attributeName: string;\n    public attributeValue: any;\n    public attributeType: string;\n    public filterCondition: string;\n}\n\nexport class PushConfig {\n    public insertEnabled = false;\n    public updateEnabled = false;\n    public deleteEnabled = false;\n    public readEnabled = true;\n}\n","import { Injectable } from '@angular/core';\n\nimport { AppVersion } from '@ionic-native/app-version';\nimport { File } from '@ionic-native/file';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite';\n\nimport { DataType, DEFAULT_FORMATS, executePromiseChain, extractType, isAndroid, isArray, isIos, noop, toPromise } from '@wm/core';\nimport { DeviceFileService, DeviceService } from '@wm/mobile/core';\nimport { SecurityService } from '@wm/security';\nimport { formatDate } from '@wm/variables';\n\nimport { LocalKeyValueService } from './local-key-value.service';\nimport { LocalDBStore } from '../models/local-db-store';\nimport { escapeName } from '../utils/utils';\nimport { ColumnInfo, DBInfo, EntityInfo, NamedQueryInfo, PullType } from '../models/config';\n\ndeclare const _;\ndeclare const cordova;\ndeclare const moment;\ndeclare const Zeep;\n\nconst  NEXT_ID_COUNT = 'localDBStore.nextIdCount';\nconst META_LOCATION = 'www/metadata/app';\nconst OFFLINE_WAVEMAKER_DATABASE_SCHEMA = {\n    name: 'wavemaker',\n    version: 1,\n    isInternal: true,\n    tables: [\n        {\n            name: 'key_value',\n            entityName: 'key-value',\n            columns: [{\n                fieldName: 'id',\n                name: 'id',\n                generatorType : 'databaseIdentity',\n                sqlType : 'number',\n                primaryKey: true\n            }, {\n                fieldName: 'key',\n                name: 'key'\n            }, {\n                name: 'value',\n                fieldName: 'value'\n            }]\n        },\n        {\n            name: 'offlineChangeLog',\n            entityName: 'offlineChangeLog',\n            columns: [{\n                fieldName: 'id',\n                name: 'id',\n                generatorType: 'databaseIdentity',\n                sqlType: 'number',\n                primaryKey: true\n            }, {\n                name: 'service',\n                fieldName: 'service'\n            }, {\n                name: 'operation',\n                fieldName: 'operation'\n            }, {\n                name: 'params',\n                fieldName: 'params'\n            }, {\n                name: 'timestamp',\n                fieldName: 'timestamp'\n            }, {\n                name: 'hasError',\n                fieldName: 'hasError'\n            }, {\n                name: 'errorMessage',\n                fieldName: 'errorMessage'\n            }]\n        }\n    ]\n};\n\nexport interface CallBack {\n    onDbCreate?: (info: any) => any;\n    postImport?: (importFolderPath: string, metaInfo: any) => any;\n    preExport?: (folderToExportFullPath: string, metaInfo: any) => any;\n}\n\n@Injectable({providedIn: 'root'})\nexport class LocalDBManagementService {\n\n    private callbacks: CallBack[] = [];\n    private dbInstallDirectory: string;\n    private dbInstallDirectoryName: string;\n    private dbInstallParentDirectory: string;\n    private databases: Map<string, DBInfo>;\n    private _logSql = false;\n    public nextId = 100000000000;\n    private readonly systemProperties = {\n        'USER_ID' : {\n            'name' : 'USER_ID',\n            'value' : () => this.securityService.getLoggedInUser().then( userInfo => userInfo.userId)\n        },\n        'USER_NAME' : {\n            'name' : 'USER_NAME',\n            'value' : () => this.securityService.getLoggedInUser().then( userInfo => userInfo.userName)\n        },\n        'DATE_TIME' : {\n            'name' : 'DATE_TIME',\n            'value' : () => moment().format('YYYY-MM-DDThh:mm:ss')\n        },\n        'DATE' : {\n            'name' : 'CURRENT_DATE',\n            'value' : () => moment().format('YYYY-MM-DD')\n        },\n        'TIME' : {\n            'name' : 'TIME',\n            'value' : () => moment().format('hh:mm:ss')\n        }\n    };\n\n    constructor(\n        private appVersion: AppVersion,\n        private deviceService: DeviceService,\n        private deviceFileService: DeviceFileService,\n        private file: File,\n        private localKeyValueService: LocalKeyValueService,\n        private securityService: SecurityService,\n        private sqlite: SQLite\n    ) {}\n\n    /**\n     * Closes all databases.\n     *\n     * @returns {object} a promise.\n     */\n    public close(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            // Before closing databases, give some time for the pending transactions (if any).\n            setTimeout(() => {\n                const closePromises = _.map(_.values(this.databases), db => db.sqliteObject.close());\n                Promise.all(closePromises).then(resolve, reject);\n            }, 1000);\n        });\n    }\n\n    public nextIdCount() {\n        this.nextId = this.nextId + 1;\n        this.localKeyValueService.put(NEXT_ID_COUNT, this.nextId);\n        return this.nextId;\n    }\n\n    /**\n     * Executes a named query.\n     *\n     * @param {string} dbName name of database on which the named query has to be run\n     * @param {string} queryName name of the query to execute\n     * @param {object} params parameters required for query.\n     * @returns {object} a promise.\n     */\n    public executeNamedQuery(dbName: string, queryName: string, params: any) {\n        let queryData, paramPromises;\n        if (!this.databases[dbName] || !this.databases[dbName].queries[queryName]) {\n            return Promise.reject(`Query by name ' ${queryName} ' Not Found`);\n        }\n        queryData = this.databases[dbName].queries[queryName];\n        paramPromises = _.chain(queryData.params)\n            .filter(p => p.variableType !== 'PROMPT')\n            .forEach(p => {\n                const paramValue = this.systemProperties[p.variableType].value(p.name, params);\n                return toPromise(paramValue).then(v => params[p.name] = v);\n            }).value();\n        return Promise.all(paramPromises).then(() => {\n            params = _.map(queryData.params, p => {\n                // Sqlite will accept DateTime value as below format.\n                if (typeof params[p.name] !== 'string'\n                    && (p.type === DataType.DATETIME || p.type === DataType.LOCALDATETIME)) {\n                    return formatDate(params[p.name], p.type);\n                }\n                // sqlite accepts the bool val as 1,0 hence convert the boolean value to number\n                if (p.type === DataType.BOOLEAN) {\n                    return this.convertBoolToInt(params[p.name]);\n                }\n                return params[p.name];\n            });\n            return this.executeSQLQuery(dbName, queryData.query, params)\n                .then(result => {\n                    let firstRow,\n                        needTransform;\n                    if (!_.isEmpty(result.rows)) {\n                        firstRow = result.rows[0];\n                        needTransform = _.find(queryData.response.properties, p => !firstRow.hasOwnProperty(p.fieldName));\n                        if (!_.isUndefined(needTransform)) {\n                            result.rows = _.map(result.rows, row => {\n                                const transformedRow = {},\n                                    rowWithUpperKeys = {};\n                                // This is to make search for data as case-insensitive\n                                _.forEach(row, (v, k) => rowWithUpperKeys[k.toUpperCase()] = v);\n                                _.forEach(queryData.response.properties, p => {\n                                    // format the value depending on the typeRef specified in properties.\n                                    const propType = extractType(p.fieldType.typeRef);\n                                    const formatValue = DEFAULT_FORMATS[_.toUpper(propType)];\n                                    const fieldVal = row[p.name];\n                                    if (fieldVal && typeof fieldVal !== 'string'\n                                        && (propType === DataType.DATETIME || propType === DataType.LOCALDATETIME || propType === DataType.DATE)) {\n                                        if (moment(fieldVal).isValid()) {\n                                            row[p.name] = formatDate(fieldVal, propType);\n                                        } else if (moment(fieldVal, 'HH:mm').isValid()) {\n                                            // if the value is in HH:mm:ss format, it returns a wrong date. So append the date to the given value to get date\n                                            row[p.name] = moment().format('YYYY-MM-DD') + 'T' + fieldVal;\n                                        }\n                                    }\n                                    if (propType === DataType.BOOLEAN) {\n                                        row[p.name] = this.convertIntToBool(fieldVal);\n                                    }\n                                    rowWithUpperKeys[p.nameInUpperCase] = row[p.name];\n                                    transformedRow[p.name] = row[p.name];\n                                    transformedRow[p.fieldName] = row[p.fieldName] || rowWithUpperKeys[p.nameInUpperCase];\n                                });\n                                return transformedRow;\n                            });\n                        }\n                    }\n                    return result;\n                });\n        });\n    }\n\n    /**\n     * This function will export the databases in a zip format.\n     *\n     * @returns {object} a promise that is resolved when zip is created.\n     */\n    public exportDB(): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            const folderToExport = 'offline_temp_' + _.now(),\n                folderToExportFullPath = cordova.file.cacheDirectory + folderToExport + '/',\n                zipFileName = '_offline_data.zip',\n                metaInfo = {\n                    app: null,\n                    OS: '',\n                    createdOn: 0\n                };\n            let zipDirectory;\n            if (isIos()) {\n                // In IOS, save zip to documents directory so that user can export the file from IOS devices using iTUNES.\n                zipDirectory = cordova.file.documentsDirectory;\n            } else {\n                // In Android, save zip to download directory.\n                zipDirectory = cordova.file.externalRootDirectory + 'Download/';\n            }\n            // Create a temporary folder to copy all the content to export\n            this.file.createDir(cordova.file.cacheDirectory, folderToExport, false)\n                .then(() => {\n                    // Copy databases to temporary folder for export\n                    return this.file.copyDir(this.dbInstallParentDirectory, this.dbInstallDirectoryName, folderToExportFullPath, 'databases')\n                        .then(() => {\n                            // Prepare meta info to identify the zip and other info\n                            return this.getAppInfo();\n                        }).then(appInfo => {\n                            metaInfo.app = (appInfo as any);\n                            if (isIos()) {\n                                metaInfo.OS = 'IOS';\n                            } else if (isAndroid()) {\n                                metaInfo.OS = 'ANDROID';\n                            }\n                            metaInfo.createdOn = _.now();\n                            return metaInfo;\n                        }).then(() => executePromiseChain(this.getCallbacksFor('preExport'), [folderToExportFullPath, metaInfo]))\n                        .then(() => {\n                            // Write meta data to META.json\n                            return this.file.writeFile(folderToExportFullPath, 'META.json', JSON.stringify(metaInfo));\n                        });\n                }).then(() => {\n                    // Prepare name to use for the zip.\n                    let appName = metaInfo.app.name;\n                    appName = appName.replace(/\\s+/g, '_');\n                    return this.deviceFileService.newFileName(zipDirectory, appName + zipFileName)\n                        .then(fileName => {\n                            // Zip the temporary folder for export\n                            return new Promise((rs, re) => {\n                                Zeep.zip({\n                                    from : folderToExportFullPath,\n                                    to   : zipDirectory + fileName\n                                }, () => rs(zipDirectory + fileName), re);\n                            });\n                        });\n                }).then(resolve, reject)\n                .catch(noop).then(() => {\n                    // Remove temporary folder for export\n                    return this.deviceFileService.removeDir(cordova.file.cacheDirectory + folderToExport);\n                });\n        });\n    }\n\n    /**\n     *  returns store bound to the dataModelName and entityName.\n     *\n     * @param dataModelName\n     * @param entityName\n     * @returns {*}\n     */\n    public getStore(dataModelName: string, entityName: string): Promise<LocalDBStore> {\n        return new Promise((resolve, reject) => {\n            if (this.databases[dataModelName]) {\n                resolve(this.databases[dataModelName].stores[entityName]);\n            }\n            reject(`store with name'${entityName}' in datamodel '${dataModelName}' is not found`);\n        });\n    }\n\n    /**\n     * This function will replace the databases with the files provided in zip. If import gets failed,\n     * then app reverts back to use old databases.\n     *\n     * @param {string} zipPath location of the zip file.\n     * @param {boolean} revertIfFails If true, then a backup is created and when import fails, backup is reverted back.\n     * @returns {object} a promise that is resolved when zip is created.\n     */\n    public importDB(zipPath: string, revertIfFails: boolean): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const importFolder = 'offline_temp_' + _.now(),\n                importFolderFullPath = cordova.file.cacheDirectory + importFolder + '/';\n            let zipMeta;\n            // Create a temporary folder to unzip the contents of the zip.\n            this.file.createDir(cordova.file.cacheDirectory, importFolder, false)\n                .then( () => {\n                    return new Promise<void>((rs, re) => {\n                        // Unzip to temporary location\n                        Zeep.unzip({\n                            from: zipPath,\n                            to: importFolderFullPath\n                        }, rs, re);\n                    });\n                }).then(() => {\n                /*\n                 * read meta data and allow import only package name of the app from which this zip is created\n                 * and the package name of this app are same.\n                 */\n                return this.file.readAsText(importFolderFullPath, 'META.json')\n                    .then(text => {\n                    zipMeta = JSON.parse(text);\n                    return this.getAppInfo();\n                }).then(appInfo => {\n                    if (!zipMeta.app) {\n                        return Promise.reject('meta information is not found in zip');\n                    }\n                    if (zipMeta.app.packageName !== appInfo.packageName) {\n                        return Promise.reject('database zip of app with same package name can only be imported');\n                    }\n                });\n            }).then(() => {\n                let backupZip;\n                return this.close()\n                    .then(() => {\n                        if (revertIfFails) {\n                            // create backup\n                            return this.exportDB()\n                                .then(path => backupZip = path);\n                        }\n                    }).then(() => {\n                        // delete existing databases\n                        return this.deviceFileService.removeDir(this.dbInstallDirectory);\n                    }).then(() => {\n                        // copy imported databases\n                        return this.file.copyDir(importFolderFullPath, 'databases', this.dbInstallParentDirectory, this.dbInstallDirectoryName);\n                    }).then(() => {\n                        // reload databases\n                        this.databases = null;\n                        return this.loadDatabases();\n                    }).then(() => executePromiseChain(this.getCallbacksFor('postImport'), [importFolderFullPath, zipMeta]))\n                    .then(() => {\n                        if (backupZip) {\n                            return this.deviceFileService.removeFile(backupZip);\n                        }\n                    }, (reason) => {\n                        if (backupZip) {\n                            return this.importDB(backupZip, false)\n                                .then(() => {\n                                    this.deviceFileService.removeFile(backupZip);\n                                    return Promise.reject(reason);\n                                });\n                        }\n                        return Promise.reject(reason);\n                    });\n            }).then(resolve, reject)\n            .catch(noop)\n            .then(() => {\n                return this.deviceFileService.removeDir(cordova.file.cacheDirectory + importFolder);\n            });\n        });\n    }\n\n    /**\n     * @param {string} dataModelName Name of the data model\n     * @param {string} entityName Name of the entity\n     * @param {string} operation Name of the operation (READ, INSERT, UPDATE, DELETE)\n     * @returns {boolean} returns true, if the given operation can be performed as per configuration.\n     */\n    public isOperationAllowed(dataModelName: string, entityName: string, operation: string): Promise<boolean> {\n        return this.getStore(dataModelName, entityName).then( store => {\n            if (!store) {\n                return false;\n            }\n            if (operation === 'READ') {\n                return store.entitySchema.pushConfig.readEnabled;\n            }\n            if (operation === 'INSERT') {\n                return store.entitySchema.pushConfig.insertEnabled;\n            }\n            if (operation === 'UPDATE') {\n                return store.entitySchema.pushConfig.updateEnabled;\n            }\n            if (operation === 'DELETE') {\n                return store.entitySchema.pushConfig.deleteEnabled;\n            }\n            return false;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    public loadDatabases(): Promise<any> {\n        let newDatabasesCreated = false;\n        if (this.databases) {\n            return Promise.resolve(this.databases);\n        } else {\n            if (isIos()) {\n                this.dbInstallDirectoryName = 'LocalDatabase';\n                this.dbInstallParentDirectory = cordova.file.applicationStorageDirectory +  'Library/';\n            } else {\n                this.dbInstallDirectoryName = 'databases';\n                this.dbInstallParentDirectory = cordova.file.applicationStorageDirectory;\n            }\n            this.dbInstallDirectory = this.dbInstallParentDirectory + this.dbInstallDirectoryName;\n\n            this.databases = new Map<string, DBInfo>();\n            return this.setUpDatabases()\n                .then( flag => newDatabasesCreated = flag)\n                .then(() => this.loadDBSchemas())\n                .then(metadata => this.loadNamedQueries(metadata))\n                .then(metadata => this.loadOfflineConfig(metadata))\n                .then(metadata => {\n                    return Promise.all(_.map(metadata, dbMetadata => {\n                        return this.openDatabase(dbMetadata)\n                            .then(database => {\n                                this.databases[dbMetadata.schema.name] = database;\n                            });\n                    }));\n                }).then(() => {\n                    return this.getStore('wavemaker', 'key-value').then( store => {\n                        this.localKeyValueService.init(store);\n                        return this.localKeyValueService.get(NEXT_ID_COUNT).then(val => {\n                           this.nextId = val || this.nextId;\n                        });\n                    });\n                }).then(() => {\n                    if (newDatabasesCreated) {\n                        return this.normalizeData()\n                            .then(() => this.disableForeignKeys())\n                            .then(() => this.deviceService.getAppBuildTime())\n                            .then(dbSeedCreationTime => {\n                                return executePromiseChain(_.map(this.callbacks, 'onDbCreate'), [{\n                                    'databases' : this.databases,\n                                    'dbCreatedOn' : _.now(),\n                                    'dbSeedCreatedOn' : dbSeedCreationTime\n                                }]);\n                            }).then(() => this.databases);\n                    } else {\n                        return this.databases;\n                    }\n                });\n        }\n    }\n\n    /**\n     * using this function one can listen events such as onDbCreate, 'preExport' and 'postImport'.\n     *\n     * @param {object} listener an object with functions mapped to event names.\n     */\n    public registerCallback(listener: CallBack) {\n        this.callbacks.push(listener);\n    }\n\n    public setLogSQl(flag: boolean) {\n        this._logSql = flag;\n    }\n\n    /**\n     * Deletes any existing databases (except wavemaker db) and copies the databases that are packaged with the app.\n     *\n     * @returns {*}\n     */\n    private cleanAndCopyDatabases(): Promise<any> {\n        const dbSeedFolder = cordova.file.applicationDirectory + META_LOCATION;\n        return this.file.createDir(this.dbInstallParentDirectory, this.dbInstallDirectoryName, false)\n            .catch(noop)\n            .then(() => this.deviceFileService.listFiles(this.dbInstallDirectory, /.+\\.db$/))\n            .then(files => {\n                if (files && files.length > 0) {\n                    return Promise.all(files.map(f => {\n                        if (f['name'] !== 'wavemaker.db') {\n                            return this.file.removeFile(this.dbInstallDirectory, f['name']);\n                        }\n                    }));\n                }\n            })\n            .then( () => this.deviceFileService.listFiles(dbSeedFolder, /.+\\.db$/))\n            .then(files => {\n                if (files && files.length > 0) {\n                    return this.file.createDir(this.dbInstallParentDirectory, this.dbInstallDirectoryName, false)\n                        .catch(noop)\n                        .then(() => Promise.all(files.map(\n                                f => this.file.copyFile(dbSeedFolder, f['name'], this.dbInstallDirectory, f['name'])\n                            ))\n                        );\n                }\n            });\n    }\n\n    // Picks essential details from the given schema.\n    private compactEntitySchema(schema, entity, transformedSchemas): EntityInfo {\n        const reqEntity = transformedSchemas[entity['entityName']] as EntityInfo;\n        reqEntity.entityName = entity['entityName'];\n        reqEntity.name = entity['name'];\n        reqEntity.columns = [];\n        entity.columns.forEach(col => {\n            let defaultValue = col.columnValue ? col.columnValue.defaultValue : '';\n            const type = col.sqlType;\n            if (type === 'number' && !col.primaryKey) {\n                defaultValue = _.isEmpty(defaultValue) ? null : _.parseInt(defaultValue);\n            } else if (type === 'boolean') {\n                defaultValue = _.isEmpty(defaultValue) ? null : (defaultValue === 'true' ? 1 : 0);\n            } else {\n                defaultValue = _.isEmpty(defaultValue) ? null : defaultValue;\n            }\n            reqEntity.columns.push({\n                name: col['name'],\n                fieldName: col['fieldName'],\n                generatorType: col['generatorType'],\n                sqlType: col['sqlType'],\n                primaryKey: col['primaryKey'],\n                defaultValue: defaultValue\n            });\n        });\n\n        _.forEach(entity.relations, r => {\n            let targetEntitySchema, targetEntity, col, sourceColumn, mapping;\n            if (r.cardinality === 'ManyToOne' || r.cardinality === 'OneToOne') {\n                targetEntity = _.find(schema.tables, t => t.name === r.targetTable);\n                mapping = r.mappings[0];\n                if (targetEntity) {\n                    targetEntity = targetEntity.entityName;\n                    sourceColumn = mapping.sourceColumn;\n                    col = reqEntity.columns.find(column => column.name === sourceColumn);\n                    targetEntitySchema = schema.tables.find(table => table.name === r.targetTable);\n                    const foreignRelation = {\n                        sourceFieldName: r.fieldName,\n                        targetEntity: targetEntity,\n                        targetTable: r.targetTable,\n                        targetColumn: mapping.targetColumn,\n                        targetPath: '',\n                        dataMapper: [],\n                        targetFieldName: targetEntitySchema.columns.find(column => column.name === mapping.targetColumn).fieldName\n                    };\n                    foreignRelation.targetPath = foreignRelation.sourceFieldName + '.' + foreignRelation.targetFieldName;\n                    foreignRelation.dataMapper = _.chain(targetEntitySchema.columns)\n                        .keyBy(childCol => foreignRelation.sourceFieldName + '.' + childCol.fieldName)\n                        .mapValues(childCol => new ColumnInfo(childCol.name, childCol.fieldName)).value();\n                    col.foreignRelations = col.foreignRelations || [];\n                    col.foreignRelations.push(foreignRelation);\n                }\n            }\n        });\n        return reqEntity;\n    }\n\n    // Loads necessary details of queries\n    private compactQueries(queriesByDB): Map<string, NamedQueryInfo> {\n        const queries = new Map<string, NamedQueryInfo>();\n\n        _.forEach(queriesByDB.queries, queryData => {\n            let query, params;\n            if (queryData.nativeSql && queryData.type === 'SELECT') {\n                query = _.isEmpty(queryData.offlineQueryString) ? queryData.queryString : queryData.offlineQueryString;\n                params = _.map(this.extractQueryParams(query), p => {\n                    const paramObj = _.find(queryData.parameters, {'name': p});\n                    return {\n                        name: paramObj.name,\n                        type: paramObj.type,\n                        variableType: paramObj.variableType\n                    };\n                });\n                params.forEach(p => query = _.replace(query, ':' + p.name, '?'));\n                queries[queryData.name] = {\n                    name: queryData.name,\n                    query: query,\n                    params: params,\n                    response: {\n                        properties: _.map(queryData.response.properties, p => {\n                            p.nameInUpperCase = p.name.toUpperCase();\n                            return p;\n                        })\n                    }\n                };\n            }\n        });\n        return queries;\n    }\n\n    // Loads necessary details of remote schema\n    private compactSchema(schema): DBInfo {\n        const dbInfo = new DBInfo();\n        const transformedSchemas = new Map<string, EntityInfo>();\n        schema.tables.forEach(entitySchema => {\n            transformedSchemas[entitySchema.entityName] = {};\n        });\n        schema.tables.forEach(entitySchema => {\n            this.compactEntitySchema(schema, entitySchema, transformedSchemas);\n        });\n        dbInfo.schema.name = schema.name;\n        dbInfo.schema.isInternal = schema.isInternal;\n        dbInfo.schema.entities = transformedSchemas;\n        return dbInfo;\n    }\n\n    private convertBoolToInt(bool: boolean) {\n        return _.toString(bool) === 'true' ? 1 : 0;\n    }\n\n    private convertIntToBool(int: number) {\n        return int ? true : false;\n    }\n\n    /**\n     * Turns off foreign keys\n     * @returns {*}\n     */\n    private disableForeignKeys() {\n        return Promise.all(_.map(this.databases, db =>\n            this.executeSQLQuery(db.schema.name, 'PRAGMA foreign_keys = OFF')\n        ));\n    }\n\n    /**\n     * Executes SQL query;\n     *\n     * @param dbName\n     * @param sql\n     * @param params\n     * @returns {*}\n     */\n    public executeSQLQuery(dbName, sql, params?: any[], logOutput?: boolean) {\n        const db = this.databases[dbName];\n        if (db) {\n            return db.sqliteObject.executeSql(sql, params, logOutput)\n                .then(result => {\n                    const data = [],\n                        rows = result.rows;\n                    for (let i = 0; i < rows.length; i++) {\n                        data.push(rows.item(i));\n                    }\n                    return {\n                        'rowsAffected'  : result.rowsAffected,\n                        'rows'          : data\n                    };\n                });\n        }\n        return Promise.reject(`No Database with name ${dbName} found`);\n    }\n\n    // get the params of the query or procedure.\n    private extractQueryParams(query) {\n        let params, aliasParams;\n        aliasParams = query.match(/[^\"'\\w\\\\]:\\s*\\w+\\s*/g) || [];\n        if (aliasParams.length) {\n            params = aliasParams.map(x => (/[=|\\W]/g.test(x)) ? x.replace(/\\W/g, '').trim() : x.trim());\n        } else {\n            params = null;\n        }\n        return params;\n    }\n\n    /**\n     * Returns a promise that is resolved with application info such as packageName, appName, versionNumber, versionCode.\n     * @returns {*}\n     */\n    private getAppInfo() {\n        const appInfo = {\n            name: '',\n            packageName: '',\n            versionNumber: '',\n            versionCode: null\n        };\n        return this.appVersion.getPackageName()\n            .then(packageName => {\n                appInfo.packageName = packageName;\n                return this.appVersion.getAppName();\n            }).then(appName => {\n                appInfo.name = appName;\n                return this.appVersion.getVersionNumber();\n            }).then(versionNumber => {\n                appInfo.versionNumber = versionNumber;\n                return this.appVersion.getVersionCode();\n            }).then(versionCode => {\n                appInfo.versionCode = (versionCode as any);\n                return appInfo;\n            });\n    }\n\n    private getCallbacksFor(event: string): any[] {\n        return this.callbacks.map(c => {\n            if (c[event]) {\n                return c[event].bind(c);\n            }\n            return null;\n        });\n    }\n\n    /**\n     * Searches for the files with given regex in 'www/metadata/app'and returns an array that contains the JSON\n     * content present in each file.\n     *\n     * @param {string} fileNameRegex regex pattern to search for files.\n     * @returns {*} A promise that is resolved with an array\n     */\n    private getMetaInfo(fileNameRegex: RegExp) {\n        const folder = cordova.file.applicationDirectory + META_LOCATION + '/';\n        return this.deviceFileService.listFiles(folder, fileNameRegex)\n            .then(files => Promise.all(_.map(files, f => {\n                    return new Promise((resolve, reject) => {\n                        // Cordova File reader has buffer issues with large files.\n                        // so, using ajax to retrieve local json\n                        $.getJSON( folder + f['name'], data => resolve(data));\n                    });\n                }))\n            );\n    }\n\n    /**\n     * Returns true, if the given entity's data is bundled along with application installer.\n     * @param dataModelName name of the data model\n     * @param entityName name of the entity\n     * @returns {Promise<any>}\n     */\n    public isBundled(dataModelName, entityName): Promise<any> {\n        return this.getStore(dataModelName, entityName).then(store => {\n            return store.entitySchema.pullConfig.pullType === PullType.BUNDLED;\n        });\n    }\n\n    /**\n     * Loads local database schemas from *_data_model.json.\n     *\n     * @returns {*} A promise that is resolved with metadata.\n     */\n    private loadDBSchemas(): Promise<Map<string, DBInfo>> {\n        return this.getMetaInfo(/.+_dataModel\\.json$/)\n            .then( (schemas: any) => {\n                const metadata = new Map<string, DBInfo>();\n                schemas = isArray(schemas) ? schemas : [schemas];\n                schemas.push(OFFLINE_WAVEMAKER_DATABASE_SCHEMA);\n                schemas.map(s => this.compactSchema(s))\n                    .forEach(s =>  {\n                        metadata[s.schema.name] = s;\n                    });\n                return metadata;\n            });\n    }\n\n    /**\n     * Load named queries from *_query.json.\n     *\n     * @param {*} metadata\n     * @returns {*} A promise that is resolved with metadata\n     */\n    private loadNamedQueries(metadata) {\n        return this.getMetaInfo(/.+_query\\.json$/)\n            .then((queriesByDBs: any) => {\n                queriesByDBs = _.isArray(queriesByDBs) ? queriesByDBs : [queriesByDBs];\n                queriesByDBs.map(e => metadata[e.name].queries = this.compactQueries(e));\n                return metadata;\n            });\n    }\n\n    /**\n     * Load offline configuration from *_offline.json.\n     *\n     * @param {*} metadata\n     * @returns {*} A promise that is resolved with metadata\n     */\n    private loadOfflineConfig(metadata) {\n        return this.getMetaInfo(/.+_offline\\.json$/)\n            .then(configs => {\n                _.forEach(configs, config => {\n                    _.forEach(config.entities, entityConfig => {\n                        const entitySchema = _.find(metadata[config.name].schema.entities, schema => schema.name === entityConfig.name);\n                        _.assignIn(entitySchema, entityConfig);\n                    });\n                });\n                return metadata;\n            });\n    }\n\n    private logSql(sqliteObject: SQLiteObject) {\n        const logger = console,\n            originalExecuteSql = sqliteObject.executeSql;\n        sqliteObject.executeSql = (sql, params, logOutput?: boolean) => {\n            const startTime = _.now();\n            return originalExecuteSql.call(sqliteObject, sql, params).then(result => {\n                if (logOutput || this._logSql) {\n                    const objArr = [],\n                        rowCount = result.rows.length;\n                    for (let i = 0; i < rowCount; i++) {\n                        objArr.push(result.rows.item(i));\n                    }\n                    logger.debug('SQL \"%s\"  with params %O took [%d ms]. And the result is %O', sql, params, _.now() - startTime, objArr);\n                }\n                return result;\n            }, error => {\n                logger.error('SQL \"%s\" with params %O failed with error message %s', sql, params, error.message);\n                return Promise.reject(error);\n            });\n        };\n    }\n\n    /**\n     * SQLite does not support boolean data. Instead of using boolean values, data will be changed to 0 or 1.\n     * If the value is 'true', then 1 is set as value. If value is not 1 nor null, then column value is set as 0.\n     * @param dbName\n     * @param tableName\n     * @param colName\n     * @returns {*}\n     */\n    private normalizeBooleanData(dbName, tableName, colName) {\n        const trueTo1Query = `update ${escapeName(tableName)} set ${escapeName(colName)} = 1 where ${escapeName(colName)} = 'true'`,\n            exceptNullAnd1to0Query = `update ${escapeName(tableName)} set ${escapeName(colName)} = 0\n                                  where ${escapeName(colName)} is not null and ${escapeName(colName)} != 1`;\n        return this.executeSQLQuery(dbName, trueTo1Query)\n            .then(() => this.executeSQLQuery(dbName, exceptNullAnd1to0Query));\n    }\n\n    /**\n     * Converts data to support SQLite.\n     * @returns {*}\n     */\n    private normalizeData() {\n        return Promise.all(_.map(this.databases, database => {\n            return Promise.all(_.map(database.schema.entities, entitySchema => {\n                return Promise.all(_.map(entitySchema.columns, column => {\n                    if (column.sqlType === 'boolean') {\n                        return this.normalizeBooleanData(database.schema.name, entitySchema.name, column.name);\n                    }\n                }));\n            }));\n        }));\n    }\n\n    private openDatabase(database: DBInfo) {\n        return this.sqlite.create({\n                name: database.schema.name + '.db',\n                location: 'default'\n        }).then(sqliteObject => {\n            database.sqliteObject = sqliteObject;\n            this.logSql(sqliteObject);\n            const storePromises = _.map(database.schema.entities, entitySchema => {\n                const store = new LocalDBStore(this.deviceFileService,\n                    entitySchema,\n                    this.file,\n                    this,\n                    sqliteObject\n                    );\n                return store.create();\n            });\n            return Promise.all(storePromises).then(stores => {\n                _.forEach(stores, store => {\n                    database.stores[store.entitySchema.entityName] = store;\n                });\n                return database;\n            });\n        });\n    }\n\n    /**\n     * When app is opened for first time  after a fresh install or update, then old databases are removed and\n     * new databases are created using bundled databases.\n     *\n     * @returns {*} a promise that is resolved with true, if the databases are newly created or resolved with false\n     * if existing databases are being used.\n     */\n    private setUpDatabases(): Promise<boolean> {\n        return this.deviceService.getAppBuildTime()\n            .then((buildTime) => {\n                const dbInfo = this.deviceService.getEntry('database') || {};\n                if (!dbInfo.lastBuildTime || dbInfo.lastBuildTime !== buildTime) {\n                    return this.cleanAndCopyDatabases()\n                        .then(() => {\n                            dbInfo.lastBuildTime = buildTime;\n                            return this.deviceService.storeEntry('database', dbInfo);\n                        }).then(() => true);\n                }\n                return false;\n            });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observer } from 'rxjs/index';\n\nimport { executePromiseChain, getAbortableDefer, isString, noop } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\n\nimport { LocalDBManagementService } from './local-db-management.service';\nimport { LocalKeyValueService } from './local-key-value.service';\nimport { LocalDBStore } from '../models/local-db-store';\n\ndeclare const _;\n\nexport interface Change {\n    id?: number;\n    errorMessage?: string;\n    hasError: number;\n    operation: string;\n    params: any;\n    service: string;\n}\n\nexport interface FlushContext {\n    clear: () => Promise<any>;\n    get: (key: string) => any;\n    save: () => Promise<any>;\n}\n\nexport interface Worker {\n    onAddCall?: (change: Change) => (Promise<any> | void);\n    preFlush?: (context: FlushContext) => (Promise<any> | void);\n    postFlush?: (pushInfo: PushInfo, context: FlushContext) => (Promise<any> | void);\n    preCall?: (change: Change) => (Promise<any> | void);\n    postCallError?: (change: Change, error: any) => (Promise<any> | void);\n    postCallSuccess?: (change: Change, response: any) => (Promise<any> | void);\n    transformParamsToMap?: (change: Change) => (Promise<any> | void);\n    transformParamsFromMap?: (change: Change) => (Promise<any> | void);\n}\n\nexport interface PullInfo {\n    databases: Array<any>;\n    totalRecordsToPull: number;\n    totalPulledRecordCount: number;\n    startTime: Date;\n    endTime: Date;\n}\n\nexport interface PushInfo {\n    completedTaskCount: number;\n    endTime: Date;\n    failedTaskCount: number;\n    inProgress: boolean;\n    startTime: Date;\n    successfulTaskCount: number;\n    totalTaskCount: number;\n}\n\nexport abstract class PushService {\n    public abstract push(change: Change): Promise<any>;\n}\n\nexport const CONTEXT_KEY = 'changeLogService.flushContext';\nexport const LAST_PUSH_INFO_KEY = 'changeLogService.lastPushInfo';\n\n@Injectable({providedIn: 'root'})\nexport class ChangeLogService {\n\n    private workers: Worker[] = [];\n\n    private flushContext: FlushContext;\n\n    private currentPushInfo: PushInfo;\n\n    private deferredFlush;\n\n    constructor(private localDBManagementService: LocalDBManagementService,\n                private localKeyValueService: LocalKeyValueService,\n                private pushService: PushService,\n                private networkService: NetworkService) {\n        this.currentPushInfo = {} as PushInfo;\n        this.addWorker(new FlushTracker(this,  this.localKeyValueService, this.currentPushInfo));\n    }\n\n\n    /**\n     * adds a service call to the log. Call will be invoked in next flush.\n     *\n     * @Param {string} name of service (This should be available through $injector)\n     * @Param {string} name of method to invoke.\n     * @Param {object} params\n     */\n    public add(service: string, operation: string, params: any): Promise<void> {\n        const change: Change = {\n            service: service,\n            operation: operation,\n            params: params,\n            hasError: 0\n        };\n        return executePromiseChain(this.getWorkers('transformParamsToMap'), [change])\n            .then(() => executePromiseChain(this.getWorkers('onAddCall'), [change]))\n            .then(() => {\n                change.params = JSON.stringify(change.params);\n                return this.getStore().then(store => store.add(change)).then(noop);\n            });\n    }\n\n    public addWorker(worker: Worker) {\n        this.workers.push(worker);\n    }\n\n    /**\n     * Clears the current log.\n     */\n    public clearLog() {\n        return this.getStore().then( s => s.clear());\n    }\n\n    /**\n     * Flush the current log. If a flush is already running, then the promise of that flush is returned back.\n     */\n    public flush(progressObserver: Observer<PushInfo>): Promise<PushInfo> {\n        let flushPromise;\n        if (!this.deferredFlush) {\n            this.deferredFlush = getAbortableDefer();\n            this.createContext().then(context => {\n                this.flushContext = context;\n                return executePromiseChain(this.getWorkers('preFlush'), [this.flushContext]);\n            })\n                .then(() => {\n                    flushPromise = this._flush(progressObserver);\n                    this.deferredFlush.onAbort = () => flushPromise.abort();\n                    return flushPromise;\n                })\n                .catch(noop)\n                .then(() => {\n                    Promise.resolve().then(() => {\n                        if (this.currentPushInfo.totalTaskCount === this.currentPushInfo.completedTaskCount) {\n                            return this.flushContext.clear().then(() => this.flushContext = null);\n                        }\n                    }).then(() => {\n                        progressObserver.complete();\n                        if (this.currentPushInfo.failedTaskCount > 0) {\n                            this.deferredFlush.reject(this.currentPushInfo);\n                        } else {\n                            this.deferredFlush.resolve(this.currentPushInfo);\n                        }\n                        this.deferredFlush = null;\n                    }).then(() => {\n                        return executePromiseChain(this.getWorkers('postFlush'), [this.currentPushInfo, this.flushContext]);\n                    });\n                });\n        }\n        return this.deferredFlush.promise;\n    }\n\n    /**\n     * Returns the complete change list\n     */\n    public getChanges() {\n        return this.getStore().then( s => s.filter(undefined, 'id', {\n            offset: 0,\n            limit: 500\n        })).then(changes => {\n            changes.forEach(change => {\n                change.params = JSON.parse(change.params);\n            });\n            return changes;\n        });\n    }\n\n\n    /**\n     * @returns {array} an array of changes that failed with error.\n     */\n    public getErrors(): Promise<Change[]> {\n        return this.getStore().then( s => s.filter([{\n            attributeName: 'hasError',\n            attributeValue: 1,\n            attributeType: 'NUMBER',\n            filterCondition: 'EQUALS'\n        }]));\n    }\n\n\n    public getLastPushInfo(): Promise<PushInfo> {\n        return this.localKeyValueService.get(LAST_PUSH_INFO_KEY)\n            .then(info => {\n                if (isString(info.startTime)) {\n                    info.startTime = new Date(info.startTime);\n                }\n                if (isString(info.endTime)) {\n                    info.endTime = new Date(info.endTime);\n                }\n                return info;\n            });\n    }\n    /**\n     * @returns {number} number of changes that are pending to push.\n     */\n    public getLogLength(): Promise<number> {\n        return this.getStore().then( s => s.count([{\n            attributeName: 'hasError',\n            attributeValue: 0,\n            attributeType: 'NUMBER',\n            filterCondition: 'EQUALS'\n        }]));\n    }\n\n    /*\n    * Retrieves the entity store to use by ChangeLogService.\n    */\n    public getStore(): Promise<LocalDBStore> {\n        return this.localDBManagementService.getStore('wavemaker', 'offlineChangeLog');\n    }\n\n    /**\n     * Returns true, if a flush process is in progress. Otherwise, returns false.\n     *\n     * @returns {boolean} returns true, if a flush process is in progress. Otherwise, returns false.\n     */\n    public isFlushInProgress(): boolean {\n        return !(_.isUndefined(this.deferredFlush) || _.isNull(this.deferredFlush));\n    }\n\n    /**\n     * Stops the ongoing flush process.\n     *\n     * @returns {object} a promise that is resolved when the flush process is stopped.\n     */\n    public stop(): Promise<void> {\n        return new Promise( resolve => {\n            if (this.deferredFlush) {\n                this.deferredFlush.promise.catch().then(resolve);\n                this.deferredFlush.promise.abort();\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    private createContext() {\n        return this.localKeyValueService.get(CONTEXT_KEY)\n            .then(context => {\n                context = context || {};\n                return {\n                    'clear' : () => {\n                        context = {};\n                        return this.localKeyValueService.remove(CONTEXT_KEY);\n                    },\n                    'get' : key => {\n                        let value = context[key];\n                        if (!value) {\n                            value = {};\n                            context[key] = value;\n                        }\n                        return value;\n                    },\n                    'save' : () => this.localKeyValueService.put(CONTEXT_KEY, context)\n                };\n            });\n    }\n\n    // Flushes the complete log one after another.\n    private _flush(progressObserver: Observer<PushInfo>, defer?: any) {\n        defer = defer || getAbortableDefer();\n        if (defer.isAborted) {\n            return Promise.resolve();\n        }\n        this.getNextChange()\n            .then(change => {\n                if (change) {\n                    change.params = JSON.parse(change.params);\n                    return this.flushChange(change);\n                }\n            })\n            .then(change => {\n                progressObserver.next(this.currentPushInfo);\n                if (change) {\n                    return this.getStore()\n                        .then(s => s.delete(change.id))\n                        .then(() => this._flush(progressObserver, defer));\n                } else {\n                    defer.resolve();\n                }\n            }, change => {\n                if (this.networkService.isConnected()) {\n                    change.hasError = 1;\n                    change.params = JSON.stringify(change.params);\n                    this.getStore()\n                        .then(s => s.save(change))\n                        .then(() => this._flush(progressObserver, defer));\n                } else {\n                    let connectPromise = this.networkService.onConnect();\n                    defer.promise.catch(function () {\n                        if (connectPromise) {\n                            connectPromise.abort();\n                        }\n                    });\n                    connectPromise.then(() => {\n                        this._flush(progressObserver, defer);\n                        connectPromise = null;\n                    });\n                }\n            });\n        return defer.promise;\n    }\n\n    private flushChange(change: Change): Promise<Change> {\n        const self = this;\n        return executePromiseChain(this.getWorkers('preCall'), [change])\n            .then(() => change.hasError ? Promise.reject(change.errorMessage) : '')\n            .then(() => executePromiseChain(this.getWorkers('transformParamsFromMap'), [change]))\n            .then(() => this.pushService.push(change))\n            .then(function() {\n                return executePromiseChain(_.reverse(self.getWorkers('postCallSuccess')), [change, arguments])\n                    .then(() => change);\n            }).catch(function() {\n                if (self.networkService.isConnected()) {\n                    return executePromiseChain(_.reverse(self.getWorkers('postCallError')), [change, arguments])\n                        .catch(noop).then(() => Promise.reject(change));\n                }\n                return Promise.reject(change);\n            });\n    }\n\n\n\n    // Flushes the first registered change.\n    private getNextChange(): Promise<Change> {\n        const filterCriteria = [{\n            attributeName: 'hasError',\n            attributeValue: 0,\n            attributeType: 'NUMBER',\n            filterCondition: 'EQUALS'\n        }];\n        return this.getStore().then(s => s.filter(filterCriteria, 'id', {\n            offset: 0,\n            limit: 1\n        })).then((changes: Array<Change>) => {\n            return changes && changes[0];\n        });\n    }\n\n    private getWorkers(type) {\n        return _.map(this.workers, w => w[type] && w[type].bind(w));\n    }\n}\n\nclass FlushTracker {\n\n    private flushContext: FlushContext;\n    private logger: any;\n\n    constructor(private changeLogService: ChangeLogService,\n                private localKeyValueService: LocalKeyValueService,\n                private pushInfo: PushInfo) {\n        this.logger = window.console;\n    }\n\n    public onAddCall(change: Change) {\n        this.logger.debug('Added the following call %o to log.', change);\n    }\n\n    public preFlush(flushContext: FlushContext) {\n        this.pushInfo.totalTaskCount = 0;\n        this.pushInfo.successfulTaskCount = 0;\n        this.pushInfo.failedTaskCount = 0;\n        this.pushInfo.completedTaskCount = 0;\n        this.pushInfo.inProgress = true;\n        this.pushInfo.startTime = new Date();\n        this.flushContext = flushContext;\n        this.logger.debug('Starting flush');\n        return this.changeLogService.getStore().then(store => {\n            return store.count([{\n                attributeName: 'hasError',\n                attributeValue: 0,\n                attributeType: 'NUMBER',\n                filterCondition: 'EQUALS'\n            }]);\n        }).then(count => this.pushInfo.totalTaskCount = count);\n    }\n\n    public postFlush(stats: PushInfo , flushContext: FlushContext) {\n        this.logger.debug('flush completed. {Success : %i , Error : %i , completed : %i, total : %i }.',\n            this.pushInfo.successfulTaskCount, this.pushInfo.failedTaskCount, this.pushInfo.completedTaskCount, this.pushInfo.totalTaskCount);\n        this.pushInfo.inProgress = false;\n        this.pushInfo.endTime = new Date();\n        this.localKeyValueService.put(LAST_PUSH_INFO_KEY, this.pushInfo);\n        this.flushContext = null;\n    }\n\n    public preCall(change: Change) {\n        this.logger.debug('%i. Invoking call %o', (1 + this.pushInfo.completedTaskCount), change);\n    }\n\n    public postCallError(change: Change, response: any) {\n        this.pushInfo.completedTaskCount++;\n        this.pushInfo.failedTaskCount++;\n        this.logger.error('call failed with the response %o.', response);\n        return this.flushContext.save();\n    }\n\n    public postCallSuccess(change: Change, response: any) {\n        this.pushInfo.completedTaskCount++;\n        this.pushInfo.successfulTaskCount++;\n        this.logger.debug('call returned the following response %o.', response);\n        return this.flushContext.save();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { LocalDBManagementService } from './local-db-management.service';\nimport { LocalDBStore } from '../models/local-db-store';\n\ndeclare const _;\n\n@Injectable({providedIn: 'root'})\nexport class LocalDbService {\n\n    private searchTableData;\n    private searchTableDataWithQuery;\n    private getDistinctDataByFields;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n        this.searchTableData = this.readTableData.bind(this);\n        this.searchTableDataWithQuery = this.readTableData.bind(this);\n        this.getDistinctDataByFields = this.readTableData.bind(this);\n    }\n\n    public getStore(params: any): Promise<LocalDBStore> {\n        return this.localDBManagementService.getStore(params.dataModelName, params.entityName);\n    }\n\n    /**\n     * Method to insert data into the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public insertTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            const isPKAutoIncremented = (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity');\n            if (isPKAutoIncremented && params.data[store.primaryKeyName]) {\n                delete params.data[store.primaryKeyName];\n            }\n            return store.add(params.data).then(() => {\n                store.refresh(params.data).then(successCallback);\n            });\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to insert multi part data into the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public insertMultiPartTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            store.serialize(params.data).then(data => {\n                params.data = data;\n                this.insertTableData(params, successCallback, failureCallback);\n            });\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to update data in the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be updated.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public updateTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            return store.save(params.data)\n                .then(() => {\n                    store.refresh(params.data).then(successCallback);\n                });\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to update multi part data in the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be updated.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public updateMultiPartTableData(params: any, successCallback?: any, failureCallback?: any)  {\n        const data = (params.data && params.data.rowData) || params.data;\n        this.getStore(params).then(store => {\n            return store.save(data);\n        }).then(() => {\n            if (successCallback) {\n                successCallback(data);\n            }\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to delete data in the specified table. This modification will be added to offline change log.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public deleteTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            const pkField = store.primaryKeyField,\n                id = params[pkField.fieldName] || params[pkField.name] || (params.data && params.data[pkField.fieldName]) || params.id;\n            store.delete(id).then(successCallback);\n        }).catch(failureCallback);\n    }\n\n    /**\n     * Method to read data from a specified table.\n     *\n     * @param {object} params\n     *                 Object containing name of the project & table data to be inserted.\n     * @param {function=} successCallback\n     *                    Callback function to be triggered on success.\n     * @param {function=} failureCallback\n     *                    Callback function to be triggered on failure.\n     */\n    public readTableData(params: any, successCallback?: any, failureCallback?: any) {\n        this.getStore(params).then(store => {\n            let filter = params.filter((filterGroup, filterFields) => {\n                this.convertFieldNameToColumnName(store, filterGroup, filterFields);\n            }, true);\n            // convert wm_bool function with boolean value to 0/1\n            filter = filter.replace(/wm_bool\\('true'\\)/g, 1).replace(/wm_bool\\('false'\\)/g, 0);\n            return store.count(filter).then(totalElements => {\n                const sort = params.sort.split('=')[1];\n                return store.filter(filter, sort, {\n                    offset: (params.page - 1) * params.size,\n                    limit: params.size\n                }).then(data => {\n                    const totalPages = Math.ceil(totalElements / params.size);\n                    successCallback({\n                        'content'         : data,\n                        'first'           : (params.page === 1),\n                        'last'            : (params.page === totalPages),\n                        'number'          : (params.page - 1),\n                        'numberOfElements': data.length,\n                        'size'            : params.size,\n                        'sort'            : {\n                            'sorted' : !!sort,\n                            'unsorted' : !sort\n                        },\n                        'totalElements'   : totalElements,\n                        'totalPages'      : totalPages\n                    });\n                });\n            });\n        }).catch(failureCallback);\n    }\n\n    private escapeName(name: string): string {\n        if (name) {\n            name = name.replace(/\"/g, '\"\"');\n            return '\"' + name.replace(/\\./g, '\".\"') + '\"';\n        }\n        return name;\n    }\n\n    // returns the columnName appending with the schema name.\n    private getColumnName(store, fieldName) {\n        if (store.fieldToColumnMapping[fieldName]) {\n            const columnName = this.escapeName(store.fieldToColumnMapping[fieldName]);\n            if (columnName.indexOf('.') < 0) {\n                return this.escapeName(store.entitySchema.name) + '.' + columnName;\n            }\n            return columnName;\n        }\n        return fieldName;\n    }\n\n    private convertFieldNameToColumnName(store: LocalDBStore, filterGroup: any, options?: any) {\n        _.forEach(filterGroup.rules, rule => {\n            if (rule.rules) {\n                this.convertFieldNameToColumnName(store, rule);\n            } else {\n                rule.target = this.getColumnName(store, rule.target);\n            }\n        });\n        // handling the scenario where variable options can have filterField. For example: search filter query\n        if (options && options.filterFields) {\n            options.filterFields = _.mapKeys(options.filterFields, (v, k) => {\n                return this.getColumnName(store, k);\n            });\n        }\n    }\n}\n","import { File } from '@ionic-native/file';\n\nimport { noop } from '@wm/core';\nimport { DeviceFileService } from '@wm/mobile/core';\n\nimport { Change, ChangeLogService, FlushContext, Worker } from '../change-log.service';\nimport { CallBack, LocalDBManagementService } from '../local-db-management.service';\n\ndeclare const _;\n\nconst STORE_KEY = 'offlineFileUpload';\n\nexport class FileHandler implements Worker {\n\n    private fileStore;\n    private logger = window.console;\n\n    public preFlush(context: FlushContext) {\n        this.fileStore = context.get(STORE_KEY);\n    }\n\n    /**\n     * Replaces all local paths with the remote path using mappings created during 'uploadToServer'.\n     */\n    public preCall(change: Change) {\n        if (change.service === 'DatabaseService') {\n            change.params.data = _.mapValues(change.params.data, v => {\n                const remoteUrl = this.fileStore[v];\n                if (remoteUrl) {\n                    this.logger.debug('swapped file path from %s -> %s', v, remoteUrl);\n                    return remoteUrl;\n                }\n                return v;\n            });\n        }\n    }\n\n    public postCallSuccess(change: Change, response: any) {\n        if (change.service === 'OfflineFileUploadService'\n            && change.operation === 'uploadToServer') {\n            const remoteFile = JSON.parse(response[0].text)[0];\n            /*\n             * A mapping will be created between local path and remote path.\n             * This will be used to resolve local paths in entities.\n             */\n            this.fileStore[change.params.file]             = remoteFile.path;\n            this.fileStore[change.params.file + '?inline'] = remoteFile.inlinePath;\n        }\n    }\n\n}\n\nexport class UploadedFilesImportAndExportService implements CallBack {\n    private uploadDir;\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private deviceFileService: DeviceFileService,\n        private localDBManagementService: LocalDBManagementService,\n        private file: File\n    ) {\n\n    }\n\n    public preExport(folderToExport: string, meta: any): Promise<any> {\n        // copy offline uploads\n        const uploadFullPath = this.deviceFileService.getUploadDirectory(),\n            lastIndexOfSep = uploadFullPath.lastIndexOf('/'),\n            uploadParentDir = uploadFullPath.substring(0, lastIndexOfSep + 1),\n            uploadDirName = uploadFullPath.substring(lastIndexOfSep + 1);\n        meta.uploadDir = uploadFullPath;\n        return this.file.copyDir(uploadParentDir, uploadDirName, folderToExport, 'uploads');\n    }\n\n    public postImport(importedFolder: string, meta: any): Promise<any> {\n        const uploadFullPath = this.deviceFileService.getUploadDirectory(),\n            lastIndexOfSep = uploadFullPath.lastIndexOf('/'),\n            uploadParentDir = uploadFullPath.substring(0, lastIndexOfSep + 1),\n            uploadDirName = uploadFullPath.substring(lastIndexOfSep + 1);\n        this.uploadDir = uploadFullPath;\n        return this.file.checkDir(importedFolder, 'uploads')\n            .then(() => {\n                return this.deviceFileService.removeDir(uploadFullPath)\n                    .then(() => this.file.copyDir(importedFolder, 'uploads', uploadParentDir, uploadDirName))\n                    .then(() => this.updateChanges(meta));\n            }, noop);\n    }\n\n    /**\n     * returns back the changes that were logged.\n     * @param page page number\n     * @param size size of page\n     * @returns {*}\n     */\n    private getChanges(page: number, size: number): Promise<Change[]> {\n        return this.changeLogService.getStore().then(strore => {\n            return (strore.filter([], 'id', {\n                offset: (page - 1) * size,\n                limit: size\n            })) as Promise<Change[]>;\n        });\n    }\n\n    /**\n     * If this is a database change, then it will replace old upload directory with the current upload directory\n     * and its corresponding owner object, if  it has primary key.\n     *\n     * @param change\n     * @param oldUploadDir\n     * @param uploadDir\n     * @returns {*}\n     */\n    private updateDBChange(change: Change, oldUploadDir: string, uploadDir: string) {\n        const modifiedProperties = {},\n            entityName = change.params.entityName,\n            dataModelName = change.params.dataModelName;\n        change.params.data = _.mapValues(change.params.data, function (v, k) {\n            let mv = v, isModified = false;\n            if (_.isString(v)) {\n                mv = _.replace(v, oldUploadDir, uploadDir);\n                isModified = !_.isEqual(mv, v);\n            } else if (_.isObject(v) && v.wmLocalPath) {\n                // insertMultiPartData and updateMultiPartData\n                mv = _.replace(v.wmLocalPath, oldUploadDir, uploadDir);\n                isModified = !_.isEqual(mv, v.wmLocalPath);\n            }\n            if (isModified) {\n                modifiedProperties[k] = mv;\n            }\n            return mv;\n        });\n        if (!_.isEmpty(modifiedProperties)) {\n            this.localDBManagementService.getStore(dataModelName, entityName)\n                .then(store => {\n                    // If there is a primary for the entity, then update actual row with the modifications\n                    if (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity') {\n                        const primaryKeyName = store.primaryKeyName;\n                        const primaryKey = change.params.data[primaryKeyName];\n                        return store.get(primaryKey)\n                            .then(obj => store.save(_.assignIn(obj, modifiedProperties)));\n                    }\n                }).then(() => {\n                change.params = JSON.stringify(change.params);\n                return this.changeLogService.getStore().then( store => store.save(change));\n            });\n        }\n    }\n\n    /**\n     * This function check this change to update old upload directory path.\n     *\n     * @param change\n     * @param metaInfo\n     * @returns {*}\n     */\n    private updateChange(change: Change, metaInfo: any) {\n        change.params = JSON.parse(change.params);\n        if (change.service === 'OfflineFileUploadService'\n            && change.operation === 'uploadToServer') {\n            change.params.file = _.replace(change.params.file, metaInfo.uploadDir, this.uploadDir);\n            change.params = JSON.stringify(change.params);\n            return this.changeLogService.getStore().then( store => store.save(change));\n        }\n        if (change.service === 'DatabaseService') {\n            return this.updateDBChange(change, metaInfo.uploadDir, this.uploadDir);\n        }\n    }\n\n    /**\n     * This function will visit all the changes and modify them, if necessary.\n     * @param metaInfo\n     * @param page\n     * @returns {*}\n     */\n    private updateChanges(metaInfo: any, page = 1): Promise<any> {\n        const size = 10;\n        return this.getChanges(page, size)\n            .then(changes => {\n                if (changes && changes.length > 0) {\n                    return Promise.all(changes.map(change => this.updateChange(change, metaInfo)));\n                }\n            }).then(result => {\n                if (result && result.length === size) {\n                    return this.updateChanges(metaInfo, page + 1);\n                }\n            });\n    }\n}\n","import { Change, FlushContext, Worker } from '../change-log.service';\nimport { LocalDBStore } from '../../models/local-db-store';\nimport { LocalDBManagementService } from '../local-db-management.service';\n\ndeclare const _;\n\nconst STORE_KEY = 'errorBlockerStore';\n\nexport class ErrorBlocker implements Worker {\n\n    private errorStore;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n    }\n\n    public preFlush(context: FlushContext) {\n        this.errorStore = context.get(STORE_KEY);\n    }\n\n    // block all calls related to the error entities\n    public preCall(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            switch (change.operation) {\n                case 'insertTableData':\n                case 'insertMultiPartTableData':\n                case 'updateTableData':\n                case 'updateMultiPartTableData':\n                    return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                        this.blockCall(store, change, dataModelName, entityName, change.params.data);\n                    });\n                case 'deleteTableData':\n                    return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                        this.blockCall(store, change, dataModelName, entityName, change.params);\n                    });\n            }\n        }\n    }\n\n    // store error entity id\n    public postCallSuccess(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                const id = change['dataLocalId'] || change.params.data[store.primaryKeyName];\n                if (!(_.isUndefined(id) || _.isNull(id))) {\n                    this.removeError(dataModelName, entityName, id);\n                }\n            });\n        }\n    }\n\n    // store error entity id\n    public postCallError(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then( store => {\n                const id = change['dataLocalId'] || (change.params.data && change.params.data[store.primaryKeyName]) || change.params[store.primaryKeyName] || change.params.id;\n                if (!(_.isUndefined(id) || _.isNull(id))) {\n                    this.recordError(dataModelName, entityName, id);\n                }\n            });\n        }\n    }\n\n    /**\n     * If there is an earlier call of the object or its relations that got failed, then this call will be\n     * marked for discard.\n     *\n     * @param store LocalDBStore\n     * @param change change to block\n     * @param dataModelName\n     * @param entityName\n     * @param data\n     */\n    private blockCall(store: LocalDBStore, change: Change, dataModelName: string, entityName: string, data: any) {\n        if (change.hasError === 0) {\n            this.checkForPreviousError(store, change, dataModelName, entityName, data);\n            store.entitySchema.columns.forEach(col => {\n                if (col.foreignRelations) {\n                    col.foreignRelations.some(foreignRelation => {\n                        if (data[foreignRelation.sourceFieldName]) {\n                            this.blockCall(store, change, dataModelName, foreignRelation.targetEntity, data[foreignRelation.sourceFieldName]);\n                        } else if (data[col.fieldName]) {\n                            this.checkForPreviousError(store, change, dataModelName, foreignRelation.targetEntity, data, col.fieldName);\n                        }\n                        return change.hasError === 1;\n                    });\n                }\n            });\n        }\n    }\n\n    // A helper function to check for earlier failures.\n    private checkForPreviousError(store: LocalDBStore, change: Change, dataModelName: string, entityName: string, data: any, key?: any) {\n        const primaryKey = key || store.primaryKeyName;\n        if (this.hasError(dataModelName, entityName, data[primaryKey])) {\n            change.hasError = 1;\n            change.errorMessage = `Blocked call due to error in previous call of entity [ ${entityName} ] with id [ ${data[primaryKey]} ]`;\n        }\n    }\n\n    private hasError(dataModelName: string, entityName: string, id: any) {\n        if (this.errorStore[dataModelName]\n            && this.errorStore[dataModelName][entityName]\n            && this.errorStore[dataModelName][entityName][id]) {\n            return true;\n        }\n        return false;\n    }\n\n    // Removes entity identifier from error list.\n    private removeError(dataModelName: string, entityName: string, id: any) {\n        if (this.errorStore[dataModelName]\n            && this.errorStore[dataModelName][entityName]\n            && this.errorStore[dataModelName][entityName][id]) {\n            delete this.errorStore[dataModelName][entityName][id];\n        }\n    }\n\n    // Save error entity identifier.\n    private recordError(dataModelName: string, entityName: string, id: any) {\n        this.errorStore[dataModelName] = this.errorStore[dataModelName] || {};\n        this.errorStore[dataModelName][entityName] = this.errorStore[dataModelName][entityName] || {};\n        this.errorStore[dataModelName][entityName][id] = true;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { isDefined, noop } from '@wm/core';\n\nimport { Change, FlushContext, Worker } from './../change-log.service';\nimport { LocalDBManagementService } from './../local-db-management.service';\nimport { LocalDBStore } from './../../models/local-db-store';\n\nconst STORE_KEY  = 'idConflictResolution';\n\n/**\n * In offline database, a insert could generate the Id of an entity. During flush, id of that entity might get changed.\n * Due to that, relationship inconsistency arises. To prevent that, wherever this entity is referred in the next flush\n * call, Id has to be replaced with that of new one.\n */\n@Injectable()\nexport class IdResolver implements Worker {\n\n    private idStore;\n    private logger;\n    private transactionLocalId;\n\n    constructor(private localDBManagementService: LocalDBManagementService) {\n        this.logger = window.console;\n    }\n\n    public preFlush(context: FlushContext) {\n        this.idStore = context.get(STORE_KEY);\n    }\n\n    // Exchane Ids, Before any database operation.\n    public preCall(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            switch (change.operation) {\n                case 'insertTableData':\n                case 'insertMultiPartTableData':\n                    change.params.skipLocalDB = true ;\n                    return this.localDBManagementService.getStore(dataModelName, entityName)\n                        .then(store => {\n                            const primaryKeyName = store.primaryKeyName;\n                            if (primaryKeyName) {\n                                this.transactionLocalId = change.params.data[primaryKeyName];\n                                change['dataLocalId'] = this.transactionLocalId;\n                            }\n                            return this.exchangeIds(store, dataModelName, entityName, change.params.data)\n                                .then(() => {\n                                    if (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity') {\n                                        delete change.params.data[primaryKeyName];\n                                    } else {\n                                        const relationalPrimaryKeyValue = store.getValue(change.params.data, store.primaryKeyName);\n                                        // for the data referring to the relational table based on primary key assign the primaryField values to the relationalPrimaryKeyValue\n                                        if (isDefined(relationalPrimaryKeyValue)) {\n                                            change.params.data[primaryKeyName] = relationalPrimaryKeyValue;\n                                            if (this.transactionLocalId !== null) {\n                                                this.pushIdToStore(dataModelName, entityName, this.transactionLocalId, relationalPrimaryKeyValue);\n                                            }\n                                        }\n                                        this.transactionLocalId = null;\n                                    }\n                                });\n                    });\n                case 'updateTableData':\n                case 'updateMultiPartTableData':\n                case 'deleteTableData':\n                    return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {\n                        // on update call, passing id to exchangeId as change.params id(local value 10000000+) is not updated with the latest id from db\n                        this.exchangeId(store, dataModelName, entityName, change.params, 'id');\n                        if (change.params.data) {\n                            return this.exchangeIds(store, dataModelName, entityName, change.params.data);\n                        }\n                    });\n            }\n        }\n    }\n    // After every database insert, track the Id change.\n    public postCallSuccess(change: Change, response: any) {\n        if (change && change.service === 'DatabaseService'\n            && (change.operation === 'insertTableData' || change.operation === 'insertMultiPartTableData')\n            && this.transactionLocalId) {\n            const data = response[0].body;\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {\n                this.pushIdToStore(dataModelName, entityName, this.transactionLocalId, data[store.primaryKeyName]);\n                return store.delete(this.transactionLocalId).catch(noop).then(() => {\n                    this.transactionLocalId = null;\n                    return store.save(data);\n                });\n            });\n        }\n    }\n    // store error entity id\n    public postCallError(change: Change) {\n        if (change && change.service === 'DatabaseService'\n            && (change.operation === 'insertTableData' || change.operation === 'insertMultiPartTableData')\n            && this.transactionLocalId) {\n            const entityName = change.params.entityName;\n            const dataModelName = change.params.dataModelName;\n            return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {\n                change.params.data[store.primaryKeyName] = this.transactionLocalId;\n            });\n        }\n    }\n\n    private getEntityIdStore(dataModelName: string, entityName: string) {\n        this.idStore[dataModelName] = this.idStore[dataModelName] || {};\n        this.idStore[dataModelName][entityName] = this.idStore[dataModelName][entityName] || {};\n        return this.idStore[dataModelName][entityName];\n    }\n\n    // if local id is different, then create a mapping for exchange.\n    private pushIdToStore(dataModelName: string, entityName: string, transactionLocalId: any, remoteId: any) {\n        if (transactionLocalId !== remoteId) {\n            this.getEntityIdStore(dataModelName, entityName)[transactionLocalId] = remoteId;\n            this.logger.debug('Conflict found for entity (%s) with local id (%i) and remote Id (%i)', entityName, transactionLocalId, remoteId);\n        }\n    }\n\n    private logResolution(entityName: string, localId: any, remoteId: any) {\n        this.logger.debug('Conflict resolved found for entity (%s) with local id (%i) and remote Id (%i)', entityName, localId, remoteId);\n    }\n\n    // Exchange primary key  of the given entity\n    private exchangeId(store: LocalDBStore, dataModelName: string, entityName: string, data?: any, keyName?: string) {\n        const primaryKeyName = keyName || store.primaryKeyName;\n        const entityIdStore = this.getEntityIdStore(dataModelName, entityName);\n        if (data && primaryKeyName) {\n            const localId = data[primaryKeyName];\n            let remoteId = localId;\n            while (entityIdStore[remoteId]) {\n                remoteId = entityIdStore[remoteId];\n            }\n            if (remoteId !== localId) {\n                data[primaryKeyName] = remoteId;\n                this.logResolution(entityName, localId, remoteId);\n            }\n        }\n    }\n\n    // Looks primary key changes in the given entity or in the relations\n    private exchangeIds(store: LocalDBStore, dataModelName: string, entityName: string, data: any): Promise<any> {\n        this.exchangeId(store, dataModelName, entityName, data);\n        const exchangeIdPromises = [];\n        store.entitySchema.columns.forEach(col => {\n            if (col.foreignRelations) {\n                col.foreignRelations.forEach( foreignRelation => {\n                    if (data[col.fieldName]) {// if id value\n                        this.exchangeId(store, dataModelName, foreignRelation.targetEntity, data, col.fieldName);\n                    }\n                    if (data[foreignRelation.sourceFieldName]) {// if object reference\n                        exchangeIdPromises.push(this.localDBManagementService.getStore(dataModelName, foreignRelation.targetEntity)\n                            .then(refStore => {\n                                return this.exchangeIds(refStore, dataModelName, foreignRelation.targetEntity, data[foreignRelation.sourceFieldName]);\n                            }));\n                    }\n                });\n            }\n        });\n        return Promise.all(exchangeIdPromises);\n    }\n}\n","import { DeviceFileService } from '@wm/mobile/core';\n\nimport { Change, Worker } from '../change-log.service';\nimport { LocalDBManagementService } from '../local-db-management.service';\n\ndeclare const _;\n\nexport class MultiPartParamTransformer implements Worker {\n\n    constructor(\n        private deviceFileService: DeviceFileService,\n        private localDBManagementService: LocalDBManagementService\n    ) {}\n\n    public postCallSuccess(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            switch (change.operation) {\n                case 'insertMultiPartTableData':\n                case 'updateMultiPartTableData':\n                    // clean up files\n                    _.forEach(change.params.data, v => {\n                        if (_.isObject(v) && v.wmLocalPath) {\n                            this.deviceFileService.removeFile(v.wmLocalPath);\n                        }\n                    });\n                    break;\n            }\n        }\n    }\n\n    public transformParamsFromMap(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            switch (change.operation) {\n                case 'insertMultiPartTableData':\n                case 'updateMultiPartTableData':\n                    return this.localDBManagementService.getStore(change.params.dataModelName, change.params.entityName)\n                        .then( store => {\n                            // construct Form data\n                            return store.deserialize(change.params.data).then(function (formData) {\n                                change.params.data = formData;\n                            });\n                        });\n            }\n        }\n    }\n\n    public transformParamsToMap(change: Change) {\n        if (change && change.service === 'DatabaseService') {\n            switch (change.operation) {\n                case 'insertMultiPartTableData':\n                case 'updateMultiPartTableData':\n                    return this.localDBManagementService.getStore(change.params.dataModelName, change.params.entityName)\n                        .then( store => {\n                            return store.serialize(change.params.data).then(function (map) {\n                                change.params.data = map;\n                                /**\n                                 * As save method called with FormData object, empty row is inserted.\n                                 * Since FormData is converted to map, update the record details now.\n                                 */\n                                store.save(_.mapValues(map, function (v) {\n                                    return (_.isObject(v) && v.wmLocalPath) || v;\n                                }));\n                                return map;\n                            });\n                        });\n            }\n        }\n    }\n}\n","import { from } from 'rxjs';\n\nimport { LVService } from '@wm/variables';\n\nimport { NetworkService } from '@wm/mobile/core';\nimport { AbstractHttpService, noop, triggerFn } from '@wm/core';\n\nimport { ColumnInfo, ForeignRelationInfo } from '../models/config';\nimport { LocalDBStore } from '../models/local-db-store';\nimport { ChangeLogService } from '../services/change-log.service';\nimport { LocalDBManagementService } from '../services/local-db-management.service';\nimport { LocalDbService } from '../services/local-db.service';\nimport { WM_LOCAL_OFFLINE_CALL } from './utils';\n\ndeclare const _;\n\nconst apiConfiguration = [{\n        'name' : 'insertTableData',\n        'type' : 'INSERT'\n    }, {\n        'name' : 'insertMultiPartTableData',\n        'type' : 'INSERT'\n    }, {\n        'name' : 'updateTableData',\n        'type' : 'UPDATE'\n    }, {\n        'name' : 'updateMultiPartTableData',\n        'type' : 'UPDATE'\n    }, {\n        'name' : 'deleteTableData',\n        'type' : 'DELETE'\n    }, {\n        'name' : 'readTableData',\n        'type' : 'READ',\n        'saveResponse': true\n    }, {\n        'name' : 'searchTableData',\n        'type' : 'READ',\n        'saveResponse': true\n    }, {\n        'name' : 'searchTableDataWithQuery',\n        'type' : 'READ',\n        'saveResponse': true\n    }, {\n        'name' : 'getDistinctDataByFields',\n        'type' : 'READ',\n        'saveResponse': false\n    }];\n\nlet isOfflineBehaviorAdded = false;\n\nexport class LiveVariableOfflineBehaviour {\n\n    private onlineDBService = LVService;\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private httpService: AbstractHttpService,\n        private localDBManagementService: LocalDBManagementService,\n        private networkService: NetworkService,\n        private offlineDBService: LocalDbService\n    ) {}\n\n    public add () {\n        if (!isOfflineBehaviorAdded) {\n            isOfflineBehaviorAdded = true;\n            const onlineHandler = this.httpService.sendCallAsObservable;\n            if (onlineHandler) {\n                this.httpService.sendCallAsObservable = (reqParams, params): any => {\n                    if (!params && _.get(reqParams, 'url')) {\n                        params = {url: reqParams.url};\n                    }\n                    // reqParams will contain the full path of insert/update call which will be processed again in parseConfig method\n                    // and will be appended again with '/services/./.' which will result in deployedUrl + '/service/./.' + '/service/./.' which is wrong.\n                    // Hence passing url in params\n                    const clonedParamsUrl = _.clone(params.url);\n                    params = _.extend(params, reqParams);\n                    const operation = _.find(apiConfiguration, {name: _.get(params, 'operation')});\n                    if (this.networkService.isConnected() || params.onlyOnline || !operation || !params.dataModelName) {\n                        return from(this.remoteDBcall(operation, onlineHandler, params));\n                    }\n                    // converting promise to observable as LVService returns a observable\n                    return from(this.localDBManagementService.isOperationAllowed(params.dataModelName, params.entityName, operation.type)\n                        .then(isAllowedInOffline => {\n                            if (!isAllowedInOffline) {\n                                return this.remoteDBcall(operation, onlineHandler, params);\n                            } else {\n                                let cascader;\n                                return Promise.resolve().then(() => {\n                                    if (!params.isCascadingStopped &&\n                                        (operation.name === 'insertTableData'\n                                            || operation.name === 'updateTableData')) {\n                                        return this.prepareToCascade(params).then(c => cascader = c);\n                                    }\n                                }).then(() => {\n                                    return new Promise((resolve, reject) => {\n                                        this.localDBcall(operation, params, resolve, reject, clonedParamsUrl);\n                                    });\n                                }).then( (response: any) => {\n                                    if (cascader) {\n                                        return cascader.cascade().then(() => {\n                                            return this.getStore(params).then(store => {\n                                                return store.refresh(response.body);\n                                            }).then(data => {\n                                                // data includes parent and child data.\n                                                if (response && response.body) {\n                                                    response.body = data;\n                                                }\n                                                return response;\n                                            });\n                                        });\n                                    }\n                                    return response;\n                                });\n                            }\n                        }));\n                };\n            }\n        }\n    }\n\n    public getStore(params: any): Promise<LocalDBStore> {\n        return this.localDBManagementService.getStore(params.dataModelName, params.entityName);\n    }\n\n    // set hasBlob flag on params when blob field is present\n    private hasBlob(store) {\n        const blobColumns = _.filter(store.entitySchema.columns, {\n            'sqlType' : 'blob'\n        });\n        return !!blobColumns.length;\n    }\n\n    /*\n     * During offline, LocalDBService will answer to all the calls. All data modifications will be recorded\n     * and will be reported to DatabaseService when device goes online.\n     */\n    private localDBcall(operation, params, successCallback, failureCallback, clonedParamsUrl): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.offlineDBService[operation.name](params, response => {\n                if (operation.type === 'READ') {\n                    resolve(response);\n                } else {\n                    // add to change log\n                    params.onlyOnline = true;\n                    params.url = clonedParamsUrl;\n                    return this.changeLogService.add('DatabaseService', operation.name, params)\n                        .then(() => resolve(response));\n                }\n            });\n        }).then((response) => {\n            response = {body : response, type: WM_LOCAL_OFFLINE_CALL};\n            triggerFn(successCallback, response);\n            return response;\n        }, failureCallback);\n    }\n\n    /*\n     * During online, all read operations data will be pushed to offline database. Similarly, Update and Delete\n     * operations are synced with the offline database.\n     */\n    private remoteDBcall(operation, onlineHandler, params): Promise<any> {\n        return new Promise((resolve, reject) => {\n            onlineHandler.call(this.httpService, params).subscribe(response => {\n                if (response && response.type) {\n                    if (!params.skipLocalDB) {\n                        this.offlineDBService.getStore(params).then((store) => {\n                            if (operation.type === 'READ' && operation.saveResponse) {\n                                store.saveAll(response.body.content);\n                            } else if (operation.type === 'INSERT') {\n                                params = _.clone(params);\n                                params.data = _.clone(response.body);\n                                this.offlineDBService[operation.name](params, noop, noop);\n                            } else {\n                                this.offlineDBService[operation.name](params, noop, noop);\n                            }\n                        }).catch(noop);\n                    }\n                    resolve(response);\n                }\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Finds out the nested objects to save and prepares a cloned params.\n     */\n    private prepareToCascade(params): Promise<any> {\n        return this.getStore(params).then(store => {\n            const childObjectPromises = [];\n            _.forEach(params.data, (v, k) => {\n                let column: ColumnInfo,\n                    foreignRelation: ForeignRelationInfo,\n                    childParams;\n                // NOTE: Save only one-to-one relations for cascade\n                if (_.isObject(v) && !_.isArray(v)) {\n                    column = store.entitySchema.columns.find(c => {\n                        if (c.primaryKey && c.foreignRelations) {\n                            foreignRelation = c.foreignRelations.find( f => f.sourceFieldName === k);\n                        }\n                        return !!foreignRelation;\n                    });\n                }\n                if (column) {\n                    childParams = _.cloneDeep(params);\n                    childParams.entityName = foreignRelation.targetEntity;\n                    childParams.data = v;\n                    const childPromise = this.getStore(childParams).then(childStore => {\n                        const parent = params.data;\n                        const targetColumns = childStore.entitySchema.columns.find(c => c.name === foreignRelation.targetColumn);\n                        if (targetColumns && targetColumns.foreignRelations) {\n                            const parentFieldName = targetColumns.foreignRelations.find( f => f.targetTable === store.entitySchema.name).sourceFieldName;\n                            childParams.data[parentFieldName] = parent;\n                        }\n                        parent[k] = null;\n                        childParams.onlyOnline = false;\n                        childParams.isCascadingStopped = true;\n                        childParams.hasBlob = this.hasBlob(childStore);\n                        childParams.url = '';\n                        return () => {\n                            return Promise.resolve().then(() => {\n                                    const primaryKeyValue = childStore.getValue(childParams.data, childStore.primaryKeyField.fieldName);\n                                    return primaryKeyValue ? childStore.get(primaryKeyValue) : null;\n                                }).then(object => {\n                                    let operation;\n                                    if (object) {\n                                        operation = childParams.hasBlob ? 'updateMultiPartTableData' : 'updateTableData';\n                                    } else {\n                                        operation = childParams.hasBlob ? 'insertMultiPartTableData' : 'insertTableData';\n                                    }\n                                    return this.onlineDBService[operation](childParams).toPromise();\n                                });\n                        };\n                    });\n                    childObjectPromises.push(childPromise);\n                }\n            });\n            return Promise.all(childObjectPromises).then(result => {\n                return {\n                    cascade: () => Promise.all(result.map(fn => fn()))\n                };\n            });\n        });\n    }\n}\n","import { File } from '@ionic-native/file';\n\nimport { DeviceFileService, DeviceFileUploadService, IUploadResponse, NetworkService, UploadRequest } from '@wm/mobile/core';\n\nimport { ChangeLogService } from '../services/change-log.service';\n\nlet isOfflineBehaviourAdded = false;\n\nexport class FileUploadOfflineBehaviour {\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private deviceFileService: DeviceFileService,\n        private deviceFileUploadService: DeviceFileUploadService,\n        private file: File,\n        private networkService: NetworkService,\n        private uploadDir: string\n    ) {\n\n    }\n\n    public add() {\n        if (isOfflineBehaviourAdded) {\n            return;\n        }\n        isOfflineBehaviourAdded = true;\n        const orig = this.deviceFileUploadService.upload;\n        this.deviceFileUploadService['uploadToServer'] = orig;\n        this.deviceFileUploadService.upload = (url: string, fileParamName: string, localPath: string, fileName?: string, params?: any, headers?: any): Promise<IUploadResponse> => {\n            if (this.networkService.isConnected()) {\n                return orig.call(this.deviceFileUploadService, url, fileParamName, localPath, fileName, params, headers);\n            } else {\n                return this.uploadLater(url, fileParamName, localPath, fileName, params, headers).then(response => {\n                    return {\n                        text: JSON.stringify(response),\n                        headers: null,\n                        response: response\n                    };\n                });\n            }\n        };\n    }\n\n    public uploadLater(url: string, fileParamName: string, localPath: string, fileName?: string, params?: any, headers?: any): Promise<any> {\n        const i = localPath.lastIndexOf('/'),\n            soureDir = localPath.substring(0, i),\n            soureFile = localPath.substring(i + 1),\n            destFile = this.deviceFileService.appendToFileName(soureFile),\n            filePath = this.uploadDir + '/' + destFile;\n        return this.file.copyFile(soureDir, soureFile, this.uploadDir, destFile)\n            .then(() => {\n                return this.changeLogService.add('OfflineFileUploadService', 'uploadToServer', {\n                    file: filePath,\n                    ftOptions: {\n                        fileKey: fileParamName,\n                        fileName: fileName\n                    },\n                    params: params,\n                    headers: headers,\n                    serverUrl: url,\n                    deleteOnUpload: true\n                });\n            }).then(() => {\n                return [{\n                    fileName: soureFile,\n                    path: filePath,\n                    length: 0,\n                    success: true,\n                    inlinePath: filePath + '?inline'\n                }];\n            });\n    }\n}\n","import { from, Observable } from 'rxjs';\n\nimport { AbstractHttpService } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\n\nimport { ChangeLogService } from '../services/change-log.service';\nimport { LocalDBManagementService } from '../services/local-db-management.service';\nimport { WM_LOCAL_OFFLINE_CALL } from './utils';\n\ndeclare const _;\nconst NUMBER_REGEX = /^\\d+(\\.\\d+)?$/;\nlet isOfflineBehaviourAdded = false;\nexport class NamedQueryExecutionOfflineBehaviour {\n\n    constructor(\n        private changeLogService: ChangeLogService,\n        private httpService: AbstractHttpService,\n        private localDBManagementService: LocalDBManagementService,\n        private networkService: NetworkService\n    ) {\n\n    }\n\n    public add () {\n        if (isOfflineBehaviourAdded) {\n            return;\n        }\n        isOfflineBehaviourAdded = true;\n        const orig = this.httpService.sendCallAsObservable;\n        this.httpService.sendCallAsObservable = (reqParams: any, params?: any): Observable<any> => {\n            if (!params && _.get(reqParams, 'url')) {\n                params = {url: reqParams.url};\n            }\n            if (!this.networkService.isConnected() && params.url.indexOf('/queryExecutor/') > 0) {\n                return from(this.executeLocally(params));\n            } else {\n                return orig.call(this.httpService, reqParams, params);\n            }\n        };\n    }\n\n    private executeLocally(params: any): Promise<any> {\n        const url = params.url,\n            hasUrlParams = url.indexOf('?') > 0,\n            dbName = this.substring(url, 'services/', '/queryExecutor'),\n            queryName = this.substring(url, 'queries/', hasUrlParams ? '?' : undefined),\n            urlParams = hasUrlParams ? this.getHttpParamMap(this.substring(url, '?', undefined)) : {},\n            dataParams = this.getHttpParamMap(params.dataParams),\n            queryParams = _.extend(urlParams, dataParams);\n        return this.localDBManagementService.executeNamedQuery(dbName, queryName, queryParams)\n            .then(result => {\n                const rows = result.rows;\n                if (result.rowsAffected) {\n                    return this.changeLogService.add('WebService', 'invokeJavaService', params)\n                        .then(() => result.rowsAffected);\n                } else {\n                    return {\n                        type: WM_LOCAL_OFFLINE_CALL,\n                        body: {\n                            totalPages: rows && rows.length > 0 ? 1 : 0,\n                            totalElements: rows.length,\n                            first: true,\n                            sort: null,\n                            numberOfElements: rows.length,\n                            last: true,\n                            size: params.size,\n                            number: 0,\n                            content: rows\n                        }\n                    };\n                }\n            });\n    }\n\n    private substring(source: string, start: string, end: string): string {\n        if (start) {\n            const startIndex = source.indexOf(start) + start.length,\n                endIndex = end ? source.indexOf(end) : undefined;\n            return source.substring(startIndex, endIndex);\n        }\n        return undefined;\n    }\n\n    private getHttpParamMap(str: string): any {\n        const result = {};\n        if (str) {\n            str = decodeURIComponent(str);\n            str.split('&').forEach(c => {\n                const csplits = c.split('=');\n                if (_.isEmpty(_.trim(csplits[1])) || !NUMBER_REGEX.test(csplits[1])) {\n                    result[csplits[0]] = csplits[1];\n                } else {\n                    result[csplits[0]] = parseInt(csplits[1], 10);\n                }\n            });\n        }\n        return result;\n    }\n}\n","import { File } from '@ionic-native/file';\n\nimport { App, noop, triggerFn } from '@wm/core';\nimport { DeviceService, NetworkService } from '@wm/mobile/core';\nimport { SecurityService } from '@wm/security';\n\ndeclare const _;\ndeclare const cordova;\nconst SECURITY_FILE = 'logged-in-user.info';\ndeclare const resolveLocalFileSystemURL;\n\nlet isOfflineBehaviourAdded = false;\n\nexport class SecurityOfflineBehaviour {\n\n    private saveSecurityConfigLocally;\n    private securityConfig: any;\n\n    constructor(\n        private app: App,\n        private file: File,\n        private deviceService: DeviceService,\n        private networkService: NetworkService,\n        private securityService: SecurityService\n    ) {\n        this.saveSecurityConfigLocally = _.debounce((config: any) => {\n            this._saveSecurityConfigLocally(config);\n        }, 1000);\n    }\n\n    public add() {\n        if (isOfflineBehaviourAdded) {\n            return;\n        }\n        isOfflineBehaviourAdded = true;\n        const origLoad = this.securityService.load;\n        const origAppLogout = this.securityService.appLogout;\n        /**\n         * Add offline behaviour to SecurityService.getConfig. When offline, this funcation returns security\n         * config of last logged-in user will be returned, provided the user did not logout last time.\n         *\n         * @param successCallback\n         * @param failureCallback\n         */\n        this.securityService.load = () => {\n            return new Promise((resolve, reject) => {\n                if (this.networkService.isConnected()) {\n                    origLoad.call(this.securityService).then(config => {\n                        this.securityConfig = config;\n                        this.saveSecurityConfigLocally(config);\n                        resolve(this.securityConfig);\n                    }, reject);\n                } else {\n                    this.readLocalSecurityConfig().then((config = {}) => {\n                        this.securityConfig = config;\n                        this.securityService.config = config;\n                        return config;\n                    }, () => origLoad.call(this.securityConfig)).then(resolve, reject);\n                }\n            });\n        };\n\n        /**\n         * When users logs out, local config will be removed. If the user is offline and logs out, then user\n         * will be logged out from the app and cookies are invalidated when app goes online next time.\n         *\n         * @param successCallback\n         * @param failureCallback\n         */\n        this.securityService.appLogout = (successCallback, failureCallback) => {\n            this.securityConfig = {\n                authenticated: false,\n                loggedOut: true,\n                securityEnabled: this.securityConfig && this.securityConfig.securityEnabled,\n                loggedOutOffline: !this.networkService.isConnected(),\n                loginConfig: this.securityConfig && this.securityConfig.loginConfig,\n                userInfo: null\n            };\n            this._saveSecurityConfigLocally(this.securityConfig).catch(noop).then(() => {\n                if (this.networkService.isConnected()) {\n                    origAppLogout.call(this.securityService, successCallback, failureCallback);\n                } else {\n                    location.assign(window.location.origin + window.location.pathname);\n                }\n            });\n        };\n        /**\n         * @param successCallback\n         */\n        this.securityService.isAuthenticated = successCallback => {\n            triggerFn(successCallback, this.securityConfig.authenticated === true);\n        };\n        this.deviceService.whenReady().then(() => this.clearLastLoggedInUser());\n        /**\n         * If the user has chosen to logout while app is offline, then invalidation of cookies happens when\n         * app comes online next time.\n         */\n        this.app.subscribe('onNetworkStateChange', data => {\n            if (data.isConnected) {\n                this.clearLastLoggedInUser();\n            }\n        });\n    }\n\n    private _saveSecurityConfigLocally(config: any): Promise<any> {\n        return this.file.writeFile(cordova.file.dataDirectory, SECURITY_FILE, JSON.stringify(config), { replace : true });\n    }\n\n    private clearLastLoggedInUser() {\n        return this.readLocalSecurityConfig().then(config => {\n            if (config && config.loggedOutOffline) {\n                this.securityService.appLogout(null, null);\n            } else if (!this.networkService.isConnected()) {\n                this.securityConfig = config || {};\n            }\n        });\n    }\n\n    private readLocalSecurityConfig(): Promise<any> {\n        // reading the security info from file in dataDirectory but when this file is not available then fetching the config from the app directory\n        return new Promise((resolve, reject) => {\n            const rootDir = cordova.file.dataDirectory;\n            this.file.checkFile(rootDir, SECURITY_FILE).then(() => {\n                return this.readFileAsTxt(rootDir, SECURITY_FILE).then(resolve, reject);\n            }, () => {\n                const folderPath = cordova.file.applicationDirectory + 'www/metadata/app',\n                    fileName = 'security-config.json';\n                return this.readFileAsTxt(folderPath, fileName).then(resolve, reject);\n            });\n        });\n    }\n\n    private readFileAsTxt(folderPath, fileName): Promise<any> {\n        return this.file.readAsText(folderPath, fileName).then(JSON.parse).catch(noop);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { File } from '@ionic-native/file';\n\nimport { AbstractHttpService, App, hasCordova, noop } from '@wm/core';\nimport { DeviceFileService, DeviceFileUploadService, DeviceService, NetworkService } from '@wm/mobile/core';\nimport { SecurityService } from '@wm/security';\n\nimport { ChangeLogService } from './services/change-log.service';\nimport { LocalDBManagementService } from './services/local-db-management.service';\nimport { LocalDbService } from './services/local-db.service';\nimport { FileHandler, UploadedFilesImportAndExportService } from './services/workers/file-handler';\nimport { ErrorBlocker } from './services/workers/error-blocker';\nimport { IdResolver } from './services/workers/id-resolver';\nimport { MultiPartParamTransformer } from './services/workers/multi-part-param-transformer';\nimport { LiveVariableOfflineBehaviour } from './utils/live-variable.utils';\nimport { FileUploadOfflineBehaviour } from './utils/file-upload.utils';\nimport { NamedQueryExecutionOfflineBehaviour } from './utils/query-executor.utils';\nimport { SecurityOfflineBehaviour } from './utils/security.utils';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n    exports: [],\n    providers: [\n        // add providers to mobile-runtime module.\n    ],\n    entryComponents: []\n})\nexport class OfflineModule {\n    static initialized = false;\n    // Startup services have to be added only once in the app life-cycle.\n    static initialize(app: App,\n                      changeLogService: ChangeLogService,\n                      deviceService: DeviceService,\n                      deviceFileService: DeviceFileService,\n                      deviceFileUploadService: DeviceFileUploadService,\n                      file: File,\n                      httpService: AbstractHttpService,\n                      localDBManagementService: LocalDBManagementService,\n                      localDbService: LocalDbService,\n                      networkService: NetworkService,\n                      securityService: SecurityService) {\n        if (this.initialized) {\n            return;\n        }\n\n        deviceService.addStartUpService({\n            serviceName: 'OfflineStartupService',\n            start: () => {\n                if (window['SQLitePlugin']) {\n                    localDBManagementService.setLogSQl((sessionStorage.getItem('wm.logSql') === 'true') || (sessionStorage.getItem('debugMode') === 'true'));\n                    (window as any).logSql = (flag = true) => {\n                        localDBManagementService.setLogSQl(flag);\n                        sessionStorage.setItem('wm.logSql', flag ? 'true' : 'false');\n                    };\n                    (window as any).executeLocalSql = (dbName, query, params?) => {\n                        localDBManagementService.executeSQLQuery(dbName, query, params, true);\n                    };\n                    return localDBManagementService.loadDatabases().then(() => {\n                        changeLogService.addWorker(new IdResolver(localDBManagementService));\n                        changeLogService.addWorker(new ErrorBlocker(localDBManagementService));\n                        changeLogService.addWorker(new FileHandler());\n                        changeLogService.addWorker(new MultiPartParamTransformer(deviceFileService, localDBManagementService));\n                        new LiveVariableOfflineBehaviour(changeLogService, httpService, localDBManagementService, networkService, localDbService).add();\n                        new FileUploadOfflineBehaviour(changeLogService, deviceFileService, deviceFileUploadService, file, networkService, deviceFileService.getUploadDirectory()).add();\n                        new NamedQueryExecutionOfflineBehaviour(changeLogService, httpService, localDBManagementService, networkService).add();\n                        localDBManagementService.registerCallback(new UploadedFilesImportAndExportService(changeLogService, deviceFileService, localDBManagementService, file));\n                        changeLogService.addWorker({\n                            onAddCall: () => {\n                                if (!networkService.isConnected()) {\n                                    networkService.disableAutoConnect();\n                                }\n                            },\n                            postFlush: stats => {\n                                if (stats.totalTaskCount > 0) {\n                                    localDBManagementService.close()\n                                        .catch(noop)\n                                        .then(() => {\n                                            location.assign(window.location.origin + window.location.pathname);\n                                        });\n                                }\n                            }\n                        });\n                    });\n                }\n                return Promise.resolve();\n            }\n        });\n        new SecurityOfflineBehaviour(app, file, deviceService, networkService, securityService).add();\n    }\n\n\n    constructor(\n        app: App,\n        changeLogService: ChangeLogService,\n        deviceService: DeviceService,\n        deviceFileService: DeviceFileService,\n        deviceFileUploadService: DeviceFileUploadService,\n        file: File,\n        httpService: AbstractHttpService,\n        localDBManagementService: LocalDBManagementService,\n        localDbService: LocalDbService,\n        networkService: NetworkService,\n        securityService: SecurityService\n    ) {\n        if (hasCordova()) {\n            OfflineModule.initialize(app,\n                changeLogService,\n                deviceService,\n                deviceFileService,\n                deviceFileUploadService,\n                file,\n                httpService,\n                localDBManagementService,\n                localDbService,\n                networkService,\n                securityService);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\n\nimport { DeviceFileUploadService } from '@wm/mobile/core';\nimport { LVService } from '@wm/variables';\n\nimport { Change, PushService } from './change-log.service';\n\n@Injectable()\nexport class PushServiceImpl implements PushService {\n\n    constructor(\n        private deviceFileUploadService: DeviceFileUploadService\n    ) {}\n\n    // Returns a promise from the observable.\n    private getPromiseFromObs(cb) {\n        return new Promise((resolve, reject) => {\n            cb.subscribe(response => {\n                if (response && response.type) {\n                    resolve(response);\n                }\n            }, reject);\n        });\n    }\n\n    public push(change: Change): Promise<any> {\n        const params = change.params;\n        switch (change.service) {\n            case 'DatabaseService':\n                switch (change.operation) {\n                    case 'insertTableData':\n                        return this.getPromiseFromObs(LVService.insertTableData(change.params, null, null));\n                    case 'insertMultiPartTableData':\n                        return this.getPromiseFromObs(LVService.insertMultiPartTableData(change.params, null, null));\n                    case 'updateTableData':\n                        return this.getPromiseFromObs(LVService.updateTableData(change.params, null, null));\n                    case 'updateMultiPartTableData':\n                        return this.getPromiseFromObs(LVService.updateMultiPartTableData(change.params, null, null));\n                    case 'deleteTableData':\n                        return this.getPromiseFromObs(LVService.deleteTableData(change.params, null, null));\n                }\n            case 'OfflineFileUploadService':\n                if (change.operation === 'uploadToServer') {\n                    return this.deviceFileUploadService['uploadToServer'].call(\n                        this.deviceFileUploadService,\n                        params.serverUrl,\n                        params.ftOptions.fileKey,\n                        params.file,\n                        params.ftOptions.fileName,\n                        params.params,\n                        params.headers);\n                }\n        }\n        return Promise.reject( `${change.service} service with operation ${change.operation} is not supported for push.`);\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observer } from 'rxjs/Observer';\n\nimport { $parseExpr, App, defer, getAbortableDefer, noop } from '@wm/core';\nimport { NetworkService } from '@wm/mobile/core';\n\nimport { LiveVariableUtils, LVService } from '@wm/variables';\n\nimport { LocalDBManagementService } from './local-db-management.service';\nimport { PullInfo } from './change-log.service';\nimport { LocalKeyValueService } from './local-key-value.service';\nimport { DBInfo, EntityInfo, PullType } from '../models/config';\n\ndeclare const _, moment;\nconst  LAST_PULL_INFO_KEY = 'localDBManager.lastPullInfo';\n\n/**\n * a utility api to abort pull process.\n *\n * @type {{start, add, remove, abort}}\n */\nconst pullProcessManager = (() => {\n    const promises = {};\n    return {\n        start: promise => {\n            promise.$$pullProcessId = 'PULL_' + _.now();\n        },\n        add: (pullPromise: Promise<PullInfo>, promise: Promise<any>) => {\n            const pullProcessId = (pullPromise as any).$$pullProcessId;\n            if (!promises[pullProcessId]) {\n                promises[pullProcessId] = [];\n            }\n            promises[pullProcessId].push(promise);\n        },\n        remove: (pullPromise: Promise<PullInfo>, promise: Promise<any>) => {\n            const pullProcessId = (pullPromise as any).$$pullProcessId;\n            _.remove(promises[pullProcessId], promise);\n            if (_.isEmpty(promises[pullProcessId])) {\n                delete promises[pullProcessId];\n            }\n        },\n        abort: (pullPromise: Promise<PullInfo>) => {\n            const pullProcessId = (pullPromise as any).$$pullProcessId;\n            if (promises[pullProcessId]) {\n                _.forEach(promises[pullProcessId], function (p) {\n                    if (p && p.abort) {\n                        p.abort();\n                    }\n                });\n                delete promises[pullProcessId];\n            }\n            (pullPromise as any).$$isMarkedToAbort = true;\n            return pullPromise.catch(function () {\n                return 'cancelled';\n            });\n        }\n    };\n})();\n\n/**\n * LocalDBDataPullService has API to pull data from remote Server to local Database.\n */\n@Injectable({providedIn: 'root'})\nexport class LocalDBDataPullService {\n\n    constructor(\n        private app: App,\n        private localDBManagementService: LocalDBManagementService,\n        private localKeyValueService: LocalKeyValueService,\n        private networkService: NetworkService\n    ) {\n        // Listen for db creation. When db is created, then initialize last pull info.\n        this.localDBManagementService.registerCallback({\n            onDbCreate: (info) => {\n                this.localKeyValueService.put(LAST_PULL_INFO_KEY, {\n                    databases: [],\n                    totalRecordsToPull: 0,\n                    totalPulledRecordCount: 0,\n                    startTime: new Date(0),\n                    endTime: new Date(info.dbSeedCreatedOn)\n                });\n            }\n        });\n    }\n\n    /**\n     * If deltaFieldName is set,last pull time is greater than zero and query used in last pull is same as the\n     * query for the current pull, then delta criteria is attached to the query.\n     *\n     * @param db\n     * @param entityName\n     * @param query\n     * @returns {any}\n     */\n    private addDeltaCriteria(db: DBInfo, entityName: string, query: string): Promise<string> {\n        const entitySchema = db.schema.entities[entityName],\n            deltaFieldName = entitySchema.pullConfig.deltaFieldName,\n            deltaField = _.find(entitySchema.columns, {'fieldName' : deltaFieldName}) || {};\n\n        let isBundledEntity;\n\n        if (!_.isEmpty(deltaFieldName)) {\n            return this.localDBManagementService.isBundled(db.schema.name, entityName)\n                .then(flag => isBundledEntity = flag)\n                .then(() => this.getLastPullInfo())\n                .then(lastPullInfo => {\n                    let lastPullTime = (lastPullInfo && lastPullInfo.startTime && lastPullInfo.startTime.getTime());\n                    const lastPullDBInfo = _.find(lastPullInfo && lastPullInfo.databases, {'name' : db.schema.name}),\n                        lastPullEntityInfo = _.find(lastPullDBInfo && lastPullDBInfo.entities, {'entityName' : entityName}) || {};\n\n                    if (!lastPullTime && isBundledEntity) {\n                        // For bundled entity when there is no last pull, fetch records that got modified after db creation.\n                        lastPullTime = (lastPullInfo && lastPullInfo.endTime && lastPullInfo.endTime.getTime());\n                        lastPullEntityInfo.query = query;\n                    }\n                    if (lastPullEntityInfo.query === query && lastPullTime > 0) {\n                        if (_.isEmpty(query)) {\n                            query = '';\n                        } else {\n                            query += ' AND ';\n                        }\n                        if (deltaField.sqlType === 'datetime') {\n                            query += deltaFieldName + ' > wm_dt(\\'' + moment(lastPullTime).utc().format('YYYY-MM-DDTHH:mm:ss') + '\\')';\n                        } else {\n                            query += deltaFieldName + ' > wm_ts(\\'' + lastPullTime + '\\')';\n                        }\n                    }\n                    return query;\n                }, () => Promise.resolve(query));\n        }\n        return Promise.resolve(query);\n    }\n\n    /**\n     * copies the data from remote db to local db\n     * @param {DBInfo} db\n     * @param {string} entityName\n     * @param {boolean} clearDataBeforePull\n     * @param pullPromise\n     * @param {Observer<any>} progressObserver\n     * @returns {Promise<any>}\n     */\n    private copyDataFromRemoteDBToLocalDB(db: DBInfo, entityName: string, clearDataBeforePull: boolean, pullPromise: Promise<PullInfo>, progressObserver: Observer<any>) {\n        const store = (db as any).stores[entityName],\n            entitySchema = db.schema.entities[entityName],\n            result = {\n                entityName: entityName,\n                totalRecordsToPull: 0,\n                pulledRecordCount: 0\n            };\n\n        let inProgress = 0,\n            pullComplete = false,\n            filter;\n\n        return new Promise((resolve, reject) => {\n            this.prepareQuery(db, entityName)\n                .then(query => {\n                    (result as any).query = query;\n                    return this.addDeltaCriteria(db, entityName, query);\n                }).then(query => {\n                    // Clear if clearDataBeforePull is true and delta query is not used\n                    if (clearDataBeforePull && (result as any).query === query) {\n                        return store.clear()\n                            .then(() => {\n                                return query;\n                            });\n                    }\n                    return query;\n                }).then(query => {\n                    filter = _.isEmpty(query) ? '' : 'q=' + query;\n                    return this.getTotalRecordsToPull(db, entitySchema, filter, pullPromise);\n                }).then(maxNoOfRecords => {\n                    const pageSize = entitySchema.pullConfig.size || 100,\n                        maxNoOfPages = Math.ceil(maxNoOfRecords / pageSize);\n\n                    result.totalRecordsToPull = maxNoOfRecords;\n\n                    let sort = entitySchema.pullConfig.orderBy;\n                    sort = (_.isEmpty(sort) ? '' : sort + ',') + store.primaryKeyName;\n\n                    progressObserver.next(result);\n\n                    const _progressObserver = { next: data => {\n                            inProgress++;\n                            data = _.slice(data, 0, result.totalRecordsToPull - result.pulledRecordCount);\n                            store.saveAll(data).then(() => {\n                                result.pulledRecordCount += data ? data.length : 0;\n                                progressObserver.next(result);\n                            }).catch(noop)\n                                .then(() => {\n                                    inProgress--;\n                                    if (inProgress === 0 && pullComplete) {\n                                        resolve(result);\n                                    }\n                                });\n                        }, error: null, complete: null\n                    };\n\n                return this._pullEntityData(db, entityName, filter, sort, maxNoOfPages, pageSize, 1, pullPromise, undefined, _progressObserver);\n                }).then(null, reject)\n                    .catch(noop)\n                    .then(() => {\n                        pullComplete = true;\n                        if (inProgress === 0) {\n                            resolve(result);\n                        }\n                    });\n            });\n    }\n\n    // If expression starts with 'bind:', then expression is evaluated and result is returned.\n    private evalIfBind(expression: string) {\n        if (_.startsWith(expression, 'bind:')) {\n            expression = expression.replace(/\\[\\$\\i\\]/g, '[0]');\n            return $parseExpr(expression.replace('bind:', ''))(this.app);\n        }\n        return expression;\n    }\n\n    /**\n     * Executes DatabaseService.countTableDataWithQuery as a promise API.\n     * @param params\n     * @returns Promise\n     */\n    private executeDatabaseCountQuery(params: Object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            LVService.countTableDataWithQuery(params, null, null).subscribe(response => resolve(response.body), reject);\n        });\n    }\n\n    /**\n     * Executes DatabaseService.searchTableDataWithQuery as a promise API.\n     * @param params\n     * @returns Promise\n     */\n    private executeDatabaseSearchQuery(params: Object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            return LVService.searchTableDataWithQuery(params, null, null).subscribe(response => resolve(response && response.body && response.body.content), reject);\n        });\n    }\n\n    /**\n     * Computes the maximum number of records to pull.\n     *\n     * @param db\n     * @param entitySchema\n     * @param filter\n     * @param pullPromise\n     * @returns {*}\n     */\n    private getTotalRecordsToPull(db: DBInfo, entitySchema: EntityInfo, filter: string, pullPromise: Promise<PullInfo>): Promise<number> {\n        const params = {\n            dataModelName: db.schema.name,\n            entityName: entitySchema.entityName,\n            data: filter\n        };\n        return this.retryIfNetworkFails(() => {\n            return this.executeDatabaseCountQuery(params).then(function (response) {\n                const totalRecordCount = response,\n                    maxRecordsToPull = _.parseInt((entitySchema.pullConfig as any).maxNumberOfRecords);\n                if (_.isNaN(maxRecordsToPull) || maxRecordsToPull <= 0 || totalRecordCount < maxRecordsToPull) {\n                    return totalRecordCount;\n                }\n                return maxRecordsToPull;\n            });\n        }, pullPromise);\n    }\n\n    private prepareQuery(db: DBInfo, entityName: string): Promise<string> {\n        let query;\n        const entitySchema = db.schema.entities[entityName];\n\n        return this.localDBManagementService.isBundled(db.schema.name, entityName)\n            .then(isBundledEntity => {\n                let hasNullAttributeValue = false;\n                if (isBundledEntity || _.isEmpty(entitySchema.pullConfig.query)) {\n                    query = _.cloneDeep(entitySchema.pullConfig.filter);\n                    query = _.map(query, v => {\n                        v.attributeValue = this.evalIfBind(v.attributeValue);\n                        hasNullAttributeValue = hasNullAttributeValue || _.isNil(v.attributeValue);\n                        return v;\n                    });\n                    if (hasNullAttributeValue) {\n                        return Promise.reject('Null criteria values are present');\n                    }\n                    query = _.sortBy(query, 'attributeName');\n                    query = LiveVariableUtils.getSearchQuery(query, ' AND ', true);\n                } else {\n                    query = this.evalIfBind(entitySchema.pullConfig.query);\n                }\n                if (_.isNil(query)) {\n                    return Promise.resolve(null);\n                }\n\n                return Promise.resolve(encodeURIComponent(query));\n        });\n    }\n\n    /**\n     *\n     * @param db\n     * @param clearDataBeforePull\n     * @param pullPromise\n     * @param progressObserver\n     * @returns {*}\n     */\n    private _pullDbData(db: DBInfo, clearDataBeforePull: boolean, pullPromise: Promise<PullInfo>, progressObserver: Observer<any>): Promise<any> {\n        const datamodelName = db.schema.name,\n            result = {\n                name: db.schema.name,\n                entities: [],\n                totalRecordsToPull: 0,\n                pulledRecordCount: 0,\n                completedTaskCount: 0,\n                totalTaskCount: 0\n            };\n\n        const storePromises = [];\n\n        _.forEach(db.schema.entities, entity => {\n            storePromises.push(this.localDBManagementService.getStore(datamodelName, entity.entityName));\n        });\n\n        return new Promise((resolve, reject) => {\n            Promise.all(storePromises)\n                .then((stores) => {\n                    const entities = [];\n                    stores.forEach(store => {\n                        const pullConfig = store.entitySchema.pullConfig;\n                        const pullType = pullConfig.pullType;\n                        if (pullType === PullType.APP_START || (pullType === PullType.BUNDLED && (pullConfig as any).deltaFieldName)) {\n                            entities.push(store.entitySchema);\n                        }\n                    });\n                    const pullPromises = _.chain(entities)\n                        .map(entity => {\n                        const _progressObserver = {\n                            next: info => {\n                                const i = _.findIndex(result.entities, {'entityName': info.entityName});\n                                if (i >= 0) {\n                                    result.entities[i] = info;\n                                } else {\n                                    result.entities.push(info);\n                                }\n                                result.pulledRecordCount = _.reduce(result.entities, function (sum, entityPullInfo) {\n                                    return sum + entityPullInfo.pulledRecordCount;\n                                }, 0);\n                                result.totalRecordsToPull = _.reduce(result.entities, function (sum, entityPullInfo) {\n                                    return sum + entityPullInfo.totalRecordsToPull;\n                                }, 0);\n                                progressObserver.next(result);\n                            }, error: null, complete: null\n                        };\n                        return this.copyDataFromRemoteDBToLocalDB(db, entity.entityName, clearDataBeforePull, pullPromise, _progressObserver)\n                            .then(function (info) {\n                                result.completedTaskCount++;\n                                progressObserver.next(result);\n                                return info;\n                            }, null);\n                    }).value();\n\n                result.totalTaskCount = pullPromises.length;\n                progressObserver.next(result);\n\n                Promise.all(pullPromises).then(resolve, reject);\n            });\n        });\n    }\n\n    /**\n     * Pulls data of the given entity from remote server.\n     * @param db\n     * @param entityName\n     * @param sort\n     * @param maxNoOfPages\n     * @param pageSize\n     * @param currentPage\n     * @param filter\n     * @param pullPromise\n     * @param promise\n     * @returns {*}\n     */\n    private _pullEntityData(db: DBInfo, entityName: string, filter: string, sort, maxNoOfPages: number, pageSize: number, currentPage: number, pullPromise: Promise<PullInfo>, deferred: any, progressObserver?: Observer<any>) {\n        const dataModelName = db.schema.name;\n\n        if (!deferred) {\n            deferred = defer();\n        }\n\n        if (currentPage > maxNoOfPages) {\n            return deferred.resolve();\n        }\n        const params = {\n            dataModelName: dataModelName,\n            entityName: entityName,\n            page: currentPage,\n            size: pageSize,\n            data: filter,\n            sort: sort,\n            onlyOnline: true,\n            skipLocalDB: true\n        };\n        this.retryIfNetworkFails(() => {\n            return this.executeDatabaseSearchQuery(params);\n        }, pullPromise).then(response => {\n            progressObserver.next(response);\n            this._pullEntityData(db, entityName, filter, sort, maxNoOfPages, pageSize, currentPage + 1, pullPromise, deferred, progressObserver);\n        }, deferred.reject);\n\n        return deferred.promise;\n    }\n\n\n    /**\n     * If fn fails and network is not there\n     * @param fn\n     * @param pullPromise\n     * @returns {*}\n     */\n    private retryIfNetworkFails(fn: Function, pullPromise: Promise<PullInfo>) {\n        if ((pullPromise as any).$$isMarkedToAbort) {\n            return Promise.reject('aborted');\n        }\n        const promise = this.networkService.retryIfNetworkFails(fn);\n        pullProcessManager.add(pullPromise, promise);\n        promise.catch(noop)\n            .then(() => {\n            pullProcessManager.remove(pullPromise, promise);\n        });\n        return promise;\n    }\n\n    /**\n     * Tries to cancel the corresponding pull process that gave the given promise.\n     * @param promise\n     * @returns {any}\n     */\n    public cancel(promise: Promise<any>) {\n        return pullProcessManager.abort(promise);\n    }\n\n    /**\n     * fetches the database from the dbName.\n     * @param dbName\n     * @returns {Promise<any>}\n     */\n    public getDb(dbName: string) {\n        return this.localDBManagementService.loadDatabases()\n            .then(databases => {\n                const db = _.find(databases, {'name' : dbName});\n                return db || Promise.reject('Local database (' + dbName + ') not found');\n            });\n    }\n\n    /**\n     * @returns {any} that has total no of records fetched, start and end timestamps of last successful pull\n     * of data from remote server.\n     */\n    public getLastPullInfo(): Promise<PullInfo> {\n        return this.localKeyValueService.get(LAST_PULL_INFO_KEY).then(info => {\n            if (_.isString(info.startTime)) {\n                info.startTime = new Date(info.startTime);\n            }\n            if (_.isString(info.endTime)) {\n                info.endTime = new Date(info.endTime);\n            }\n            return info;\n        });\n    }\n\n    /**\n     * Clears (based on parameter) and pulls data ('BUNDLED' data based on parameter) from server using the\n     * configured rules in offline configuration.\n     *\n     * @param clearDataBeforePull boolean\n     * @param {Observer<any>} progressObserver\n     * @returns {any}\n     */\n    public pullAllDbData(clearDataBeforePull: boolean, progressObserver: Observer<any>): Promise<PullInfo> {\n        const deferred = getAbortableDefer(),\n            pullInfo = {\n            completedTaskCount: 0,\n            totalTaskCount: 0,\n            inProgress: true,\n            databases: [],\n            totalRecordsToPull: 0,\n            totalPulledRecordCount: 0,\n            startTime: new Date(),\n            endTime: new Date()\n        };\n\n        this.localDBManagementService.loadDatabases()\n            .then(databases => {\n                const dataPullPromises = _.chain(databases).filter(function (db) {\n                    return !db.schema.isInternal;\n                }).map(db => {\n                    pullProcessManager.start(deferred.promise);\n\n                    const _progressObserver: Observer<any> = {next: data => {\n                                const i = _.findIndex(pullInfo.databases, {'name' : data.name});\n                                if (i >= 0) {\n                                    pullInfo.databases[i] = data;\n                                } else {\n                                    pullInfo.databases.push(data);\n                                }\n                                pullInfo.totalTaskCount = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.totalTaskCount;\n                                }, 0);\n                                pullInfo.completedTaskCount = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.completedTaskCount;\n                                }, 0);\n                                pullInfo.totalPulledRecordCount = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.pulledRecordCount;\n                                }, 0);\n                                pullInfo.totalRecordsToPull = _.reduce(pullInfo.databases, function (sum, dbPullInfo) {\n                                    return sum + dbPullInfo.totalRecordsToPull;\n                                }, 0);\n                                progressObserver.next(pullInfo);\n                            }, error: null, complete: null\n                        };\n\n                    return this._pullDbData(db, clearDataBeforePull, deferred.promise, _progressObserver);\n                }).value();\n                return Promise.all(dataPullPromises);\n            }).then(() => {\n                pullInfo.endTime = new Date();\n                pullInfo.inProgress = false;\n                this.localKeyValueService.put(LAST_PULL_INFO_KEY, pullInfo);\n                deferred.resolve(pullInfo);\n        }, deferred.reject);\n\n        return deferred.promise;\n    }\n\n    /**\n     * Clears (based on parameter) and pulls data ('BUNDLED' data based on parameter) of the given database from server using\n     * the configured rules in offline configuration.\n     *\n     * @param {string} databaseName\n     * @param {boolean} clearDataBeforePull\n     * @param {Observer<any>} progressObserver\n     * @returns {Promise}\n     */\n    public pullDbData(databaseName: string, clearDataBeforePull: boolean, progressObserver: Observer<any>): Promise<any> {\n        const deferred = getAbortableDefer();\n\n        this.getDb(databaseName).then(db => {\n            return this._pullDbData(db, clearDataBeforePull, deferred.promise, progressObserver);\n        }).then(deferred.resolve, deferred.reject);\n\n        return deferred.promise;\n    }\n\n    /**\n     * Clears (based on parameter) and pulls data of the given entity and database from\n     * server using the configured rules in offline configuration.\n     * @param databaseName, name of the database from which data has to be pulled.\n     * @param entityName, name of the entity from which data has to be pulled\n     * @param clearDataBeforePull, if set to true, then data of the entity will be deleted.\n     * @param progressObserver, observer the progress values\n     */\n    public pullEntityData(databaseName: string, entityName: string, clearDataBeforePull: boolean, progressObserver: Observer<any>): Promise<any> {\n        const deferred = getAbortableDefer();\n\n        this.getDb(databaseName)\n            .then((db) => {\n                return this.copyDataFromRemoteDBToLocalDB(db, entityName, clearDataBeforePull, deferred.promise, progressObserver);\n        }).then(deferred.resolve, deferred.reject);\n\n        return deferred.promise;\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {LocalKeyValueService as Éµa} from './services/local-key-value.service';"],"names":["defer","STORE_KEY","isOfflineBehaviourAdded"],"mappings":"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"}
