import { from } from 'rxjs';
import { WM_LOCAL_OFFLINE_CALL } from './utils';
const NUMBER_REGEX = /^\d+(\.\d+)?$/;
let isOfflineBehaviourAdded = false;
export class NamedQueryExecutionOfflineBehaviour {
    constructor(changeLogService, httpService, localDBManagementService, networkService) {
        this.changeLogService = changeLogService;
        this.httpService = httpService;
        this.localDBManagementService = localDBManagementService;
        this.networkService = networkService;
    }
    add() {
        if (isOfflineBehaviourAdded) {
            return;
        }
        isOfflineBehaviourAdded = true;
        const orig = this.httpService.sendCallAsObservable;
        this.httpService.sendCallAsObservable = (reqParams, params) => {
            if (!params && _.get(reqParams, 'url')) {
                params = { url: reqParams.url };
            }
            if (!this.networkService.isConnected() && params.url.indexOf('/queryExecutor/') > 0) {
                return from(this.executeLocally(params));
            }
            else {
                return orig.call(this.httpService, reqParams, params);
            }
        };
    }
    executeLocally(params) {
        const url = params.url, hasUrlParams = url.indexOf('?') > 0, dbName = this.substring(url, 'services/', '/queryExecutor'), queryName = this.substring(url, 'queries/', hasUrlParams ? '?' : undefined), urlParams = hasUrlParams ? this.getHttpParamMap(this.substring(url, '?', undefined)) : {}, dataParams = this.getHttpParamMap(params.dataParams), queryParams = _.extend(urlParams, dataParams);
        return this.localDBManagementService.executeNamedQuery(dbName, queryName, queryParams)
            .then(result => {
            const rows = result.rows;
            if (result.rowsAffected) {
                return this.changeLogService.add('WebService', 'invokeJavaService', params)
                    .then(() => result.rowsAffected);
            }
            else {
                return {
                    type: WM_LOCAL_OFFLINE_CALL,
                    body: {
                        totalPages: rows && rows.length > 0 ? 1 : 0,
                        totalElements: rows.length,
                        first: true,
                        sort: null,
                        numberOfElements: rows.length,
                        last: true,
                        size: params.size,
                        number: 0,
                        content: rows
                    }
                };
            }
        });
    }
    substring(source, start, end) {
        if (start) {
            const startIndex = source.indexOf(start) + start.length, endIndex = end ? source.indexOf(end) : undefined;
            return source.substring(startIndex, endIndex);
        }
        return undefined;
    }
    getHttpParamMap(str) {
        const result = {};
        if (str) {
            str = decodeURIComponent(str);
            str.split('&').forEach(c => {
                const csplits = c.split('=');
                if (_.isEmpty(_.trim(csplits[1])) || !NUMBER_REGEX.test(csplits[1])) {
                    result[csplits[0]] = csplits[1];
                }
                else {
                    result[csplits[0]] = parseInt(csplits[1], 10);
                }
            });
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,