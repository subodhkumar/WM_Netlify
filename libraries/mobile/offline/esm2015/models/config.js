export class DBInfo {
    constructor() {
        this.schema = {
            name: '',
            isInternal: false,
            entities: new Map()
        };
        this.stores = new Map();
        this.queries = new Map();
    }
}
export class EntityInfo {
    constructor(name, entityName) {
        this.name = name;
        this.entityName = entityName;
        this.columns = new Array();
        this.entityName = this.entityName || this.name;
    }
}
export class ColumnInfo {
    constructor(name, fieldName) {
        this.name = name;
        this.fieldName = fieldName;
        this.primaryKey = false;
        this.fieldName = this.fieldName || this.name;
    }
}
export class ForeignRelationInfo {
}
export class NamedQueryInfo {
    constructor(name, query) {
        this.name = name;
        this.query = query;
        this.response = {
            properties: []
        };
    }
}
export class NamedQueryParamInfo {
    constructor(name, type, variableType) {
        this.name = name;
        this.type = type;
        this.variableType = variableType;
    }
}
export class PullConfig {
}
export var PullType;
(function (PullType) {
    PullType["LIVE"] = "LIVE";
    PullType["BUNDLED"] = "BUNDLED";
    PullType["APP_START"] = "APP_START";
})(PullType || (PullType = {}));
export class OfflineDataFilter {
}
export class PushConfig {
    constructor() {
        this.insertEnabled = false;
        this.updateEnabled = false;
        this.deleteEnabled = false;
        this.readEnabled = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL21vYmlsZS9vZmZsaW5lLyIsInNvdXJjZXMiOlsibW9kZWxzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLE9BQU8sTUFBTTtJQUFuQjtRQUNXLFdBQU0sR0FBRztZQUNaLElBQUksRUFBRSxFQUFFO1lBQ1IsVUFBVSxFQUFFLEtBQUs7WUFDakIsUUFBUSxFQUFFLElBQUksR0FBRyxFQUFzQjtTQUMxQyxDQUFDO1FBQ0ssV0FBTSxHQUFHLElBQUksR0FBRyxFQUF3QixDQUFDO1FBQ3pDLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztJQUV2RCxDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQUtuQixZQUFtQixJQUFZLEVBQVMsVUFBbUI7UUFBeEMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFTLGVBQVUsR0FBVixVQUFVLENBQVM7UUFKcEQsWUFBTyxHQUFHLElBQUksS0FBSyxFQUFjLENBQUM7UUFLckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkQsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLFVBQVU7SUFPbkIsWUFBbUIsSUFBWSxFQUFTLFNBQWtCO1FBQXZDLFNBQUksR0FBSixJQUFJLENBQVE7UUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFTO1FBSm5ELGVBQVUsR0FBRyxLQUFLLENBQUM7UUFLdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLG1CQUFtQjtDQVEvQjtBQUVELE1BQU0sT0FBTyxjQUFjO0lBS3ZCLFlBQW1CLElBQVksRUFBUyxLQUFhO1FBQWxDLFNBQUksR0FBSixJQUFJLENBQVE7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBSDlDLGFBQVEsR0FBRztZQUNkLFVBQVUsRUFBRSxFQUFFO1NBQ2pCLENBQUM7SUFHRixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sbUJBQW1CO0lBQzVCLFlBQW1CLElBQVksRUFBUyxJQUFhLEVBQVMsWUFBcUI7UUFBaEUsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFTLFNBQUksR0FBSixJQUFJLENBQVM7UUFBUyxpQkFBWSxHQUFaLFlBQVksQ0FBUztJQUVuRixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sVUFBVTtDQVF0QjtBQUVELE1BQU0sQ0FBTixJQUFZLFFBSVg7QUFKRCxXQUFZLFFBQVE7SUFDaEIseUJBQWEsQ0FBQTtJQUNiLCtCQUFtQixDQUFBO0lBQ25CLG1DQUF1QixDQUFBO0FBQzNCLENBQUMsRUFKVyxRQUFRLEtBQVIsUUFBUSxRQUluQjtBQUVELE1BQU0sT0FBTyxpQkFBaUI7Q0FLN0I7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQUF2QjtRQUNXLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNRTGl0ZU9iamVjdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3FsaXRlJztcblxuaW1wb3J0IHsgTG9jYWxEQlN0b3JlIH0gZnJvbSAnLi9sb2NhbC1kYi1zdG9yZSc7XG5cbmV4cG9ydCBjbGFzcyBEQkluZm8ge1xuICAgIHB1YmxpYyBzY2hlbWEgPSB7XG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBpc0ludGVybmFsOiBmYWxzZSxcbiAgICAgICAgZW50aXRpZXM6IG5ldyBNYXA8c3RyaW5nLCBFbnRpdHlJbmZvPigpXG4gICAgfTtcbiAgICBwdWJsaWMgc3RvcmVzID0gbmV3IE1hcDxzdHJpbmcsIExvY2FsREJTdG9yZT4oKTtcbiAgICBwdWJsaWMgcXVlcmllcyA9IG5ldyBNYXA8c3RyaW5nLCBOYW1lZFF1ZXJ5SW5mbz4oKTtcbiAgICBwdWJsaWMgc3FsaXRlT2JqZWN0OiBTUUxpdGVPYmplY3Q7XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlJbmZvIHtcbiAgICBwdWJsaWMgY29sdW1ucyA9IG5ldyBBcnJheTxDb2x1bW5JbmZvPigpO1xuICAgIHB1YmxpYyBwdWxsQ29uZmlnOiBQdWxsQ29uZmlnO1xuICAgIHB1YmxpYyBwdXNoQ29uZmlnOiBQdXNoQ29uZmlnO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZywgcHVibGljIGVudGl0eU5hbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5lbnRpdHlOYW1lID0gdGhpcy5lbnRpdHlOYW1lIHx8IHRoaXMubmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2x1bW5JbmZvIHtcbiAgICBwdWJsaWMgZ2VuZXJhdG9yVHlwZTogc3RyaW5nO1xuICAgIHB1YmxpYyBzcWxUeXBlOiBzdHJpbmc7XG4gICAgcHVibGljIHByaW1hcnlLZXkgPSBmYWxzZTtcbiAgICBwdWJsaWMgZGVmYXVsdFZhbHVlOiBhbnk7XG4gICAgcHVibGljIGZvcmVpZ25SZWxhdGlvbnM/OiBGb3JlaWduUmVsYXRpb25JbmZvW107XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCBwdWJsaWMgZmllbGROYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZmllbGROYW1lID0gdGhpcy5maWVsZE5hbWUgfHwgdGhpcy5uYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZvcmVpZ25SZWxhdGlvbkluZm8ge1xuICAgIHB1YmxpYyBzb3VyY2VGaWVsZE5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgdGFyZ2V0RW50aXR5OiBzdHJpbmc7XG4gICAgcHVibGljIHRhcmdldFRhYmxlOiBzdHJpbmc7XG4gICAgcHVibGljIHRhcmdldENvbHVtbjogc3RyaW5nO1xuICAgIHB1YmxpYyB0YXJnZXRGaWVsZE5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgdGFyZ2V0UGF0aDogc3RyaW5nO1xuICAgIHB1YmxpYyBkYXRhTWFwcGVyOiBBcnJheTxDb2x1bW5JbmZvPjtcbn1cblxuZXhwb3J0IGNsYXNzIE5hbWVkUXVlcnlJbmZvIHtcbiAgICBwdWJsaWMgcGFyYW1zOiBOYW1lZFF1ZXJ5UGFyYW1JbmZvW107XG4gICAgcHVibGljIHJlc3BvbnNlID0ge1xuICAgICAgICBwcm9wZXJ0aWVzOiBbXVxuICAgIH07XG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZywgcHVibGljIHF1ZXJ5OiBzdHJpbmcpIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5hbWVkUXVlcnlQYXJhbUluZm8ge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBzdHJpbmcsIHB1YmxpYyB0eXBlPzogc3RyaW5nLCBwdWJsaWMgdmFyaWFibGVUeXBlPzogc3RyaW5nKSB7XG5cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQdWxsQ29uZmlnIHtcbiAgICBwdWJsaWMgc2l6ZTogbnVtYmVyO1xuICAgIHB1YmxpYyBxdWVyeTogc3RyaW5nO1xuICAgIHB1YmxpYyBvcmRlckJ5OiBzdHJpbmc7XG4gICAgcHVibGljIG1heE5vT2ZSZWNvcmRzOiBudW1iZXI7XG4gICAgcHVibGljIGRlZmF1bHRUeXBlOiBzdHJpbmc7XG4gICAgcHVibGljIHB1bGxUeXBlOiBQdWxsVHlwZTtcbiAgICBwdWJsaWMgZmlsdGVyOiBPZmZsaW5lRGF0YUZpbHRlcltdO1xufVxuXG5leHBvcnQgZW51bSBQdWxsVHlwZSB7XG4gICAgTElWRSA9ICdMSVZFJyxcbiAgICBCVU5ETEVEID0gJ0JVTkRMRUQnLFxuICAgIEFQUF9TVEFSVCA9ICdBUFBfU1RBUlQnXG59XG5cbmV4cG9ydCBjbGFzcyBPZmZsaW5lRGF0YUZpbHRlciB7XG4gICAgcHVibGljIGF0dHJpYnV0ZU5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgYXR0cmlidXRlVmFsdWU6IGFueTtcbiAgICBwdWJsaWMgYXR0cmlidXRlVHlwZTogc3RyaW5nO1xuICAgIHB1YmxpYyBmaWx0ZXJDb25kaXRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFB1c2hDb25maWcge1xuICAgIHB1YmxpYyBpbnNlcnRFbmFibGVkID0gZmFsc2U7XG4gICAgcHVibGljIHVwZGF0ZUVuYWJsZWQgPSBmYWxzZTtcbiAgICBwdWJsaWMgZGVsZXRlRW5hYmxlZCA9IGZhbHNlO1xuICAgIHB1YmxpYyByZWFkRW5hYmxlZCA9IHRydWU7XG59XG4iXX0=