import { Injectable } from '@angular/core';
import { DeviceFileUploadService } from '@wm/mobile/core';
import { LVService } from '@wm/variables';
export class PushServiceImpl {
    constructor(deviceFileUploadService) {
        this.deviceFileUploadService = deviceFileUploadService;
    }
    // Returns a promise from the observable.
    getPromiseFromObs(cb) {
        return new Promise((resolve, reject) => {
            cb.subscribe(response => {
                if (response && response.type) {
                    resolve(response);
                }
            }, reject);
        });
    }
    push(change) {
        const params = change.params;
        switch (change.service) {
            case 'DatabaseService':
                switch (change.operation) {
                    case 'insertTableData':
                        return this.getPromiseFromObs(LVService.insertTableData(change.params, null, null));
                    case 'insertMultiPartTableData':
                        return this.getPromiseFromObs(LVService.insertMultiPartTableData(change.params, null, null));
                    case 'updateTableData':
                        return this.getPromiseFromObs(LVService.updateTableData(change.params, null, null));
                    case 'updateMultiPartTableData':
                        return this.getPromiseFromObs(LVService.updateMultiPartTableData(change.params, null, null));
                    case 'deleteTableData':
                        return this.getPromiseFromObs(LVService.deleteTableData(change.params, null, null));
                }
            case 'OfflineFileUploadService':
                if (change.operation === 'uploadToServer') {
                    return this.deviceFileUploadService['uploadToServer'].call(this.deviceFileUploadService, params.serverUrl, params.ftOptions.fileKey, params.file, params.ftOptions.fileName, params.params, params.headers);
                }
        }
        return Promise.reject(`${change.service} service with operation ${change.operation} is not supported for push.`);
    }
}
PushServiceImpl.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PushServiceImpl.ctorParameters = () => [
    { type: DeviceFileUploadService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL21vYmlsZS9vZmZsaW5lLyIsInNvdXJjZXMiOlsic2VydmljZXMvcHVzaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUsxQyxNQUFNLE9BQU8sZUFBZTtJQUV4QixZQUNZLHVCQUFnRDtRQUFoRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQ3pELENBQUM7SUFFSix5Q0FBeUM7SUFDakMsaUJBQWlCLENBQUMsRUFBRTtRQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7b0JBQzNCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDckI7WUFDTCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxJQUFJLENBQUMsTUFBYztRQUN0QixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLFFBQVEsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNwQixLQUFLLGlCQUFpQjtnQkFDbEIsUUFBUSxNQUFNLENBQUMsU0FBUyxFQUFFO29CQUN0QixLQUFLLGlCQUFpQjt3QkFDbEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN4RixLQUFLLDBCQUEwQjt3QkFDM0IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2pHLEtBQUssaUJBQWlCO3dCQUNsQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3hGLEtBQUssMEJBQTBCO3dCQUMzQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDakcsS0FBSyxpQkFBaUI7d0JBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDM0Y7WUFDTCxLQUFLLDBCQUEwQjtnQkFDM0IsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLGdCQUFnQixFQUFFO29CQUN2QyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FDdEQsSUFBSSxDQUFDLHVCQUF1QixFQUM1QixNQUFNLENBQUMsU0FBUyxFQUNoQixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFDeEIsTUFBTSxDQUFDLElBQUksRUFDWCxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFDekIsTUFBTSxDQUFDLE1BQU0sRUFDYixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ3ZCO1NBQ1I7UUFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUUsR0FBRyxNQUFNLENBQUMsT0FBTywyQkFBMkIsTUFBTSxDQUFDLFNBQVMsNkJBQTZCLENBQUMsQ0FBQztJQUN0SCxDQUFDOzs7WUEvQ0osVUFBVTs7OztZQUxGLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5pbXBvcnQgeyBEZXZpY2VGaWxlVXBsb2FkU2VydmljZSB9IGZyb20gJ0B3bS9tb2JpbGUvY29yZSc7XG5pbXBvcnQgeyBMVlNlcnZpY2UgfSBmcm9tICdAd20vdmFyaWFibGVzJztcblxuaW1wb3J0IHsgQ2hhbmdlLCBQdXNoU2VydmljZSB9IGZyb20gJy4vY2hhbmdlLWxvZy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFB1c2hTZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIFB1c2hTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGRldmljZUZpbGVVcGxvYWRTZXJ2aWNlOiBEZXZpY2VGaWxlVXBsb2FkU2VydmljZVxuICAgICkge31cblxuICAgIC8vIFJldHVybnMgYSBwcm9taXNlIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgcHJpdmF0ZSBnZXRQcm9taXNlRnJvbU9icyhjYikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY2Iuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcHVzaChjaGFuZ2U6IENoYW5nZSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IGNoYW5nZS5wYXJhbXM7XG4gICAgICAgIHN3aXRjaCAoY2hhbmdlLnNlcnZpY2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGFiYXNlU2VydmljZSc6XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjaGFuZ2Uub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luc2VydFRhYmxlRGF0YSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlRnJvbU9icyhMVlNlcnZpY2UuaW5zZXJ0VGFibGVEYXRhKGNoYW5nZS5wYXJhbXMsIG51bGwsIG51bGwpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zZXJ0TXVsdGlQYXJ0VGFibGVEYXRhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2VGcm9tT2JzKExWU2VydmljZS5pbnNlcnRNdWx0aVBhcnRUYWJsZURhdGEoY2hhbmdlLnBhcmFtcywgbnVsbCwgbnVsbCkpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGVUYWJsZURhdGEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZUZyb21PYnMoTFZTZXJ2aWNlLnVwZGF0ZVRhYmxlRGF0YShjaGFuZ2UucGFyYW1zLCBudWxsLCBudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZU11bHRpUGFydFRhYmxlRGF0YSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlRnJvbU9icyhMVlNlcnZpY2UudXBkYXRlTXVsdGlQYXJ0VGFibGVEYXRhKGNoYW5nZS5wYXJhbXMsIG51bGwsIG51bGwpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlVGFibGVEYXRhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2VGcm9tT2JzKExWU2VydmljZS5kZWxldGVUYWJsZURhdGEoY2hhbmdlLnBhcmFtcywgbnVsbCwgbnVsbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ09mZmxpbmVGaWxlVXBsb2FkU2VydmljZSc6XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5vcGVyYXRpb24gPT09ICd1cGxvYWRUb1NlcnZlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlRmlsZVVwbG9hZFNlcnZpY2VbJ3VwbG9hZFRvU2VydmVyJ10uY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV2aWNlRmlsZVVwbG9hZFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuc2VydmVyVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmZ0T3B0aW9ucy5maWxlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZnRPcHRpb25zLmZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCBgJHtjaGFuZ2Uuc2VydmljZX0gc2VydmljZSB3aXRoIG9wZXJhdGlvbiAke2NoYW5nZS5vcGVyYXRpb259IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHB1c2guYCk7XG4gICAgfVxufVxuIl19