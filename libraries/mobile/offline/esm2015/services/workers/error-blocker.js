const STORE_KEY = 'errorBlockerStore';
export class ErrorBlocker {
    constructor(localDBManagementService) {
        this.localDBManagementService = localDBManagementService;
    }
    preFlush(context) {
        this.errorStore = context.get(STORE_KEY);
    }
    // block all calls related to the error entities
    preCall(change) {
        if (change && change.service === 'DatabaseService') {
            const entityName = change.params.entityName;
            const dataModelName = change.params.dataModelName;
            switch (change.operation) {
                case 'insertTableData':
                case 'insertMultiPartTableData':
                case 'updateTableData':
                case 'updateMultiPartTableData':
                    return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {
                        this.blockCall(store, change, dataModelName, entityName, change.params.data);
                    });
                case 'deleteTableData':
                    return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {
                        this.blockCall(store, change, dataModelName, entityName, change.params);
                    });
            }
        }
    }
    // store error entity id
    postCallSuccess(change) {
        if (change && change.service === 'DatabaseService') {
            const entityName = change.params.entityName;
            const dataModelName = change.params.dataModelName;
            return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {
                const id = change['dataLocalId'] || change.params.data[store.primaryKeyName];
                if (!(_.isUndefined(id) || _.isNull(id))) {
                    this.removeError(dataModelName, entityName, id);
                }
            });
        }
    }
    // store error entity id
    postCallError(change) {
        if (change && change.service === 'DatabaseService') {
            const entityName = change.params.entityName;
            const dataModelName = change.params.dataModelName;
            return this.localDBManagementService.getStore(dataModelName, entityName).then(store => {
                const id = change['dataLocalId'] || (change.params.data && change.params.data[store.primaryKeyName]) || change.params[store.primaryKeyName] || change.params.id;
                if (!(_.isUndefined(id) || _.isNull(id))) {
                    this.recordError(dataModelName, entityName, id);
                }
            });
        }
    }
    /**
     * If there is an earlier call of the object or its relations that got failed, then this call will be
     * marked for discard.
     *
     * @param store LocalDBStore
     * @param change change to block
     * @param dataModelName
     * @param entityName
     * @param data
     */
    blockCall(store, change, dataModelName, entityName, data) {
        if (change.hasError === 0) {
            this.checkForPreviousError(store, change, dataModelName, entityName, data);
            store.entitySchema.columns.forEach(col => {
                if (col.foreignRelations) {
                    col.foreignRelations.some(foreignRelation => {
                        if (data[foreignRelation.sourceFieldName]) {
                            this.blockCall(store, change, dataModelName, foreignRelation.targetEntity, data[foreignRelation.sourceFieldName]);
                        }
                        else if (data[col.fieldName]) {
                            this.checkForPreviousError(store, change, dataModelName, foreignRelation.targetEntity, data, col.fieldName);
                        }
                        return change.hasError === 1;
                    });
                }
            });
        }
    }
    // A helper function to check for earlier failures.
    checkForPreviousError(store, change, dataModelName, entityName, data, key) {
        const primaryKey = key || store.primaryKeyName;
        if (this.hasError(dataModelName, entityName, data[primaryKey])) {
            change.hasError = 1;
            change.errorMessage = `Blocked call due to error in previous call of entity [ ${entityName} ] with id [ ${data[primaryKey]} ]`;
        }
    }
    hasError(dataModelName, entityName, id) {
        if (this.errorStore[dataModelName]
            && this.errorStore[dataModelName][entityName]
            && this.errorStore[dataModelName][entityName][id]) {
            return true;
        }
        return false;
    }
    // Removes entity identifier from error list.
    removeError(dataModelName, entityName, id) {
        if (this.errorStore[dataModelName]
            && this.errorStore[dataModelName][entityName]
            && this.errorStore[dataModelName][entityName][id]) {
            delete this.errorStore[dataModelName][entityName][id];
        }
    }
    // Save error entity identifier.
    recordError(dataModelName, entityName, id) {
        this.errorStore[dataModelName] = this.errorStore[dataModelName] || {};
        this.errorStore[dataModelName][entityName] = this.errorStore[dataModelName][entityName] || {};
        this.errorStore[dataModelName][entityName][id] = true;
    }
}
//# sourceMappingURL=data:application/json;base64,