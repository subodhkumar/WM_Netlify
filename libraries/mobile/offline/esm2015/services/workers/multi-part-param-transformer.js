export class MultiPartParamTransformer {
    constructor(deviceFileService, localDBManagementService) {
        this.deviceFileService = deviceFileService;
        this.localDBManagementService = localDBManagementService;
    }
    postCallSuccess(change) {
        if (change && change.service === 'DatabaseService') {
            switch (change.operation) {
                case 'insertMultiPartTableData':
                case 'updateMultiPartTableData':
                    // clean up files
                    _.forEach(change.params.data, v => {
                        if (_.isObject(v) && v.wmLocalPath) {
                            this.deviceFileService.removeFile(v.wmLocalPath);
                        }
                    });
                    break;
            }
        }
    }
    transformParamsFromMap(change) {
        if (change && change.service === 'DatabaseService') {
            switch (change.operation) {
                case 'insertMultiPartTableData':
                case 'updateMultiPartTableData':
                    return this.localDBManagementService.getStore(change.params.dataModelName, change.params.entityName)
                        .then(store => {
                        // construct Form data
                        return store.deserialize(change.params.data).then(function (formData) {
                            change.params.data = formData;
                        });
                    });
            }
        }
    }
    transformParamsToMap(change) {
        if (change && change.service === 'DatabaseService') {
            switch (change.operation) {
                case 'insertMultiPartTableData':
                case 'updateMultiPartTableData':
                    return this.localDBManagementService.getStore(change.params.dataModelName, change.params.entityName)
                        .then(store => {
                        return store.serialize(change.params.data).then(function (map) {
                            change.params.data = map;
                            /**
                             * As save method called with FormData object, empty row is inserted.
                             * Since FormData is converted to map, update the record details now.
                             */
                            store.save(_.mapValues(map, function (v) {
                                return (_.isObject(v) && v.wmLocalPath) || v;
                            }));
                            return map;
                        });
                    });
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktcGFydC1wYXJhbS10cmFuc2Zvcm1lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9tb2JpbGUvb2ZmbGluZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3dvcmtlcnMvbXVsdGktcGFydC1wYXJhbS10cmFuc2Zvcm1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLE9BQU8seUJBQXlCO0lBRWxDLFlBQ1ksaUJBQW9DLEVBQ3BDLHdCQUFrRDtRQURsRCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7SUFDM0QsQ0FBQztJQUVHLGVBQWUsQ0FBQyxNQUFjO1FBQ2pDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssaUJBQWlCLEVBQUU7WUFDaEQsUUFBUSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUN0QixLQUFLLDBCQUEwQixDQUFDO2dCQUNoQyxLQUFLLDBCQUEwQjtvQkFDM0IsaUJBQWlCO29CQUNqQixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO3dCQUM5QixJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRTs0QkFDaEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7eUJBQ3BEO29CQUNMLENBQUMsQ0FBQyxDQUFDO29CQUNILE1BQU07YUFDYjtTQUNKO0lBQ0wsQ0FBQztJQUVNLHNCQUFzQixDQUFDLE1BQWM7UUFDeEMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxpQkFBaUIsRUFBRTtZQUNoRCxRQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3RCLEtBQUssMEJBQTBCLENBQUM7Z0JBQ2hDLEtBQUssMEJBQTBCO29CQUMzQixPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7eUJBQy9GLElBQUksQ0FBRSxLQUFLLENBQUMsRUFBRTt3QkFDWCxzQkFBc0I7d0JBQ3RCLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLFFBQVE7NEJBQ2hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQzt3QkFDbEMsQ0FBQyxDQUFDLENBQUM7b0JBQ1AsQ0FBQyxDQUFDLENBQUM7YUFDZDtTQUNKO0lBQ0wsQ0FBQztJQUVNLG9CQUFvQixDQUFDLE1BQWM7UUFDdEMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxpQkFBaUIsRUFBRTtZQUNoRCxRQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3RCLEtBQUssMEJBQTBCLENBQUM7Z0JBQ2hDLEtBQUssMEJBQTBCO29CQUMzQixPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7eUJBQy9GLElBQUksQ0FBRSxLQUFLLENBQUMsRUFBRTt3QkFDWCxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHOzRCQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7NEJBQ3pCOzs7K0JBR0c7NEJBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUM7Z0NBQ25DLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ2pELENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ0osT0FBTyxHQUFHLENBQUM7d0JBQ2YsQ0FBQyxDQUFDLENBQUM7b0JBQ1AsQ0FBQyxDQUFDLENBQUM7YUFDZDtTQUNKO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGV2aWNlRmlsZVNlcnZpY2UgfSBmcm9tICdAd20vbW9iaWxlL2NvcmUnO1xuXG5pbXBvcnQgeyBDaGFuZ2UsIFdvcmtlciB9IGZyb20gJy4uL2NoYW5nZS1sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbERCTWFuYWdlbWVudFNlcnZpY2UgfSBmcm9tICcuLi9sb2NhbC1kYi1tYW5hZ2VtZW50LnNlcnZpY2UnO1xuXG5kZWNsYXJlIGNvbnN0IF87XG5cbmV4cG9ydCBjbGFzcyBNdWx0aVBhcnRQYXJhbVRyYW5zZm9ybWVyIGltcGxlbWVudHMgV29ya2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGRldmljZUZpbGVTZXJ2aWNlOiBEZXZpY2VGaWxlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2NhbERCTWFuYWdlbWVudFNlcnZpY2U6IExvY2FsREJNYW5hZ2VtZW50U2VydmljZVxuICAgICkge31cblxuICAgIHB1YmxpYyBwb3N0Q2FsbFN1Y2Nlc3MoY2hhbmdlOiBDaGFuZ2UpIHtcbiAgICAgICAgaWYgKGNoYW5nZSAmJiBjaGFuZ2Uuc2VydmljZSA9PT0gJ0RhdGFiYXNlU2VydmljZScpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY2hhbmdlLm9wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2luc2VydE11bHRpUGFydFRhYmxlRGF0YSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlTXVsdGlQYXJ0VGFibGVEYXRhJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNoYW5nZS5wYXJhbXMuZGF0YSwgdiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc09iamVjdCh2KSAmJiB2LndtTG9jYWxQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXZpY2VGaWxlU2VydmljZS5yZW1vdmVGaWxlKHYud21Mb2NhbFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtUGFyYW1zRnJvbU1hcChjaGFuZ2U6IENoYW5nZSkge1xuICAgICAgICBpZiAoY2hhbmdlICYmIGNoYW5nZS5zZXJ2aWNlID09PSAnRGF0YWJhc2VTZXJ2aWNlJykge1xuICAgICAgICAgICAgc3dpdGNoIChjaGFuZ2Uub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5zZXJ0TXVsdGlQYXJ0VGFibGVEYXRhJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGVNdWx0aVBhcnRUYWJsZURhdGEnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbERCTWFuYWdlbWVudFNlcnZpY2UuZ2V0U3RvcmUoY2hhbmdlLnBhcmFtcy5kYXRhTW9kZWxOYW1lLCBjaGFuZ2UucGFyYW1zLmVudGl0eU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbiggc3RvcmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0cnVjdCBGb3JtIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmUuZGVzZXJpYWxpemUoY2hhbmdlLnBhcmFtcy5kYXRhKS50aGVuKGZ1bmN0aW9uIChmb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UucGFyYW1zLmRhdGEgPSBmb3JtRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRyYW5zZm9ybVBhcmFtc1RvTWFwKGNoYW5nZTogQ2hhbmdlKSB7XG4gICAgICAgIGlmIChjaGFuZ2UgJiYgY2hhbmdlLnNlcnZpY2UgPT09ICdEYXRhYmFzZVNlcnZpY2UnKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoYW5nZS5vcGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdpbnNlcnRNdWx0aVBhcnRUYWJsZURhdGEnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZU11bHRpUGFydFRhYmxlRGF0YSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsREJNYW5hZ2VtZW50U2VydmljZS5nZXRTdG9yZShjaGFuZ2UucGFyYW1zLmRhdGFNb2RlbE5hbWUsIGNoYW5nZS5wYXJhbXMuZW50aXR5TmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCBzdG9yZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLnNlcmlhbGl6ZShjaGFuZ2UucGFyYW1zLmRhdGEpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UucGFyYW1zLmRhdGEgPSBtYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBBcyBzYXZlIG1ldGhvZCBjYWxsZWQgd2l0aCBGb3JtRGF0YSBvYmplY3QsIGVtcHR5IHJvdyBpcyBpbnNlcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogU2luY2UgRm9ybURhdGEgaXMgY29udmVydGVkIHRvIG1hcCwgdXBkYXRlIHRoZSByZWNvcmQgZGV0YWlscyBub3cuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZS5zYXZlKF8ubWFwVmFsdWVzKG1hcCwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXy5pc09iamVjdCh2KSAmJiB2LndtTG9jYWxQYXRoKSB8fCB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==