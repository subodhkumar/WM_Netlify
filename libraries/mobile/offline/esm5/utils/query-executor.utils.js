import { from } from 'rxjs';
import { WM_LOCAL_OFFLINE_CALL } from './utils';
var NUMBER_REGEX = /^\d+(\.\d+)?$/;
var isOfflineBehaviourAdded = false;
var NamedQueryExecutionOfflineBehaviour = /** @class */ (function () {
    function NamedQueryExecutionOfflineBehaviour(changeLogService, httpService, localDBManagementService, networkService) {
        this.changeLogService = changeLogService;
        this.httpService = httpService;
        this.localDBManagementService = localDBManagementService;
        this.networkService = networkService;
    }
    NamedQueryExecutionOfflineBehaviour.prototype.add = function () {
        var _this = this;
        if (isOfflineBehaviourAdded) {
            return;
        }
        isOfflineBehaviourAdded = true;
        var orig = this.httpService.sendCallAsObservable;
        this.httpService.sendCallAsObservable = function (reqParams, params) {
            if (!params && _.get(reqParams, 'url')) {
                params = { url: reqParams.url };
            }
            if (!_this.networkService.isConnected() && params.url.indexOf('/queryExecutor/') > 0) {
                return from(_this.executeLocally(params));
            }
            else {
                return orig.call(_this.httpService, reqParams, params);
            }
        };
    };
    NamedQueryExecutionOfflineBehaviour.prototype.executeLocally = function (params) {
        var _this = this;
        var url = params.url, hasUrlParams = url.indexOf('?') > 0, dbName = this.substring(url, 'services/', '/queryExecutor'), queryName = this.substring(url, 'queries/', hasUrlParams ? '?' : undefined), urlParams = hasUrlParams ? this.getHttpParamMap(this.substring(url, '?', undefined)) : {}, dataParams = this.getHttpParamMap(params.dataParams), queryParams = _.extend(urlParams, dataParams);
        return this.localDBManagementService.executeNamedQuery(dbName, queryName, queryParams)
            .then(function (result) {
            var rows = result.rows;
            if (result.rowsAffected) {
                return _this.changeLogService.add('WebService', 'invokeJavaService', params)
                    .then(function () { return result.rowsAffected; });
            }
            else {
                return {
                    type: WM_LOCAL_OFFLINE_CALL,
                    body: {
                        totalPages: rows && rows.length > 0 ? 1 : 0,
                        totalElements: rows.length,
                        first: true,
                        sort: null,
                        numberOfElements: rows.length,
                        last: true,
                        size: params.size,
                        number: 0,
                        content: rows
                    }
                };
            }
        });
    };
    NamedQueryExecutionOfflineBehaviour.prototype.substring = function (source, start, end) {
        if (start) {
            var startIndex = source.indexOf(start) + start.length, endIndex = end ? source.indexOf(end) : undefined;
            return source.substring(startIndex, endIndex);
        }
        return undefined;
    };
    NamedQueryExecutionOfflineBehaviour.prototype.getHttpParamMap = function (str) {
        var result = {};
        if (str) {
            str = decodeURIComponent(str);
            str.split('&').forEach(function (c) {
                var csplits = c.split('=');
                if (_.isEmpty(_.trim(csplits[1])) || !NUMBER_REGEX.test(csplits[1])) {
                    result[csplits[0]] = csplits[1];
                }
                else {
                    result[csplits[0]] = parseInt(csplits[1], 10);
                }
            });
        }
        return result;
    };
    return NamedQueryExecutionOfflineBehaviour;
}());
export { NamedQueryExecutionOfflineBehaviour };
//# sourceMappingURL=data:application/json;base64,