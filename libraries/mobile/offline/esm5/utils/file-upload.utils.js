var isOfflineBehaviourAdded = false;
var FileUploadOfflineBehaviour = /** @class */ (function () {
    function FileUploadOfflineBehaviour(changeLogService, deviceFileService, deviceFileUploadService, file, networkService, uploadDir) {
        this.changeLogService = changeLogService;
        this.deviceFileService = deviceFileService;
        this.deviceFileUploadService = deviceFileUploadService;
        this.file = file;
        this.networkService = networkService;
        this.uploadDir = uploadDir;
    }
    FileUploadOfflineBehaviour.prototype.add = function () {
        var _this = this;
        if (isOfflineBehaviourAdded) {
            return;
        }
        isOfflineBehaviourAdded = true;
        var orig = this.deviceFileUploadService.upload;
        this.deviceFileUploadService['uploadToServer'] = orig;
        this.deviceFileUploadService.upload = function (url, fileParamName, localPath, fileName, params, headers) {
            if (_this.networkService.isConnected()) {
                return orig.call(_this.deviceFileUploadService, url, fileParamName, localPath, fileName, params, headers);
            }
            else {
                return _this.uploadLater(url, fileParamName, localPath, fileName, params, headers).then(function (response) {
                    return {
                        text: JSON.stringify(response),
                        headers: null,
                        response: response
                    };
                });
            }
        };
    };
    FileUploadOfflineBehaviour.prototype.uploadLater = function (url, fileParamName, localPath, fileName, params, headers) {
        var _this = this;
        var i = localPath.lastIndexOf('/'), soureDir = localPath.substring(0, i), soureFile = localPath.substring(i + 1), destFile = this.deviceFileService.appendToFileName(soureFile), filePath = this.uploadDir + '/' + destFile;
        return this.file.copyFile(soureDir, soureFile, this.uploadDir, destFile)
            .then(function () {
            return _this.changeLogService.add('OfflineFileUploadService', 'uploadToServer', {
                file: filePath,
                ftOptions: {
                    fileKey: fileParamName,
                    fileName: fileName
                },
                params: params,
                headers: headers,
                serverUrl: url,
                deleteOnUpload: true
            });
        }).then(function () {
            return [{
                    fileName: soureFile,
                    path: filePath,
                    length: 0,
                    success: true,
                    inlinePath: filePath + '?inline'
                }];
        });
    };
    return FileUploadOfflineBehaviour;
}());
export { FileUploadOfflineBehaviour };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQudXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vbW9iaWxlL29mZmxpbmUvIiwic291cmNlcyI6WyJ1dGlscy9maWxlLXVwbG9hZC51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxJQUFJLHVCQUF1QixHQUFHLEtBQUssQ0FBQztBQUVwQztJQUVJLG9DQUNZLGdCQUFrQyxFQUNsQyxpQkFBb0MsRUFDcEMsdUJBQWdELEVBQ2hELElBQVUsRUFDVixjQUE4QixFQUM5QixTQUFpQjtRQUxqQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1YsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGNBQVMsR0FBVCxTQUFTLENBQVE7SUFHN0IsQ0FBQztJQUVNLHdDQUFHLEdBQVY7UUFBQSxpQkFvQkM7UUFuQkcsSUFBSSx1QkFBdUIsRUFBRTtZQUN6QixPQUFPO1NBQ1Y7UUFDRCx1QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQztRQUNqRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDdEQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sR0FBRyxVQUFDLEdBQVcsRUFBRSxhQUFxQixFQUFFLFNBQWlCLEVBQUUsUUFBaUIsRUFBRSxNQUFZLEVBQUUsT0FBYTtZQUN4SSxJQUFJLEtBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQzthQUM1RztpQkFBTTtnQkFDSCxPQUFPLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRO29CQUMzRixPQUFPO3dCQUNILElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzt3QkFDOUIsT0FBTyxFQUFFLElBQUk7d0JBQ2IsUUFBUSxFQUFFLFFBQVE7cUJBQ3JCLENBQUM7Z0JBQ04sQ0FBQyxDQUFDLENBQUM7YUFDTjtRQUNMLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFTSxnREFBVyxHQUFsQixVQUFtQixHQUFXLEVBQUUsYUFBcUIsRUFBRSxTQUFpQixFQUFFLFFBQWlCLEVBQUUsTUFBWSxFQUFFLE9BQWE7UUFBeEgsaUJBNEJDO1FBM0JHLElBQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQ2hDLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDcEMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUN0QyxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUM3RCxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQzthQUNuRSxJQUFJLENBQUM7WUFDRixPQUFPLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBQzNFLElBQUksRUFBRSxRQUFRO2dCQUNkLFNBQVMsRUFBRTtvQkFDUCxPQUFPLEVBQUUsYUFBYTtvQkFDdEIsUUFBUSxFQUFFLFFBQVE7aUJBQ3JCO2dCQUNELE1BQU0sRUFBRSxNQUFNO2dCQUNkLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixTQUFTLEVBQUUsR0FBRztnQkFDZCxjQUFjLEVBQUUsSUFBSTthQUN2QixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDSixPQUFPLENBQUM7b0JBQ0osUUFBUSxFQUFFLFNBQVM7b0JBQ25CLElBQUksRUFBRSxRQUFRO29CQUNkLE1BQU0sRUFBRSxDQUFDO29CQUNULE9BQU8sRUFBRSxJQUFJO29CQUNiLFVBQVUsRUFBRSxRQUFRLEdBQUcsU0FBUztpQkFDbkMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQUFDLEFBaEVELElBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlsZSc7XG5cbmltcG9ydCB7IERldmljZUZpbGVTZXJ2aWNlLCBEZXZpY2VGaWxlVXBsb2FkU2VydmljZSwgSVVwbG9hZFJlc3BvbnNlLCBOZXR3b3JrU2VydmljZSwgVXBsb2FkUmVxdWVzdCB9IGZyb20gJ0B3bS9tb2JpbGUvY29yZSc7XG5cbmltcG9ydCB7IENoYW5nZUxvZ1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jaGFuZ2UtbG9nLnNlcnZpY2UnO1xuXG5sZXQgaXNPZmZsaW5lQmVoYXZpb3VyQWRkZWQgPSBmYWxzZTtcblxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWRPZmZsaW5lQmVoYXZpb3VyIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNoYW5nZUxvZ1NlcnZpY2U6IENoYW5nZUxvZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZGV2aWNlRmlsZVNlcnZpY2U6IERldmljZUZpbGVTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGRldmljZUZpbGVVcGxvYWRTZXJ2aWNlOiBEZXZpY2VGaWxlVXBsb2FkU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmaWxlOiBGaWxlLFxuICAgICAgICBwcml2YXRlIG5ldHdvcmtTZXJ2aWNlOiBOZXR3b3JrU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB1cGxvYWREaXI6IHN0cmluZ1xuICAgICkge1xuXG4gICAgfVxuXG4gICAgcHVibGljIGFkZCgpIHtcbiAgICAgICAgaWYgKGlzT2ZmbGluZUJlaGF2aW91ckFkZGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXNPZmZsaW5lQmVoYXZpb3VyQWRkZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCBvcmlnID0gdGhpcy5kZXZpY2VGaWxlVXBsb2FkU2VydmljZS51cGxvYWQ7XG4gICAgICAgIHRoaXMuZGV2aWNlRmlsZVVwbG9hZFNlcnZpY2VbJ3VwbG9hZFRvU2VydmVyJ10gPSBvcmlnO1xuICAgICAgICB0aGlzLmRldmljZUZpbGVVcGxvYWRTZXJ2aWNlLnVwbG9hZCA9ICh1cmw6IHN0cmluZywgZmlsZVBhcmFtTmFtZTogc3RyaW5nLCBsb2NhbFBhdGg6IHN0cmluZywgZmlsZU5hbWU/OiBzdHJpbmcsIHBhcmFtcz86IGFueSwgaGVhZGVycz86IGFueSk6IFByb21pc2U8SVVwbG9hZFJlc3BvbnNlPiA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5uZXR3b3JrU2VydmljZS5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWcuY2FsbCh0aGlzLmRldmljZUZpbGVVcGxvYWRTZXJ2aWNlLCB1cmwsIGZpbGVQYXJhbU5hbWUsIGxvY2FsUGF0aCwgZmlsZU5hbWUsIHBhcmFtcywgaGVhZGVycyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZExhdGVyKHVybCwgZmlsZVBhcmFtTmFtZSwgbG9jYWxQYXRoLCBmaWxlTmFtZSwgcGFyYW1zLCBoZWFkZXJzKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBsb2FkTGF0ZXIodXJsOiBzdHJpbmcsIGZpbGVQYXJhbU5hbWU6IHN0cmluZywgbG9jYWxQYXRoOiBzdHJpbmcsIGZpbGVOYW1lPzogc3RyaW5nLCBwYXJhbXM/OiBhbnksIGhlYWRlcnM/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBpID0gbG9jYWxQYXRoLmxhc3RJbmRleE9mKCcvJyksXG4gICAgICAgICAgICBzb3VyZURpciA9IGxvY2FsUGF0aC5zdWJzdHJpbmcoMCwgaSksXG4gICAgICAgICAgICBzb3VyZUZpbGUgPSBsb2NhbFBhdGguc3Vic3RyaW5nKGkgKyAxKSxcbiAgICAgICAgICAgIGRlc3RGaWxlID0gdGhpcy5kZXZpY2VGaWxlU2VydmljZS5hcHBlbmRUb0ZpbGVOYW1lKHNvdXJlRmlsZSksXG4gICAgICAgICAgICBmaWxlUGF0aCA9IHRoaXMudXBsb2FkRGlyICsgJy8nICsgZGVzdEZpbGU7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGUuY29weUZpbGUoc291cmVEaXIsIHNvdXJlRmlsZSwgdGhpcy51cGxvYWREaXIsIGRlc3RGaWxlKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYW5nZUxvZ1NlcnZpY2UuYWRkKCdPZmZsaW5lRmlsZVVwbG9hZFNlcnZpY2UnLCAndXBsb2FkVG9TZXJ2ZXInLCB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGU6IGZpbGVQYXRoLFxuICAgICAgICAgICAgICAgICAgICBmdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVLZXk6IGZpbGVQYXJhbU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlclVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVPblVwbG9hZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBzb3VyZUZpbGUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGZpbGVQYXRoLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlubGluZVBhdGg6IGZpbGVQYXRoICsgJz9pbmxpbmUnXG4gICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=