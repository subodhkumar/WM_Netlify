var STORE_KEY = 'errorBlockerStore';
var ErrorBlocker = /** @class */ (function () {
    function ErrorBlocker(localDBManagementService) {
        this.localDBManagementService = localDBManagementService;
    }
    ErrorBlocker.prototype.preFlush = function (context) {
        this.errorStore = context.get(STORE_KEY);
    };
    // block all calls related to the error entities
    ErrorBlocker.prototype.preCall = function (change) {
        var _this = this;
        if (change && change.service === 'DatabaseService') {
            var entityName_1 = change.params.entityName;
            var dataModelName_1 = change.params.dataModelName;
            switch (change.operation) {
                case 'insertTableData':
                case 'insertMultiPartTableData':
                case 'updateTableData':
                case 'updateMultiPartTableData':
                    return this.localDBManagementService.getStore(dataModelName_1, entityName_1).then(function (store) {
                        _this.blockCall(store, change, dataModelName_1, entityName_1, change.params.data);
                    });
                case 'deleteTableData':
                    return this.localDBManagementService.getStore(dataModelName_1, entityName_1).then(function (store) {
                        _this.blockCall(store, change, dataModelName_1, entityName_1, change.params);
                    });
            }
        }
    };
    // store error entity id
    ErrorBlocker.prototype.postCallSuccess = function (change) {
        var _this = this;
        if (change && change.service === 'DatabaseService') {
            var entityName_2 = change.params.entityName;
            var dataModelName_2 = change.params.dataModelName;
            return this.localDBManagementService.getStore(dataModelName_2, entityName_2).then(function (store) {
                var id = change['dataLocalId'] || change.params.data[store.primaryKeyName];
                if (!(_.isUndefined(id) || _.isNull(id))) {
                    _this.removeError(dataModelName_2, entityName_2, id);
                }
            });
        }
    };
    // store error entity id
    ErrorBlocker.prototype.postCallError = function (change) {
        var _this = this;
        if (change && change.service === 'DatabaseService') {
            var entityName_3 = change.params.entityName;
            var dataModelName_3 = change.params.dataModelName;
            return this.localDBManagementService.getStore(dataModelName_3, entityName_3).then(function (store) {
                var id = change['dataLocalId'] || (change.params.data && change.params.data[store.primaryKeyName]) || change.params[store.primaryKeyName] || change.params.id;
                if (!(_.isUndefined(id) || _.isNull(id))) {
                    _this.recordError(dataModelName_3, entityName_3, id);
                }
            });
        }
    };
    /**
     * If there is an earlier call of the object or its relations that got failed, then this call will be
     * marked for discard.
     *
     * @param store LocalDBStore
     * @param change change to block
     * @param dataModelName
     * @param entityName
     * @param data
     */
    ErrorBlocker.prototype.blockCall = function (store, change, dataModelName, entityName, data) {
        var _this = this;
        if (change.hasError === 0) {
            this.checkForPreviousError(store, change, dataModelName, entityName, data);
            store.entitySchema.columns.forEach(function (col) {
                if (col.foreignRelations) {
                    col.foreignRelations.some(function (foreignRelation) {
                        if (data[foreignRelation.sourceFieldName]) {
                            _this.blockCall(store, change, dataModelName, foreignRelation.targetEntity, data[foreignRelation.sourceFieldName]);
                        }
                        else if (data[col.fieldName]) {
                            _this.checkForPreviousError(store, change, dataModelName, foreignRelation.targetEntity, data, col.fieldName);
                        }
                        return change.hasError === 1;
                    });
                }
            });
        }
    };
    // A helper function to check for earlier failures.
    ErrorBlocker.prototype.checkForPreviousError = function (store, change, dataModelName, entityName, data, key) {
        var primaryKey = key || store.primaryKeyName;
        if (this.hasError(dataModelName, entityName, data[primaryKey])) {
            change.hasError = 1;
            change.errorMessage = "Blocked call due to error in previous call of entity [ " + entityName + " ] with id [ " + data[primaryKey] + " ]";
        }
    };
    ErrorBlocker.prototype.hasError = function (dataModelName, entityName, id) {
        if (this.errorStore[dataModelName]
            && this.errorStore[dataModelName][entityName]
            && this.errorStore[dataModelName][entityName][id]) {
            return true;
        }
        return false;
    };
    // Removes entity identifier from error list.
    ErrorBlocker.prototype.removeError = function (dataModelName, entityName, id) {
        if (this.errorStore[dataModelName]
            && this.errorStore[dataModelName][entityName]
            && this.errorStore[dataModelName][entityName][id]) {
            delete this.errorStore[dataModelName][entityName][id];
        }
    };
    // Save error entity identifier.
    ErrorBlocker.prototype.recordError = function (dataModelName, entityName, id) {
        this.errorStore[dataModelName] = this.errorStore[dataModelName] || {};
        this.errorStore[dataModelName][entityName] = this.errorStore[dataModelName][entityName] || {};
        this.errorStore[dataModelName][entityName][id] = true;
    };
    return ErrorBlocker;
}());
export { ErrorBlocker };
//# sourceMappingURL=data:application/json;base64,