import { noop } from '@wm/core';
var STORE_KEY = 'offlineFileUpload';
var FileHandler = /** @class */ (function () {
    function FileHandler() {
        this.logger = window.console;
    }
    FileHandler.prototype.preFlush = function (context) {
        this.fileStore = context.get(STORE_KEY);
    };
    /**
     * Replaces all local paths with the remote path using mappings created during 'uploadToServer'.
     */
    FileHandler.prototype.preCall = function (change) {
        var _this = this;
        if (change.service === 'DatabaseService') {
            change.params.data = _.mapValues(change.params.data, function (v) {
                var remoteUrl = _this.fileStore[v];
                if (remoteUrl) {
                    _this.logger.debug('swapped file path from %s -> %s', v, remoteUrl);
                    return remoteUrl;
                }
                return v;
            });
        }
    };
    FileHandler.prototype.postCallSuccess = function (change, response) {
        if (change.service === 'OfflineFileUploadService'
            && change.operation === 'uploadToServer') {
            var remoteFile = JSON.parse(response[0].text)[0];
            /*
             * A mapping will be created between local path and remote path.
             * This will be used to resolve local paths in entities.
             */
            this.fileStore[change.params.file] = remoteFile.path;
            this.fileStore[change.params.file + '?inline'] = remoteFile.inlinePath;
        }
    };
    return FileHandler;
}());
export { FileHandler };
var UploadedFilesImportAndExportService = /** @class */ (function () {
    function UploadedFilesImportAndExportService(changeLogService, deviceFileService, localDBManagementService, file) {
        this.changeLogService = changeLogService;
        this.deviceFileService = deviceFileService;
        this.localDBManagementService = localDBManagementService;
        this.file = file;
    }
    UploadedFilesImportAndExportService.prototype.preExport = function (folderToExport, meta) {
        // copy offline uploads
        var uploadFullPath = this.deviceFileService.getUploadDirectory(), lastIndexOfSep = uploadFullPath.lastIndexOf('/'), uploadParentDir = uploadFullPath.substring(0, lastIndexOfSep + 1), uploadDirName = uploadFullPath.substring(lastIndexOfSep + 1);
        meta.uploadDir = uploadFullPath;
        return this.file.copyDir(uploadParentDir, uploadDirName, folderToExport, 'uploads');
    };
    UploadedFilesImportAndExportService.prototype.postImport = function (importedFolder, meta) {
        var _this = this;
        var uploadFullPath = this.deviceFileService.getUploadDirectory(), lastIndexOfSep = uploadFullPath.lastIndexOf('/'), uploadParentDir = uploadFullPath.substring(0, lastIndexOfSep + 1), uploadDirName = uploadFullPath.substring(lastIndexOfSep + 1);
        this.uploadDir = uploadFullPath;
        return this.file.checkDir(importedFolder, 'uploads')
            .then(function () {
            return _this.deviceFileService.removeDir(uploadFullPath)
                .then(function () { return _this.file.copyDir(importedFolder, 'uploads', uploadParentDir, uploadDirName); })
                .then(function () { return _this.updateChanges(meta); });
        }, noop);
    };
    /**
     * returns back the changes that were logged.
     * @param page page number
     * @param size size of page
     * @returns {*}
     */
    UploadedFilesImportAndExportService.prototype.getChanges = function (page, size) {
        return this.changeLogService.getStore().then(function (strore) {
            return (strore.filter([], 'id', {
                offset: (page - 1) * size,
                limit: size
            }));
        });
    };
    /**
     * If this is a database change, then it will replace old upload directory with the current upload directory
     * and its corresponding owner object, if  it has primary key.
     *
     * @param change
     * @param oldUploadDir
     * @param uploadDir
     * @returns {*}
     */
    UploadedFilesImportAndExportService.prototype.updateDBChange = function (change, oldUploadDir, uploadDir) {
        var _this = this;
        var modifiedProperties = {}, entityName = change.params.entityName, dataModelName = change.params.dataModelName;
        change.params.data = _.mapValues(change.params.data, function (v, k) {
            var mv = v, isModified = false;
            if (_.isString(v)) {
                mv = _.replace(v, oldUploadDir, uploadDir);
                isModified = !_.isEqual(mv, v);
            }
            else if (_.isObject(v) && v.wmLocalPath) {
                // insertMultiPartData and updateMultiPartData
                mv = _.replace(v.wmLocalPath, oldUploadDir, uploadDir);
                isModified = !_.isEqual(mv, v.wmLocalPath);
            }
            if (isModified) {
                modifiedProperties[k] = mv;
            }
            return mv;
        });
        if (!_.isEmpty(modifiedProperties)) {
            this.localDBManagementService.getStore(dataModelName, entityName)
                .then(function (store) {
                // If there is a primary for the entity, then update actual row with the modifications
                if (store.primaryKeyField && store.primaryKeyField.generatorType === 'identity') {
                    var primaryKeyName = store.primaryKeyName;
                    var primaryKey = change.params.data[primaryKeyName];
                    return store.get(primaryKey)
                        .then(function (obj) { return store.save(_.assignIn(obj, modifiedProperties)); });
                }
            }).then(function () {
                change.params = JSON.stringify(change.params);
                return _this.changeLogService.getStore().then(function (store) { return store.save(change); });
            });
        }
    };
    /**
     * This function check this change to update old upload directory path.
     *
     * @param change
     * @param metaInfo
     * @returns {*}
     */
    UploadedFilesImportAndExportService.prototype.updateChange = function (change, metaInfo) {
        change.params = JSON.parse(change.params);
        if (change.service === 'OfflineFileUploadService'
            && change.operation === 'uploadToServer') {
            change.params.file = _.replace(change.params.file, metaInfo.uploadDir, this.uploadDir);
            change.params = JSON.stringify(change.params);
            return this.changeLogService.getStore().then(function (store) { return store.save(change); });
        }
        if (change.service === 'DatabaseService') {
            return this.updateDBChange(change, metaInfo.uploadDir, this.uploadDir);
        }
    };
    /**
     * This function will visit all the changes and modify them, if necessary.
     * @param metaInfo
     * @param page
     * @returns {*}
     */
    UploadedFilesImportAndExportService.prototype.updateChanges = function (metaInfo, page) {
        var _this = this;
        if (page === void 0) { page = 1; }
        var size = 10;
        return this.getChanges(page, size)
            .then(function (changes) {
            if (changes && changes.length > 0) {
                return Promise.all(changes.map(function (change) { return _this.updateChange(change, metaInfo); }));
            }
        }).then(function (result) {
            if (result && result.length === size) {
                return _this.updateChanges(metaInfo, page + 1);
            }
        });
    };
    return UploadedFilesImportAndExportService;
}());
export { UploadedFilesImportAndExportService };
//# sourceMappingURL=data:application/json;base64,