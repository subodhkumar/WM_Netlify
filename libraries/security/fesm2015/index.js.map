{"version":3,"file":"index.js.map","sources":["ng://@wm/security/security.service.ts","ng://@wm/security/security.module.ts","ng://@wm/security/index.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AbstractHttpService, App, getClonedObject, getWmProjectProperties, hasCordova, triggerFn } from '@wm/core';\n\ndeclare const _;\n\n// Todo[Shubham]: Move below constants to a common file\nconst XSRF_COOKIE_NAME = 'wm_xsrf_token',\n    isApplicationType = true;\n\n@Injectable()\nexport class SecurityService {\n    config;\n    lastLoggedInUser;\n    loggedInUser;\n    loadPromise: Promise<any>;\n    requestQueue: any = {};\n\n    constructor(\n        private injector: Injector,\n        private $http: AbstractHttpService,\n        private routerService: Router,\n        private activatedRoute: ActivatedRoute,\n        private _location: Location\n    ) {}\n\n    isLoaded() {\n        return this.config;\n    }\n\n    get() {\n        return this.config;\n    }\n\n    load() {\n        if(this.loadPromise) {return this.loadPromise;}\n        this.loadPromise = new Promise((resolve, reject) => {\n                this.$http.send({'url': './services/security/info', 'method': 'GET'}).then((response) => {\n                    this.config = response.body;\n                    this.lastLoggedInUser = getClonedObject(this.loggedInUser);\n                    this.loggedInUser = this.config.userInfo;\n                    resolve(response.body);\n                }).catch((err)=>{\n                    reject(err);\n                }).finally(()=>{\n                    this.loadPromise = null;\n                });\n        });\n        return this.loadPromise;\n    }\n\n    /**\n     * gets the security config from the deployed app (backend call)\n     * @param success\n     * @param error\n     */\n    getWebConfig(success, error) {\n        if (this.get()) {\n            // if already fetched, return it\n            triggerFn(success, this.get());\n            return;\n        }\n        this.load()\n            .then(config => {\n                triggerFn(success, config);\n            }, error);\n    }\n\n    /**\n     * Returns security config\n     * @param successCallback\n     * @param failureCallback\n     */\n    getConfig(successCallback, failureCallback) {\n        function invokeQueuedCallbacks(id, method, data) {\n            _.forEach(this.requestQueue[id], fn => triggerFn(fn[method], data));\n            this.requestQueue[id] = null;\n        }\n\n        function onSuccess(config) {\n            config.homePage = getWmProjectProperties().homePage;\n            if (config.userInfo) {\n                // Backend returns landingPage instead of homePage, hence this statement(for consistency)\n                // config.userInfo.homePage = config.userInfo.landingPage;\n            }\n            this.config = config;\n            this.lastLoggedInUser = getClonedObject(this.loggedInUser);\n            this.loggedInUser = config.userInfo;\n            invokeQueuedCallbacks.call(this, 'config', 'success', this.get());\n        }\n\n        function onError(error) {\n            /*if ($rootScope.isMobileApplicationType) {\n             this.config = {\n             'securityEnabled': false,\n             'authenticated': false,\n             'homePage': _WM_APP_PROPERTIES.homePage,\n             'userInfo': null,\n             'login': null\n             };\n             invokeQueuedCallbacks('config', 'success', this.get());\n             } else {*/\n            invokeQueuedCallbacks.call(this, 'config', 'error', error);\n            // }\n        }\n\n        if (this.get()) {\n            // if already fetched, return it\n            triggerFn(successCallback, this.get());\n            return;\n        }\n\n        // Queue check, if same queue is already in progress, do not send another request\n        this.requestQueue.config = this.requestQueue.config || [];\n        this.requestQueue.config.push({\n            success: successCallback,\n            error: failureCallback\n        });\n        if (this.requestQueue.config.length > 1) {\n            return;\n        }\n\n        if (!hasCordova()) {\n            // for web project, return config returned from backend API call.\n            this.getWebConfig(onSuccess.bind(this), onError.bind(this));\n        }\n        /* else {\n         /!*\n         * for mobile app, first get the mobile config (saved in the apk)\n         * - if security not enabled, just return mobile config (no backend call required)\n         * - else, get Web config (will be  the same API hit for login) and merge the config with _mobileconfig\n         *!/\n         getMobileConfig(function (mobileconfig) {\n         if (!mobileconfig.securityEnabled) {\n         onSuccess(mobileconfig);\n         } else {\n         getWebConfig(function (config) {\n         config = mergeWebAndMobileConfig(config);\n         onSuccess(config);\n         }, function () {onSuccess(mobileconfig); });\n         }\n         }, onError);\n         }*/\n    }\n\n    getLastLoggedInUsername() {\n        return this.lastLoggedInUser && this.lastLoggedInUser.userName;\n    }\n\n    /**\n     * Returns the current page name\n     * @returns {string}\n     */\n    getCurrentRoutePage() {\n        const p = this._location.path();\n        let lIndex = p.indexOf('?');\n        lIndex = lIndex === -1 ? p.length : lIndex - 1;\n        return p.substr(1, lIndex); // ignore the query params\n    }\n\n    /**\n     * Returns Query params for specified param name in current Route\n     * @param paramName, the param name whose query param value is to be retrieved\n     * @returns {any}\n     */\n    getCurrentRouteQueryParam(paramName) {\n        let paramVal;\n        this.activatedRoute.queryParams.subscribe(params => {\n            paramVal = params[paramName];\n        });\n        return paramVal;\n    }\n\n    isNoPageLoaded() {\n        return !_.isEmpty(this.getCurrentRoutePage());\n    }\n\n    getPageByLoggedInUser() {\n        const that = this;\n        return new Promise((resolve) => {\n            let page;\n            if (!isApplicationType) {\n                if (that.isNoPageLoaded()) {\n                    page = getWmProjectProperties().homePage;\n                    resolve(page);\n                }\n            } else {\n                that.getConfig((config) => {\n                    if (config.securityEnabled && config.authenticated) {\n                        page = config.userInfo.landingPage || getWmProjectProperties().homePage;\n                        // override the default xsrf cookie name and xsrf header names with WaveMaker specific values\n                        if (that.isXsrfEnabled()) {\n                            // this.$http.defaults.xsrfCookieName = XSRF_COOKIE;\n                            // this.$http.defaults.xsrfHeaderName = config.csrfHeaderName;\n                        }\n                    } else {\n                        page = getWmProjectProperties().homePage;\n                    }\n                    resolve(page);\n                }, function () {\n                    resolve(getWmProjectProperties().homePage);\n                });\n            }\n        });\n    }\n\n    /**\n     * Loads the App page as follows:\n     * Security disabled:\n     *      - Home page\n     * Security enabled:\n     *      - User is logged in, respective landing page is loaded\n     *      - Not logged in:\n     *          - Home page is public, loads the home page\n     *          - Home page not public, Login page(in config) is loaded\n     * @param forcePageLoad\n     * @returns {Promise<T>}\n     */\n    loadPageByUserRole(forcePageLoad?) {\n        const that = this;\n        return this.getPageByLoggedInUser().then(page => {\n            if (that.isNoPageLoaded() || forcePageLoad) {\n                // Reload the page when current page and post login landing page are same\n                if (that.getCurrentRoutePage() === page) {\n                    (window.location as any).reload();\n                } else {\n                    that.routerService.navigate([`/${page}`]);\n                }\n            }\n        });\n    }\n\n    /**\n     * Navigates to the current user's homePage based on the config in SecurityService\n     * Assumption is the SecurityService is updated with the latest security config before making call to this function\n     */\n    navigateOnLogin() {\n        this.loadPageByUserRole(true);\n    }\n\n    /**\n     * Gets the page which needs to be redirected to on successful login\n     * @param config,\n     * @param page, page name for redirection\n     * @returns {any|string}\n     */\n    getRedirectPage(config, page?) {\n        const homePage = getWmProjectProperties().homePage,\n            loginPage = _.get(config, 'loginConfig.pageName');\n        let prevRedirectPage,\n            redirectPage = page || this.getCurrentRoutePage();\n\n        // if user is already on Home page or Login page, they should not be redirected to that page, hence return undefined\n        if (redirectPage === homePage || redirectPage === loginPage) {\n            /*\n             * find previous redirect page from URL, if exists, user should redirect to that page.\n             * USE CASE:\n             *  user is on http://localhost:8080/app/#/Login?redirectTo=page\n             *  a variable call fails resulting 401\n             *  in this case, redirectTo page should be 'page' and not undefined\n             */\n            prevRedirectPage = this.getCurrentRouteQueryParam('redirectTo');\n            redirectPage = !_.isEmpty(prevRedirectPage) ? prevRedirectPage : undefined;\n        }\n\n        return redirectPage;\n    }\n\n    /**\n     * Returns all the query params(including page params and redirect to params) associated with redirected page\n     */\n    getRedirectedRouteQueryParams() {\n        let queryParams = {};\n        this.activatedRoute.queryParams.subscribe((paramVal) => {\n            _.forEach(paramVal, (val, key) => {\n                queryParams[key] = val;\n            });\n        });\n        return queryParams;\n    }\n\n    // accepts query object like {a:1, b:2} and returns a=1&b=2 string\n    getQueryString(queryObject) {\n        const params = [];\n        _.forEach(queryObject, function (value, key) {\n            params.push(key + '=' + value);\n        });\n        return _.join(params, '&');\n    }\n\n    appLogin(params, successCallback, failureCallback) {\n        let payload = '';\n\n        // encode all parameters\n        _.each(params, function (value, name) {\n            payload += (payload ? '&' : '') + encodeURIComponent(name) + '=' + encodeURIComponent(value);\n        });\n\n        return this.$http.send({\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            url: 'j_spring_security_check',\n            'data': payload\n        }).then((response) => {\n            const xsrfCookieValue = response.body ? response.body[XSRF_COOKIE_NAME] : '';\n\n            // override the default xsrf cookie name and xsrf header names with WaveMaker specific values\n            if (xsrfCookieValue) {\n                if (hasCordova()) {\n                    localStorage.setItem(XSRF_COOKIE_NAME, xsrfCookieValue || '');\n                }\n            }\n            // After the successful login in device, this function triggers the pending onLoginCallbacks.\n            this.injector.get(App).notify('userLoggedIn', {});\n            triggerFn(successCallback, response);\n        }, failureCallback);\n    }\n\n    /**\n     * The API is used to check if the user is authenticated in the RUN mode.\n     *\n     * @param {function} successCallback to be called on success\n     * @param {function} failureCallback to be called on failure\n     */\n    isAuthenticated(successCallback, failureCallback) {\n        this.getConfig(function (config) {\n            triggerFn(successCallback, config.authenticated);\n        }, failureCallback);\n    }\n\n    /**\n     * The API is used to logout of the app.\n     *\n     * @param {function} successCallback to be called on success\n     * @param {function} failureCallback to be called on failure\n     */\n    appLogout(successCallback, failureCallback) {\n        return this.$http.send({\n            target: 'Security',\n            url: 'j_spring_security_logout',\n            method: 'POST',\n            responseType: 'text',\n            byPassResult: true\n        }).then((response) => {\n            _.set(this.get(), 'authenticated', false);\n            _.set(this.get(), 'userInfo', null);\n            /*if (CONSTANTS.hasCordova) {\n                localStorage.setItem(CONSTANTS.XSRF_COOKIE_NAME, '');\n            }*/\n            this.injector.get(App).notify('userLoggedOut', {});\n            triggerFn(successCallback, response);\n        }, failureCallback);\n    }\n\n    /**\n     * Checks and return the cookie\n     * @param name, cookie key\n     * @returns {string}\n     */\n    getCookieByName(name) {\n        // Todo: Shubham Implement cookie native js\n        return 'cookie';\n    }\n\n    /**\n     * This function returns the cookieValue if xsrf is enabled.\n     * In device, xsrf cookie is stored in localStorage.\n     * @returns xsrf cookie value\n     */\n    isXsrfEnabled() {\n        if (hasCordova()) {\n            return localStorage.getItem(XSRF_COOKIE_NAME);\n        }\n        return this.getCookieByName(XSRF_COOKIE_NAME);\n    }\n\n    /**\n     * This function returns a promise. Promise is resolved when security is\n     * 1. disabled\n     * 2. enabled and user is authenticated\n     * 3. enabled and user is not authenticated, then promise is resolved on user login\n     * @returns {*} promise\n     */\n    public onUserLogin(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.getConfig(config => {\n                if (config.securityEnabled) {\n                    if (config.authenticated) {\n                        resolve();\n                    } else {\n                        const unsubscribe = this.injector.get(App).subscribe('userLoggedIn', () => {\n                            resolve();\n                            unsubscribe();\n                        });\n                    }\n                } else {\n                    resolve();\n                }\n            }, reject);\n        });\n    }\n\n    /**\n     * @returns a promise that is resolved with logged-in-user\n     */\n    getLoggedInUser() {\n        return new Promise<any>((resolve, reject) => {\n            this.getConfig((config) => {\n                if (config && config.userInfo) {\n                    resolve(config.userInfo);\n                } else {\n                    reject();\n                }\n            }, reject);\n        });\n    }\n\n    /**\n     * This is for mobile apps to authenticate via browser.\n     *\n     * @returns a promise that is resolved after login\n     */\n    authInBrowser(): Promise<any> {\n        return Promise.reject('This authInBrowser should not be called');\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { SecurityService } from './security.service';\n\n@NgModule({})\nexport class SecurityModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SecurityModule,\n            providers: [SecurityService]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}
