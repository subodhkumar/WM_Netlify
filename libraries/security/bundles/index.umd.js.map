{"version":3,"file":"index.umd.js.map","sources":["ng://@wm/security/security.service.ts","ng://@wm/security/security.module.ts","ng://@wm/security/index.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AbstractHttpService, App, getClonedObject, getWmProjectProperties, hasCordova, triggerFn } from '@wm/core';\n\ndeclare const _;\n\n// Todo[Shubham]: Move below constants to a common file\nconst XSRF_COOKIE_NAME = 'wm_xsrf_token',\n    isApplicationType = true;\n\n@Injectable()\nexport class SecurityService {\n    config;\n    lastLoggedInUser;\n    loggedInUser;\n    loadPromise: Promise<any>;\n    requestQueue: any = {};\n\n    constructor(\n        private injector: Injector,\n        private $http: AbstractHttpService,\n        private routerService: Router,\n        private activatedRoute: ActivatedRoute,\n        private _location: Location\n    ) {}\n\n    isLoaded() {\n        return this.config;\n    }\n\n    get() {\n        return this.config;\n    }\n\n    load() {\n        if(this.loadPromise) {return this.loadPromise;}\n        this.loadPromise = new Promise((resolve, reject) => {\n                this.$http.send({'url': './services/security/info', 'method': 'GET'}).then((response) => {\n                    this.config = response.body;\n                    this.lastLoggedInUser = getClonedObject(this.loggedInUser);\n                    this.loggedInUser = this.config.userInfo;\n                    resolve(response.body);\n                }).catch((err)=>{\n                    reject(err);\n                }).finally(()=>{\n                    this.loadPromise = null;\n                });\n        });\n        return this.loadPromise;\n    }\n\n    /**\n     * gets the security config from the deployed app (backend call)\n     * @param success\n     * @param error\n     */\n    getWebConfig(success, error) {\n        if (this.get()) {\n            // if already fetched, return it\n            triggerFn(success, this.get());\n            return;\n        }\n        this.load()\n            .then(config => {\n                triggerFn(success, config);\n            }, error);\n    }\n\n    /**\n     * Returns security config\n     * @param successCallback\n     * @param failureCallback\n     */\n    getConfig(successCallback, failureCallback) {\n        function invokeQueuedCallbacks(id, method, data) {\n            _.forEach(this.requestQueue[id], fn => triggerFn(fn[method], data));\n            this.requestQueue[id] = null;\n        }\n\n        function onSuccess(config) {\n            config.homePage = getWmProjectProperties().homePage;\n            if (config.userInfo) {\n                // Backend returns landingPage instead of homePage, hence this statement(for consistency)\n                // config.userInfo.homePage = config.userInfo.landingPage;\n            }\n            this.config = config;\n            this.lastLoggedInUser = getClonedObject(this.loggedInUser);\n            this.loggedInUser = config.userInfo;\n            invokeQueuedCallbacks.call(this, 'config', 'success', this.get());\n        }\n\n        function onError(error) {\n            /*if ($rootScope.isMobileApplicationType) {\n             this.config = {\n             'securityEnabled': false,\n             'authenticated': false,\n             'homePage': _WM_APP_PROPERTIES.homePage,\n             'userInfo': null,\n             'login': null\n             };\n             invokeQueuedCallbacks('config', 'success', this.get());\n             } else {*/\n            invokeQueuedCallbacks.call(this, 'config', 'error', error);\n            // }\n        }\n\n        if (this.get()) {\n            // if already fetched, return it\n            triggerFn(successCallback, this.get());\n            return;\n        }\n\n        // Queue check, if same queue is already in progress, do not send another request\n        this.requestQueue.config = this.requestQueue.config || [];\n        this.requestQueue.config.push({\n            success: successCallback,\n            error: failureCallback\n        });\n        if (this.requestQueue.config.length > 1) {\n            return;\n        }\n\n        if (!hasCordova()) {\n            // for web project, return config returned from backend API call.\n            this.getWebConfig(onSuccess.bind(this), onError.bind(this));\n        }\n        /* else {\n         /!*\n         * for mobile app, first get the mobile config (saved in the apk)\n         * - if security not enabled, just return mobile config (no backend call required)\n         * - else, get Web config (will be  the same API hit for login) and merge the config with _mobileconfig\n         *!/\n         getMobileConfig(function (mobileconfig) {\n         if (!mobileconfig.securityEnabled) {\n         onSuccess(mobileconfig);\n         } else {\n         getWebConfig(function (config) {\n         config = mergeWebAndMobileConfig(config);\n         onSuccess(config);\n         }, function () {onSuccess(mobileconfig); });\n         }\n         }, onError);\n         }*/\n    }\n\n    getLastLoggedInUsername() {\n        return this.lastLoggedInUser && this.lastLoggedInUser.userName;\n    }\n\n    /**\n     * Returns the current page name\n     * @returns {string}\n     */\n    getCurrentRoutePage() {\n        const p = this._location.path();\n        let lIndex = p.indexOf('?');\n        lIndex = lIndex === -1 ? p.length : lIndex - 1;\n        return p.substr(1, lIndex); // ignore the query params\n    }\n\n    /**\n     * Returns Query params for specified param name in current Route\n     * @param paramName, the param name whose query param value is to be retrieved\n     * @returns {any}\n     */\n    getCurrentRouteQueryParam(paramName) {\n        let paramVal;\n        this.activatedRoute.queryParams.subscribe(params => {\n            paramVal = params[paramName];\n        });\n        return paramVal;\n    }\n\n    isNoPageLoaded() {\n        return !_.isEmpty(this.getCurrentRoutePage());\n    }\n\n    getPageByLoggedInUser() {\n        const that = this;\n        return new Promise((resolve) => {\n            let page;\n            if (!isApplicationType) {\n                if (that.isNoPageLoaded()) {\n                    page = getWmProjectProperties().homePage;\n                    resolve(page);\n                }\n            } else {\n                that.getConfig((config) => {\n                    if (config.securityEnabled && config.authenticated) {\n                        page = config.userInfo.landingPage || getWmProjectProperties().homePage;\n                        // override the default xsrf cookie name and xsrf header names with WaveMaker specific values\n                        if (that.isXsrfEnabled()) {\n                            // this.$http.defaults.xsrfCookieName = XSRF_COOKIE;\n                            // this.$http.defaults.xsrfHeaderName = config.csrfHeaderName;\n                        }\n                    } else {\n                        page = getWmProjectProperties().homePage;\n                    }\n                    resolve(page);\n                }, function () {\n                    resolve(getWmProjectProperties().homePage);\n                });\n            }\n        });\n    }\n\n    /**\n     * Loads the App page as follows:\n     * Security disabled:\n     *      - Home page\n     * Security enabled:\n     *      - User is logged in, respective landing page is loaded\n     *      - Not logged in:\n     *          - Home page is public, loads the home page\n     *          - Home page not public, Login page(in config) is loaded\n     * @param forcePageLoad\n     * @returns {Promise<T>}\n     */\n    loadPageByUserRole(forcePageLoad?) {\n        const that = this;\n        return this.getPageByLoggedInUser().then(page => {\n            if (that.isNoPageLoaded() || forcePageLoad) {\n                // Reload the page when current page and post login landing page are same\n                if (that.getCurrentRoutePage() === page) {\n                    (window.location as any).reload();\n                } else {\n                    that.routerService.navigate([`/${page}`]);\n                }\n            }\n        });\n    }\n\n    /**\n     * Navigates to the current user's homePage based on the config in SecurityService\n     * Assumption is the SecurityService is updated with the latest security config before making call to this function\n     */\n    navigateOnLogin() {\n        this.loadPageByUserRole(true);\n    }\n\n    /**\n     * Gets the page which needs to be redirected to on successful login\n     * @param config,\n     * @param page, page name for redirection\n     * @returns {any|string}\n     */\n    getRedirectPage(config, page?) {\n        const homePage = getWmProjectProperties().homePage,\n            loginPage = _.get(config, 'loginConfig.pageName');\n        let prevRedirectPage,\n            redirectPage = page || this.getCurrentRoutePage();\n\n        // if user is already on Home page or Login page, they should not be redirected to that page, hence return undefined\n        if (redirectPage === homePage || redirectPage === loginPage) {\n            /*\n             * find previous redirect page from URL, if exists, user should redirect to that page.\n             * USE CASE:\n             *  user is on http://localhost:8080/app/#/Login?redirectTo=page\n             *  a variable call fails resulting 401\n             *  in this case, redirectTo page should be 'page' and not undefined\n             */\n            prevRedirectPage = this.getCurrentRouteQueryParam('redirectTo');\n            redirectPage = !_.isEmpty(prevRedirectPage) ? prevRedirectPage : undefined;\n        }\n\n        return redirectPage;\n    }\n\n    /**\n     * Returns all the query params(including page params and redirect to params) associated with redirected page\n     */\n    getRedirectedRouteQueryParams() {\n        let queryParams = {};\n        this.activatedRoute.queryParams.subscribe((paramVal) => {\n            _.forEach(paramVal, (val, key) => {\n                queryParams[key] = val;\n            });\n        });\n        return queryParams;\n    }\n\n    // accepts query object like {a:1, b:2} and returns a=1&b=2 string\n    getQueryString(queryObject) {\n        const params = [];\n        _.forEach(queryObject, function (value, key) {\n            params.push(key + '=' + value);\n        });\n        return _.join(params, '&');\n    }\n\n    appLogin(params, successCallback, failureCallback) {\n        let payload = '';\n\n        // encode all parameters\n        _.each(params, function (value, name) {\n            payload += (payload ? '&' : '') + encodeURIComponent(name) + '=' + encodeURIComponent(value);\n        });\n\n        return this.$http.send({\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            url: 'j_spring_security_check',\n            'data': payload\n        }).then((response) => {\n            const xsrfCookieValue = response.body ? response.body[XSRF_COOKIE_NAME] : '';\n\n            // override the default xsrf cookie name and xsrf header names with WaveMaker specific values\n            if (xsrfCookieValue) {\n                if (hasCordova()) {\n                    localStorage.setItem(XSRF_COOKIE_NAME, xsrfCookieValue || '');\n                }\n            }\n            // After the successful login in device, this function triggers the pending onLoginCallbacks.\n            this.injector.get(App).notify('userLoggedIn', {});\n            triggerFn(successCallback, response);\n        }, failureCallback);\n    }\n\n    /**\n     * The API is used to check if the user is authenticated in the RUN mode.\n     *\n     * @param {function} successCallback to be called on success\n     * @param {function} failureCallback to be called on failure\n     */\n    isAuthenticated(successCallback, failureCallback) {\n        this.getConfig(function (config) {\n            triggerFn(successCallback, config.authenticated);\n        }, failureCallback);\n    }\n\n    /**\n     * The API is used to logout of the app.\n     *\n     * @param {function} successCallback to be called on success\n     * @param {function} failureCallback to be called on failure\n     */\n    appLogout(successCallback, failureCallback) {\n        return this.$http.send({\n            target: 'Security',\n            url: 'j_spring_security_logout',\n            method: 'POST',\n            responseType: 'text',\n            byPassResult: true\n        }).then((response) => {\n            _.set(this.get(), 'authenticated', false);\n            _.set(this.get(), 'userInfo', null);\n            /*if (CONSTANTS.hasCordova) {\n                localStorage.setItem(CONSTANTS.XSRF_COOKIE_NAME, '');\n            }*/\n            this.injector.get(App).notify('userLoggedOut', {});\n            triggerFn(successCallback, response);\n        }, failureCallback);\n    }\n\n    /**\n     * Checks and return the cookie\n     * @param name, cookie key\n     * @returns {string}\n     */\n    getCookieByName(name) {\n        // Todo: Shubham Implement cookie native js\n        return 'cookie';\n    }\n\n    /**\n     * This function returns the cookieValue if xsrf is enabled.\n     * In device, xsrf cookie is stored in localStorage.\n     * @returns xsrf cookie value\n     */\n    isXsrfEnabled() {\n        if (hasCordova()) {\n            return localStorage.getItem(XSRF_COOKIE_NAME);\n        }\n        return this.getCookieByName(XSRF_COOKIE_NAME);\n    }\n\n    /**\n     * This function returns a promise. Promise is resolved when security is\n     * 1. disabled\n     * 2. enabled and user is authenticated\n     * 3. enabled and user is not authenticated, then promise is resolved on user login\n     * @returns {*} promise\n     */\n    public onUserLogin(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.getConfig(config => {\n                if (config.securityEnabled) {\n                    if (config.authenticated) {\n                        resolve();\n                    } else {\n                        const unsubscribe = this.injector.get(App).subscribe('userLoggedIn', () => {\n                            resolve();\n                            unsubscribe();\n                        });\n                    }\n                } else {\n                    resolve();\n                }\n            }, reject);\n        });\n    }\n\n    /**\n     * @returns a promise that is resolved with logged-in-user\n     */\n    getLoggedInUser() {\n        return new Promise<any>((resolve, reject) => {\n            this.getConfig((config) => {\n                if (config && config.userInfo) {\n                    resolve(config.userInfo);\n                } else {\n                    reject();\n                }\n            }, reject);\n        });\n    }\n\n    /**\n     * This is for mobile apps to authenticate via browser.\n     *\n     * @returns a promise that is resolved after login\n     */\n    authInBrowser(): Promise<any> {\n        return Promise.reject('This authInBrowser should not be called');\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { SecurityService } from './security.service';\n\n@NgModule({})\nexport class SecurityModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SecurityModule,\n            providers: [SecurityService]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["getClonedObject","triggerFn","getWmProjectProperties","hasCordova","App","Injectable","Injector","AbstractHttpService","Router","ActivatedRoute","Location","NgModule"],"mappings":"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"}
