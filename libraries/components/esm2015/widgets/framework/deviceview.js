import { isMobile, setCSS } from '@wm/core';
var CLASS_NAME;
(function (CLASS_NAME) {
    CLASS_NAME["LEFT_PANEL"] = "page-left-panel";
    CLASS_NAME["RIGHT_PANEL"] = "page-right-panel";
    CLASS_NAME["SWIPE_ELEM"] = "page-left-panel-icon";
    CLASS_NAME["CONTENT"] = "app-content-column";
    CLASS_NAME["HEADER"] = "page-header";
    CLASS_NAME["SEARCH"] = "app-search";
})(CLASS_NAME || (CLASS_NAME = {}));
/**
 * method returns jquery class selector for given roleName
 * @param roleName
 * @returns {string}
 */
const roleSelector = (roleName) => `[data-role='${roleName}']`;
const ɵ0 = roleSelector;
/*setup touch event handler*/
const bindTapEvtHandler = (selector, handler) => {
    /*
     * In Iphone safari browser, tap event of HammerJs is breaking
     * functionalities of other controls like input[type="range"].
     * So, replaced the hammer Js handler with click event handler.
     */
    $(selector).off('click.deviceview').on('click.deviceview', handler);
};
const ɵ1 = bindTapEvtHandler;
/**
 * hide the mobile toolbar actions
 */
const hidePageContainers = (leftNavEle, searchEle) => {
    if (isMobile()) {
        if (leftNavEle) {
            try {
                leftNavEle.widget.collapse();
            }
            catch (e) {
                //
            }
        }
        if (searchEle) {
            setCSS(searchEle, 'display', 'none');
        }
    }
};
const ɵ2 = hidePageContainers;
/**
 * binds the touch event for content
 */
const bindContentEvents = (leftNavEle, pageContainer, searchContainer, isTablet = false) => {
    if (!isTablet) {
        // touch content to hide nav pane and left panel
        bindTapEvtHandler(pageContainer, hidePageContainers.bind(this, leftNavEle, searchContainer));
    }
};
const ɵ3 = bindContentEvents;
const bindLeftPanelEvents = (leftNavEle, searchEle) => {
    // tap left to show/hide left panel
    bindTapEvtHandler(roleSelector(CLASS_NAME.SWIPE_ELEM), () => {
        if (leftNavEle) {
            leftNavEle.widget.toggle();
            // Hide search container when left panel is open
            if (leftNavEle.classList.contains('visible')) {
                if (searchEle) {
                    setCSS(searchEle, 'display', 'none');
                }
            }
        }
    });
};
const ɵ4 = bindLeftPanelEvents;
/**
 * binds the touch event for content
 */
const bindRightPanelEvents = (rightNavEle) => {
    bindTapEvtHandler(rightNavEle, hidePageContainers);
};
const ɵ5 = bindRightPanelEvents;
/**
 * toggles the search container
 */
const toggleSearchContainer = (searchEle, leftNavEle) => {
    if ($(searchEle).css('display') === 'none') {
        hidePageContainers(leftNavEle);
        setCSS(searchEle, 'display', 'inline-table');
    }
    else {
        hidePageContainers(leftNavEle, searchEle);
    }
};
const ɵ6 = toggleSearchContainer;
/**
 * Bind event with Search icon in header
 */
const bindSearchIconEvent = (searchElements, leftNavEle) => {
    $(searchElements).each((index, ele) => {
        const searchEle = $('<a class="app-header-action"><i class="wi wi-search"></i></a>');
        $(ele).before(searchEle);
        // Tap icon to show/hide search box
        bindTapEvtHandler(searchEle, () => toggleSearchContainer(ele, leftNavEle));
    });
};
const ɵ7 = bindSearchIconEvent;
export const updateDeviceView = (element, isTablet = false) => {
    const leftNavEle = element.querySelector(roleSelector(CLASS_NAME.LEFT_PANEL));
    const rightNavEle = element.querySelector(roleSelector(CLASS_NAME.RIGHT_PANEL));
    const headerEle = element.querySelector(roleSelector(CLASS_NAME.HEADER));
    const searchEle = headerEle && headerEle.querySelector(`.${CLASS_NAME.SEARCH}`);
    const pageEle = element.querySelector(`.${CLASS_NAME.CONTENT}`);
    bindContentEvents(leftNavEle, pageEle, searchEle, isTablet);
    if (leftNavEle) {
        bindLeftPanelEvents(leftNavEle, searchEle);
    }
    else {
        // remove the icon
        $(headerEle).find(roleSelector(CLASS_NAME.SWIPE_ELEM)).remove();
    }
    if (rightNavEle) {
        bindRightPanelEvents(rightNavEle);
    }
    if (searchEle) {
        bindSearchIconEvent(searchEle, leftNavEle);
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,