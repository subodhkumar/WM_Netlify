import { $appDigest, addClass, switchClass } from '@wm/core';
import { BaseFormCustomComponent } from '../../base/base-form-custom.component';
import { styler } from '../../../framework/styler';
export class BaseInput extends BaseFormCustomComponent {
    constructor(inj, config) {
        super(inj, config);
        // possible values for ngModelOptions are 'blur' and 'change'
        // default is 'blur'
        this.ngModelOptions = {
            updateOn: ''
        };
        let updateOn = this.nativeElement.getAttribute('updateon') || 'blur';
        updateOn = updateOn === 'default' ? 'change' : updateOn;
        this.ngModelOptions.updateOn = updateOn;
    }
    onPropertyChange(key, nv, ov) {
        // set the class on the input element
        if (key === 'tabindex') {
            return;
        }
        if (key === 'class') {
            if (this.inputEl.nativeElement) {
                switchClass(this.inputEl.nativeElement, nv, ov);
            }
        }
        else if (key === 'datavalue') {
            // update the oldDataValue when the datavalue is modified programmatically
            this.updatePrevDatavalue(nv);
        }
        else {
            super.onPropertyChange(key, nv, ov);
        }
    }
    // invoke the change callback
    handleChange(newValue) {
        this.invokeOnChange(this.datavalue, { type: 'change' }, this.ngModel.valid);
    }
    // Change event is registered from the template, Prevent the framework from registering one more event
    handleEvent(node, eventName, eventCallback, locals) {
        if (eventName !== 'change' && eventName !== 'blur') {
            super.handleEvent(this.inputEl.nativeElement, eventName, eventCallback, locals);
        }
    }
    // invoke the blur callback
    handleBlur($event) {
        this.invokeOnTouched($event);
    }
    // Update the model on enter key press
    flushViewChanges(val) {
        this.ngModel.update.next(val);
        $appDigest();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        // add the class on the input element
        if (this.class) {
            addClass(this.inputEl.nativeElement, this.class);
        }
        styler(this.inputEl.nativeElement, this);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1pbnB1dC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vdGV4dC9iYXNlL2Jhc2UtaW5wdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTdELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRCxNQUFNLE9BQWdCLFNBQVUsU0FBUSx1QkFBdUI7SUF3RTNELFlBQ0ksR0FBYSxFQUNiLE1BQXFCO1FBRXJCLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUF6RXZCLDZEQUE2RDtRQUM3RCxvQkFBb0I7UUFDYixtQkFBYyxHQUFHO1lBQ3BCLFFBQVEsRUFBRSxFQUFFO1NBQ2YsQ0FBQztRQXNFRSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxNQUFNLENBQUM7UUFDckUsUUFBUSxHQUFHLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ3hELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM1QyxDQUFDO0lBM0RTLGdCQUFnQixDQUFDLEdBQVcsRUFBRSxFQUFPLEVBQUUsRUFBTztRQUNwRCxxQ0FBcUM7UUFDckMsSUFBSSxHQUFHLEtBQUssVUFBVSxFQUFFO1lBQ3BCLE9BQU87U0FDVjtRQUVELElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNqQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO2dCQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ25EO1NBQ0o7YUFBTSxJQUFJLEdBQUcsS0FBSyxXQUFXLEVBQUU7WUFDNUIsMEVBQTBFO1lBQzFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0gsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBRUQsNkJBQTZCO0lBQzdCLFlBQVksQ0FBQyxRQUFhO1FBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxzR0FBc0c7SUFDNUYsV0FBVyxDQUFDLElBQWlCLEVBQUUsU0FBaUIsRUFBRSxhQUF1QixFQUFFLE1BQVc7UUFDNUYsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7WUFDaEQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ25GO0lBQ0wsQ0FBQztJQUVELDJCQUEyQjtJQUMzQixVQUFVLENBQUMsTUFBTTtRQUNiLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELHNDQUFzQztJQUN0QyxnQkFBZ0IsQ0FBQyxHQUFHO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixVQUFVLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsZUFBZTtRQUNYLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV4QixxQ0FBcUM7UUFDckMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwRDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBV0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdNb2RlbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgJGFwcERpZ2VzdCwgYWRkQ2xhc3MsIHN3aXRjaENsYXNzIH0gZnJvbSAnQHdtL2NvcmUnO1xuXG5pbXBvcnQgeyBCYXNlRm9ybUN1c3RvbUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Jhc2UvYmFzZS1mb3JtLWN1c3RvbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgc3R5bGVyIH0gZnJvbSAnLi4vLi4vLi4vZnJhbWV3b3JrL3N0eWxlcic7XG5pbXBvcnQgeyBJV2lkZ2V0Q29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vZnJhbWV3b3JrL3R5cGVzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VJbnB1dCBleHRlbmRzIEJhc2VGb3JtQ3VzdG9tQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHVibGljIGNsYXNzOiBzdHJpbmc7XG5cbiAgICAvLyBwb3NzaWJsZSB2YWx1ZXMgZm9yIG5nTW9kZWxPcHRpb25zIGFyZSAnYmx1cicgYW5kICdjaGFuZ2UnXG4gICAgLy8gZGVmYXVsdCBpcyAnYmx1cidcbiAgICBwdWJsaWMgbmdNb2RlbE9wdGlvbnMgPSB7XG4gICAgICAgIHVwZGF0ZU9uOiAnJ1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGlucHV0IGVsZW1lbnQuIEFsbCB0aGUgc3R5bGVzIGFuZCBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCBvbiB0aGlzIG5vZGUuXG4gICAgICogSW5wdXQgY29tcG9uZW50cyBtdXN0IG92ZXJyaWRlIHRoaXNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaW5wdXRFbDogRWxlbWVudFJlZjtcblxuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgbmdNb2RlbCBkaXJlY3RpdmUgaW5zdGFuY2UuXG4gICAgICogVXNlZCB0byBjaGVjayB0aGUgdmFsaWRpdHkgb2YgdGhlIGlucHV0XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IG5nTW9kZWw6IE5nTW9kZWw7XG5cbiAgICBwcm90ZWN0ZWQgb25Qcm9wZXJ0eUNoYW5nZShrZXk6IHN0cmluZywgbnY6IGFueSwgb3Y6IGFueSkge1xuICAgICAgICAvLyBzZXQgdGhlIGNsYXNzIG9uIHRoZSBpbnB1dCBlbGVtZW50XG4gICAgICAgIGlmIChrZXkgPT09ICd0YWJpbmRleCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaENsYXNzKHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LCBudiwgb3YpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2RhdGF2YWx1ZScpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgb2xkRGF0YVZhbHVlIHdoZW4gdGhlIGRhdGF2YWx1ZSBpcyBtb2RpZmllZCBwcm9ncmFtbWF0aWNhbGx5XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZEYXRhdmFsdWUobnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIub25Qcm9wZXJ0eUNoYW5nZShrZXksIG52LCBvdik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpbnZva2UgdGhlIGNoYW5nZSBjYWxsYmFja1xuICAgIGhhbmRsZUNoYW5nZShuZXdWYWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuaW52b2tlT25DaGFuZ2UodGhpcy5kYXRhdmFsdWUsIHt0eXBlOiAnY2hhbmdlJ30sIHRoaXMubmdNb2RlbC52YWxpZCk7XG4gICAgfVxuXG4gICAgLy8gQ2hhbmdlIGV2ZW50IGlzIHJlZ2lzdGVyZWQgZnJvbSB0aGUgdGVtcGxhdGUsIFByZXZlbnQgdGhlIGZyYW1ld29yayBmcm9tIHJlZ2lzdGVyaW5nIG9uZSBtb3JlIGV2ZW50XG4gICAgcHJvdGVjdGVkIGhhbmRsZUV2ZW50KG5vZGU6IEhUTUxFbGVtZW50LCBldmVudE5hbWU6IHN0cmluZywgZXZlbnRDYWxsYmFjazogRnVuY3Rpb24sIGxvY2FsczogYW55KSB7XG4gICAgICAgIGlmIChldmVudE5hbWUgIT09ICdjaGFuZ2UnICYmIGV2ZW50TmFtZSAhPT0gJ2JsdXInKSB7XG4gICAgICAgICAgICBzdXBlci5oYW5kbGVFdmVudCh0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudCwgZXZlbnROYW1lLCBldmVudENhbGxiYWNrLCBsb2NhbHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaW52b2tlIHRoZSBibHVyIGNhbGxiYWNrXG4gICAgaGFuZGxlQmx1cigkZXZlbnQpIHtcbiAgICAgICAgdGhpcy5pbnZva2VPblRvdWNoZWQoJGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIG1vZGVsIG9uIGVudGVyIGtleSBwcmVzc1xuICAgIGZsdXNoVmlld0NoYW5nZXModmFsKSB7XG4gICAgICAgIHRoaXMubmdNb2RlbC51cGRhdGUubmV4dCh2YWwpO1xuICAgICAgICAkYXBwRGlnZXN0KCk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBzdXBlci5uZ0FmdGVyVmlld0luaXQoKTtcblxuICAgICAgICAvLyBhZGQgdGhlIGNsYXNzIG9uIHRoZSBpbnB1dCBlbGVtZW50XG4gICAgICAgIGlmICh0aGlzLmNsYXNzKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudCwgdGhpcy5jbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGVyKHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LCB0aGlzKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5qOiBJbmplY3RvcixcbiAgICAgICAgY29uZmlnOiBJV2lkZ2V0Q29uZmlnXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGluaiwgY29uZmlnKTtcbiAgICAgICAgbGV0IHVwZGF0ZU9uID0gdGhpcy5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgndXBkYXRlb24nKSB8fCAnYmx1cic7XG4gICAgICAgIHVwZGF0ZU9uID0gdXBkYXRlT24gPT09ICdkZWZhdWx0JyA/ICdjaGFuZ2UnIDogdXBkYXRlT247XG4gICAgICAgIHRoaXMubmdNb2RlbE9wdGlvbnMudXBkYXRlT24gPSB1cGRhdGVPbjtcbiAgICB9XG59XG4iXX0=