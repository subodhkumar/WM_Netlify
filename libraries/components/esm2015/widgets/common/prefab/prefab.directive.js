import { Attribute, ChangeDetectorRef, Directive, ElementRef, Injector } from '@angular/core';
import { setCSS } from '@wm/core';
import { StylableComponent } from '../base/stylable.component';
import { styler } from '../../framework/styler';
import { PROP_TYPE, register } from '../../framework/widget-props';
import { provideAsWidgetRef } from '../../../utils/widget-utils';
import { prefabProps } from './prefab.props';
const DEFAULT_CLS = 'app-prefab';
const registeredPropsSet = new Set();
export class PrefabDirective extends StylableComponent {
    constructor(inj, elRef, cdr, prefabName) {
        const widgetType = `wm-prefab-${prefabName}`;
        const WIDGET_CONFIG = { widgetType, hostClass: DEFAULT_CLS };
        super(inj, WIDGET_CONFIG, new Promise(res => this.propsReady = res));
        this.prefabName = prefabName;
        this.widgetType = widgetType;
        this.name = elRef.nativeElement.getAttribute('name');
        styler(this.nativeElement, this);
        // Call on property change on name to set name attribute on element.
        this.registerReadyStateListener(() => {
            super.onPropertyChange('name', this.name);
        });
    }
    onStyleChange(key, nv, ov) {
        if (key === 'height') {
            setCSS(this.nativeElement, 'overflow', 'auto');
        }
    }
    setProps(config) {
        if (!config || !config.properties) {
            return;
        }
        if (!registeredPropsSet.has(this.widgetType)) {
            register(this.widgetType, this.prepareProps(config.properties));
        }
        this.propsReady();
    }
    handleEvent() {
        // do not call the super;
        // prevent events from getting registered
    }
    prepareProps(props = {}) {
        const propsMap = new Map(prefabProps);
        Object.entries(props).forEach(([k, v]) => {
            let type = PROP_TYPE.STRING;
            if (v.type === 'boolean') {
                type = PROP_TYPE.BOOLEAN;
            }
            else if (v.type === 'number') {
                type = PROP_TYPE.NUMBER;
            }
            else if (v.type !== 'string') {
                type = v.type;
            }
            // Do not set the 'bind:*' values
            propsMap.set(k, { type, value: _.startsWith(v.value, 'bind:') ? undefined : v.value });
        });
        registeredPropsSet.add(this.widgetType);
        return propsMap;
    }
}
PrefabDirective.decorators = [
    { type: Directive, args: [{
                selector: 'section[wmPrefab]',
                providers: [
                    provideAsWidgetRef(PrefabDirective)
                ]
            },] }
];
/** @nocollapse */
PrefabDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Attribute, args: ['prefabname',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZmFiLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vcHJlZmFiL3ByZWZhYi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFFakMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0FBVTdDLE1BQU0sT0FBTyxlQUFnQixTQUFRLGlCQUFpQjtJQU9sRCxZQUFZLEdBQWEsRUFBRSxLQUFpQixFQUFFLEdBQXNCLEVBQTJCLFVBQVU7UUFDckcsTUFBTSxVQUFVLEdBQUcsYUFBYSxVQUFVLEVBQUUsQ0FBQztRQUM3QyxNQUFNLGFBQWEsR0FBRyxFQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFDLENBQUM7UUFFM0QsS0FBSyxDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFckUsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVyRCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVqQyxvRUFBb0U7UUFDcEUsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxhQUFhLENBQUMsR0FBVyxFQUFFLEVBQU8sRUFBRSxFQUFPO1FBQ3ZDLElBQUksR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLE1BQU07UUFDbEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDL0IsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDMUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUNuRTtRQUVELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRVMsV0FBVztRQUNqQix5QkFBeUI7UUFDekIseUNBQXlDO0lBQzdDLENBQUM7SUFFTyxZQUFZLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDM0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQWdCLEVBQUUsRUFBRTtZQUNwRCxJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBRTVCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ3RCLElBQUksR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDO2FBQzVCO2lCQUFNLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO2FBQzNCO2lCQUFNLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2FBQ2pCO1lBRUQsaUNBQWlDO1lBQ2pDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDekYsQ0FBQyxDQUFDLENBQUM7UUFFSCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7OztZQTFFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsU0FBUyxFQUFFO29CQUNQLGtCQUFrQixDQUFDLGVBQWUsQ0FBQztpQkFDdEM7YUFDSjs7OztZQXJCNkQsUUFBUTtZQUFwQixVQUFVO1lBQXhDLGlCQUFpQjs0Q0E2QnNDLFNBQVMsU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXR0cmlidXRlLCBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBzZXRDU1MgfSBmcm9tICdAd20vY29yZSc7XG5cbmltcG9ydCB7IFN0eWxhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZS9zdHlsYWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgc3R5bGVyIH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL3N0eWxlcic7XG5pbXBvcnQgeyBQUk9QX1RZUEUsIHJlZ2lzdGVyIH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL3dpZGdldC1wcm9wcyc7XG5pbXBvcnQgeyBwcm92aWRlQXNXaWRnZXRSZWYgfSBmcm9tICcuLi8uLi8uLi91dGlscy93aWRnZXQtdXRpbHMnO1xuaW1wb3J0IHsgcHJlZmFiUHJvcHMgfSBmcm9tICcuL3ByZWZhYi5wcm9wcyc7XG5cbmNvbnN0IERFRkFVTFRfQ0xTID0gJ2FwcC1wcmVmYWInO1xuXG5jb25zdCByZWdpc3RlcmVkUHJvcHNTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuZGVjbGFyZSBjb25zdCBfO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3NlY3Rpb25bd21QcmVmYWJdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgcHJvdmlkZUFzV2lkZ2V0UmVmKFByZWZhYkRpcmVjdGl2ZSlcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFByZWZhYkRpcmVjdGl2ZSBleHRlbmRzIFN0eWxhYmxlQ29tcG9uZW50IHtcblxuICAgIHdpZGdldFR5cGU6IHN0cmluZztcbiAgICBwcmVmYWJOYW1lOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHByb3BzUmVhZHk6IEZ1bmN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoaW5qOiBJbmplY3RvciwgZWxSZWY6IEVsZW1lbnRSZWYsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIEBBdHRyaWJ1dGUoJ3ByZWZhYm5hbWUnKSBwcmVmYWJOYW1lKSB7XG4gICAgICAgIGNvbnN0IHdpZGdldFR5cGUgPSBgd20tcHJlZmFiLSR7cHJlZmFiTmFtZX1gO1xuICAgICAgICBjb25zdCBXSURHRVRfQ09ORklHID0ge3dpZGdldFR5cGUsIGhvc3RDbGFzczogREVGQVVMVF9DTFN9O1xuXG4gICAgICAgIHN1cGVyKGluaiwgV0lER0VUX0NPTkZJRywgbmV3IFByb21pc2UocmVzID0+IHRoaXMucHJvcHNSZWFkeSA9IHJlcykpO1xuXG4gICAgICAgIHRoaXMucHJlZmFiTmFtZSA9IHByZWZhYk5hbWU7XG4gICAgICAgIHRoaXMud2lkZ2V0VHlwZSA9IHdpZGdldFR5cGU7XG4gICAgICAgIHRoaXMubmFtZSA9IGVsUmVmLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCduYW1lJyk7XG5cbiAgICAgICAgc3R5bGVyKHRoaXMubmF0aXZlRWxlbWVudCwgdGhpcyk7XG5cbiAgICAgICAgLy8gQ2FsbCBvbiBwcm9wZXJ0eSBjaGFuZ2Ugb24gbmFtZSB0byBzZXQgbmFtZSBhdHRyaWJ1dGUgb24gZWxlbWVudC5cbiAgICAgICAgdGhpcy5yZWdpc3RlclJlYWR5U3RhdGVMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICBzdXBlci5vblByb3BlcnR5Q2hhbmdlKCduYW1lJywgdGhpcy5uYW1lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TdHlsZUNoYW5nZShrZXk6IHN0cmluZywgbnY6IGFueSwgb3Y6IGFueSkge1xuICAgICAgICBpZiAoa2V5ID09PSAnaGVpZ2h0Jykge1xuICAgICAgICAgICAgc2V0Q1NTKHRoaXMubmF0aXZlRWxlbWVudCwgJ292ZXJmbG93JywgJ2F1dG8nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRQcm9wcyhjb25maWcpIHtcbiAgICAgICAgaWYgKCFjb25maWcgfHwgIWNvbmZpZy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlZ2lzdGVyZWRQcm9wc1NldC5oYXModGhpcy53aWRnZXRUeXBlKSkge1xuICAgICAgICAgICAgcmVnaXN0ZXIodGhpcy53aWRnZXRUeXBlLCB0aGlzLnByZXBhcmVQcm9wcyhjb25maWcucHJvcGVydGllcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wc1JlYWR5KCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGhhbmRsZUV2ZW50KCkge1xuICAgICAgICAvLyBkbyBub3QgY2FsbCB0aGUgc3VwZXI7XG4gICAgICAgIC8vIHByZXZlbnQgZXZlbnRzIGZyb20gZ2V0dGluZyByZWdpc3RlcmVkXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVwYXJlUHJvcHMocHJvcHMgPSB7fSkge1xuICAgICAgICBjb25zdCBwcm9wc01hcCA9IG5ldyBNYXAocHJlZmFiUHJvcHMpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhwcm9wcykuZm9yRWFjaCgoW2ssIHZdOiBbc3RyaW5nLCBhbnldKSA9PiB7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IFBST1BfVFlQRS5TVFJJTkc7XG5cbiAgICAgICAgICAgIGlmICh2LnR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBQUk9QX1RZUEUuQk9PTEVBTjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodi50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBQUk9QX1RZUEUuTlVNQkVSO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2LnR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IHYudHlwZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRG8gbm90IHNldCB0aGUgJ2JpbmQ6KicgdmFsdWVzXG4gICAgICAgICAgICBwcm9wc01hcC5zZXQoaywge3R5cGUsIHZhbHVlOiBfLnN0YXJ0c1dpdGgodi52YWx1ZSwgJ2JpbmQ6JykgPyB1bmRlZmluZWQgOiB2LnZhbHVlfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlZ2lzdGVyZWRQcm9wc1NldC5hZGQodGhpcy53aWRnZXRUeXBlKTtcblxuICAgICAgICByZXR1cm4gcHJvcHNNYXA7XG4gICAgfVxufVxuIl19