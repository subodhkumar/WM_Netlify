export class LocalDataProvider {
    // LocalData filtering is done based on the searchkey.
    filter(config) {
        const entries = config.dataset;
        const casesensitive = config.casesensitive;
        let queryText = config.query, filteredData;
        return new Promise((resolve, reject) => {
            /**
             * If searchKey is defined, then check for match string against each item in the dataset with item's field name as the searchKey
             * return the filtered data containing the matching string.
             */
            if (config.searchKey) {
                const keys = _.split(config.searchKey, ',');
                filteredData = _.filter(config.dataset, (item) => {
                    return keys.some(key => {
                        let a = _.get(item, key), b = queryText;
                        if (!casesensitive) {
                            a = _.toLower(_.toString(a));
                            b = _.toLower(_.toString(b));
                        }
                        return _.includes(a, b);
                    });
                });
            }
            else {
                // local search on data with array of objects.
                // Iterate over each item and return the filtered data containing the matching string.
                if (_.isArray(entries) && _.isObject(entries[0])) {
                    filteredData = _.filter(entries, entry => {
                        return (_.includes(_.toLower(_.values(entry).join(' ')), _.toLower(queryText)));
                    });
                }
                else {
                    filteredData = _.filter(entries, entry => {
                        if (!casesensitive) {
                            entry = _.toLower(entry);
                            queryText = _.toLower(queryText);
                        }
                        return _.includes(entry, queryText);
                    });
                }
            }
            resolve({
                data: filteredData,
                hasMoreData: false,
                isLastPage: true
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtZGF0YS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vc2VhcmNoL2RhdGEtcHJvdmlkZXIvbG9jYWwtZGF0YS1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLE9BQU8saUJBQWlCO0lBQzFCLHNEQUFzRDtJQUMvQyxNQUFNLENBQUMsTUFBMkI7UUFDckMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUMvQixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzNDLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQzVCLFlBQVksQ0FBQztRQUViLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkM7OztlQUdHO1lBQ0gsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNsQixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBRTVDLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRTtvQkFDbEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDcEIsQ0FBQyxHQUFHLFNBQVMsQ0FBQzt3QkFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRTs0QkFDaEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUM3QixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBQ2hDO3dCQUNELE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQyxDQUFDO2FBQ047aUJBQU07Z0JBQ0gsOENBQThDO2dCQUM5QyxzRkFBc0Y7Z0JBQ3RGLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUM5QyxZQUFZLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUU7d0JBQ3JDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEYsQ0FBQyxDQUFDLENBQUM7aUJBQ047cUJBQU07b0JBQ0gsWUFBWSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFO3dCQUNyQyxJQUFJLENBQUMsYUFBYSxFQUFFOzRCQUNoQixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDekIsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7eUJBQ3BDO3dCQUNELE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7b0JBQ3hDLENBQUMsQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7WUFDRCxPQUFPLENBQUM7Z0JBQ0osSUFBSSxFQUFFLFlBQVk7Z0JBQ2xCLFdBQVcsRUFBRSxLQUFLO2dCQUNsQixVQUFVLEVBQUUsSUFBSTthQUNuQixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhUHJvdmlkZXIsIElEYXRhUHJvdmlkZXJDb25maWcgfSBmcm9tICcuL2RhdGEtcHJvdmlkZXInO1xuXG5kZWNsYXJlIGNvbnN0IF87XG5cbmV4cG9ydCBjbGFzcyBMb2NhbERhdGFQcm92aWRlciBpbXBsZW1lbnRzIElEYXRhUHJvdmlkZXIge1xuICAgIC8vIExvY2FsRGF0YSBmaWx0ZXJpbmcgaXMgZG9uZSBiYXNlZCBvbiB0aGUgc2VhcmNoa2V5LlxuICAgIHB1YmxpYyBmaWx0ZXIoY29uZmlnOiBJRGF0YVByb3ZpZGVyQ29uZmlnKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IGNvbmZpZy5kYXRhc2V0O1xuICAgICAgICBjb25zdCBjYXNlc2Vuc2l0aXZlID0gY29uZmlnLmNhc2VzZW5zaXRpdmU7XG4gICAgICAgIGxldCBxdWVyeVRleHQgPSBjb25maWcucXVlcnksXG4gICAgICAgIGZpbHRlcmVkRGF0YTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiBzZWFyY2hLZXkgaXMgZGVmaW5lZCwgdGhlbiBjaGVjayBmb3IgbWF0Y2ggc3RyaW5nIGFnYWluc3QgZWFjaCBpdGVtIGluIHRoZSBkYXRhc2V0IHdpdGggaXRlbSdzIGZpZWxkIG5hbWUgYXMgdGhlIHNlYXJjaEtleVxuICAgICAgICAgICAgICogcmV0dXJuIHRoZSBmaWx0ZXJlZCBkYXRhIGNvbnRhaW5pbmcgdGhlIG1hdGNoaW5nIHN0cmluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5zZWFyY2hLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gXy5zcGxpdChjb25maWcuc2VhcmNoS2V5LCAnLCcpO1xuXG4gICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhID0gXy5maWx0ZXIoY29uZmlnLmRhdGFzZXQsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXMuc29tZShrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBfLmdldChpdGVtLCBrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBxdWVyeVRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhc2VzZW5zaXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gXy50b0xvd2VyKF8udG9TdHJpbmcoYSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBfLnRvTG93ZXIoXy50b1N0cmluZyhiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyhhLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHNlYXJjaCBvbiBkYXRhIHdpdGggYXJyYXkgb2Ygb2JqZWN0cy5cbiAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgZWFjaCBpdGVtIGFuZCByZXR1cm4gdGhlIGZpbHRlcmVkIGRhdGEgY29udGFpbmluZyB0aGUgbWF0Y2hpbmcgc3RyaW5nLlxuICAgICAgICAgICAgICAgIGlmIChfLmlzQXJyYXkoZW50cmllcykgJiYgXy5pc09iamVjdChlbnRyaWVzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSBfLmZpbHRlcihlbnRyaWVzLCBlbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF8uaW5jbHVkZXMoXy50b0xvd2VyKF8udmFsdWVzKGVudHJ5KS5qb2luKCcgJykpLCBfLnRvTG93ZXIocXVlcnlUZXh0KSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSBfLmZpbHRlcihlbnRyaWVzLCBlbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhc2VzZW5zaXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IF8udG9Mb3dlcihlbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUZXh0ID0gXy50b0xvd2VyKHF1ZXJ5VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyhlbnRyeSwgcXVlcnlUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTogZmlsdGVyZWREYXRhLFxuICAgICAgICAgICAgICAgIGhhc01vcmVEYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0xhc3RQYWdlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19