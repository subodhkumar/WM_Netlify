import { QueryList, ViewChildren } from '@angular/core';
import { StylableComponent } from './stylable.component';
import { MenuComponent } from '../menu/menu.component';
const menuProps = ['itemlabel', 'itemicon', 'itemlink', 'itemaction', 'itemchildren', 'userrole'];
export class MenuAdapterComponent extends StylableComponent {
    constructor(inj, WIDGET_CONFIG) {
        super(inj, WIDGET_CONFIG);
        this.pageScope = this.viewParent;
        this.binditemlabel = this.nativeElement.getAttribute('itemlabel.bind');
        this.binditemicon = this.nativeElement.getAttribute('itemicon.bind');
        this.binditemaction = this.nativeElement.getAttribute('itemaction.bind');
        this.binditemlink = this.nativeElement.getAttribute('itemlink.bind');
        this.binduserrole = this.nativeElement.getAttribute('userrole.bind');
        this.binditemchildren = this.nativeElement.getAttribute('itemchildren.bind');
    }
    onPropertyChange(key, nv, ov) {
        if (_.includes(menuProps, key) && this.menuRef) {
            this.menuRef.itemlabel = nv;
        }
        else {
            super.onPropertyChange(key, nv, ov);
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const subscriber = this.menuRefQL.changes.subscribe((menuRefQL) => {
            if (menuRefQL.first) {
                this.menuRef = menuRefQL.first;
                menuProps.forEach((prop) => {
                    const bindProp = `bind${prop}`;
                    if (this[bindProp]) {
                        this.menuRef[bindProp] = this[bindProp];
                    }
                    this.menuRef[prop] = this[prop];
                });
                subscriber.unsubscribe();
            }
        });
    }
}
MenuAdapterComponent.propDecorators = {
    menuRefQL: [{ type: ViewChildren, args: [MenuComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1hZGFwYXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIndpZGdldHMvY29tbW9uL2Jhc2UvbWVudS1hZGFwYXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUl2RCxNQUFNLFNBQVMsR0FBRyxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFbEcsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGlCQUFpQjtJQWV2RCxZQUNJLEdBQUcsRUFDSCxhQUFhO1FBRWIsS0FBSyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLEVBQU8sRUFBRSxFQUFRO1FBQzNDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7U0FDL0I7YUFBTTtZQUNILEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztJQUVELGVBQWU7UUFDWCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBbUMsRUFBRSxFQUFFO1lBQ3hGLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtnQkFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO2dCQUMvQixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ3ZCLE1BQU0sUUFBUSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7b0JBQy9CLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO3dCQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDM0M7b0JBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BDLENBQUMsQ0FBQyxDQUFDO2dCQUNILFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUM1QjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7O3dCQXhDQSxZQUFZLFNBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkcmVuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN0eWxhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9zdHlsYWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWVudUNvbXBvbmVudCB9IGZyb20gJy4uL21lbnUvbWVudS5jb21wb25lbnQnO1xuXG5kZWNsYXJlIGNvbnN0IF87XG5cbmNvbnN0IG1lbnVQcm9wcyA9IFsnaXRlbWxhYmVsJywgJ2l0ZW1pY29uJywgJ2l0ZW1saW5rJywgJ2l0ZW1hY3Rpb24nLCAnaXRlbWNoaWxkcmVuJywgJ3VzZXJyb2xlJ107XG5cbmV4cG9ydCBjbGFzcyBNZW51QWRhcHRlckNvbXBvbmVudCBleHRlbmRzIFN0eWxhYmxlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBwcml2YXRlIGl0ZW1sYWJlbDtcbiAgICBwcml2YXRlIG1lbnVSZWY7XG4gICAgcHJpdmF0ZSBwYWdlU2NvcGU7XG5cbiAgICBwcml2YXRlIGJpbmRpdGVtbGFiZWw7XG4gICAgcHJpdmF0ZSBiaW5kaXRlbWljb247XG4gICAgcHJpdmF0ZSBiaW5kaXRlbWFjdGlvbjtcbiAgICBwcml2YXRlIGJpbmRpdGVtY2hpbGRyZW47XG4gICAgcHJpdmF0ZSBiaW5kaXRlbWxpbms7XG4gICAgcHJpdmF0ZSBiaW5kdXNlcnJvbGU7XG5cbiAgICBAVmlld0NoaWxkcmVuKE1lbnVDb21wb25lbnQpIHByaXZhdGUgbWVudVJlZlFMOiBRdWVyeUxpc3Q8TWVudUNvbXBvbmVudD47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5qLFxuICAgICAgICBXSURHRVRfQ09ORklHLFxuICAgICkge1xuICAgICAgICBzdXBlcihpbmosIFdJREdFVF9DT05GSUcpO1xuXG4gICAgICAgIHRoaXMucGFnZVNjb3BlID0gdGhpcy52aWV3UGFyZW50O1xuICAgICAgICB0aGlzLmJpbmRpdGVtbGFiZWwgPSB0aGlzLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpdGVtbGFiZWwuYmluZCcpO1xuICAgICAgICB0aGlzLmJpbmRpdGVtaWNvbiA9IHRoaXMubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2l0ZW1pY29uLmJpbmQnKTtcbiAgICAgICAgdGhpcy5iaW5kaXRlbWFjdGlvbiA9IHRoaXMubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2l0ZW1hY3Rpb24uYmluZCcpO1xuICAgICAgICB0aGlzLmJpbmRpdGVtbGluayA9IHRoaXMubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2l0ZW1saW5rLmJpbmQnKTtcbiAgICAgICAgdGhpcy5iaW5kdXNlcnJvbGUgPSB0aGlzLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCd1c2Vycm9sZS5iaW5kJyk7XG4gICAgICAgIHRoaXMuYmluZGl0ZW1jaGlsZHJlbiA9IHRoaXMubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2l0ZW1jaGlsZHJlbi5iaW5kJyk7XG4gICAgfVxuXG4gICAgb25Qcm9wZXJ0eUNoYW5nZShrZXk6IHN0cmluZywgbnY6IGFueSwgb3Y/OiBhbnkpIHtcbiAgICAgICAgaWYgKF8uaW5jbHVkZXMobWVudVByb3BzLCBrZXkpICYmIHRoaXMubWVudVJlZikge1xuICAgICAgICAgICAgdGhpcy5tZW51UmVmLml0ZW1sYWJlbCA9IG52O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIub25Qcm9wZXJ0eUNoYW5nZShrZXksIG52LCBvdik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuICAgICAgICBjb25zdCBzdWJzY3JpYmVyID0gdGhpcy5tZW51UmVmUUwuY2hhbmdlcy5zdWJzY3JpYmUoKG1lbnVSZWZRTDogUXVlcnlMaXN0PE1lbnVDb21wb25lbnQ+KSA9PiB7XG4gICAgICAgICAgICBpZiAobWVudVJlZlFMLmZpcnN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZW51UmVmID0gbWVudVJlZlFMLmZpcnN0O1xuICAgICAgICAgICAgICAgIG1lbnVQcm9wcy5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRQcm9wID0gYGJpbmQke3Byb3B9YDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbYmluZFByb3BdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnVSZWZbYmluZFByb3BdID0gdGhpc1tiaW5kUHJvcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51UmVmW3Byb3BdID0gdGhpc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==