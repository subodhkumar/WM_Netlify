import { $appDigest, findValueOf, isObject, validateAccessRoles } from '@wm/core';
import { SecurityService } from '@wm/security';
import { createArrayFrom } from '../../../utils/data-utils';
import { getEvaluatedData } from '../../../utils/widget-utils';
import { getOrderedDataset } from '../../../utils/form-utils';
import { StylableComponent } from './stylable.component';
const getValidLink = (link) => {
    const routRegex = /^(\/|#\/|#)(?!\W).*/;
    if (link) {
        if (routRegex.test(link)) {
            link = _.first(link.match(/[\w]+.*/g)) || '';
            return `#/${link}`;
        }
        if (_.startsWith(link, 'www.')) {
            return `//${link}`;
        }
        return link;
    }
};
const ɵ0 = getValidLink;
export class DatasetAwareNavComponent extends StylableComponent {
    constructor(inj, WIDGET_CONFIG) {
        super(inj, WIDGET_CONFIG);
        this.nodes = [];
        // debounce function for reset nodes functions.
        this._resetNodes = _.debounce(this.resetNodes, 50);
        this.securityService = this.inj.get(SecurityService);
        this.binditemlabel = this.nativeElement.getAttribute('itemlabel.bind');
        this.binditemicon = this.nativeElement.getAttribute('itemicon.bind');
        this.binditemaction = this.nativeElement.getAttribute('itemaction.bind');
        this.binditembadge = this.nativeElement.getAttribute('itembadge.bind');
        this.binditemchildren = this.nativeElement.getAttribute('itemchildren.bind');
        this.binditemid = this.nativeElement.getAttribute('itemid.bind');
        this.binditemlink = this.nativeElement.getAttribute('itemlink.bind');
        this.binditemtarget = this.nativeElement.getAttribute('itemtarget.bind');
        this.binduserrole = this.nativeElement.getAttribute('userrole.bind');
    }
    /**
     * constructs individual node for the widget model.
     * @param fields
     * @param node
     */
    getNode(fields, node) {
        const context = this.viewParent.pageScope || this.viewParent;
        const children = getEvaluatedData(node, { expression: 'itemchildren', bindExpression: this.binditemchildren }, context) || _.get(node, fields.childrenField);
        const navNode = {
            action: getEvaluatedData(node, { expression: 'itemaction', bindExpression: this.binditemaction }, context) || _.get(node, fields.actionField),
            badge: getEvaluatedData(node, { expression: 'itembadge', bindExpression: this.binditembadge }, context) || _.get(node, fields.badgeField),
            children: Array.isArray(children) ? this.getNodes(children) : [],
            class: _.get(node, fields.classField),
            disabled: node.disabled,
            icon: getEvaluatedData(node, { expression: 'itemicon', bindExpression: this.binditemicon }, context) || _.get(node, fields.iconField),
            id: getEvaluatedData(node, { expression: 'itemid', bindExpression: this.binditemid }, context) || _.get(node, fields.idField),
            label: getEvaluatedData(node, { expression: 'itemlabel', bindExpression: this.binditemlabel }, context) || _.get(node, fields.labelField),
            link: getValidLink(getEvaluatedData(node, { expression: 'itemlink', bindExpression: this.binditemlink }, context) || _.get(node, fields.linkField)),
            target: getValidLink(getEvaluatedData(node, { expression: 'itemtarget', bindExpression: this.binditemtarget }, context) || _.get(node, fields.targetField)),
            role: getEvaluatedData(node, { expression: 'userrole', bindExpression: this.binduserrole }, context),
            // older projects have display field & data field property for menu.
            value: this.datafield ? (this.datafield === 'All Fields' ? node : findValueOf(node, this.datafield)) : node
        };
        return _.omitBy(navNode, _.isUndefined);
    }
    resetItemFieldMap() {
        this._itemFieldMap = null;
    }
    getItemFieldsMap() {
        if (!this._itemFieldMap) {
            this._itemFieldMap = {
                idField: this.itemid || 'itemid',
                iconField: this.itemicon || 'icon',
                labelField: this.itemlabel || 'label',
                linkField: this.itemlink || 'link',
                targetField: this.itemtarget || 'target',
                badgeField: this.itembadge || 'badge',
                childrenField: this.itemchildren || 'children',
                classField: this.itemclass || 'class',
                actionField: this.itemaction || 'action'
            };
        }
        return this._itemFieldMap;
    }
    /**
     * returns array for the value passed as nv.
     * nv: 'a,b' => [{label:a, value:a}, {label:b, value:b}]
     * nv: [1,2] => [{label:1, value:1}, {label:2, value:2}]
     * nv: [{obj}, {obj}] => [{obj}, {obj}]
     * @param nv
     */
    prepareNodeDataSet(nv) {
        nv = createArrayFrom(nv);
        return nv.map((val) => {
            if (!isObject(val)) {
                return {
                    label: val,
                    value: val
                };
            }
            return val;
        });
    }
    /**
     * constructs dataset form the nav elements.
     */
    getNodes(nv = this.dataset || {}) {
        let nodes = getOrderedDataset(this.prepareNodeDataSet(nv), this.orderby) || [];
        if (nodes.length) {
            const userRole = this.userrole;
            const nodeFields = this.getItemFieldsMap();
            nodes = nodes.reduce((result, node) => {
                if (validateAccessRoles(node[userRole], this.securityService.loggedInUser)) {
                    result.push(this.getNode(nodeFields, node));
                }
                return result;
            }, []);
        }
        return nodes;
    }
    // enable the inherited class to extend this method.
    resetNodes() {
        this.resetItemFieldMap();
        this.nodes = this.getNodes();
        $appDigest();
    }
    onPropertyChange(key, nv, ov) {
        switch (key) {
            case 'dataset':
            case 'itemicon':
            case 'itemlabel':
            case 'itemlink':
            case 'itemtarget':
            case 'itemclass':
            case 'itemchildren':
            case 'orderby':
                // calls resetnodes method after 50ms. any calls within 50ms will be ignored.
                this._resetNodes();
                break;
        }
        super.onPropertyChange(key, nv, ov);
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,