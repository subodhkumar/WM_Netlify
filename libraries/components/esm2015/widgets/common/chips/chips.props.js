import { PROP_ANY, PROP_BOOLEAN, PROP_NUMBER, PROP_STRING, register } from '../../framework/widget-props';
export const chipsProps = new Map([
    ['allowonlyselect', PROP_BOOLEAN],
    ['autofocus', PROP_BOOLEAN],
    ['chipclass', PROP_STRING],
    ['class', PROP_STRING],
    ['compareby', PROP_STRING],
    ['datafield', PROP_STRING],
    ['dataoptions', PROP_ANY],
    ['dataset', Object.assign({ value: 'Option 1, Option 2, Option 3' }, PROP_ANY)],
    ['datasource', PROP_ANY],
    ['datavalue', PROP_ANY],
    ['datavaluesource', PROP_ANY],
    ['disabled', PROP_BOOLEAN],
    ['displayexpression', PROP_STRING],
    ['displayfield', PROP_STRING],
    ['displayimagesrc', PROP_STRING],
    ['enablereorder', PROP_BOOLEAN],
    ['inputposition', Object.assign({ value: 'last' }, PROP_STRING)],
    ['inputwidth', Object.assign({ value: 'default' }, PROP_STRING)],
    ['limit', PROP_NUMBER],
    ['loadingdatamsg', Object.assign({ value: 'Loading items...' }, PROP_STRING)],
    ['matchmode', PROP_STRING],
    ['maxsize', PROP_NUMBER],
    ['minchars', Object.assign({ value: 1 }, PROP_NUMBER)],
    ['name', PROP_STRING],
    ['navsearchbar', Object.assign({ value: false }, PROP_BOOLEAN)],
    ['orderby', PROP_STRING],
    ['placeholder', Object.assign({ value: 'Type here..' }, PROP_STRING)],
    ['query', PROP_STRING],
    ['readonly', PROP_BOOLEAN],
    ['searchkey', PROP_STRING],
    ['shortcutkey', PROP_STRING],
    ['show', Object.assign({ value: true }, PROP_BOOLEAN)],
    ['showsearchicon', PROP_BOOLEAN],
    ['tabindex', Object.assign({ value: 0 }, PROP_NUMBER)],
    ['type', Object.assign({ value: 'search' }, PROP_STRING)],
    ['debouncetime', Object.assign({ value: 250 }, PROP_NUMBER)],
]);
export const registerProps = () => {
    register('wm-chips', chipsProps);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHMucHJvcHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIndpZGdldHMvY29tbW9uL2NoaXBzL2NoaXBzLnByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFMUcsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUM3QjtJQUNJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDO0lBQ2pDLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQztJQUMzQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7SUFDMUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDO0lBQ3RCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQztJQUMxQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7SUFDMUIsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDO0lBQ3pCLENBQUMsU0FBUyxrQkFBRyxLQUFLLEVBQUUsOEJBQThCLElBQUssUUFBUSxFQUFFO0lBQ2pFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQztJQUN4QixDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7SUFDdkIsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUM7SUFDN0IsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDO0lBQzFCLENBQUMsbUJBQW1CLEVBQUUsV0FBVyxDQUFDO0lBQ2xDLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQztJQUM3QixDQUFDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQztJQUNoQyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUM7SUFDL0IsQ0FBQyxlQUFlLGtCQUFHLEtBQUssRUFBRSxNQUFNLElBQUssV0FBVyxFQUFFO0lBQ2xELENBQUMsWUFBWSxrQkFBRyxLQUFLLEVBQUUsU0FBUyxJQUFLLFdBQVcsRUFBRTtJQUNsRCxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7SUFDdEIsQ0FBQyxnQkFBZ0Isa0JBQUcsS0FBSyxFQUFFLGtCQUFrQixJQUFLLFdBQVcsRUFBRTtJQUMvRCxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7SUFDMUIsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO0lBQ3hCLENBQUMsVUFBVSxrQkFBRyxLQUFLLEVBQUUsQ0FBQyxJQUFNLFdBQVcsRUFBRTtJQUN6QyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7SUFDckIsQ0FBQyxjQUFjLGtCQUFHLEtBQUssRUFBRSxLQUFLLElBQUssWUFBWSxFQUFFO0lBQ2pELENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQztJQUN4QixDQUFDLGFBQWEsa0JBQUcsS0FBSyxFQUFFLGFBQWEsSUFBSyxXQUFXLEVBQUU7SUFDdkQsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDO0lBQ3RCLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQztJQUMxQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7SUFDMUIsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDO0lBQzVCLENBQUMsTUFBTSxrQkFBRyxLQUFLLEVBQUUsSUFBSSxJQUFLLFlBQVksRUFBRTtJQUN4QyxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQztJQUNoQyxDQUFDLFVBQVUsa0JBQUcsS0FBSyxFQUFFLENBQUMsSUFBSyxXQUFXLEVBQUU7SUFDeEMsQ0FBQyxNQUFNLGtCQUFHLEtBQUssRUFBRSxRQUFRLElBQUssV0FBVyxFQUFFO0lBQzNDLENBQUMsY0FBYyxrQkFBRyxLQUFLLEVBQUUsR0FBRyxJQUFLLFdBQVcsRUFBRTtDQUNqRCxDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQzlCLFFBQVEsQ0FDSixVQUFVLEVBQ1YsVUFBVSxDQUNiLENBQUM7QUFDTixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQUk9QX0FOWSwgUFJPUF9CT09MRUFOLCBQUk9QX05VTUJFUiwgUFJPUF9TVFJJTkcsIHJlZ2lzdGVyIH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL3dpZGdldC1wcm9wcyc7XG5cbmV4cG9ydCBjb25zdCBjaGlwc1Byb3BzID0gbmV3IE1hcChcbiAgICBbXG4gICAgICAgIFsnYWxsb3dvbmx5c2VsZWN0JywgUFJPUF9CT09MRUFOXSxcbiAgICAgICAgWydhdXRvZm9jdXMnLCBQUk9QX0JPT0xFQU5dLFxuICAgICAgICBbJ2NoaXBjbGFzcycsIFBST1BfU1RSSU5HXSxcbiAgICAgICAgWydjbGFzcycsIFBST1BfU1RSSU5HXSxcbiAgICAgICAgWydjb21wYXJlYnknLCBQUk9QX1NUUklOR10sXG4gICAgICAgIFsnZGF0YWZpZWxkJywgUFJPUF9TVFJJTkddLFxuICAgICAgICBbJ2RhdGFvcHRpb25zJywgUFJPUF9BTlldLFxuICAgICAgICBbJ2RhdGFzZXQnLCB7dmFsdWU6ICdPcHRpb24gMSwgT3B0aW9uIDIsIE9wdGlvbiAzJywgLi4uUFJPUF9BTll9XSxcbiAgICAgICAgWydkYXRhc291cmNlJywgUFJPUF9BTlldLFxuICAgICAgICBbJ2RhdGF2YWx1ZScsIFBST1BfQU5ZXSxcbiAgICAgICAgWydkYXRhdmFsdWVzb3VyY2UnLCBQUk9QX0FOWV0sXG4gICAgICAgIFsnZGlzYWJsZWQnLCBQUk9QX0JPT0xFQU5dLFxuICAgICAgICBbJ2Rpc3BsYXlleHByZXNzaW9uJywgUFJPUF9TVFJJTkddLFxuICAgICAgICBbJ2Rpc3BsYXlmaWVsZCcsIFBST1BfU1RSSU5HXSxcbiAgICAgICAgWydkaXNwbGF5aW1hZ2VzcmMnLCBQUk9QX1NUUklOR10sXG4gICAgICAgIFsnZW5hYmxlcmVvcmRlcicsIFBST1BfQk9PTEVBTl0sXG4gICAgICAgIFsnaW5wdXRwb3NpdGlvbicsIHt2YWx1ZTogJ2xhc3QnLCAuLi5QUk9QX1NUUklOR31dLFxuICAgICAgICBbJ2lucHV0d2lkdGgnLCB7dmFsdWU6ICdkZWZhdWx0JywgLi4uUFJPUF9TVFJJTkd9XSxcbiAgICAgICAgWydsaW1pdCcsIFBST1BfTlVNQkVSXSxcbiAgICAgICAgWydsb2FkaW5nZGF0YW1zZycsIHt2YWx1ZTogJ0xvYWRpbmcgaXRlbXMuLi4nLCAuLi5QUk9QX1NUUklOR31dLFxuICAgICAgICBbJ21hdGNobW9kZScsIFBST1BfU1RSSU5HXSxcbiAgICAgICAgWydtYXhzaXplJywgUFJPUF9OVU1CRVJdLFxuICAgICAgICBbJ21pbmNoYXJzJywge3ZhbHVlOiAxICwgLi4uUFJPUF9OVU1CRVJ9XSxcbiAgICAgICAgWyduYW1lJywgUFJPUF9TVFJJTkddLFxuICAgICAgICBbJ25hdnNlYXJjaGJhcicsIHt2YWx1ZTogZmFsc2UsIC4uLlBST1BfQk9PTEVBTn1dLFxuICAgICAgICBbJ29yZGVyYnknLCBQUk9QX1NUUklOR10sXG4gICAgICAgIFsncGxhY2Vob2xkZXInLCB7dmFsdWU6ICdUeXBlIGhlcmUuLicsIC4uLlBST1BfU1RSSU5HfV0sXG4gICAgICAgIFsncXVlcnknLCBQUk9QX1NUUklOR10sXG4gICAgICAgIFsncmVhZG9ubHknLCBQUk9QX0JPT0xFQU5dLFxuICAgICAgICBbJ3NlYXJjaGtleScsIFBST1BfU1RSSU5HXSxcbiAgICAgICAgWydzaG9ydGN1dGtleScsIFBST1BfU1RSSU5HXSxcbiAgICAgICAgWydzaG93Jywge3ZhbHVlOiB0cnVlLCAuLi5QUk9QX0JPT0xFQU59XSxcbiAgICAgICAgWydzaG93c2VhcmNoaWNvbicsIFBST1BfQk9PTEVBTl0sXG4gICAgICAgIFsndGFiaW5kZXgnLCB7dmFsdWU6IDAsIC4uLlBST1BfTlVNQkVSfV0sXG4gICAgICAgIFsndHlwZScsIHt2YWx1ZTogJ3NlYXJjaCcsIC4uLlBST1BfU1RSSU5HfV0sXG4gICAgICAgIFsnZGVib3VuY2V0aW1lJywge3ZhbHVlOiAyNTAsIC4uLlBST1BfTlVNQkVSfV0sXG4gICAgXVxuKTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyUHJvcHMgPSAoKSA9PiB7XG4gICAgcmVnaXN0ZXIoXG4gICAgICAgICd3bS1jaGlwcycsXG4gICAgICAgIGNoaXBzUHJvcHNcbiAgICApO1xufTtcblxuIl19