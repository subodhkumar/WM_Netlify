import { SwipeAnimation } from '@swipey';
import { $appDigest, addClass, setCSS, setCSSFromObj } from '@wm/core';
export class TabsAnimator extends SwipeAnimation {
    constructor(tabs) {
        super();
        this.tabs = tabs;
        this._$el = $(this.tabs.getNativeElement()).find('>.tab-content');
        const childEls = this._$el.find('>[wmTabPane]');
        this._noOfTabs = childEls.length;
        const maxWidth = `${this._noOfTabs * 100}%`;
        addClass(this.tabs.getNativeElement(), 'has-transition');
        setCSSFromObj(this._$el[0], { maxWidth: maxWidth, width: maxWidth });
        const width = `${100 / this._noOfTabs}%`;
        for (const child of Array.from(childEls)) {
            setCSS(child, 'width', width);
        }
        this.init(this._$el);
    }
    bounds() {
        const activeTabIndex = this.tabs.getActiveTabIndex(), w = this._$el.find('>.tab-pane:first').width(), noOfTabs = this._$el.find('>.tab-pane:visible').length, centerVal = -1 * activeTabIndex * w;
        return {
            strict: false,
            lower: activeTabIndex === noOfTabs - 1 ? 0 : -w,
            center: centerVal,
            upper: activeTabIndex === 0 ? centerVal : w
        };
    }
    context() {
        return {
            'w': this._$el.width()
        };
    }
    animation() {
        return {
            'transform': 'translate3d(${{ ($D + $d)/w * 100 + \'%\'}}, 0, 0)',
            '-webkit-transform': 'translate3d(${{ ($D + $d)/w * 100 + \'%\'}}, 0, 0)'
        };
    }
    transitionTabIntoView() {
        const activeTabIndex = this.tabs.getActiveTabIndex();
        setCSS(this._$el[0], 'transform', `translate3d(${-1 * activeTabIndex / this._noOfTabs * 100}%, 0, 0)`);
    }
    onUpper() {
        this.tabs.prev();
        $appDigest();
    }
    onLower() {
        this.tabs.next();
        $appDigest();
    }
    threshold() {
        return 5;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5hbmltYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vdGFicy90YWJzLmFuaW1hdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQU12RSxNQUFNLE9BQU8sWUFBYSxTQUFRLGNBQWM7SUFLNUMsWUFBMkIsSUFBbUI7UUFDMUMsS0FBSyxFQUFFLENBQUM7UUFEZSxTQUFJLEdBQUosSUFBSSxDQUFlO1FBRTFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNsRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFFakMsTUFBTSxRQUFRLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7UUFDbkUsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDO1FBQ3pDLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN0QyxNQUFNLENBQUMsS0FBb0IsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sTUFBTTtRQUNULE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFDaEQsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsS0FBSyxFQUFFLEVBQzlDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sRUFDdEQsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEMsT0FBTztZQUNILE1BQU0sRUFBRSxLQUFLO1lBQ2IsS0FBSyxFQUFFLGNBQWMsS0FBSyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxNQUFNLEVBQUUsU0FBUztZQUNqQixLQUFLLEVBQUUsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlDLENBQUM7SUFDTixDQUFDO0lBRU0sT0FBTztRQUNWLE9BQU87WUFDSCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7U0FDekIsQ0FBQztJQUNOLENBQUM7SUFFTSxTQUFTO1FBQ1osT0FBTztZQUNILFdBQVcsRUFBRSxvREFBb0Q7WUFDakUsbUJBQW1CLEVBQUUsb0RBQW9EO1NBQzVFLENBQUM7SUFDTixDQUFDO0lBRU0scUJBQXFCO1FBQ3hCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUMsR0FBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFTSxPQUFPO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixVQUFVLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakIsVUFBVSxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVNLFNBQVM7UUFDWixPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN3aXBlQW5pbWF0aW9uIH0gZnJvbSAnQHN3aXBleSc7XG5cbmltcG9ydCB7ICRhcHBEaWdlc3QsIGFkZENsYXNzLCBzZXRDU1MsIHNldENTU0Zyb21PYmogfSBmcm9tICdAd20vY29yZSc7XG5cbmltcG9ydCB7IFRhYnNDb21wb25lbnQgfSBmcm9tICcuL3RhYnMuY29tcG9uZW50JztcblxuZGVjbGFyZSBjb25zdCAkO1xuXG5leHBvcnQgY2xhc3MgVGFic0FuaW1hdG9yIGV4dGVuZHMgU3dpcGVBbmltYXRpb24ge1xuXG4gICAgcHJpdmF0ZSBfJGVsO1xuICAgIHByaXZhdGUgX25vT2ZUYWJzO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFiczogVGFic0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl8kZWwgPSAkKHRoaXMudGFicy5nZXROYXRpdmVFbGVtZW50KCkpLmZpbmQoJz4udGFiLWNvbnRlbnQnKTtcbiAgICAgICAgY29uc3QgY2hpbGRFbHMgPSB0aGlzLl8kZWwuZmluZCgnPlt3bVRhYlBhbmVdJyk7XG4gICAgICAgIHRoaXMuX25vT2ZUYWJzID0gY2hpbGRFbHMubGVuZ3RoO1xuXG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gYCR7dGhpcy5fbm9PZlRhYnMgKiAxMDB9JWA7XG4gICAgICAgIGFkZENsYXNzKHRoaXMudGFicy5nZXROYXRpdmVFbGVtZW50KCksICdoYXMtdHJhbnNpdGlvbicpO1xuICAgICAgICBzZXRDU1NGcm9tT2JqKHRoaXMuXyRlbFswXSwge21heFdpZHRoOiBtYXhXaWR0aCwgd2lkdGg6IG1heFdpZHRofSk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gYCR7MTAwIC8gdGhpcy5fbm9PZlRhYnN9JWA7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgQXJyYXkuZnJvbShjaGlsZEVscykpIHtcbiAgICAgICAgICAgIHNldENTUyhjaGlsZCBhcyBIVE1MRWxlbWVudCwgJ3dpZHRoJywgd2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdCh0aGlzLl8kZWwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBib3VuZHMoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRhYkluZGV4ID0gdGhpcy50YWJzLmdldEFjdGl2ZVRhYkluZGV4KCksXG4gICAgICAgICAgICB3ID0gdGhpcy5fJGVsLmZpbmQoJz4udGFiLXBhbmU6Zmlyc3QnKS53aWR0aCgpLFxuICAgICAgICAgICAgbm9PZlRhYnMgPSB0aGlzLl8kZWwuZmluZCgnPi50YWItcGFuZTp2aXNpYmxlJykubGVuZ3RoLFxuICAgICAgICAgICAgY2VudGVyVmFsID0gLTEgKiBhY3RpdmVUYWJJbmRleCAqIHc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdHJpY3Q6IGZhbHNlLFxuICAgICAgICAgICAgbG93ZXI6IGFjdGl2ZVRhYkluZGV4ID09PSBub09mVGFicyAtIDEgPyAwIDogLXcsXG4gICAgICAgICAgICBjZW50ZXI6IGNlbnRlclZhbCxcbiAgICAgICAgICAgIHVwcGVyOiBhY3RpdmVUYWJJbmRleCA9PT0gMCA/IGNlbnRlclZhbCA6IHdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd3JzogdGhpcy5fJGVsLndpZHRoKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYW5pbWF0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGUzZCgke3sgKCREICsgJGQpL3cgKiAxMDAgKyBcXCclXFwnfX0sIDAsIDApJyxcbiAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGUzZCgke3sgKCREICsgJGQpL3cgKiAxMDAgKyBcXCclXFwnfX0sIDAsIDApJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2l0aW9uVGFiSW50b1ZpZXcoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRhYkluZGV4ID0gdGhpcy50YWJzLmdldEFjdGl2ZVRhYkluZGV4KCk7XG4gICAgICAgIHNldENTUyh0aGlzLl8kZWxbMF0sICd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlM2QoJHstMSAqICBhY3RpdmVUYWJJbmRleCAvIHRoaXMuX25vT2ZUYWJzICogMTAwfSUsIDAsIDApYCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uVXBwZXIoKSB7XG4gICAgICAgIHRoaXMudGFicy5wcmV2KCk7XG4gICAgICAgICRhcHBEaWdlc3QoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Mb3dlcigpIHtcbiAgICAgICAgdGhpcy50YWJzLm5leHQoKTtcbiAgICAgICAgJGFwcERpZ2VzdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0aHJlc2hvbGQoKSB7XG4gICAgICAgIHJldHVybiA1O1xuICAgIH1cbn1cbiJdfQ==