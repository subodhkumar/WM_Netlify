import { Directive, ElementRef, HostBinding, HostListener, Injector, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { $invokeWatchers, $watch, App } from '@wm/core';
export class ListItemDirective {
    constructor(inj, elRef, app) {
        this.inj = inj;
        this.app = app;
        this.destroy = new Subject();
        this.destroy$ = this.destroy.asObservable();
        this.itemClass = '';
        this._currentItemWidgets = {};
        this.isActive = false;
        this.disableItem = false;
        this.nativeElement = elRef.nativeElement;
        this.listComponent = inj.view.component;
        this.context = inj.view.context;
        this.itemClassWatcher(this.listComponent);
        this.disableItemWatcher(this.listComponent);
        $(this.nativeElement).data('listItemContext', this);
    }
    onFocus() {
        // maintains which element is focused/selected most recently.
        this.listComponent.lastSelectedItem = this;
    }
    get $index() {
        return this.context.index;
    }
    get $even() {
        return this.context.even;
    }
    get $odd() {
        return this.context.odd;
    }
    get $first() {
        return this.context.first;
    }
    get $last() {
        return this.context.last;
    }
    get currentItemWidgets() {
        const componentElements = Array.from(this.nativeElement.querySelectorAll('[widget-id]'));
        return Object.assign(this._currentItemWidgets, componentElements.reduce((result, comp) => {
            result[comp.widget.name] = comp.widget;
            return result;
        }, {}));
    }
    set wmListItem(val) {
        this.item = val;
    }
    registerWatch(expression, callback) {
        // Removing ngFor context as the same properties are availble on listitem scope.
        // passing viewparent context for accessing varibales and widgets.
        this.destroy$.subscribe($watch(expression, this.listComponent.viewParent, this, callback));
    }
    itemClassWatcher(listComponent) {
        if (listComponent.binditemclass) {
            this.registerWatch(listComponent.binditemclass, nv => this.itemClass = nv || '');
        }
        else {
            this.itemClass = listComponent.itemclass;
        }
    }
    disableItemWatcher($list) {
        if ($list.binddisableitem) {
            this.registerWatch($list.binddisableitem, nv => this.disableItem = nv || false);
        }
        else {
            this.disableItem = $list.disableitem || false;
        }
    }
    triggerWMEvent(eventName) {
        $invokeWatchers(true);
        // If we have multiselect for the livelist(List with form template), in run mode deleting a record is getting failed. Becuase the selecteditem will be array of objects. So consider the last object.
        const row = this.listComponent.multiselect ? _.last(this.listComponent.selecteditem) : this.listComponent.selecteditem;
        this.app.notify('wm-event', { eventName, widgetName: this.listComponent.name, row: row });
    }
    setUpCUDHandlers() {
        const $editItem = this.nativeElement.querySelector('.edit-list-item');
        const $deleteItem = this.nativeElement.querySelector('.delete-list-item');
        if ($editItem) {
            // Triggered on click of edit action
            $editItem.addEventListener('click', evt => {
                this.triggerWMEvent('update');
            });
        }
        if ($deleteItem) {
            // Triggered on click of delete action
            $deleteItem.addEventListener('click', evt => {
                this.triggerWMEvent('delete');
            });
        }
    }
    ngOnInit() {
        if (this.listComponent.mouseEnterCB) {
            this.nativeElement.addEventListener('mouseenter', ($event) => {
                this.listComponent.invokeEventCallback('mouseenter', { widget: this, $event });
            });
        }
        if (this.listComponent.mouseLeaveCB) {
            this.nativeElement.addEventListener('mouseleave', ($event) => {
                this.listComponent.invokeEventCallback('mouseleave', { widget: this, $event });
            });
        }
    }
    ngAfterViewInit() {
        this.setUpCUDHandlers();
    }
}
ListItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wmListItem]',
                exportAs: 'listItemRef'
            },] }
];
/** @nocollapse */
ListItemDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: App }
];
ListItemDirective.propDecorators = {
    isActive: [{ type: HostBinding, args: ['class.active',] }],
    disableItem: [{ type: HostBinding, args: ['class.disable-item',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    wmListItem: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,