import { Directive, Injector } from '@angular/core';
import { App, addClass, removeClass, switchClass, toggleClass } from '@wm/core';
import { APPLY_STYLES_TYPE, styler } from '../../framework/styler';
import { StylableComponent } from '../base/stylable.component';
import { registerProps } from './left-panel.props';
import { LeftPanelAnimator } from './left-panel.animator';
import { PageDirective } from '../page/page.directive';
import { provideAsWidgetRef } from '../../../utils/widget-utils';
const DEFAULT_CLS = 'app-left-panel left-panel-collapsed';
const WIDGET_CONFIG = {
    widgetType: 'wm-left-panel',
    hostClass: DEFAULT_CLS
};
export var AnimationType;
(function (AnimationType) {
    AnimationType["SLIDE_IN"] = "slide-in";
    AnimationType["SLIDE_OVER"] = "slide-over";
})(AnimationType || (AnimationType = {}));
export class LeftPanelDirective extends StylableComponent {
    constructor(app, page, inj) {
        super(inj, WIDGET_CONFIG);
        this.app = app;
        this.page = page;
        styler(this.nativeElement, this, APPLY_STYLES_TYPE.CONTAINER);
        this.$ele = this.$element;
        this.$page = page.$element;
        addClass(this.$page[0], 'left-panel-collapsed-container');
        if (this.columnwidth) {
            this.setLeftPanelWidth(['md', 'sm'], this.columnwidth);
        }
        if (this.app.isTabletApplicationType) {
            addClass(this.nativeElement, 'wm-tablet-app-left-panel');
        }
    }
    collapse() {
        addClass(this.nativeElement, 'swipee-transition');
        switchClass(this.nativeElement, 'left-panel-collapsed', 'left-panel-expanded');
        this.expanded = false;
        switchClass(this.$page[0], 'left-panel-collapsed-container', 'left-panel-expanded-container');
        if (this.animation === AnimationType.SLIDE_IN) {
            this.setPageWidthAndPosition(['md', 'sm'], null, this.columnwidth);
            this.setPageWidthAndPosition(['xs'], null, this.xscolumnwidth);
        }
        if (this._destroyCollapseActionListener) {
            this._destroyCollapseActionListener();
        }
        this.page.notify('wmLeftPanel:collapse');
    }
    expand() {
        removeClass(this.nativeElement, 'swipee-transition');
        switchClass(this.nativeElement, 'left-panel-expanded', 'left-panel-collapsed');
        this.expanded = true;
        if (!(this.app.isTabletApplicationType && this.animation === AnimationType.SLIDE_IN)) {
            this._destroyCollapseActionListener = this.listenForCollapseAction();
        }
        switchClass(this.$page[0], 'left-panel-expanded-container', 'left-panel-collapsed-container');
        if (this.animation === AnimationType.SLIDE_IN) {
            this.setPageWidthAndPosition(['md', 'sm'], this.columnwidth);
            this.setPageWidthAndPosition(['xs'], this.xscolumnwidth);
        }
        this.page.notify('wmLeftPanel:expand');
    }
    isGesturesEnabled() {
        return this.gestures === 'on';
    }
    isVisible() {
        return this.expanded;
    }
    onPropertyChange(key, nv, ov) {
        switch (key) {
            case 'animation':
                if (nv === AnimationType.SLIDE_IN) {
                    removeClass(this.$page[0], 'slide-over-left-panel-container');
                    addClass(this.$page[0], 'slide-in-left-panel-container');
                    this.setPageWidthAndPosition(['md', 'sm'], this.columnwidth);
                    this.setPageWidthAndPosition(['xs'], this.xscolumnwidth);
                }
                else if (nv === AnimationType.SLIDE_OVER) {
                    removeClass(this.$page[0], 'slide-in-left-panel-container');
                    addClass(this.$page[0], 'slide-over-left-panel-container');
                }
                this._leftPanelAnimator = new LeftPanelAnimator(this);
                switchClass(this.nativeElement, nv, ov);
                break;
            case 'columnwidth':
                this.setLeftPanelWidth(['md', 'sm'], nv, ov);
                if (this.animation === AnimationType.SLIDE_IN) {
                    this.setPageWidthAndPosition(['md', 'sm'], nv, ov);
                }
                break;
            case 'expanded':
                toggleClass(this.nativeElement, 'left-panel-expanded', nv);
                toggleClass(this.nativeElement, 'left-panel-collapsed', !nv);
                break;
            case 'xscolumnwidth':
                this.setLeftPanelWidth(['xs'], nv, ov);
                if (this.animation === AnimationType.SLIDE_IN) {
                    this.setPageWidthAndPosition(['xs'], nv, ov);
                }
                break;
            default:
                super.onPropertyChange(key, nv, ov);
        }
    }
    toggle() {
        if (this.app.isTabletApplicationType) {
            setTimeout(() => {
                this.expanded ? this.collapse() : this.expand();
            }, 50);
        }
        else {
            this.$ele.swipeAnimation(this.expanded ? 'gotoLower' : 'gotoUpper');
        }
    }
    listenForCollapseAction() {
        const eventName = 'click.leftNavToggle';
        let skipEvent = false;
        this.$ele.on(eventName, () => {
            skipEvent = true;
        });
        this.$page.on(eventName, () => {
            if (!skipEvent) {
                this.toggle();
            }
            skipEvent = false;
        });
        return () => {
            this.$ele.off(eventName);
            this.$page.off(eventName);
        };
    }
    setLeftPanelWidth(devices, newVal, oldVal) {
        devices.forEach(device => {
            if (newVal) {
                addClass(this.nativeElement, `col-${device}-${newVal}`);
            }
            if (oldVal) {
                removeClass(this.nativeElement, `col-${device}-${oldVal}`);
            }
        });
    }
    setPageWidthAndPosition(devices, newVal, oldVal) {
        devices.forEach(device => {
            if (newVal) {
                addClass(this.$page[0], `left-panel-container-${device}-${12 - newVal}`);
            }
            if (oldVal) {
                removeClass(this.$page[0], `left-panel-container-${device}-${12 - oldVal}`);
            }
        });
    }
}
LeftPanelDirective.initializeProps = registerProps();
LeftPanelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wmLeftPanel]',
                providers: [
                    provideAsWidgetRef(LeftPanelDirective)
                ]
            },] }
];
/** @nocollapse */
LeftPanelDirective.ctorParameters = () => [
    { type: App },
    { type: PageDirective },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,