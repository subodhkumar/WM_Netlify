import { ContentChildren, Directive, HostBinding, Injector, Self } from '@angular/core';
import { NgForm } from '@angular/forms';
import { registerProps } from './wizard-step.props';
import { BaseComponent } from '../../base/base.component';
import { RedrawableDirective } from '../../redraw/redrawable.directive';
import { provideAsWidgetRef } from '../../../../utils/widget-utils';
const DEFAULT_CLS = 'app-wizard-step-content';
const WIDGET_CONFIG = {
    widgetType: 'wm-wizardstep',
    hostClass: DEFAULT_CLS,
};
export class WizardStepDirective extends BaseComponent {
    constructor(inj, ngForm) {
        super(inj, WIDGET_CONFIG);
        this.ngForm = ngForm;
        this.status = 2 /* DISABLED */;
    }
    get isCurrent() {
        return this.active;
    }
    get isValid() {
        return this.ngForm.valid;
    }
    get enableNext() {
        return !this.disablenext;
    }
    get enableDone() {
        return !this.disabledone;
    }
    get enablePrev() {
        return !this.disableprevious;
    }
    set active(nv) {
        const isActive = this.active;
        this.status = 1 /* CURRENT */;
        if (nv && !isActive) {
            this.invokeEventCallback('load');
            this.redrawChildren();
        }
    }
    get active() {
        return this.status === 1 /* CURRENT */;
    }
    set done(nv) {
        if (nv) {
            this.status = 3 /* COMPLETED */;
        }
    }
    get done() {
        return this.status === 3 /* COMPLETED */;
    }
    set disabled(nv) {
        if (nv) {
            this.status = 2 /* DISABLED */;
        }
    }
    get disabled() {
        return this.status === 2 /* DISABLED */;
    }
    onNext(index) {
        return this.invokeEventCallback('next', { currentStep: this, stepIndex: index });
    }
    onPrev(index) {
        return this.invokeEventCallback('prev', { currentStep: this, stepIndex: index });
    }
    onSkip(index) {
        return this.invokeEventCallback('skip', { currentStep: this, stepIndex: index });
    }
    // redraw all the projected components which are projected.
    redrawChildren() {
        setTimeout(() => {
            if (this.reDrawableComponents) {
                this.reDrawableComponents.forEach(c => c.redraw());
            }
        }, 100);
    }
}
WizardStepDirective.initializeProps = registerProps();
WizardStepDirective.decorators = [
    { type: Directive, args: [{
                selector: 'form[wmWizardStep]',
                providers: [
                    provideAsWidgetRef(WizardStepDirective)
                ],
                exportAs: 'wmWizardStep'
            },] }
];
/** @nocollapse */
WizardStepDirective.ctorParameters = () => [
    { type: Injector },
    { type: NgForm, decorators: [{ type: Self }] }
];
WizardStepDirective.propDecorators = {
    reDrawableComponents: [{ type: ContentChildren, args: [RedrawableDirective, { descendants: true },] }],
    isCurrent: [{ type: HostBinding, args: ['class.current',] }]
};
//# sourceMappingURL=data:application/json;base64,