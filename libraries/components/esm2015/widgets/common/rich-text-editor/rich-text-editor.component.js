import { Component, Injector, NgZone, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { provideAsNgValueAccessor, provideAsWidgetRef } from '../../../utils/widget-utils';
import { APPLY_STYLES_TYPE, styler } from '../../framework/styler';
import { registerProps } from './rich-text-editor.props';
import { BaseFormCustomComponent } from '../base/base-form-custom.component';
const WIDGET_INFO = { widgetType: 'wm-richtexteditor', hostClass: 'app-richtexteditor clearfix' };
const getChangeEvt = () => {
    let changeEvt;
    // for IE the event constructor doesn't work so use the createEvent proto
    if (typeof (Event) === 'function') {
        changeEvt = new Event('change');
    }
    else {
        changeEvt = document.createEvent('Event');
        changeEvt.initEvent('change', true, true);
    }
    return changeEvt;
};
const ɵ0 = getChangeEvt;
// override summernote methods
const origFn = $.summernote.ui.button.bind($.summernote);
$.summernote.ui.button = (...args) => {
    const retVal = origFn(...args);
    const origCallback = retVal.callback;
    retVal.callback = ($node, options) => {
        // add bs3 btn class to the buttons
        $node.addClass('btn');
        return origCallback($node, options);
    };
    return retVal;
};
//
export class RichTextEditorComponent extends BaseFormCustomComponent {
    constructor(inj, domSanitizer, ngZone) {
        super(inj, WIDGET_INFO);
        this.domSanitizer = domSanitizer;
        this.ngZone = ngZone;
        this._operationStack = [];
        this.isEditorLoaded = false;
        this.EDITOR_DEFAULT_OPTIONS = {
            toolbar: [
                // [groupName, [list of button]]
                ['misc', ['undo', 'redo']],
                ['style', ['style']],
                ['fontname', ['fontname']],
                ['fontsize', ['fontsize']],
                ['height', ['height']],
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['font', ['strikethrough', 'superscript', 'subscript']],
                ['color', ['color']],
                ['insert', ['table', 'picture', 'link', 'video', 'hr']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['misc', ['codeview', 'fullscreen', 'help']]
            ],
            callbacks: {
                onInit: () => {
                    this.isEditorLoaded = true;
                    if (this._operationStack.length) {
                        this._operationStack.forEach(operationParam => {
                            const key = Array.from(operationParam.keys())[0], val = operationParam.get(key);
                            this.performEditorOperation(key, val);
                        });
                        this._operationStack = [];
                    }
                },
                onChange: (contents, editable) => {
                    this.proxyModel = this.domSanitizer.sanitize(SecurityContext.HTML, contents.toString());
                    this.invokeOnChange(contents, getChangeEvt(), true);
                    this.invokeOnTouched();
                }
            },
            fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Merriweather'],
            placeholder: '',
            height: 100,
            disableResizeEditor: true
        };
        styler(this.nativeElement, this, APPLY_STYLES_TYPE.CONTAINER, ['height']);
    }
    get htmlcontent() {
        return this.performEditorOperation('code');
    }
    get datavalue() {
        return this.htmlcontent;
    }
    set datavalue(nv) {
        if (nv !== undefined && nv !== null) {
            this.$hiddenInputEle.val(nv);
            this.performEditorOperation('reset');
            this.performEditorOperation('insertText', nv);
        }
    }
    ngOnInit() {
        this.$richTextEditor = $(this.nativeElement.querySelector('[richTextEditor]'));
        this.$hiddenInputEle = $(this.nativeElement.querySelector('input.model-holder'));
        super.ngOnInit();
        this.initEditor();
    }
    initEditor() {
        this.ngZone.runOutsideAngular(() => {
            this.$richTextEditor.summernote(this.EDITOR_DEFAULT_OPTIONS);
        });
    }
    onPropertyChange(key, nv, ov) {
        if (key === 'placeholder') {
            this.EDITOR_DEFAULT_OPTIONS.placeholder = nv;
            this.performEditorOperation({
                placeholder: nv
            });
        }
        else if (key === 'disabled' || key === 'readonly') {
            this.performEditorOperation(nv ? 'disable' : 'enable');
        }
        else {
            super.onPropertyChange(key, nv, ov);
        }
    }
    onStyleChange(key, nv, ov) {
        if (key === 'height') {
            this.EDITOR_DEFAULT_OPTIONS.height = nv;
            this.performEditorOperation({
                height: nv
            });
        }
    }
    performEditorOperation(key, value) {
        if (this.isEditorLoaded) {
            return this.$richTextEditor.summernote(key, value);
        }
        else {
            const op = new Map();
            op.set(key, value);
            this._operationStack.push(op);
            return;
        }
    }
    getCurrentPosition() {
        return this.performEditorOperation('createRange');
    }
    undo() {
        this.performEditorOperation('undo');
    }
    focus() {
        this.performEditorOperation('focus');
    }
    ngOnDestroy() {
        this.performEditorOperation('destroy');
        super.ngOnDestroy();
    }
}
RichTextEditorComponent.initializeProps = registerProps();
RichTextEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'div[wmRichTextEditor]',
                template: "<div richTextEditor></div>\n<div [innerHTML]=\"proxyModel\" class=\"ta-preview\" *ngIf=\"showpreview\"></div>\n<input class=\"model-holder\" [disabled]=\"disabled\" hidden>\n",
                providers: [
                    provideAsNgValueAccessor(RichTextEditorComponent),
                    provideAsWidgetRef(RichTextEditorComponent)
                ]
            }] }
];
/** @nocollapse */
RichTextEditorComponent.ctorParameters = () => [
    { type: Injector },
    { type: DomSanitizer },
    { type: NgZone }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,