import { Component, ElementRef, HostListener, Input, Optional } from '@angular/core';
import { $parseEvent, addClass, getRouteNameFromLink, getUrlParams, openLink, UserDefinedExecutionContext } from '@wm/core';
import { KEYBOARD_MOVEMENTS, MENU_POSITION, MenuComponent } from '../menu.component';
import { isActiveNavItem } from '../../../../utils/widget-utils';
import { NavComponent } from '../../nav/nav.component';
const menuAlignClass = {
    'pull-right': 'fa-caret-left',
    'dropinline-menu': 'fa-caret-down',
    'pull-left': 'fa-caret-right'
};
const MENU_LAYOUT_TYPE = {
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical'
};
export class MenuDropdownItemComponent {
    constructor(menuRef, userDefinedExecutionContext, parentNav, elRef) {
        this.menuRef = menuRef;
        this.userDefinedExecutionContext = userDefinedExecutionContext;
        this.parentNav = parentNav;
        this.onSelect = ($event, item) => {
            if (this.nativeElement !== $($event.target).closest('.app-menu-item').get(0)) {
                return;
            }
            // prevent event event propagation if auto close is outside click.
            if (this.menuRef.autoclose === 'outsideClick') {
                $event.stopPropagation();
            }
            $event.preventDefault();
            const args = { $event, $item: item };
            const linkTarget = item.target || this.menuRef.linktarget;
            const itemAction = item.action;
            let menuLink = item.link;
            this.menuRef.onMenuItemSelect(args);
            if (itemAction) {
                if (!this.itemActionFn) {
                    this.itemActionFn = $parseEvent(itemAction);
                }
                this.itemActionFn(this.userDefinedExecutionContext, Object.create(item));
            }
            if (menuLink) {
                if (menuLink.startsWith('#/') && (!linkTarget || linkTarget === '_self')) {
                    const queryParams = getUrlParams(menuLink);
                    menuLink = getRouteNameFromLink(menuLink);
                    this.menuRef.route.navigate([menuLink], { queryParams });
                }
                else {
                    openLink(menuLink, linkTarget);
                }
            }
        };
        this.nativeElement = elRef.nativeElement;
        addClass(this.nativeElement, 'app-menu-item');
        this.menualign = menuAlignClass[this.menuRef.menualign] || menuAlignClass['pull-left'];
    }
    ngOnInit() {
        // add active class to the item only if it is in nav component.
        if (this.parentNav) {
            if (isActiveNavItem(this.item.link, this.menuRef.route.url)) {
                // add active class to the li, if the menu item's link is same as the current page name.
                addClass(this.nativeElement, 'active');
            }
        }
    }
    getInitialKeyMovements() {
        const KEY_MOVEMENTS = _.clone(KEYBOARD_MOVEMENTS);
        if (this.menuRef.menulayout === MENU_LAYOUT_TYPE.HORIZONTAL) {
            KEY_MOVEMENTS.MOVE_UP = 'LEFT-ARROW';
            KEY_MOVEMENTS.MOVE_LEFT = 'UP-ARROW';
            KEY_MOVEMENTS.MOVE_RIGHT = 'DOWN-ARROW';
            KEY_MOVEMENTS.MOVE_DOWN = 'RIGHT-ARROW';
        }
        else {
            if (this.menuRef.menuposition === MENU_POSITION.DOWN_LEFT || this.menuRef.menuposition === MENU_POSITION.UP_LEFT) {
                KEY_MOVEMENTS.MOVE_LEFT = 'RIGHT-ARROW';
                KEY_MOVEMENTS.MOVE_RIGHT = 'LEFT-ARROW';
            }
            else if (this.menuRef.menuposition === 'inline') {
                KEY_MOVEMENTS.MOVE_UP = 'LEFT-ARROW';
                KEY_MOVEMENTS.MOVE_LEFT = 'UP-ARROW';
                KEY_MOVEMENTS.MOVE_RIGHT = 'DOWN-ARROW';
                KEY_MOVEMENTS.MOVE_DOWN = 'RIGHT-ARROW';
            }
        }
        return KEY_MOVEMENTS;
    }
    onKeyDown($event, eventAction) {
        const $li = $(this.nativeElement);
        const $ul = $(this.nativeElement).closest('ul.dropdown-menu');
        const $parentUl = this.menuRef.$element.find('> ul.dropdown-menu');
        const ARROW_KEYS = ['LEFT-ARROW', 'RIGHT-ARROW', 'UP-ARROW', 'DOWN-ARROW'];
        const KEY_MOVEMENTS = this.getInitialKeyMovements();
        if (_.includes(ARROW_KEYS, eventAction)) {
            // preventing from page scroll when up/down arrow is pressed, in case of menu is opened.
            $event.preventDefault();
        }
        if ((eventAction === KEY_MOVEMENTS.ON_TAB && $parentUl.children().last()[0] === this.nativeElement) || eventAction === KEY_MOVEMENTS.ON_ESCAPE) {
            /*closing all the children elements when
            * 1. Tab is clicked on the last $element
            * 2. When Escape key is clicked*/
            $event.preventDefault();
            this.menuRef.bsDropdown.hide();
        }
        else if ((eventAction === KEY_MOVEMENTS.ON_ENTER && !this.item.link) || eventAction === KEY_MOVEMENTS.MOVE_RIGHT) {
            // when there is no link for the menu, on enter open the inner child elements and focus the first $element
            $event.stopPropagation();
            if (this.item.children.length) {
                $li.toggleClass('open');
                $li.find('li:first > a').focus();
            }
            else {
                $li.find('> a').focus();
            }
        }
        else if (eventAction === KEY_MOVEMENTS.MOVE_LEFT || (eventAction === KEY_MOVEMENTS.ON_TAB && $ul.children().last()[0] === this.nativeElement)) {
            if ($parentUl[0] !== $ul[0]) {
                const $parentItem = $ul.parent();
                $parentItem.toggleClass('open').find('li.open').removeClass('open');
                $parentItem.find('> a').focus();
                $event.preventDefault();
                $event.stopPropagation();
            }
        }
        else if (eventAction === KEY_MOVEMENTS.MOVE_UP) {
            if ($parentUl[0] !== $ul[0] || $parentUl.find('> li:first')[0] !== this.nativeElement) {
                $event.stopPropagation();
                $li.prev().find('> a').focus();
            }
        }
        else if (eventAction === KEY_MOVEMENTS.MOVE_DOWN) {
            $event.stopPropagation();
            if ($parentUl.find('> li:last')[0] === this.nativeElement && (this.menuRef.menulayout !== MENU_LAYOUT_TYPE.HORIZONTAL && this.menuRef.menuposition === MENU_POSITION.UP_RIGHT || this.menuRef.menuposition === MENU_POSITION.UP_LEFT)) {
                this.menuRef.bsDropdown.hide();
            }
            else {
                $li.next().find('> a').focus();
            }
        }
        else if (eventAction === KEY_MOVEMENTS.ON_ENTER) {
            this.onSelect($event, this.item);
        }
        else {
            $event.stopPropagation();
        }
    }
}
MenuDropdownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'li[wmMenuDropdownItem]',
                template: "<a href=\"javascript:void(0);\" [title]=\"item.label\" [wmNavigationControl]=\"item.link\" [disableMenuContext]=\"menuRef.disableMenuContext || !!item.action\">\n    <span *ngIf=\"item.children.length\" class=\"pull-right fa caret {{menualign}}\"></span>\n    <i class=\"app-icon {{item.icon}}\"></i>\n    <span class=\"anchor-caption\">{{item.label}}</span>\n\n</a>\n<ng-container [ngTemplateOutlet]=\"nestedMenuDropdown\" *ngIf=\"item.children.length\" [ngTemplateOutletContext]=\"{item: item}\"></ng-container>\n\n<ng-template #nestedMenuDropdown let-item=\"item\">\n    <ul wmMenuDropdown [items]=\"item.children\"></ul>\n</ng-template>\n"
            }] }
];
/** @nocollapse */
MenuDropdownItemComponent.ctorParameters = () => [
    { type: MenuComponent },
    { type: UserDefinedExecutionContext },
    { type: NavComponent, decorators: [{ type: Optional }] },
    { type: ElementRef }
];
MenuDropdownItemComponent.propDecorators = {
    item: [{ type: Input }],
    onKeyDown: [{ type: HostListener, args: ['keydown.tab', ['$event', '"TAB"'],] }, { type: HostListener, args: ['keydown.escape', ['$event', '"ESC"'],] }, { type: HostListener, args: ['keydown.enter', ['$event', '"ENTER"'],] }, { type: HostListener, args: ['keydown.arrowup', ['$event', '"UP-ARROW"'],] }, { type: HostListener, args: ['keydown.arrowdown', ['$event', '"DOWN-ARROW"'],] }, { type: HostListener, args: ['keydown.arrowright', ['$event', '"RIGHT-ARROW"'],] }, { type: HostListener, args: ['keydown.arrowleft', ['$event', '"LEFT-ARROW"'],] }],
    onSelect: [{ type: HostListener, args: ['click', ['$event', 'item'],] }]
};
//# sourceMappingURL=data:application/json;base64,