var _this = this;
import { isMobile, setCSS } from '@wm/core';
var CLASS_NAME;
(function (CLASS_NAME) {
    CLASS_NAME["LEFT_PANEL"] = "page-left-panel";
    CLASS_NAME["RIGHT_PANEL"] = "page-right-panel";
    CLASS_NAME["SWIPE_ELEM"] = "page-left-panel-icon";
    CLASS_NAME["CONTENT"] = "app-content-column";
    CLASS_NAME["HEADER"] = "page-header";
    CLASS_NAME["SEARCH"] = "app-search";
})(CLASS_NAME || (CLASS_NAME = {}));
/**
 * method returns jquery class selector for given roleName
 * @param roleName
 * @returns {string}
 */
var roleSelector = function (roleName) { return "[data-role='" + roleName + "']"; };
var ɵ0 = roleSelector;
/*setup touch event handler*/
var bindTapEvtHandler = function (selector, handler) {
    /*
     * In Iphone safari browser, tap event of HammerJs is breaking
     * functionalities of other controls like input[type="range"].
     * So, replaced the hammer Js handler with click event handler.
     */
    $(selector).off('click.deviceview').on('click.deviceview', handler);
};
var ɵ1 = bindTapEvtHandler;
/**
 * hide the mobile toolbar actions
 */
var hidePageContainers = function (leftNavEle, searchEle) {
    if (isMobile()) {
        if (leftNavEle) {
            try {
                leftNavEle.widget.collapse();
            }
            catch (e) {
                //
            }
        }
        if (searchEle) {
            setCSS(searchEle, 'display', 'none');
        }
    }
};
var ɵ2 = hidePageContainers;
/**
 * binds the touch event for content
 */
var bindContentEvents = function (leftNavEle, pageContainer, searchContainer, isTablet) {
    if (isTablet === void 0) { isTablet = false; }
    if (!isTablet) {
        // touch content to hide nav pane and left panel
        bindTapEvtHandler(pageContainer, hidePageContainers.bind(_this, leftNavEle, searchContainer));
    }
};
var ɵ3 = bindContentEvents;
var bindLeftPanelEvents = function (leftNavEle, searchEle) {
    // tap left to show/hide left panel
    bindTapEvtHandler(roleSelector(CLASS_NAME.SWIPE_ELEM), function () {
        if (leftNavEle) {
            leftNavEle.widget.toggle();
            // Hide search container when left panel is open
            if (leftNavEle.classList.contains('visible')) {
                if (searchEle) {
                    setCSS(searchEle, 'display', 'none');
                }
            }
        }
    });
};
var ɵ4 = bindLeftPanelEvents;
/**
 * binds the touch event for content
 */
var bindRightPanelEvents = function (rightNavEle) {
    bindTapEvtHandler(rightNavEle, hidePageContainers);
};
var ɵ5 = bindRightPanelEvents;
/**
 * toggles the search container
 */
var toggleSearchContainer = function (searchEle, leftNavEle) {
    if ($(searchEle).css('display') === 'none') {
        hidePageContainers(leftNavEle);
        setCSS(searchEle, 'display', 'inline-table');
    }
    else {
        hidePageContainers(leftNavEle, searchEle);
    }
};
var ɵ6 = toggleSearchContainer;
/**
 * Bind event with Search icon in header
 */
var bindSearchIconEvent = function (searchElements, leftNavEle) {
    $(searchElements).each(function (index, ele) {
        var searchEle = $('<a class="app-header-action"><i class="wi wi-search"></i></a>');
        $(ele).before(searchEle);
        // Tap icon to show/hide search box
        bindTapEvtHandler(searchEle, function () { return toggleSearchContainer(ele, leftNavEle); });
    });
};
var ɵ7 = bindSearchIconEvent;
export var updateDeviceView = function (element, isTablet) {
    if (isTablet === void 0) { isTablet = false; }
    var leftNavEle = element.querySelector(roleSelector(CLASS_NAME.LEFT_PANEL));
    var rightNavEle = element.querySelector(roleSelector(CLASS_NAME.RIGHT_PANEL));
    var headerEle = element.querySelector(roleSelector(CLASS_NAME.HEADER));
    var searchEle = headerEle && headerEle.querySelector("." + CLASS_NAME.SEARCH);
    var pageEle = element.querySelector("." + CLASS_NAME.CONTENT);
    bindContentEvents(leftNavEle, pageEle, searchEle, isTablet);
    if (leftNavEle) {
        bindLeftPanelEvents(leftNavEle, searchEle);
    }
    else {
        // remove the icon
        $(headerEle).find(roleSelector(CLASS_NAME.SWIPE_ELEM)).remove();
    }
    if (rightNavEle) {
        bindRightPanelEvents(rightNavEle);
    }
    if (searchEle) {
        bindSearchIconEvent(searchEle, leftNavEle);
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,