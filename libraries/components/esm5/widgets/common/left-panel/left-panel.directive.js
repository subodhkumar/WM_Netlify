import * as tslib_1 from "tslib";
import { Directive, Injector } from '@angular/core';
import { App, addClass, removeClass, switchClass, toggleClass } from '@wm/core';
import { APPLY_STYLES_TYPE, styler } from '../../framework/styler';
import { StylableComponent } from '../base/stylable.component';
import { registerProps } from './left-panel.props';
import { LeftPanelAnimator } from './left-panel.animator';
import { PageDirective } from '../page/page.directive';
import { provideAsWidgetRef } from '../../../utils/widget-utils';
var DEFAULT_CLS = 'app-left-panel left-panel-collapsed';
var WIDGET_CONFIG = {
    widgetType: 'wm-left-panel',
    hostClass: DEFAULT_CLS
};
export var AnimationType;
(function (AnimationType) {
    AnimationType["SLIDE_IN"] = "slide-in";
    AnimationType["SLIDE_OVER"] = "slide-over";
})(AnimationType || (AnimationType = {}));
var LeftPanelDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LeftPanelDirective, _super);
    function LeftPanelDirective(app, page, inj) {
        var _this = _super.call(this, inj, WIDGET_CONFIG) || this;
        _this.app = app;
        _this.page = page;
        styler(_this.nativeElement, _this, APPLY_STYLES_TYPE.CONTAINER);
        _this.$ele = _this.$element;
        _this.$page = page.$element;
        addClass(_this.$page[0], 'left-panel-collapsed-container');
        if (_this.columnwidth) {
            _this.setLeftPanelWidth(['md', 'sm'], _this.columnwidth);
        }
        if (_this.app.isTabletApplicationType) {
            addClass(_this.nativeElement, 'wm-tablet-app-left-panel');
        }
        return _this;
    }
    LeftPanelDirective.prototype.collapse = function () {
        addClass(this.nativeElement, 'swipee-transition');
        switchClass(this.nativeElement, 'left-panel-collapsed', 'left-panel-expanded');
        this.expanded = false;
        switchClass(this.$page[0], 'left-panel-collapsed-container', 'left-panel-expanded-container');
        if (this.animation === AnimationType.SLIDE_IN) {
            this.setPageWidthAndPosition(['md', 'sm'], null, this.columnwidth);
            this.setPageWidthAndPosition(['xs'], null, this.xscolumnwidth);
        }
        if (this._destroyCollapseActionListener) {
            this._destroyCollapseActionListener();
        }
        this.page.notify('wmLeftPanel:collapse');
    };
    LeftPanelDirective.prototype.expand = function () {
        removeClass(this.nativeElement, 'swipee-transition');
        switchClass(this.nativeElement, 'left-panel-expanded', 'left-panel-collapsed');
        this.expanded = true;
        if (!(this.app.isTabletApplicationType && this.animation === AnimationType.SLIDE_IN)) {
            this._destroyCollapseActionListener = this.listenForCollapseAction();
        }
        switchClass(this.$page[0], 'left-panel-expanded-container', 'left-panel-collapsed-container');
        if (this.animation === AnimationType.SLIDE_IN) {
            this.setPageWidthAndPosition(['md', 'sm'], this.columnwidth);
            this.setPageWidthAndPosition(['xs'], this.xscolumnwidth);
        }
        this.page.notify('wmLeftPanel:expand');
    };
    LeftPanelDirective.prototype.isGesturesEnabled = function () {
        return this.gestures === 'on';
    };
    LeftPanelDirective.prototype.isVisible = function () {
        return this.expanded;
    };
    LeftPanelDirective.prototype.onPropertyChange = function (key, nv, ov) {
        switch (key) {
            case 'animation':
                if (nv === AnimationType.SLIDE_IN) {
                    removeClass(this.$page[0], 'slide-over-left-panel-container');
                    addClass(this.$page[0], 'slide-in-left-panel-container');
                    this.setPageWidthAndPosition(['md', 'sm'], this.columnwidth);
                    this.setPageWidthAndPosition(['xs'], this.xscolumnwidth);
                }
                else if (nv === AnimationType.SLIDE_OVER) {
                    removeClass(this.$page[0], 'slide-in-left-panel-container');
                    addClass(this.$page[0], 'slide-over-left-panel-container');
                }
                this._leftPanelAnimator = new LeftPanelAnimator(this);
                switchClass(this.nativeElement, nv, ov);
                break;
            case 'columnwidth':
                this.setLeftPanelWidth(['md', 'sm'], nv, ov);
                if (this.animation === AnimationType.SLIDE_IN) {
                    this.setPageWidthAndPosition(['md', 'sm'], nv, ov);
                }
                break;
            case 'expanded':
                toggleClass(this.nativeElement, 'left-panel-expanded', nv);
                toggleClass(this.nativeElement, 'left-panel-collapsed', !nv);
                break;
            case 'xscolumnwidth':
                this.setLeftPanelWidth(['xs'], nv, ov);
                if (this.animation === AnimationType.SLIDE_IN) {
                    this.setPageWidthAndPosition(['xs'], nv, ov);
                }
                break;
            default:
                _super.prototype.onPropertyChange.call(this, key, nv, ov);
        }
    };
    LeftPanelDirective.prototype.toggle = function () {
        var _this = this;
        if (this.app.isTabletApplicationType) {
            setTimeout(function () {
                _this.expanded ? _this.collapse() : _this.expand();
            }, 50);
        }
        else {
            this.$ele.swipeAnimation(this.expanded ? 'gotoLower' : 'gotoUpper');
        }
    };
    LeftPanelDirective.prototype.listenForCollapseAction = function () {
        var _this = this;
        var eventName = 'click.leftNavToggle';
        var skipEvent = false;
        this.$ele.on(eventName, function () {
            skipEvent = true;
        });
        this.$page.on(eventName, function () {
            if (!skipEvent) {
                _this.toggle();
            }
            skipEvent = false;
        });
        return function () {
            _this.$ele.off(eventName);
            _this.$page.off(eventName);
        };
    };
    LeftPanelDirective.prototype.setLeftPanelWidth = function (devices, newVal, oldVal) {
        var _this = this;
        devices.forEach(function (device) {
            if (newVal) {
                addClass(_this.nativeElement, "col-" + device + "-" + newVal);
            }
            if (oldVal) {
                removeClass(_this.nativeElement, "col-" + device + "-" + oldVal);
            }
        });
    };
    LeftPanelDirective.prototype.setPageWidthAndPosition = function (devices, newVal, oldVal) {
        var _this = this;
        devices.forEach(function (device) {
            if (newVal) {
                addClass(_this.$page[0], "left-panel-container-" + device + "-" + (12 - newVal));
            }
            if (oldVal) {
                removeClass(_this.$page[0], "left-panel-container-" + device + "-" + (12 - oldVal));
            }
        });
    };
    LeftPanelDirective.initializeProps = registerProps();
    LeftPanelDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[wmLeftPanel]',
                    providers: [
                        provideAsWidgetRef(LeftPanelDirective)
                    ]
                },] }
    ];
    /** @nocollapse */
    LeftPanelDirective.ctorParameters = function () { return [
        { type: App },
        { type: PageDirective },
        { type: Injector }
    ]; };
    return LeftPanelDirective;
}(StylableComponent));
export { LeftPanelDirective };
//# sourceMappingURL=data:application/json;base64,