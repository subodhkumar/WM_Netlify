import * as tslib_1 from "tslib";
import { SwipeAnimation } from '@swipey';
import { isIos, setCSS } from '@wm/core';
var PullToRefresh = /** @class */ (function (_super) {
    tslib_1.__extends(PullToRefresh, _super);
    function PullToRefresh($el, app, onPullToRefresh) {
        var _this = _super.call(this) || this;
        _this.$el = $el;
        _this.app = app;
        _this.onPullToRefresh = onPullToRefresh;
        _this.count = 0;
        var template = '<div class="refresh-container"></div>';
        _this.$el.prepend(template);
        _this.infoContainer = _this.$el.find('.refresh-container');
        if (isIos()) {
            _this.infoContainer.addClass('ios-refresh-container');
        }
        _this.init(_this.$el);
        return _this;
    }
    PullToRefresh.prototype.threshold = function () {
        return 10;
    };
    PullToRefresh.prototype.direction = function () {
        return $.fn.swipey.DIRECTIONS.VERTICAL;
    };
    PullToRefresh.prototype.subscribe = function () {
        var _this = this;
        // Subscribing for variable updates, wait till the response and stop the animation.
        this.cancelSubscription = this.app.subscribe('toggle-variable-state', function (data) {
            // data.active is true means the variable update has just started whereas false means update has ended.
            if (data.active && _this.animationInProgress) {
                _this.count++;
                _this.wait();
            }
            else if (_this.count > 0) {
                _this.count--;
            }
            // call stop animation only when animation has started.
            if (!_this.count && _this.animationInProgress) {
                _this.stopAnimation();
            }
        });
    };
    PullToRefresh.prototype.bounds = function ($event, $d) {
        var pageIscroll = this.$el[0].iscroll;
        // If scroll position is not at the top of the page then do not trigger the animation.
        if ($d < 0 || (pageIscroll && !isNaN(pageIscroll.y) && pageIscroll.y !== 0)) {
            return {
                lower: undefined,
                upper: undefined
            };
        }
        if (!this.spinner) {
            this.spinner = isIos() ? new IOSSpinner(this.infoContainer) : new AndroidSpinner(this.infoContainer);
            this.subscribe();
        }
        return {
            lower: 0,
            center: 0,
            upper: isIos() ? 0 : 150,
            strict: !isIos()
        };
    };
    PullToRefresh.prototype.context = function () {
        var _this = this;
        this.infoContainer.show();
        if (isIos()) {
            this.infoContainer.addClass('entry');
        }
        return {
            spin: function ($d) {
                _this.spinner.setRotation($d * 2);
            }
        };
    };
    PullToRefresh.prototype.animation = function () {
        if (isIos()) {
            return {
                css: {
                    transform: 'translate3d(0, ${{$D + $d}}px, 0)',
                    spin: '${{spin($d)}}'
                }
            };
        }
        return {
            target: this.infoContainer,
            css: {
                transform: 'translate3d(0, ${{$D + $d}}px, 0)',
                spin: '${{spin($d)}}',
                opacity: '${{min(($D + $d) / 100, 1)}}'
            }
        };
    };
    // Start the spinner animation and invokes the pulltorefresh event. Stops the animation after the wait time.
    PullToRefresh.prototype.onAnimation = function () {
        var _this = this;
        this.animationInProgress = true;
        this.spinner.start();
        if (this.onPullToRefresh) {
            this.onPullToRefresh();
        }
        setTimeout(function () {
            // if listenToAnimation is set, then wait for stopAnimation to be invoked. Otherwise call stopAnimation manually.
            if (_this.runAnimation) {
                return;
            }
            _this.stopAnimation();
        });
    };
    PullToRefresh.prototype.stopAnimation = function () {
        var _this = this;
        setTimeout(function () {
            _this.runAnimation = false;
            _this.animationInProgress = false;
            _this.spinner.stop();
            _this.infoContainer.hide();
            setCSS(_this.infoContainer[0], 'transform', 'none');
            if (!isIos()) {
                setCSS(_this.infoContainer[0], 'opacity', 0);
            }
            _this.infoContainer.removeClass('entry');
        }, 800);
    };
    PullToRefresh.prototype.wait = function () {
        this.runAnimation = true;
    };
    return PullToRefresh;
}(SwipeAnimation));
export { PullToRefresh };
// Android Spinner implementation
var AndroidSpinner = /** @class */ (function () {
    function AndroidSpinner($el, options) {
        this.$el = $el;
        this.options = options || {};
    }
    AndroidSpinner.prototype.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    };
    AndroidSpinner.prototype.describeArc = function (x, y, radius, startAngle, endAngle) {
        var start = this.polarToCartesian(x, y, radius, endAngle);
        var end = this.polarToCartesian(x, y, radius, startAngle);
        var arcSweep = endAngle - startAngle <= 180 ? '0' : '1';
        return [
            'M', start.x, start.y,
            'A', radius, radius, 0, arcSweep, 0, end.x, end.y,
            'L', end.x, end.y
        ].join(' ');
    };
    AndroidSpinner.prototype.init = function () {
        if (this.initialized) {
            return;
        }
        // append the svg to the element on which spinner has to be shown.
        var androidTemplate = $('<svg><path id="arc1"/></svg>');
        var container = $('<div class="android-spinner"></div>');
        container.append(androidTemplate);
        this.$el.append(container);
        this.cx = container.outerWidth() / 2;
        this.cy = container.outerHeight() / 2;
        this.r = this.cx * 0.6;
        this.path = container.find('path');
        this.initialized = true;
        this.container = container;
    };
    // sets rotation to the path
    AndroidSpinner.prototype.setRotation = function (deg) {
        this.init();
        this.path.attr('d', this.describeArc(this.cx, this.cy, this.r, 0, deg));
    };
    // animate the path to rotate continuously with some interval
    AndroidSpinner.prototype.start = function () {
        var _this = this;
        this.init();
        var self = this, totalTime = this.options.time || 1800, degreesToTraverse = 10;
        var i = 0;
        this.container.addClass('spin');
        this.intervalId = setInterval(function () {
            var deg;
            i = i + degreesToTraverse;
            if (i > 720) {
                deg = i = 0;
            }
            else if (i > 360) {
                deg = 720 - i;
            }
            else {
                deg = i;
            }
            self.path.attr('d', _this.describeArc(self.cx, self.cy, self.r, 0, deg));
        }, (totalTime * degreesToTraverse / 360));
    };
    // Removes the animation by clearing the intervals
    AndroidSpinner.prototype.stop = function () {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = 0;
        }
        this.container.removeClass('spin');
    };
    return AndroidSpinner;
}());
// iOS spinner implementation
var IOSSpinner = /** @class */ (function () {
    function IOSSpinner($el) {
        this.$el = $el;
    }
    // create the iOS spinner using svg
    IOSSpinner.prototype.init = function () {
        if (this.svg) {
            return;
        }
        var container = $('<div class="ios-spinner"><svg></svg></div>');
        var svg = container.find('svg');
        this.$el.append(container);
        var d = container.width();
        for (var i = 0; i < 12; i++) {
            svg[0].innerHTML += "<line y1=\"" + 0.15 * d + "\" y2=\"" + 0.3 * d + "\"\n                                    transform=\"translate(" + 0.5 * d + ", " + 0.5 * d + ") rotate(" + i * 30 + ")\">\n                                </line>";
        }
        container.append(svg);
        this.svg = svg;
    };
    // Sets the svg to rotate depending on "d" value
    IOSSpinner.prototype.setRotation = function (d) {
        this.init();
        this.svg.css('transform', "rotateZ( " + Math.round(d / 30) * 30 + "deg)");
    };
    // Triggers the rotation with some interval
    IOSSpinner.prototype.start = function () {
        var _this = this;
        this.init();
        var i = 0;
        this.intervalId = setInterval(function () {
            i += 10;
            _this.setRotation(i);
        }, 20);
    };
    // Removes the animation by clearing the intervals
    IOSSpinner.prototype.stop = function () {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = 0;
        }
    };
    return IOSSpinner;
}());
//# sourceMappingURL=data:application/json;base64,