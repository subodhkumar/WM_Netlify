import * as tslib_1 from "tslib";
import { Attribute, Component, HostListener, Injector, Optional, Self } from '@angular/core';
import { Router } from '@angular/router';
import { BsDropdownDirective } from 'ngx-bootstrap';
import { $appDigest, addClass, removeClass } from '@wm/core';
import { styler } from '../../framework/styler';
import { isActiveNavItem, provideAsWidgetRef } from '../../../utils/widget-utils';
import { registerProps } from './menu.props';
import { DatasetAwareNavComponent } from '../base/dataset-aware-nav.component';
import { NavComponent } from '../nav/nav.component';
export var KEYBOARD_MOVEMENTS = {
    MOVE_UP: 'UP-ARROW',
    MOVE_LEFT: 'LEFT-ARROW',
    MOVE_RIGHT: 'RIGHT-ARROW',
    MOVE_DOWN: 'DOWN-ARROW',
    ON_ENTER: 'ENTER',
    ON_TAB: 'TAB',
    ON_ESCAPE: 'ESC'
};
export var MENU_POSITION = {
    UP_LEFT: 'up,left',
    UP_RIGHT: 'up,right',
    DOWN_LEFT: 'down,left',
    DOWN_RIGHT: 'down,right',
    INLINE: 'inline'
};
var POSITION = {
    DOWN_RIGHT: 'down,right',
    DOWN_LEFT: 'down,left',
    UP_RIGHT: 'up,right',
    UP_LEFT: 'up,left',
    INLINE: 'inline'
};
var CARET_CLS = {
    UP: 'fa-caret-up',
    DOWN: 'fa-caret-down'
};
var PULL_CLS = {
    LEFT: 'pull-left',
    RIGHT: 'pull-right'
};
var AUTO_OPEN = {
    NEVER: 'never',
    ACTIVE_PAGE: 'activepage',
    ALWAYS: 'always'
};
var WIDGET_CONFIG = { widgetType: 'wm-menu', hostClass: 'dropdown app-menu' };
var MenuComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MenuComponent, _super);
    function MenuComponent(inj, route, bsDropdown, parentNav, selectEventCB) {
        var _this = _super.call(this, inj, WIDGET_CONFIG) || this;
        _this.route = route;
        _this.bsDropdown = bsDropdown;
        _this.parentNav = parentNav;
        _this.selectEventCB = selectEventCB;
        _this.menuCaret = 'fa-caret-down';
        _this._selectFirstItem = false;
        if (parentNav) {
            _this.disableMenuContext = !!parentNav.disableMenuContext;
        }
        else {
            _this.disableMenuContext = !!selectEventCB;
        }
        return _this;
    }
    MenuComponent.prototype.onShow = function () {
        var _this = this;
        if (this._selectFirstItem) {
            setTimeout(function () {
                _this.$element.find('> ul[wmmenudropdown] li.app-menu-item:first > a').focus();
            });
        }
        $appDigest();
    };
    MenuComponent.prototype.onHide = function () {
        this.$element.find('>.dropdown-toggle').focus();
        this.$element.find('li').removeClass('open');
        this._selectFirstItem = false;
        $appDigest();
    };
    MenuComponent.prototype.onKeyDown = function ($event, eventAction) {
        var KEY_MOVEMENTS = _.clone(KEYBOARD_MOVEMENTS);
        if (this.menuposition === MENU_POSITION.UP_RIGHT) {
            KEY_MOVEMENTS.MOVE_UP = 'DOWN-ARROW';
            KEY_MOVEMENTS.MOVE_DOWN = 'UP-ARROW';
        }
        else if (this.menuposition === MENU_POSITION.UP_LEFT) {
            KEY_MOVEMENTS.MOVE_UP = 'DOWN-ARROW';
            KEY_MOVEMENTS.MOVE_DOWN = 'UP-ARROW';
            KEY_MOVEMENTS.MOVE_LEFT = 'RIGHT-ARROW';
            KEY_MOVEMENTS.MOVE_RIGHT = 'LEFT-ARROW';
        }
        else if (this.menuposition === MENU_POSITION.DOWN_LEFT) {
            KEY_MOVEMENTS.MOVE_LEFT = 'RIGHT-ARROW';
            KEY_MOVEMENTS.MOVE_RIGHT = 'LEFT-ARROW';
        }
        if (_.includes([KEY_MOVEMENTS.MOVE_DOWN, KEY_MOVEMENTS.MOVE_RIGHT], eventAction)) {
            if (!this.bsDropdown.isOpen) {
                this._selectFirstItem = true;
                this.bsDropdown.show();
            }
            else {
                this.$element.find('> ul[wmmenudropdown] li.app-menu-item:first > a').focus();
            }
        }
        else if (eventAction === KEY_MOVEMENTS.ON_ENTER) {
            this.bsDropdown.toggle(true);
        }
        else if (_.includes([KEY_MOVEMENTS.MOVE_UP, KEY_MOVEMENTS.MOVE_LEFT], eventAction)) {
            this.bsDropdown.hide();
        }
        $event.preventDefault();
    };
    /**
     * returns true if the menu has link to the current page.
     * @param nodes
     */
    MenuComponent.prototype.hasLinkToCurrentPage = function (nodes) {
        var _this = this;
        return nodes.some(function (node) {
            if (isActiveNavItem(node.link, _this.route.url)) {
                return true;
            }
            if (node.children) {
                return _this.hasLinkToCurrentPage(node.children);
            }
        });
    };
    MenuComponent.prototype.resetNodes = function () {
        _super.prototype.resetNodes.call(this);
        // open the menu if any of its menu items has link to current page and if autoopen value is 'active page'
        if ((this.autoopen === AUTO_OPEN.ACTIVE_PAGE && this.hasLinkToCurrentPage(this.nodes)) || this.autoopen === AUTO_OPEN.ALWAYS) {
            this.bsDropdown.show();
        }
    };
    MenuComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.setMenuPosition();
    };
    MenuComponent.prototype.onPropertyChange = function (key, nv, ov) {
        if (key === 'tabindex') {
            return;
        }
        if (key === 'autoclose') {
            this.bsDropdown.autoClose = nv !== 'disabled';
        }
        else {
            _super.prototype.onPropertyChange.call(this, key, nv, ov);
        }
    };
    MenuComponent.prototype.setMenuPosition = function () {
        switch (this.menuposition) {
            case POSITION.DOWN_RIGHT:
                removeClass(this.nativeElement, 'dropup');
                this.menualign = PULL_CLS.LEFT;
                this.menuCaret = CARET_CLS.DOWN;
                break;
            case POSITION.DOWN_LEFT:
                removeClass(this.nativeElement, 'dropup');
                this.menualign = PULL_CLS.RIGHT;
                this.menuCaret = CARET_CLS.DOWN;
                break;
            case POSITION.UP_LEFT:
                addClass(this.nativeElement, 'dropup');
                this.menualign = PULL_CLS.RIGHT;
                this.menuCaret = CARET_CLS.UP;
                break;
            case POSITION.UP_RIGHT:
                addClass(this.nativeElement, 'dropup');
                this.menualign = PULL_CLS.LEFT;
                this.menuCaret = CARET_CLS.UP;
                break;
            case POSITION.INLINE:
                this.menualign = 'dropinline-menu';
                break;
        }
    };
    MenuComponent.prototype.onMenuItemSelect = function (args) {
        var $event = args.$event;
        var $item = args.$item.value;
        this.invokeEventCallback('select', { $event: $event, $item: $item });
    };
    MenuComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        styler(this.nativeElement.querySelector('.dropdown-toggle'), this);
    };
    MenuComponent.initializeProps = registerProps();
    MenuComponent.decorators = [
        { type: Component, args: [{
                    selector: '[wmMenu]',
                    template: "<ng-template #menuTemplate>\n    <button wmButton\n            dropdownToggle\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n\n            class=\"btn app-button dropdown-toggle {{menuclass}}\"\n            hint.bind=\"hint\"\n            shortcutkey.bind=\"shortcutkey\"\n            tabindex.bind=\"tabindex\"\n            caption.bind=\"caption\"\n            iconclass.bind=\"iconclass\"\n            iconposition.bind=\"iconposition\">\n        <span class=\"pull-right caret fa {{menuCaret}}\"></span>\n    </button>\n</ng-template>\n\n<ng-template #innerTemplate>\n    <i class=\"app-icon {{iconclass}}\"></i>\n    <span class=\"caption\" [textContent]=\"caption\"></span>\n    <span class=\"pull-right caret fa {{menuCaret}}\"></span>\n</ng-template>\n\n<ng-container *ngIf=\"type === 'anchor'; else menuTemplate\">\n    <a wmAnchor\n       dropdownToggle\n\n       href=\"javascript:void(0);\"\n       role=\"button\"\n       aria-haspopup=\"true\"\n       aria-expanded=\"false\"\n\n       hint.bind=\"hint\"\n       class=\"dropdown-toggle {{menuclass}}\"\n       shortcutkey.bind=\"shortcutkey\"\n       tabindex.bind=\"tabindex\"\n       caption.bind=\"caption\"\n       iconclass.bind=\"iconclass\"\n       iconposition.bind=\"iconposition\"\n    >\n        <span class=\"pull-right caret fa {{menuCaret}}\"></span>\n    </a>\n</ng-container>\n\n<ul wmMenuDropdown [items]=\"nodes\" [ngClass]=\"menulayout\" class=\"icon-position-{{iconposition}}\" *dropdownMenu aria-labelledby=\"dropdownmenu\"></ul>\n",
                    providers: [
                        provideAsWidgetRef(MenuComponent)
                    ]
                }] }
    ];
    /** @nocollapse */
    MenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: Router },
        { type: BsDropdownDirective, decorators: [{ type: Self }, { type: Optional }] },
        { type: NavComponent, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Attribute, args: ['select.event',] }] }
    ]; };
    MenuComponent.propDecorators = {
        onShow: [{ type: HostListener, args: ['onShown',] }],
        onHide: [{ type: HostListener, args: ['onHidden',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown.arrowup', ['$event', '"UP-ARROW"'],] }, { type: HostListener, args: ['keydown.arrowdown', ['$event', '"DOWN-ARROW"'],] }, { type: HostListener, args: ['keydown.arrowright', ['$event', '"RIGHT-ARROW"'],] }, { type: HostListener, args: ['keydown.arrowleft', ['$event', '"LEFT-ARROW"'],] }, { type: HostListener, args: ['keydown.enter', ['$event', '"ENTER"'],] }]
    };
    return MenuComponent;
}(DatasetAwareNavComponent));
export { MenuComponent };
//# sourceMappingURL=data:application/json;base64,