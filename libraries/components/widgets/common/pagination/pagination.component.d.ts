import { EventEmitter, Injector, AfterViewInit } from '@angular/core';
import { StylableComponent } from '../base/stylable.component';
export declare class PaginationComponent extends StylableComponent implements AfterViewInit {
    parent: any;
    static initializeProps: void;
    resultEmitter: EventEmitter<any>;
    maxResultsEmitter: EventEmitter<any>;
    datasource: any;
    maxResults: any;
    navigationsize: any;
    showrecordcount: any;
    navcontrols: any;
    navigation: any;
    boundarylinks: any;
    directionlinks: any;
    navigationClass: any;
    dn: {
        currentPage: number;
    };
    pageCount: number;
    isDisableNext: boolean;
    isDisablePrevious: boolean;
    isDisableFirst: boolean;
    isDisableLast: boolean;
    isDisableCurrent: any;
    dataSize: any;
    prevshowrecordcount: any;
    isDisableCount: any;
    firstRow: any;
    result: any;
    __fullData: any;
    dataset: any;
    options: any;
    filterFields: any;
    sortOptions: any;
    binddataset: any;
    pagination: any;
    private _debouncedApplyDataset;
    private _debouncedPageChanged;
    constructor(inj: Injector, parent: any);
    setResult(result: any): void;
    private updateNavSize;
    resetPageNavigation(): void;
    calculatePagingValues(): void;
    setDefaultPagingValues(dataSize: any, maxResults: any, currentPage: any): void;
    checkDataSize(dataSize: any, numberOfElements?: any, size?: any): void;
    disableNavigation(): void;
    isDataSourceHasPaging(): any;
    setNonPageableData(newVal: any): void;
    private setPagingValues;
    isFirstPage(): boolean;
    isLastPage(): boolean;
    goToLastPage(isRefresh: any, event: any, callback: any): void;
    goToFirstPage(isRefresh: any, event: any, callback: any): void;
    goToPage(event?: any, callback?: any): void;
    onPageDataReady(event: any, data: any, callback: any): void;
    getPageData(event: any, callback: any): void;
    invokeSetRecord(event: any, data: any): void;
    validateCurrentPage(event: any, callback?: any): boolean;
    onModelChange(event: any): void;
    onKeyDown(event: any): boolean;
    pageChanged(event: any): void;
    navigatePage(index: any, event: any, isRefresh: any, callback: any): void;
    setBindDataSet(binddataset: any, parent: any, dataSource: any, dataset?: any, binddatasource?: any): void;
    setDataSource(dataSource: any): void;
    onPropertyChange(key: string, nv: any, ov: any): void;
    ngAfterViewInit(): void;
}
