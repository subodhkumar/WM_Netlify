import { AfterContentInit, Injector, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { StylableComponent } from '../../base/stylable.component';
import { FormComponent } from '../form.component';
import { ListComponent } from '../../list/list.component';
export declare class FormFieldDirective extends StylableComponent implements OnInit, AfterContentInit {
    static initializeProps: void;
    formWidget: any;
    formWidgetMax: any;
    private fb;
    private excludeProps;
    private _validators;
    private _oldUploadVal;
    ngform: FormGroup;
    defaultvalue: any;
    displayexpression: any;
    displayfield: any;
    displaylabel: any;
    displayname: any;
    generator: any;
    key: any;
    target: any;
    binding: any;
    widgettype: any;
    class: any;
    readonly: any;
    show: any;
    type: any;
    isDataSetBound: any;
    viewmodewidget: any;
    binddataset: any;
    binddisplayexpression: any;
    binddisplaylabel: any;
    form: any;
    filetype: any;
    extensions: any;
    permitted: any;
    period: any;
    isRange: any;
    name: any;
    required: any;
    maxchars: any;
    minvalue: any;
    maxvalue: any;
    regexp: any;
    validationmessage: any;
    _fieldName: any;
    private _debounceSetUpValidators;
    private _initPropsRes;
    private parentList;
    constructor(inj: Injector, form: FormComponent, fb: FormBuilder, parentList: ListComponent, binddataset: any, binddisplayexpression: string, binddisplaylabel: string, _widgetType: any, name: any, key: any, isRange: any, pcDisplay: any, mobileDisplay: any, contexts: Array<any>);
    _onFocusField($evt: any): void;
    _onBlurField($evt: any): void;
    evaluateExpr(object: any, displayExpr: any): any;
    getDisplayExpr(): any;
    getCaption(): any;
    private setUpValidators;
    setFormWidget(key: any, val: any): void;
    setMaxFormWidget(key: any, val: any): void;
    onPropertyChange(key: any, nv: any, ov?: any): void;
    onStyleChange(key: any, nv: any, ov?: any): void;
    datavalue: any;
    value: any;
    maxValue: any;
    minValue: any;
    readonly _control: import("@angular/forms").AbstractControl;
    readonly _maxControl: import("@angular/forms").AbstractControl;
    createControl(): any;
    onValueChange(val: any): void;
    setValidationMessage(val: any): void;
    setReadOnlyState(): void;
    resetDisplayInput(): void;
    triggerUploadEvent($event: any, eventName: any): void;
    private registerFormField;
    ngOnInit(): void;
    ngAfterContentInit(): void;
}
