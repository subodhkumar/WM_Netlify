import { AfterContentInit, Injector, NgZone, OnDestroy, QueryList, ViewContainerRef, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import { App, DynamicComponentRefProvider } from '@wm/core';
import { StylableComponent } from '../base/stylable.component';
export declare class TableComponent extends StylableComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {
    inj: Injector;
    fb: FormBuilder;
    private app;
    private dynamicComponentProvider;
    binddataset: any;
    binddatasource: any;
    readonlygrid: any;
    private ngZone;
    static initializeProps: void;
    dataNavigator: any;
    private _tableElement;
    rowActionTmpl: QueryList<any>;
    rowActionsViewRef: ViewContainerRef;
    filterTmpl: QueryList<any>;
    filterViewRef: ViewContainerRef;
    inlineWidgetTmpl: QueryList<any>;
    inlineEditViewRef: ViewContainerRef;
    inlineWidgetNewTmpl: QueryList<any>;
    inlineEditNewViewRef: ViewContainerRef;
    customExprTmpl: QueryList<any>;
    customExprViewRef: ViewContainerRef;
    rowExpansionActionTmpl: QueryList<any>;
    rowExpansionTmpl: TemplateRef<any>;
    rowDetailViewRef: ViewContainerRef;
    rowExpansionActionViewRef: ViewContainerRef;
    dynamicTableRef: ViewContainerRef;
    private rowActionsCompiledTl;
    private rowFilterCompliedTl;
    private inlineCompliedTl;
    private inlineNewCompliedTl;
    private customExprCompiledTl;
    private rowDefInstances;
    private rowDefMap;
    private rowExpansionActionTl;
    columns: {};
    formfields: {};
    datagridElement: any;
    datasource: any;
    editmode: any;
    enablecolumnselection: any;
    enablesort: boolean;
    filtermode: any;
    searchlabel: any;
    formposition: any;
    gridclass: any;
    gridfirstrowselect: any;
    iconclass: any;
    isGridEditMode: any;
    loadingdatamsg: any;
    multiselect: any;
    name: any;
    navigation: any;
    navigationSize: any;
    navigationalign: any;
    nodatamessage: any;
    pagesize: any;
    prevData: any;
    primaryKey: any;
    radioselect: any;
    rowclass: any;
    rowngclass: any;
    selectedItems: any[];
    showheader: any;
    showrecordcount: any;
    showrowindex: any;
    subheading: any;
    title: any;
    shownewrow: any;
    deleteoktext: any;
    deletecanceltext: any;
    selectedItemChange: Subject<{}>;
    selectedItemChange$: import("rxjs").Observable<{}>;
    actions: any[];
    _actions: {
        'header': any[];
        'footer': any[];
    };
    exportOptions: any[];
    exportdatasize: any;
    formWidgets: any;
    headerConfig: any[];
    items: any[];
    navControls: any;
    rowActions: any[];
    selectedColumns: any;
    shownavigation: boolean;
    dataset: any;
    _liveTableParent: any;
    isPartOfLiveGrid: any;
    gridElement: any;
    isMobile: any;
    isLoading: any;
    documentClickBind: () => void;
    fieldDefs: any[];
    rowDef: any;
    rowInstance: any;
    private fullFieldDefs;
    private __fullData;
    private dataNavigatorWatched;
    private navigatorResultWatch;
    private navigatorMaxResultWatch;
    private filterInfo;
    private sortInfo;
    private serverData;
    private filternullrecords;
    private variableInflight;
    private isdynamictable;
    private _dynamicContext;
    private noOfColumns;
    private applyProps;
    redraw: any;
    debouncedHandleLoading: any;
    rowFilter: any;
    matchModeTypesMap: any;
    matchModeMsgs: any;
    emptyMatchModes: any;
    _searchSortHandler: () => void;
    searchSortHandler: (...args: any[]) => void;
    _isPageSearch: any;
    _isClientSearch: any;
    checkFiltersApplied: Function;
    getSearchResult: Function;
    getSortResult: Function;
    getFilterFields: Function;
    onRowFilterChange: () => void;
    onFilterConditionSelect: () => void;
    showClearIcon: () => void;
    clearRowFilter: () => void;
    getNavigationTargetBySortInfo: Function;
    refreshData: Function;
    clearFilter: Function;
    ngform: FormGroup;
    updateVariable: Function;
    updateRecord: Function;
    deleteRecord: Function;
    insertRecord: Function;
    editRow: Function;
    addNewRow: Function;
    addRow: Function;
    deleteRow: Function;
    onRecordDelete: Function;
    initiateSelectItem: Function;
    hideEditRow: Function;
    saveRow: Function;
    cancelRow: Function;
    private gridOptions;
    private _gridData;
    gridData: any;
    selecteditem: any;
    onKeyPress($event: any): void;
    constructor(inj: Injector, fb: FormBuilder, app: App, dynamicComponentProvider: DynamicComponentRefProvider, binddataset: any, binddatasource: any, readonlygrid: any, ngZone: NgZone);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    addRowIndex(row: any): any;
    addEventsToContext(context: any): void;
    execute(operation: any, options: any): any;
    isNavigationEnabled(): any;
    getClonedRowObject(rowData: any): any;
    handleLoading(data: any): void;
    setDisabledOnField(operation: any, colDef: any, widgetType: any): void;
    resetFormControl(ctrl: any): void;
    clearForm(newRow?: any): void;
    isEmptyRecord(record: any): boolean;
    removeEmptyRecords(serviceData: any): any[];
    setGridData(serverData: any): void;
    setDataGridOption(optionName: any, newVal: any, forceSet?: boolean): void;
    callDataGridMethod(...args: any[]): any;
    renderOperationColumns(): void;
    enablePageNavigation(): void;
    resetPageNavigation(): void;
    isDataValid(): boolean;
    populateGridData(serviceData: any): void;
    generateDynamicColumns(columns: any): Promise<void>;
    prepareColDefs(data: any): void;
    createGridColumns(data: any): void;
    getSortExpr(): any;
    watchVariableDataSet(newVal: any): void;
    onDataSourceChange(): void;
    onPropertyChange(key: string, nv: any, ov?: any): void;
    onStyleChange(key: any, nv: any, ov: any): void;
    populateActions(): void;
    renderDynamicFilterColumn(filteTemRef: any): void;
    registerColumns(tableColumn: any): void;
    registerFormField(name: any, formField: any): void;
    registerActions(tableAction: any): void;
    registerRow(tableRow: any, rowInstance: any): void;
    registerRowActions(tableRowAction: any): void;
    selectItem(item: any, data: any): void;
    deselectItem(item: any): void;
    onDataNavigatorDataSetChange(nv: any): any;
    toggleMessage(show: any, type: any, msg: any, header?: any): void;
    export($item: any): void;
    expandRow(rowId: any): void;
    collapseRow(rowId: any): void;
    private _documentClickBind;
    private _redraw;
    invokeActionEvent($event: any, expression: string): void;
    protected handleEvent(node: HTMLElement, eventName: string, callback: Function, locals: any): void;
    triggerUploadEvent($event: any, eventName: any, fieldName: any, row: any): void;
    registerFormWidget(): void;
    writeValue(): void;
    private _onChange;
    private _onTouched;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
}
