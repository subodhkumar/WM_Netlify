import { Attribute, Element } from '@angular/compiler';
import { updateTemplateAttrs } from '@wm/core';
import { getAttrMarkup, getBoundToExpr, register } from '@wm/transpiler';
var wmListTag = 'wm-list';
var listTagName = 'div';
var dataSetKey = 'dataset';
register(wmListTag, function () {
    return {
        requires: ['wm-form', 'wm-liveform'],
        template: function (node) {
            var datasetAttr = node.attrs.find(function (attr) { return attr.name === dataSetKey; });
            var widgetNameAttr = node.attrs.find(function (attr) { return attr.name === 'name'; });
            if (!datasetAttr) {
                return;
            }
            var boundExpr = getBoundToExpr(datasetAttr.value);
            if (!boundExpr) {
                return;
            }
            updateTemplateAttrs(node, boundExpr, widgetNameAttr.value, 'itemRef.');
        },
        pre: function (attrs, shared, parentForm, parentLiveForm) {
            var parent = parentForm || parentLiveForm;
            shared.set('form_reference', parent && parent.get('form_reference'));
            return "<" + listTagName + " wmList wmLiveActions " + getAttrMarkup(attrs) + ">";
        },
        post: function () { return "</" + listTagName + ">"; },
        provide: function (attrs, shared) {
            var provider = new Map();
            provider.set('parent_form_reference', shared.get('form_reference'));
            return provider;
        }
    };
});
register('wm-listtemplate', function () {
    return {
        pre: function () { return "<ng-template #listTemplate let-item=\"item\" let-$index=\"$index\" let-itemRef=\"itemRef\" let-$first=\"$first\" let-$last=\"$last\"  let-currentItemWidgets=\"currentItemWidgets\" >"; },
        post: function () { return "</ng-template>"; }
    };
});
function copyAttribute(from, fromAttrName, to, toAttrName) {
    var fromAttr = from.attrs.find(function (a) { return a.name === fromAttrName; });
    if (fromAttr) {
        to.attrs.push(new Attribute(toAttrName, fromAttr.value, fromAttr.sourceSpan, fromAttr.valueSpan));
    }
}
register('wm-list-action-template', function () {
    return {
        template: function (node) {
            var position = node.attrs.find(function (attr) { return attr.name === 'position'; }).value;
            var btns = node.children
                .filter(function (e) { return e instanceof Element && e.name === 'wm-button'; });
            // add swipe-position on button nodes to identify whether buttons are from left or right action templates
            btns.forEach(function (btnNode) {
                copyAttribute(node, 'position', btnNode, 'swipe-position');
            });
        },
        pre: function (attrs, el) {
            if (attrs.get('position') === 'left') {
                return "<ng-template #listLeftActionTemplate>\n                            <li class=\"app-list-item-action-panel app-list-item-left-action-panel actionMenu\" " + getAttrMarkup(attrs) + ">";
            }
            if (attrs.get('position') === 'right') {
                return "<ng-template #listRightActionTemplate>\n                            <li class=\"app-list-item-action-panel app-list-item-right-action-panel actionMenu\" " + getAttrMarkup(attrs) + ">";
            }
        },
        post: function () { return "</li></ng-template>"; }
    };
});
export default (function () { });
//# sourceMappingURL=data:application/json;base64,