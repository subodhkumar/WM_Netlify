import { Attribute, Element, Text } from '@angular/compiler';
import { isMobileApp } from '@wm/core';
import { getAttrMarkup, register } from '@wm/transpiler';
var tagName = 'div';
var findChild = function (node, childName) {
    var child = node && node.children.find(function (e) { return (e instanceof Element && e.name === childName); });
    return child;
};
var ɵ0 = findChild;
var createElement = function (name) {
    return new Element(name, [], [], noSpan, noSpan, noSpan);
};
var ɵ1 = createElement;
var addAtrribute = function (node, name, value) {
    var attr = new Attribute(name, value, noSpan, noSpan);
    node.attrs.push(attr);
};
var ɵ2 = addAtrribute;
var noSpan = {};
register('wm-page', function () {
    return {
        template: function (node) {
            if (isMobileApp()) {
                var pageContentNode = findChild(findChild(node, 'wm-content'), 'wm-page-content');
                if (pageContentNode) {
                    var conditionalNode = createElement('ng-container');
                    addAtrribute(conditionalNode, '*ngIf', 'compilePageContent');
                    var loader = createElement('div');
                    addAtrribute(loader, 'wmPageContentLoader', '');
                    addAtrribute(loader, '*ngIf', '!showPageContent');
                    conditionalNode.children = conditionalNode.children.concat(pageContentNode.children);
                    conditionalNode.children.push(new Text('{{onPageContentReady()}}', null));
                    pageContentNode.children = [conditionalNode, loader];
                }
            }
        },
        pre: function (attrs) { return "<" + tagName + " wmPage data-role=\"pageContainer\" " + getAttrMarkup(attrs) + ">"; },
        post: function () { return "</" + tagName + ">"; }
    };
});
export default (function () { });
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5idWlsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vcGFnZS9wYWdlLmJ1aWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFtQixJQUFJLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU5RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhFLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV0QixJQUFNLFNBQVMsR0FBRyxVQUFDLElBQWEsRUFBRSxTQUFpQjtJQUMvQyxJQUFNLEtBQUssR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsWUFBWSxPQUFPLElBQUssQ0FBYSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsRUFBM0QsQ0FBMkQsQ0FBQyxDQUFDO0lBQzNHLE9BQU8sS0FBZ0IsQ0FBQztBQUM1QixDQUFDLENBQUM7O0FBRUYsSUFBTSxhQUFhLEdBQUcsVUFBQSxJQUFJO0lBQ3RCLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUM7O0FBRUYsSUFBTSxZQUFZLEdBQUcsVUFBQyxJQUFhLEVBQUUsSUFBWSxFQUFFLEtBQWE7SUFDNUQsSUFBTSxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDOztBQUVGLElBQU0sTUFBTSxHQUFJLEVBQXNCLENBQUM7QUFFdkMsUUFBUSxDQUFDLFNBQVMsRUFBRTtJQUNoQixPQUFPO1FBQ0gsUUFBUSxFQUFFLFVBQUMsSUFBYTtZQUNwQixJQUFJLFdBQVcsRUFBRSxFQUFFO2dCQUNmLElBQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3BGLElBQUksZUFBZSxFQUFFO29CQUNqQixJQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7b0JBQ3RELFlBQVksQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7b0JBQzdELElBQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEMsWUFBWSxDQUFDLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDaEQsWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztvQkFDbEQsZUFBZSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ3JGLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzFFLGVBQWUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ3hEO2FBQ0o7UUFDTCxDQUFDO1FBQ0QsR0FBRyxFQUFFLFVBQUEsS0FBSyxJQUFJLE9BQUEsTUFBSSxPQUFPLDRDQUFxQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQUcsRUFBdkUsQ0FBdUU7UUFDckYsSUFBSSxFQUFFLGNBQU0sT0FBQSxPQUFLLE9BQU8sTUFBRyxFQUFmLENBQWU7S0FDOUIsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsZ0JBQWUsY0FBTyxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdHRyaWJ1dGUsIEVsZW1lbnQsIFBhcnNlU291cmNlU3BhbiwgVGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcblxuaW1wb3J0IHsgaXNNb2JpbGVBcHAgfSBmcm9tICdAd20vY29yZSc7XG5pbXBvcnQgeyBnZXRBdHRyTWFya3VwLCBJQnVpbGRUYXNrRGVmLCByZWdpc3RlciB9IGZyb20gJ0B3bS90cmFuc3BpbGVyJztcblxuY29uc3QgdGFnTmFtZSA9ICdkaXYnO1xuXG5jb25zdCBmaW5kQ2hpbGQgPSAobm9kZTogRWxlbWVudCwgY2hpbGROYW1lOiBzdHJpbmcpOiBFbGVtZW50ID0+IHtcbiAgICBjb25zdCBjaGlsZCA9IG5vZGUgJiYgbm9kZS5jaGlsZHJlbi5maW5kKGUgPT4gKGUgaW5zdGFuY2VvZiBFbGVtZW50ICYmIChlIGFzIEVsZW1lbnQpLm5hbWUgPT09IGNoaWxkTmFtZSkpO1xuICAgIHJldHVybiBjaGlsZCBhcyBFbGVtZW50O1xufTtcblxuY29uc3QgY3JlYXRlRWxlbWVudCA9IG5hbWUgPT4ge1xuICAgIHJldHVybiBuZXcgRWxlbWVudChuYW1lLCBbXSwgW10sIG5vU3Bhbiwgbm9TcGFuLCBub1NwYW4pO1xufTtcblxuY29uc3QgYWRkQXRycmlidXRlID0gKG5vZGU6IEVsZW1lbnQsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGF0dHIgPSBuZXcgQXR0cmlidXRlKG5hbWUsIHZhbHVlLCBub1NwYW4sIG5vU3Bhbik7XG4gICAgbm9kZS5hdHRycy5wdXNoKGF0dHIpO1xufTtcblxuY29uc3Qgbm9TcGFuID0gKHt9IGFzIFBhcnNlU291cmNlU3Bhbik7XG5cbnJlZ2lzdGVyKCd3bS1wYWdlJywgKCk6IElCdWlsZFRhc2tEZWYgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlOiAobm9kZTogRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzTW9iaWxlQXBwKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlQ29udGVudE5vZGUgPSBmaW5kQ2hpbGQoZmluZENoaWxkKG5vZGUsICd3bS1jb250ZW50JyksICd3bS1wYWdlLWNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICBpZiAocGFnZUNvbnRlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbmFsTm9kZSA9IGNyZWF0ZUVsZW1lbnQoJ25nLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgICAgICBhZGRBdHJyaWJ1dGUoY29uZGl0aW9uYWxOb2RlLCAnKm5nSWYnLCAnY29tcGlsZVBhZ2VDb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRlciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBhZGRBdHJyaWJ1dGUobG9hZGVyLCAnd21QYWdlQ29udGVudExvYWRlcicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkQXRycmlidXRlKGxvYWRlciwgJypuZ0lmJywgJyFzaG93UGFnZUNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uYWxOb2RlLmNoaWxkcmVuID0gY29uZGl0aW9uYWxOb2RlLmNoaWxkcmVuLmNvbmNhdChwYWdlQ29udGVudE5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25hbE5vZGUuY2hpbGRyZW4ucHVzaChuZXcgVGV4dCgne3tvblBhZ2VDb250ZW50UmVhZHkoKX19JywgbnVsbCkpO1xuICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudE5vZGUuY2hpbGRyZW4gPSBbY29uZGl0aW9uYWxOb2RlLCBsb2FkZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJlOiBhdHRycyA9PiBgPCR7dGFnTmFtZX0gd21QYWdlIGRhdGEtcm9sZT1cInBhZ2VDb250YWluZXJcIiAke2dldEF0dHJNYXJrdXAoYXR0cnMpfT5gLFxuICAgICAgICBwb3N0OiAoKSA9PiBgPC8ke3RhZ05hbWV9PmBcbiAgICB9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHt9O1xuIl19