import { getFormMarkupAttr, register } from '@wm/transpiler';
import { FormWidgetType, getFormWidgetTemplate, IDGenerator, isMobileApp } from '@wm/core';
import { ALLFIELDS } from '../../../../utils/data-utils';
import { isDataSetWidget } from '../../../../utils/widget-utils';
var tagName = 'div';
var idGen = new IDGenerator('formfield_');
var getEventsTemplate = function (attrs) {
    var eventAttrs = new Map();
    if (!attrs.has('focus.event')) {
        attrs.set('focus.event', '');
    }
    if (!attrs.has('blur.event')) {
        attrs.set('blur.event', '');
    }
    attrs.forEach(function (value, key) {
        if (key.endsWith('.event')) {
            if (key === 'focus.event') {
                value = "_onFocusField($event);" + value;
            }
            else if (key === 'blur.event') {
                value = "_onBlurField($event);" + value;
            }
            eventAttrs.set(key, value);
            attrs.delete(key);
        }
    });
    return getFormMarkupAttr(eventAttrs);
};
var ɵ0 = getEventsTemplate;
var DEFAULT_PLACEHOLDERS = new Map([
    [FormWidgetType.SELECT, ['Select Min value', 'Select Max value', 'Select value']],
    [FormWidgetType.DATETIME, ['Select Min date time', 'Select Max date time', 'Select date time']],
    [FormWidgetType.TIME, ['Select Min time', 'Select Max time', 'Select time']],
    [FormWidgetType.DATE, ['Select Min date', 'Select Max date', 'Select date']],
    [FormWidgetType.TEXTAREA, ['', '', 'Enter value']],
    [FormWidgetType.RICHTEXT, ['', '', 'Enter value']],
    [FormWidgetType.COLORPICKER, ['Select Color', 'Select Color', 'Select Color']],
    [FormWidgetType.CHIPS, ['', '', 'Type here...']],
    [FormWidgetType.PASSWORD, ['Enter Min value', 'Enter Max value', 'Enter value']],
    [FormWidgetType.NUMBER, ['Enter Min value', 'Enter Max value', 'Enter value']],
    [FormWidgetType.TEXT, ['Enter Min value', 'Enter Max value', 'Enter value']],
    [FormWidgetType.CURRENCY, ['Enter Min value', 'Enter Max value', 'Enter value']],
    [FormWidgetType.AUTOCOMPLETE, ['', '', 'Search']],
]);
var setDefaultPlaceholder = function (attrs, widgetType, index) {
    var prop = index === 1 ? 'maxplaceholder' : 'placeholder';
    var placeholder = attrs.get(prop);
    if (placeholder || placeholder === '') {
        return;
    }
    placeholder = DEFAULT_PLACEHOLDERS.get(widgetType) && DEFAULT_PLACEHOLDERS.get(widgetType)[index];
    if (placeholder) {
        attrs.set(prop, placeholder);
    }
};
var ɵ1 = setDefaultPlaceholder;
var getWidgetTemplate = function (attrs, options) {
    var name = attrs.get('name');
    var fieldName = (attrs.get('key') || name || '').trim();
    var formControl = options.isMaxWidget ? "formControlName=\"" + fieldName + "_max\"" : (options.isInList ? "[formControlName]=\"" + options.counter + "._fieldName\"" : "formControlName=\"" + fieldName + "\"");
    var tmplRef = options.isMaxWidget ? "#formWidgetMax" : "#formWidget";
    var widgetName = name ? (options.isMaxWidget ? "name=\"" + name + "_formWidgetMax\"" : "name=\"" + name + "_formWidget\"") : '';
    var defaultTmpl = "[class.hidden]=\"!" + options.pCounter + ".isUpdateMode && " + options.counter + ".viewmodewidget !== 'default'\" " + formControl + " " + options.eventsTmpl + " " + tmplRef + " " + widgetName;
    return getFormWidgetTemplate(options.widgetType, defaultTmpl, attrs, { counter: options.counter, pCounter: options.pCounter });
};
var ɵ2 = getWidgetTemplate;
var getTemplate = function (attrs, widgetType, eventsTmpl, counter, pCounter, isInList) {
    var isRange = attrs.get('is-range') === 'true';
    if (!isRange) {
        return getWidgetTemplate(attrs, { widgetType: widgetType, eventsTmpl: eventsTmpl, counter: counter, pCounter: pCounter, isInList: isInList });
    }
    var layoutClass = isMobileApp() ? 'col-xs-6' : 'col-sm-6';
    return "<div class=\"" + layoutClass + "\">" + getWidgetTemplate(attrs, { widgetType: widgetType, eventsTmpl: eventsTmpl, counter: counter, pCounter: pCounter }) + "</div>\n                <div class=\"" + layoutClass + "\">" + getWidgetTemplate(attrs, { widgetType: widgetType, eventsTmpl: eventsTmpl, counter: counter, pCounter: pCounter, isMaxWidget: true }) + "</div>";
};
var ɵ3 = getTemplate;
var getCaptionByWidget = function (attrs, widgetType, counter) {
    if (attrs.get('is-related') === 'true') {
        return counter + ".getDisplayExpr()";
    }
    if (widgetType === FormWidgetType.PASSWORD) {
        return '\'********\'';
    }
    var caption = counter + ".value";
    if (widgetType === FormWidgetType.DATETIME || widgetType === FormWidgetType.TIMESTAMP) {
        caption += " | toDate:" + counter + ".formWidget.datepattern || 'yyyy-MM-dd hh:mm:ss a'";
        return caption;
    }
    if (widgetType === FormWidgetType.TIME) {
        caption += " | toDate:" + counter + ".formWidget.timepattern || 'hh:mm a'";
        return caption;
    }
    if (widgetType === FormWidgetType.DATE) {
        caption += " | toDate:" + counter + ".formWidget.datepattern ||  'yyyy-MMM-dd'";
        return caption;
    }
    if (widgetType === FormWidgetType.RATING || widgetType === FormWidgetType.UPLOAD) {
        return '';
    }
    if (isDataSetWidget(widgetType) && attrs.get('datafield') === ALLFIELDS) {
        return counter + ".getDisplayExpr()";
    }
    return counter + ".getCaption()";
};
var ɵ4 = getCaptionByWidget;
var registerFormField = function (isFormField) {
    return {
        requires: ['wm-form', 'wm-liveform', 'wm-livefilter', 'wm-list'],
        pre: function (attrs, shared, parentForm, parentLiveForm, parentFilter, parentList) {
            var counter = idGen.nextUid();
            var parent = parentForm || parentLiveForm || parentFilter;
            var pCounter = (parent && parent.get('form_reference')) || 'form';
            var widgetType = attrs.get('widget') || FormWidgetType.TEXT;
            var dataRole = isFormField ? 'form-field' : 'filter-field';
            var validationMsg = isFormField ? "<p *ngIf=\"" + counter + "._control?.invalid && " + counter + "._control?.touched && " + pCounter + ".isUpdateMode\"\n                                   class=\"help-block text-danger\"\n                                   [textContent]=\"" + counter + ".validationmessage\"></p>" : '';
            var eventsTmpl = widgetType === FormWidgetType.UPLOAD ? '' : getEventsTemplate(attrs);
            var controlLayout = isMobileApp() ? 'col-xs-12' : 'col-sm-12';
            var isInList = pCounter === (parentList && parentList.get('parent_form_reference'));
            attrs.delete('widget');
            shared.set('counter', counter);
            if (attrs.get('is-range') === 'true') {
                setDefaultPlaceholder(attrs, widgetType, 0);
                setDefaultPlaceholder(attrs, widgetType, 1);
            }
            else {
                setDefaultPlaceholder(attrs, widgetType, 2);
            }
            return "<" + tagName + " data-role=\"" + dataRole + "\" [formGroup]=\"" + pCounter + ".ngform\" wmFormField #" + counter + "=\"wmFormField\" widgettype=\"" + widgetType + "\" " + getFormMarkupAttr(attrs) + ">\n                        <div class=\"live-field form-group app-composite-widget clearfix caption-{{" + pCounter + ".captionposition}}\" widget=\"" + widgetType + "\">\n                            <label [hidden]=\"!" + counter + ".displayname\" class=\"app-label control-label formfield-label {{" + pCounter + "._captionClass}}\" [title]=\"" + counter + ".displayname\"\n                                        [ngStyle]=\"{width: " + pCounter + ".captionsize}\" [ngClass]=\"{'text-danger': " + counter + "._control?.invalid && " + counter + "._control?.touched && " + pCounter + ".isUpdateMode,\n                                         required: " + pCounter + ".isUpdateMode && " + counter + ".required}\" [textContent]=\"" + counter + ".displayname\"> </label>\n                            <div [ngClass]=\"" + counter + ".displayname ? " + pCounter + "._widgetClass : '" + controlLayout + "'\">\n                                 <label class=\"form-control-static app-label\"\n                                       [hidden]=\"" + pCounter + ".isUpdateMode || " + counter + ".viewmodewidget === 'default' || " + counter + ".widgettype === 'upload'\" [innerHTML]=\"" + getCaptionByWidget(attrs, widgetType, counter) + "\"></label>\n                                " + getTemplate(attrs, widgetType, eventsTmpl, counter, pCounter, isInList) + "\n                                <p *ngIf=\"!(" + counter + "._control?.invalid && " + counter + "._control?.touched) && " + pCounter + ".isUpdateMode\"\n                                   class=\"help-block\" [textContent]=\"" + counter + ".hint\"></p>\n                                " + validationMsg + "\n                            </div>\n                        </div>";
        },
        post: function () { return "</" + tagName + ">"; },
        provide: function (attrs, shared) {
            var provider = new Map();
            provider.set('form_reference', shared.get('counter'));
            return provider;
        }
    };
};
var ɵ5 = registerFormField;
register('wm-form-field', registerFormField.bind(this, true));
register('wm-filter-field', registerFormField.bind(this, false));
export default (function () { });
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,