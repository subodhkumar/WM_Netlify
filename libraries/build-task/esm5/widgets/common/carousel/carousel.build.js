import { getAttrMarkup, register, getBoundToExpr } from '@wm/transpiler';
import { IDGenerator, updateTemplateAttrs } from '@wm/core';
var carouselTagName = 'carousel';
var dataSetKey = 'dataset';
var idGen = new IDGenerator('wm_carousel_ref_');
var isDynamicCarousel = function (node) { return node.attrs.find(function (attr) { return attr.name === 'type' && attr.value === 'dynamic'; }); };
var ɵ0 = isDynamicCarousel;
register('wm-carousel', function () {
    return {
        pre: function (attrs, shared) {
            // generating unique Id for the carousel
            var counter = idGen.nextUid();
            shared.set('carousel_ref', counter);
            return "<div class=\"app-carousel carousel\"><" + carouselTagName + " wmCarousel #" + counter + "=\"wmCarousel\"  " + getAttrMarkup(attrs) + " interval=\"0\" [ngClass]=\"" + counter + ".navigationClass\">";
        },
        post: function () { return "</" + carouselTagName + "></div>"; },
        template: function (node) {
            // check if the carousel is dynamic
            if (isDynamicCarousel(node)) {
                var datasetAttr = node.attrs.find(function (attr) { return attr.name === dataSetKey; });
                var widgetNameAttr = node.attrs.find(function (attr) { return attr.name === 'name'; });
                if (!datasetAttr) {
                    return;
                }
                var boundExpr = getBoundToExpr(datasetAttr.value);
                if (!boundExpr) {
                    return;
                }
                updateTemplateAttrs(node, boundExpr, widgetNameAttr.value);
            }
        },
        // To provide parent carousel reference for children
        provide: function (attrs, shared) {
            var provider = new Map();
            provider.set('carousel_ref', shared.get('carousel_ref'));
            return provider;
        }
    };
});
export default (function () { });
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuYnVpbGQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIndpZGdldHMvY29tbW9uL2Nhcm91c2VsL2Nhcm91c2VsLmJ1aWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBaUIsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTVELElBQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQztBQUNuQyxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDN0IsSUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUVsRCxJQUFNLGlCQUFpQixHQUFHLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBaEQsQ0FBZ0QsQ0FBQyxFQUF6RSxDQUF5RSxDQUFDOztBQUU1RyxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3BCLE9BQU87UUFDSCxHQUFHLEVBQUUsVUFBQyxLQUFLLEVBQUUsTUFBTTtZQUNmLHdDQUF3QztZQUN4QyxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDcEMsT0FBTywyQ0FBdUMsZUFBZSxxQkFBZ0IsT0FBTyx5QkFBa0IsYUFBYSxDQUFDLEtBQUssQ0FBQyxvQ0FBNEIsT0FBTyx3QkFBb0IsQ0FBQztRQUN0TCxDQUFDO1FBQ0QsSUFBSSxFQUFFLGNBQU0sT0FBQSxPQUFLLGVBQWUsWUFBUyxFQUE3QixDQUE2QjtRQUN6QyxRQUFRLEVBQUUsVUFBQyxJQUFhO1lBQ3BCLG1DQUFtQztZQUNuQyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN6QixJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUF4QixDQUF3QixDQUFDLENBQUM7Z0JBQ3RFLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQXBCLENBQW9CLENBQUMsQ0FBQztnQkFFckUsSUFBSSxDQUFDLFdBQVcsRUFBRTtvQkFDZCxPQUFPO2lCQUNWO2dCQUNELElBQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBRXBELElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ1osT0FBTztpQkFDVjtnQkFDRCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5RDtRQUNMLENBQUM7UUFDRCxvREFBb0Q7UUFDcEQsT0FBTyxFQUFFLFVBQUMsS0FBSyxFQUFFLE1BQU07WUFDbkIsSUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUMzQixRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDekQsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILGdCQUFlLGNBQU8sQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcbmltcG9ydCB7IElCdWlsZFRhc2tEZWYsIGdldEF0dHJNYXJrdXAsIHJlZ2lzdGVyLCBnZXRCb3VuZFRvRXhwciB9IGZyb20gJ0B3bS90cmFuc3BpbGVyJztcbmltcG9ydCB7IElER2VuZXJhdG9yLCB1cGRhdGVUZW1wbGF0ZUF0dHJzIH0gZnJvbSAnQHdtL2NvcmUnO1xuXG5jb25zdCBjYXJvdXNlbFRhZ05hbWUgPSAnY2Fyb3VzZWwnO1xuY29uc3QgZGF0YVNldEtleSA9ICdkYXRhc2V0JztcbmNvbnN0IGlkR2VuID0gbmV3IElER2VuZXJhdG9yKCd3bV9jYXJvdXNlbF9yZWZfJyk7XG5cbmNvbnN0IGlzRHluYW1pY0Nhcm91c2VsID0gbm9kZSA9PiBub2RlLmF0dHJzLmZpbmQoYXR0ciA9PiBhdHRyLm5hbWUgPT09ICd0eXBlJyAmJiBhdHRyLnZhbHVlID09PSAnZHluYW1pYycpO1xuXG5yZWdpc3Rlcignd20tY2Fyb3VzZWwnLCAoKTogSUJ1aWxkVGFza0RlZiA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJlOiAoYXR0cnMsIHNoYXJlZCkgPT4ge1xuICAgICAgICAgICAgLy8gZ2VuZXJhdGluZyB1bmlxdWUgSWQgZm9yIHRoZSBjYXJvdXNlbFxuICAgICAgICAgICAgY29uc3QgY291bnRlciA9IGlkR2VuLm5leHRVaWQoKTtcbiAgICAgICAgICAgIHNoYXJlZC5zZXQoJ2Nhcm91c2VsX3JlZicsIGNvdW50ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiYXBwLWNhcm91c2VsIGNhcm91c2VsXCI+PCR7Y2Fyb3VzZWxUYWdOYW1lfSB3bUNhcm91c2VsICMke2NvdW50ZXJ9PVwid21DYXJvdXNlbFwiICAke2dldEF0dHJNYXJrdXAoYXR0cnMpfSBpbnRlcnZhbD1cIjBcIiBbbmdDbGFzc109XCIke2NvdW50ZXJ9Lm5hdmlnYXRpb25DbGFzc1wiPmA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Q6ICgpID0+IGA8LyR7Y2Fyb3VzZWxUYWdOYW1lfT48L2Rpdj5gLFxuICAgICAgICB0ZW1wbGF0ZTogKG5vZGU6IEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjYXJvdXNlbCBpcyBkeW5hbWljXG4gICAgICAgICAgICBpZiAoaXNEeW5hbWljQ2Fyb3VzZWwobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhc2V0QXR0ciA9IG5vZGUuYXR0cnMuZmluZChhdHRyID0+IGF0dHIubmFtZSA9PT0gZGF0YVNldEtleSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkZ2V0TmFtZUF0dHIgPSBub2RlLmF0dHJzLmZpbmQoYXR0ciA9PiBhdHRyLm5hbWUgPT09ICduYW1lJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRhdGFzZXRBdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRFeHByID0gZ2V0Qm91bmRUb0V4cHIoZGF0YXNldEF0dHIudmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFib3VuZEV4cHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVUZW1wbGF0ZUF0dHJzKG5vZGUsIGJvdW5kRXhwciwgd2lkZ2V0TmFtZUF0dHIudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBUbyBwcm92aWRlIHBhcmVudCBjYXJvdXNlbCByZWZlcmVuY2UgZm9yIGNoaWxkcmVuXG4gICAgICAgIHByb3ZpZGU6IChhdHRycywgc2hhcmVkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHByb3ZpZGVyLnNldCgnY2Fyb3VzZWxfcmVmJywgc2hhcmVkLmdldCgnY2Fyb3VzZWxfcmVmJykpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgICAgICB9XG4gICAgfTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7fTtcbiJdfQ==