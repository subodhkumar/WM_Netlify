import { getAttrMarkup, register } from '@wm/transpiler';
import { getRowActionAttrs } from '@wm/core';
var tagName = 'div';
var getSaveCancelTemplate = function () {
    return "<button type=\"button\" aria-label=\"Save edit icon\" class=\"save row-action-button btn app-button btn-transparent save-edit-row-button hidden\" title=\"Save\">\n                <i class=\"wi wi-done\" aria-hidden=\"true\"></i>\n            </button>\n            <button type=\"button\" aria-label=\"Cancel edit icon\" class=\"cancel row-action-button btn app-button btn-transparent cancel-edit-row-button hidden\" title=\"Cancel\">\n                <i class=\"wi wi-cancel\" aria-hidden=\"true\"></i>\n            </button>";
};
var ɵ0 = getSaveCancelTemplate;
// get the inline widget template
var getRowActionTmpl = function (attrs) {
    var action = attrs.get('action');
    var actionTmpl = action ? " click.event.delayed=\"" + action + "\" " : '';
    var saveCancelTmpl = action && action.includes('editRow(') ? getSaveCancelTemplate() : '';
    var btnClass = action ? (action.includes('editRow(') ? 'edit edit-row-button' :
        (action.includes('deleteRow(') ? 'delete delete-row-button' : '')) : '';
    var tabIndex = attrs.get('tabindex') ? "tabindex=\"" + attrs.get('tabindex') + "\"" : '';
    var tag = attrs.get('widget-type') === 'anchor' ? 'a' : 'button';
    var directive = attrs.get('widget-type') === 'anchor' ? 'wmAnchor' : 'wmButton';
    return "<ng-template #rowActionTmpl let-row=\"row\">\n               <" + tag + " " + directive + " data-action-key=\"" + attrs.get('key') + "\"\n                    " + getRowActionAttrs(attrs) + "\n                    class=\"row-action row-action-button " + attrs.get('class') + " " + btnClass + "\"\n                    iconclass=\"" + attrs.get('iconclass') + "\"\n                    " + actionTmpl + "\n                    " + tabIndex + "\n                    type=\"button\"></" + tag + ">\n                " + saveCancelTmpl + "\n            </ng-template>";
};
var ɵ1 = getRowActionTmpl;
register('wm-table-row-action', function () {
    return {
        pre: function (attrs) { return "<" + tagName + " wmTableRowAction " + getAttrMarkup(attrs) + ">\n                        " + getRowActionTmpl(attrs); },
        post: function () { return "</" + tagName + ">"; }
    };
});
export default (function () { });
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcm93LWFjdGlvbi5idWlsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vdGFibGUvdGFibGUtcm93LWFjdGlvbi90YWJsZS1yb3ctYWN0aW9uLmJ1aWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU3QyxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFdEIsSUFBTSxxQkFBcUIsR0FBRztJQUMxQixPQUFPLGdoQkFLVyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQzs7QUFFRixpQ0FBaUM7QUFDakMsSUFBTSxnQkFBZ0IsR0FBRyxVQUFDLEtBQUs7SUFDM0IsSUFBTSxNQUFNLEdBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLDRCQUF5QixNQUFNLFFBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JFLElBQU0sY0FBYyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDNUYsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDN0QsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVGLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFhLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3BGLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNuRSxJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDbEYsT0FBTyxtRUFDTyxHQUFHLFNBQUksU0FBUywyQkFBcUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0NBQ2pELGlCQUFpQixDQUFDLEtBQUssQ0FBQyxtRUFDWSxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFJLFFBQVEsNENBQ3ZELEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGdDQUNqQyxVQUFVLDhCQUNWLFFBQVEsZ0RBQ1EsR0FBRywyQkFDdkIsY0FBYyxpQ0FDTCxDQUFDO0FBQzVCLENBQUMsQ0FBQzs7QUFFRixRQUFRLENBQUMscUJBQXFCLEVBQUU7SUFDNUIsT0FBTztRQUNILEdBQUcsRUFBRSxVQUFBLEtBQUssSUFBSSxPQUFBLE1BQUksT0FBTywwQkFBcUIsYUFBYSxDQUFDLEtBQUssQ0FBQyxtQ0FDaEQsZ0JBQWdCLENBQUMsS0FBSyxDQUFHLEVBRDdCLENBQzZCO1FBQzNDLElBQUksRUFBRSxjQUFNLE9BQUEsT0FBSyxPQUFPLE1BQUcsRUFBZixDQUFlO0tBQzlCLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILGdCQUFlLGNBQU8sQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXR0ck1hcmt1cCwgSUJ1aWxkVGFza0RlZiwgcmVnaXN0ZXIgfSBmcm9tICdAd20vdHJhbnNwaWxlcic7XG5pbXBvcnQgeyBnZXRSb3dBY3Rpb25BdHRycyB9IGZyb20gJ0B3bS9jb3JlJztcblxuY29uc3QgdGFnTmFtZSA9ICdkaXYnO1xuXG5jb25zdCBnZXRTYXZlQ2FuY2VsVGVtcGxhdGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBhcmlhLWxhYmVsPVwiU2F2ZSBlZGl0IGljb25cIiBjbGFzcz1cInNhdmUgcm93LWFjdGlvbi1idXR0b24gYnRuIGFwcC1idXR0b24gYnRuLXRyYW5zcGFyZW50IHNhdmUtZWRpdC1yb3ctYnV0dG9uIGhpZGRlblwiIHRpdGxlPVwiU2F2ZVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwid2kgd2ktZG9uZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgYXJpYS1sYWJlbD1cIkNhbmNlbCBlZGl0IGljb25cIiBjbGFzcz1cImNhbmNlbCByb3ctYWN0aW9uLWJ1dHRvbiBidG4gYXBwLWJ1dHRvbiBidG4tdHJhbnNwYXJlbnQgY2FuY2VsLWVkaXQtcm93LWJ1dHRvbiBoaWRkZW5cIiB0aXRsZT1cIkNhbmNlbFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwid2kgd2ktY2FuY2VsXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+YDtcbn07XG5cbi8vIGdldCB0aGUgaW5saW5lIHdpZGdldCB0ZW1wbGF0ZVxuY29uc3QgZ2V0Um93QWN0aW9uVG1wbCA9IChhdHRycykgPT4ge1xuICAgIGNvbnN0IGFjdGlvbiA9ICBhdHRycy5nZXQoJ2FjdGlvbicpO1xuICAgIGNvbnN0IGFjdGlvblRtcGwgPSBhY3Rpb24gPyBgIGNsaWNrLmV2ZW50LmRlbGF5ZWQ9XCIke2FjdGlvbn1cIiBgIDogJyc7XG4gICAgY29uc3Qgc2F2ZUNhbmNlbFRtcGwgPSBhY3Rpb24gJiYgYWN0aW9uLmluY2x1ZGVzKCdlZGl0Um93KCcpID8gZ2V0U2F2ZUNhbmNlbFRlbXBsYXRlKCkgOiAnJztcbiAgICBjb25zdCBidG5DbGFzcyA9IGFjdGlvbiA/IChhY3Rpb24uaW5jbHVkZXMoJ2VkaXRSb3coJykgPyAnZWRpdCBlZGl0LXJvdy1idXR0b24nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIChhY3Rpb24uaW5jbHVkZXMoJ2RlbGV0ZVJvdygnKSA/ICdkZWxldGUgZGVsZXRlLXJvdy1idXR0b24nIDogJycpKSA6ICcnO1xuICAgIGNvbnN0IHRhYkluZGV4ID0gYXR0cnMuZ2V0KCd0YWJpbmRleCcpID8gYHRhYmluZGV4PVwiJHthdHRycy5nZXQoJ3RhYmluZGV4Jyl9XCJgIDogJyc7XG4gICAgY29uc3QgdGFnID0gYXR0cnMuZ2V0KCd3aWRnZXQtdHlwZScpID09PSAnYW5jaG9yJyA/ICdhJyA6ICdidXR0b24nO1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGF0dHJzLmdldCgnd2lkZ2V0LXR5cGUnKSA9PT0gJ2FuY2hvcicgPyAnd21BbmNob3InIDogJ3dtQnV0dG9uJztcbiAgICByZXR1cm4gYDxuZy10ZW1wbGF0ZSAjcm93QWN0aW9uVG1wbCBsZXQtcm93PVwicm93XCI+XG4gICAgICAgICAgICAgICA8JHt0YWd9ICR7ZGlyZWN0aXZlfSBkYXRhLWFjdGlvbi1rZXk9XCIke2F0dHJzLmdldCgna2V5Jyl9XCJcbiAgICAgICAgICAgICAgICAgICAgJHtnZXRSb3dBY3Rpb25BdHRycyhhdHRycyl9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwicm93LWFjdGlvbiByb3ctYWN0aW9uLWJ1dHRvbiAke2F0dHJzLmdldCgnY2xhc3MnKX0gJHtidG5DbGFzc31cIlxuICAgICAgICAgICAgICAgICAgICBpY29uY2xhc3M9XCIke2F0dHJzLmdldCgnaWNvbmNsYXNzJyl9XCJcbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb25UbXBsfVxuICAgICAgICAgICAgICAgICAgICAke3RhYkluZGV4fVxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCI+PC8ke3RhZ30+XG4gICAgICAgICAgICAgICAgJHtzYXZlQ2FuY2VsVG1wbH1cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+YDtcbn07XG5cbnJlZ2lzdGVyKCd3bS10YWJsZS1yb3ctYWN0aW9uJywgKCk6IElCdWlsZFRhc2tEZWYgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZTogYXR0cnMgPT4gYDwke3RhZ05hbWV9IHdtVGFibGVSb3dBY3Rpb24gJHtnZXRBdHRyTWFya3VwKGF0dHJzKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAke2dldFJvd0FjdGlvblRtcGwoYXR0cnMpfWAsXG4gICAgICAgIHBvc3Q6ICgpID0+IGA8LyR7dGFnTmFtZX0+YFxuICAgIH07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge307XG4iXX0=