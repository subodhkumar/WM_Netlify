import { getAttrMarkup, register } from '@wm/transpiler';
import { getRowActionAttrs } from '@wm/core';
var tagName = 'div';
var getRowExpansionActionTmpl = function (attrs) {
    var tag = attrs.get('widget-type') === 'anchor' ? 'a' : 'button';
    var directive = attrs.get('widget-type') === 'anchor' ? 'wmAnchor' : 'wmButton';
    return "<ng-template #rowExpansionActionTmpl let-row=\"row\">\n               <" + tag + " " + directive + "\n                    " + getRowActionAttrs(attrs) + "\n                    class=\"" + attrs.get('class') + " row-expansion-button\"\n                    iconclass=\"" + attrs.get('collapseicon') + "\"\n                    type=\"button\"></" + tag + ">\n            </ng-template>";
};
var ɵ0 = getRowExpansionActionTmpl;
register('wm-table-row', function () {
    return {
        pre: function (attrs) {
            return "<" + tagName + " wmTableRow " + getAttrMarkup(attrs) + ">\n                    " + getRowExpansionActionTmpl(attrs) + "\n                    <ng-template #rowExpansionTmpl let-row=\"row\" let-rowDef=\"rowDef\" let-containerLoad=\"containerLoad\">\n                        <div wmContainer partialContainer content.bind=\"rowDef.content\" load.event=\"containerLoad(widget)\"\n                            [ngStyle]=\"{'height': rowDef.height, 'overflow-y': 'auto'}\">\n                         <div *ngFor=\"let param of rowDef.partialParams | keyvalue\" wmParam hidden\n                            [name]=\"param.key\" [value]=\"param.value\"></div>";
        },
        post: function () { return "</div></ng-template></" + tagName + ">"; }
    };
});
export default (function () { });
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcm93LmJ1aWxkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJ3aWRnZXRzL2NvbW1vbi90YWJsZS90YWJsZS1yb3cvdGFibGUtcm93LmJ1aWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU3QyxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFdEIsSUFBTSx5QkFBeUIsR0FBRyxVQUFDLEtBQUs7SUFDcEMsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ25FLElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNsRixPQUFPLDRFQUNPLEdBQUcsU0FBSSxTQUFTLDhCQUNaLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxzQ0FDakIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsaUVBQ2QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsa0RBQ3BCLEdBQUcsa0NBQ2QsQ0FBQztBQUM1QixDQUFDLENBQUM7O0FBRUYsUUFBUSxDQUFDLGNBQWMsRUFBRTtJQUNyQixPQUFPO1FBQ0gsR0FBRyxFQUFFLFVBQUMsS0FBSztZQUNQLE9BQU8sTUFBSSxPQUFPLG9CQUFlLGFBQWEsQ0FBQyxLQUFLLENBQUMsK0JBQzNDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyx1aEJBS3NCLENBQUM7UUFDckUsQ0FBQztRQUNELElBQUksRUFBRSxjQUFNLE9BQUEsMkJBQXlCLE9BQU8sTUFBRyxFQUFuQyxDQUFtQztLQUNsRCxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCxnQkFBZSxjQUFPLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEF0dHJNYXJrdXAsIElCdWlsZFRhc2tEZWYsIHJlZ2lzdGVyIH0gZnJvbSAnQHdtL3RyYW5zcGlsZXInO1xuaW1wb3J0IHsgZ2V0Um93QWN0aW9uQXR0cnMgfSBmcm9tICdAd20vY29yZSc7XG5cbmNvbnN0IHRhZ05hbWUgPSAnZGl2JztcblxuY29uc3QgZ2V0Um93RXhwYW5zaW9uQWN0aW9uVG1wbCA9IChhdHRycykgPT4ge1xuICAgIGNvbnN0IHRhZyA9IGF0dHJzLmdldCgnd2lkZ2V0LXR5cGUnKSA9PT0gJ2FuY2hvcicgPyAnYScgOiAnYnV0dG9uJztcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBhdHRycy5nZXQoJ3dpZGdldC10eXBlJykgPT09ICdhbmNob3InID8gJ3dtQW5jaG9yJyA6ICd3bUJ1dHRvbic7XG4gICAgcmV0dXJuIGA8bmctdGVtcGxhdGUgI3Jvd0V4cGFuc2lvbkFjdGlvblRtcGwgbGV0LXJvdz1cInJvd1wiPlxuICAgICAgICAgICAgICAgPCR7dGFnfSAke2RpcmVjdGl2ZX1cbiAgICAgICAgICAgICAgICAgICAgJHtnZXRSb3dBY3Rpb25BdHRycyhhdHRycyl9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiJHthdHRycy5nZXQoJ2NsYXNzJyl9IHJvdy1leHBhbnNpb24tYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgaWNvbmNsYXNzPVwiJHthdHRycy5nZXQoJ2NvbGxhcHNlaWNvbicpfVwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIj48LyR7dGFnfT5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+YDtcbn07XG5cbnJlZ2lzdGVyKCd3bS10YWJsZS1yb3cnLCAoKTogSUJ1aWxkVGFza0RlZiA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJlOiAoYXR0cnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgPCR7dGFnTmFtZX0gd21UYWJsZVJvdyAke2dldEF0dHJNYXJrdXAoYXR0cnMpfT5cbiAgICAgICAgICAgICAgICAgICAgJHtnZXRSb3dFeHBhbnNpb25BY3Rpb25UbXBsKGF0dHJzKX1cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNyb3dFeHBhbnNpb25UbXBsIGxldC1yb3c9XCJyb3dcIiBsZXQtcm93RGVmPVwicm93RGVmXCIgbGV0LWNvbnRhaW5lckxvYWQ9XCJjb250YWluZXJMb2FkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHdtQ29udGFpbmVyIHBhcnRpYWxDb250YWluZXIgY29udGVudC5iaW5kPVwicm93RGVmLmNvbnRlbnRcIiBsb2FkLmV2ZW50PVwiY29udGFpbmVyTG9hZCh3aWRnZXQpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmdTdHlsZV09XCJ7J2hlaWdodCc6IHJvd0RlZi5oZWlnaHQsICdvdmVyZmxvdy15JzogJ2F1dG8nfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nRm9yPVwibGV0IHBhcmFtIG9mIHJvd0RlZi5wYXJ0aWFsUGFyYW1zIHwga2V5dmFsdWVcIiB3bVBhcmFtIGhpZGRlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuYW1lXT1cInBhcmFtLmtleVwiIFt2YWx1ZV09XCJwYXJhbS52YWx1ZVwiPjwvZGl2PmA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Q6ICgpID0+IGA8L2Rpdj48L25nLXRlbXBsYXRlPjwvJHt0YWdOYW1lfT5gXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7fTtcbiJdfQ==