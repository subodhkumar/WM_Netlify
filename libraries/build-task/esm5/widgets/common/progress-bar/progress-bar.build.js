import { getAttrMarkup, getBoundToExpr, register } from '@wm/transpiler';
var tagName = 'div';
var getAttr = function (node, attrName) { return node.attrs.find(function (attr) { return attr.name === attrName; }); };
var ɵ0 = getAttr;
var getAttrValue = function (node, attrName) {
    var match = getAttr(node, attrName);
    if (match) {
        return match.value;
    }
};
var ɵ1 = getAttrValue;
var getReplaceRegex = function (v) { return new RegExp("bind:(" + v + "|" + v + "\\[\\$i])\\.", 'g'); };
var ɵ2 = getReplaceRegex;
register('wm-progress-bar', function () {
    return {
        template: function (node) {
            var dataset = getAttrValue(node, 'dataset');
            var boundExpr = getBoundToExpr(dataset);
            if (boundExpr) {
                var type = getAttrValue(node, 'type');
                var datavalue = getAttrValue(node, 'datavalue');
                var replaceRegex = getReplaceRegex(boundExpr);
                if (type && type.includes(boundExpr)) {
                    type = type.replace(replaceRegex, '');
                    getAttr(node, 'type').value = type;
                }
                if (datavalue && datavalue.includes(boundExpr)) {
                    datavalue = datavalue.replace(replaceRegex, '');
                    getAttr(node, 'datavalue').value = datavalue;
                }
            }
        },
        pre: function (attrs) { return "<" + tagName + " wmProgressBar " + getAttrMarkup(attrs) + ">"; },
        post: function () { return "</" + tagName + ">"; }
    };
});
export default (function () { });
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmJ1aWxkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJ3aWRnZXRzL2NvbW1vbi9wcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLmJ1aWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFpQixRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl4RixJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFdEIsSUFBTSxPQUFPLEdBQUcsVUFBQyxJQUFhLEVBQUUsUUFBZ0IsSUFBSyxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQXRCLENBQXNCLENBQUMsRUFBL0MsQ0FBK0MsQ0FBQzs7QUFFckcsSUFBTSxZQUFZLEdBQUcsVUFBQyxJQUFhLEVBQUUsUUFBZ0I7SUFDakQsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0QyxJQUFJLEtBQUssRUFBRTtRQUNQLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztLQUN0QjtBQUNMLENBQUMsQ0FBQzs7QUFFRixJQUFNLGVBQWUsR0FBRyxVQUFDLENBQVMsSUFBSyxPQUFBLElBQUksTUFBTSxDQUFDLFdBQVMsQ0FBQyxTQUFJLENBQUMsaUJBQWMsRUFBRSxHQUFHLENBQUMsRUFBOUMsQ0FBOEMsQ0FBQzs7QUFFdEYsUUFBUSxDQUFDLGlCQUFpQixFQUFFO0lBQ3hCLE9BQU87UUFDSCxRQUFRLEVBQUUsVUFBQyxJQUFhO1lBQ3BCLElBQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDOUMsSUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTFDLElBQUksU0FBUyxFQUFFO2dCQUNYLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksU0FBUyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7Z0JBRWhELElBQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFaEQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDbEMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUN0QyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7aUJBQ3RDO2dCQUVELElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQzVDLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDaEQsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO2lCQUNoRDthQUNKO1FBQ0wsQ0FBQztRQUNELEdBQUcsRUFBRSxVQUFBLEtBQUssSUFBSSxPQUFBLE1BQUksT0FBTyx1QkFBa0IsYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFHLEVBQXBELENBQW9EO1FBQ2xFLElBQUksRUFBRSxjQUFNLE9BQUEsT0FBSyxPQUFPLE1BQUcsRUFBZixDQUFlO0tBQzlCLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILGdCQUFlLGNBQU8sQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcblxuaW1wb3J0IHsgZ2V0QXR0ck1hcmt1cCwgZ2V0Qm91bmRUb0V4cHIsIElCdWlsZFRhc2tEZWYsIHJlZ2lzdGVyIH0gZnJvbSAnQHdtL3RyYW5zcGlsZXInO1xuXG5kZWNsYXJlIGNvbnN0IF87XG5cbmNvbnN0IHRhZ05hbWUgPSAnZGl2JztcblxuY29uc3QgZ2V0QXR0ciA9IChub2RlOiBFbGVtZW50LCBhdHRyTmFtZTogc3RyaW5nKSA9PiBub2RlLmF0dHJzLmZpbmQoYXR0ciA9PiBhdHRyLm5hbWUgPT09IGF0dHJOYW1lKTtcblxuY29uc3QgZ2V0QXR0clZhbHVlID0gKG5vZGU6IEVsZW1lbnQsIGF0dHJOYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICAgIGNvbnN0IG1hdGNoID0gZ2V0QXR0cihub2RlLCBhdHRyTmFtZSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBtYXRjaC52YWx1ZTtcbiAgICB9XG59O1xuXG5jb25zdCBnZXRSZXBsYWNlUmVnZXggPSAodjogc3RyaW5nKSA9PiBuZXcgUmVnRXhwKGBiaW5kOigke3Z9fCR7dn1cXFxcW1xcXFwkaV0pXFxcXC5gLCAnZycpO1xuXG5yZWdpc3Rlcignd20tcHJvZ3Jlc3MtYmFyJywgKCk6IElCdWlsZFRhc2tEZWYgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlOiAobm9kZTogRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0YXNldCA9IGdldEF0dHJWYWx1ZShub2RlLCAnZGF0YXNldCcpO1xuICAgICAgICAgICAgY29uc3QgYm91bmRFeHByID0gZ2V0Qm91bmRUb0V4cHIoZGF0YXNldCk7XG5cbiAgICAgICAgICAgIGlmIChib3VuZEV4cHIpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGdldEF0dHJWYWx1ZShub2RlLCAndHlwZScpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhdmFsdWUgPSBnZXRBdHRyVmFsdWUobm9kZSwgJ2RhdGF2YWx1ZScpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZVJlZ2V4ID0gZ2V0UmVwbGFjZVJlZ2V4KGJvdW5kRXhwcik7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSAmJiB0eXBlLmluY2x1ZGVzKGJvdW5kRXhwcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGUucmVwbGFjZShyZXBsYWNlUmVnZXgsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0QXR0cihub2RlLCAndHlwZScpLnZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZGF0YXZhbHVlICYmIGRhdGF2YWx1ZS5pbmNsdWRlcyhib3VuZEV4cHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGF2YWx1ZSA9IGRhdGF2YWx1ZS5yZXBsYWNlKHJlcGxhY2VSZWdleCwgJycpO1xuICAgICAgICAgICAgICAgICAgICBnZXRBdHRyKG5vZGUsICdkYXRhdmFsdWUnKS52YWx1ZSA9IGRhdGF2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZTogYXR0cnMgPT4gYDwke3RhZ05hbWV9IHdtUHJvZ3Jlc3NCYXIgJHtnZXRBdHRyTWFya3VwKGF0dHJzKX0+YCxcbiAgICAgICAgcG9zdDogKCkgPT4gYDwvJHt0YWdOYW1lfT5gXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7fTtcbiJdfQ==