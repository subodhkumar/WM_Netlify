{"version":3,"file":"index.js.map","sources":["ng://@wm/components/widgets/common/accordion/accordion.build.ts","ng://@wm/components/widgets/common/accordion/accordion-pane/accordion-pane.build.ts","ng://@wm/components/widgets/common/tabs/tabs.build.ts","ng://@wm/components/widgets/common/tabs/tab-pane/tab-pane.build.ts","ng://@wm/components/widgets/common/anchor/anchor.build.ts","ng://@wm/components/widgets/common/audio/audio.build.ts","ng://@wm/components/widgets/common/breadcrumb/breadcrumb.build.ts","ng://@wm/components/widgets/common/button-group/button-group.build.ts","ng://@wm/components/widgets/common/button/button.build.ts","ng://@wm/components/widgets/common/calendar/calendar.build.ts","ng://@wm/components/widgets/common/card/card.build.ts","ng://@wm/components/widgets/common/card/card-content/card-content.build.ts","ng://@wm/components/widgets/common/card/card-actions/card-actions.build.ts","ng://@wm/components/widgets/common/card/card-footer/card-footer.build.ts","ng://@wm/components/widgets/common/carousel/carousel.build.ts","ng://@wm/components/widgets/common/carousel/carousel-template/carousel-template.build.ts","ng://@wm/components/widgets/common/chart/chart.build.ts","ng://@wm/components/widgets/common/checkbox/checkbox.build.ts","ng://@wm/components/widgets/common/checkboxset/checkboxset.build.ts","ng://@wm/components/widgets/common/chips/chips.build.ts","ng://@wm/components/widgets/common/color-picker/color-picker.build.ts","ng://@wm/components/widgets/common/composite/composite.build.ts","ng://@wm/components/widgets/common/container/container.build.ts","ng://@wm/components/widgets/common/content/content.build.ts","ng://@wm/components/widgets/common/currency/currency.build.ts","ng://@wm/components/widgets/common/date-time/date-time.build.ts","ng://@wm/components/widgets/common/date/date.build.ts","ng://@wm/components/widgets/common/dialog/alert-dialog/alert-dialog.build.ts","ng://@wm/components/widgets/common/dialog/confirm-dialog/confirm-dialog.build.ts","ng://@wm/components/widgets/common/dialog/base/dialog-footer/dialog-footer.build.ts","ng://@wm/components/widgets/common/dialog/design-dialog/dialog.build.ts","ng://@wm/components/widgets/common/dialog/iframe-dialog/iframe-dialog.build.ts","ng://@wm/components/widgets/common/dialog/login-dialog/login-dialog.build.ts","ng://@wm/components/widgets/common/dialog/partial-dialog/partial-dialog.build.ts","ng://@wm/components/widgets/common/footer/footer.build.ts","ng://@wm/components/widgets/framework/types.ts","ng://@wm/components/utils/widget-utils.ts","ng://@wm/components/utils/data-utils.ts","ng://@wm/components/widgets/common/form/form-field/form-field.build.ts","ng://@wm/components/widgets/common/form/form-action/form-action.build.ts","ng://@wm/components/widgets/common/form/form.build.ts","ng://@wm/components/widgets/common/header/header.build.ts","ng://@wm/components/widgets/common/html/html.build.ts","ng://@wm/components/widgets/common/icon/icon.build.ts","ng://@wm/components/widgets/common/iframe/iframe.build.ts","ng://@wm/components/widgets/common/label/label.build.ts","ng://@wm/components/widgets/common/list/list.build.ts","ng://@wm/components/widgets/common/layout-grid/layout-grid-column/layout-grid-column.build.ts","ng://@wm/components/widgets/common/layout-grid/layout-grid-row/layout-grid-row.build.ts","ng://@wm/components/widgets/common/layout-grid/layout-grid.build.ts","ng://@wm/components/widgets/common/left-panel/left-panel.build.ts","ng://@wm/components/widgets/common/live-table/live-table.build.ts","ng://@wm/components/widgets/common/login/login.build.ts","ng://@wm/components/widgets/common/marquee/marquee.build.ts","ng://@wm/components/widgets/common/message/message.build.ts","ng://@wm/components/widgets/common/menu/menu.build.ts","ng://@wm/components/widgets/common/nav/nav-item/nav-item.build.ts","ng://@wm/components/widgets/common/nav/nav.build.ts","ng://@wm/components/widgets/common/navbar/navbar.build.ts","ng://@wm/components/widgets/common/number/number.build.ts","ng://@wm/components/widgets/common/page-content/page-content.build.ts","ng://@wm/components/widgets/common/page/page.build.ts","ng://@wm/components/widgets/common/pagination/pagination.build.ts","ng://@wm/components/widgets/common/panel/panel.build.ts","ng://@wm/components/widgets/common/partial/partial.build.ts","ng://@wm/components/widgets/common/partial-param/partial-param.build.ts","ng://@wm/components/widgets/common/picture/picture.build.ts","ng://@wm/components/widgets/common/popover/popover.build.ts","ng://@wm/components/widgets/common/prefab/prefab.build.ts","ng://@wm/components/widgets/common/prefab-container/prefab-container.build.ts","ng://@wm/components/widgets/common/progress-bar/progress-bar.build.ts","ng://@wm/components/widgets/common/progress-bar/progress-circle/progress-circle.build.ts","ng://@wm/components/widgets/common/radioset/radioset.build.ts","ng://@wm/components/widgets/common/rating/rating.build.ts","ng://@wm/components/widgets/common/rich-text-editor/rich-text-editor.build.ts","ng://@wm/components/widgets/common/right-panel/right-panel.build.ts","ng://@wm/components/widgets/common/search/search.build.ts","ng://@wm/components/widgets/common/select/select.build.ts","ng://@wm/components/widgets/common/slider/slider.build.ts","ng://@wm/components/widgets/common/spinner/spinner.build.ts","ng://@wm/components/widgets/common/switch/switch.build.ts","ng://@wm/components/widgets/common/table/table-action/table-action.build.ts","ng://@wm/components/widgets/common/table/table-column-group/table-column-group.build.ts","ng://@wm/components/utils/live-utils.ts","ng://@wm/components/widgets/common/table/table-column/table-column.build.ts","ng://@wm/components/widgets/common/table/table-row/table-row.build.ts","ng://@wm/components/widgets/common/table/table-row-action/table-row-action.build.ts","ng://@wm/components/widgets/common/table/table.build.ts","ng://@wm/components/widgets/common/text/text.build.ts","ng://@wm/components/widgets/common/textarea/textarea.build.ts","ng://@wm/components/widgets/common/tile/tile.build.ts","ng://@wm/components/widgets/common/time/time.build.ts","ng://@wm/components/widgets/common/tree/tree.build.ts","ng://@wm/components/widgets/common/top-nav/top-nav.build.ts","ng://@wm/components/widgets/common/video/video.build.ts","ng://@wm/components/widgets/common/wizard/wizard.build.ts","ng://@wm/components/widgets/common/wizard/wizard-step/wizard-step.build.ts","ng://@wm/components/widgets/common/file-upload/file-upload.build.ts","ng://@wm/components/public_api_buildtask.ts","ng://@wm/components/index.ts"],"sourcesContent":["import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-accordion', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmAccordion role=\"tablist\" aria-multiselectable=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-accordionpane', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmAccordionPane partialContainer wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-tabs', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTabs ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\nregister('wm-tabpane', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTabPane  partialContainer ${getAttrMarkup(attrs)} wm-navigable-element=\"true\" role=\"tabpanel\">`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'a';\n\nregister('wm-anchor', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmAnchor role=\"link\" data-identifier=\"anchor\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-audio', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmAudio ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'ol';\n\nregister('wm-breadcrumb', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmBreadcrumb ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-buttongroup', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmButtonGroup role=\"group\" aria-labelledby=\"button group\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'button';\n\nregister('wm-button', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmButton ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-calendar', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCalendar redrawable style=\"width:100%\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-card', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCard ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-card-content', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCardContent partialContainer ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-card-actions', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCardActions ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-card-footer', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCardFooter ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { Element } from '@angular/compiler';\nimport { IBuildTaskDef, getAttrMarkup, register, getBoundToExpr } from '@wm/transpiler';\nimport { IDGenerator, updateTemplateAttrs } from '@wm/core';\n\nconst carouselTagName = 'carousel';\nconst dataSetKey = 'dataset';\nconst idGen = new IDGenerator('wm_carousel_ref_');\n\nconst isDynamicCarousel = node => node.attrs.find(attr => attr.name === 'type' && attr.value === 'dynamic');\n\nregister('wm-carousel', (): IBuildTaskDef => {\n    return {\n        pre: (attrs, shared) => {\n            // generating unique Id for the carousel\n            const counter = idGen.nextUid();\n            shared.set('carousel_ref', counter);\n            return `<div class=\"app-carousel carousel\"><${carouselTagName} wmCarousel #${counter}=\"wmCarousel\"  ${getAttrMarkup(attrs)} interval=\"0\" [ngClass]=\"${counter}.navigationClass\">`;\n        },\n        post: () => `</${carouselTagName}></div>`,\n        template: (node: Element) => {\n            // check if the carousel is dynamic\n            if (isDynamicCarousel(node)) {\n                const datasetAttr = node.attrs.find(attr => attr.name === dataSetKey);\n                const widgetNameAttr = node.attrs.find(attr => attr.name === 'name');\n\n                if (!datasetAttr) {\n                    return;\n                }\n                const boundExpr = getBoundToExpr(datasetAttr.value);\n\n                if (!boundExpr) {\n                    return;\n                }\n                updateTemplateAttrs(node, boundExpr, widgetNameAttr.value);\n            }\n        },\n        // To provide parent carousel reference for children\n        provide: (attrs, shared) => {\n            const provider = new Map();\n            provider.set('carousel_ref', shared.get('carousel_ref'));\n            return provider;\n        }\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst carouselContentTagName = 'slide';\n\n// For static carousel\nregister('wm-carousel-content', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${carouselContentTagName} wmCarouselTemplate  ${getAttrMarkup(attrs)}>`,\n        post: () => `</${carouselContentTagName}>`\n    };\n});\n\n// For dynamic carousel\nregister('wm-carousel-template', (): IBuildTaskDef => {\n    return {\n        requires: ['wm-carousel'],\n        pre: (attrs, shared, parentCarousel) => {\n            const carouselRef = parentCarousel.get('carousel_ref');\n            return `<div *ngIf=\"!${carouselRef}.fieldDefs\">{{${carouselRef}.nodatamessage}}</div>\n                    <${carouselContentTagName} wmCarouselTemplate  ${getAttrMarkup(attrs)} *ngFor=\"let item of ${carouselRef}.fieldDefs; let i = index;\">\n                        <ng-container [ngTemplateOutlet]=\"tempRef\" [ngTemplateOutletContext]=\"{item:item, index:i}\"></ng-container>\n                    </${carouselContentTagName}>\n                    <ng-template #tempRef let-item=\"item\" let-index=\"index\">`;\n        },\n        post: () => `</ng-template>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-chart', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmChart redrawable ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'div';\n\nregister('wm-checkbox', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCheckbox role=\"input\" ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'ul';\n\nregister('wm-checkboxset', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCheckboxset ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'ul';\n\nregister('wm-chips', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmChips role=\"listbox\" ${getAttrMarkup(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'div';\n\nregister('wm-colorpicker', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmColorPicker ${getAttrMarkup(attrs)} role=\"input\" ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-composite', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmComposite role=\"group\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-container', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmContainer partialContainer wmSmoothscroll=\"${attrs.get('smoothscroll') || 'false'}\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'main';\n\nregister('wm-content', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmContent data-role=\"page-content\" role=\"main\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'div';\n\nregister('wm-currency', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCurrency ${getAttrMarkup(attrs)} role=\"input\" ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'div';\n\nregister('wm-datetime', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmDateTime ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'div';\n\nregister('wm-date', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmDate ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-alertdialog', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmAlertDialog role=\"alertdialog\" wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-confirmdialog', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmConfirmDialog wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-dialogactions', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<ng-template #dialogFooter><${tagName} wmDialogFooter data-identfier=\"actions\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}></ng-template>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-dialog', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmDialog ${getAttrMarkup(attrs)} wm-navigable-element=\"true\"><ng-template #dialogBody>`,\n        post: () => `</ng-template></${tagName}>`\n    };\n});\n\n// Todo:vinay remove wm-view in migration\nregister('wm-view', (): IBuildTaskDef => {\n    return {\n        pre: attrs => '',\n        post: () => ''\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-iframedialog', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmIframeDialog wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-logindialog', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmDialog wmLoginDialog ${getAttrMarkup(attrs)} eventsource.bind=\"Actions.loginAction\" wm-navigable-element=\"true\"><ng-template #dialogBody>`,\n        post: () => `</ng-template></${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-pagedialog', (): IBuildTaskDef => {\n    return {\n        pre: (attrs, shared) => {\n            const content = attrs.get('content');\n            attrs.delete('content');\n\n            const boundContent = attrs.get('content.bind');\n            attrs.delete('content.bind');\n\n            const onLoad = attrs.get('load.event');\n            attrs.delete('load.event');\n\n            let onLoadEvtMarkup = '';\n            let contentMarkup = '';\n\n            if (onLoad) {\n                onLoadEvtMarkup = `load.event=\"${onLoad}\"`;\n            }\n\n            if (boundContent) {\n                contentMarkup = `content.bind=\"${boundContent}\"`;\n            } else if (content) {\n                contentMarkup = `content=\"${content}\"`;\n            }\n\n            let containerMarkup = '';\n            if (contentMarkup) {\n\n                shared.set('hasPartialContent', true);\n                containerMarkup += `<ng-template><div wmContainer partialContainer ${contentMarkup} width=\"100%\" height=\"100%\" ${onLoadEvtMarkup}>`;\n            }\n\n            return `<${tagName} wmPartialDialog ${getAttrMarkup(attrs)}>${containerMarkup}`;\n        },\n        post: (attrs, shared) => {\n            let preContent = '';\n            if (shared.get('hasPartialContent')) {\n                preContent =  `</div></ng-template>`;\n            }\n            return `${preContent}</${tagName}>`;\n        }\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'footer';\n\nregister('wm-footer', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmFooter partialContainer data-role=\"page-footer\" role=\"contentinfo\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { InjectionToken } from '@angular/core';\n\nimport { BaseComponent } from '../common/base/base.component';\n\nexport interface IWidgetConfig {\n    widgetType: string;\n    widgetSubType?: string;\n    hostClass?: string;\n    displayType?: string;\n}\n\nexport interface IRedrawableComponent {\n    redraw: Function;\n}\n\nexport type ChangeListener = (key: string, nv: any, ov?: any) => void;\n\nexport abstract class WidgetRef {}\n\nexport abstract class DialogRef<T extends BaseComponent> {\n   bsModal: any;\n}\n\nexport const Context = new InjectionToken('Context Provider Reference');\n\nexport interface IDialog {\n    open: (initState?: any) => void;\n    close: () => void;\n}\n","import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { forwardRef } from '@angular/core';\n\nimport { encodeUrl, isValidWebURL, stringStartsWith, FormWidgetType, $parseExpr, getClonedObject, prettifyLabel, initCaps, deHyphenate } from '@wm/core';\nimport { DialogRef, WidgetRef } from '../widgets/framework/types';\n\ndeclare const _;\n\nconst DATASET_WIDGETS = new Set([FormWidgetType.SELECT, FormWidgetType.CHECKBOXSET, FormWidgetType.RADIOSET,\n    FormWidgetType.SWITCH, FormWidgetType.AUTOCOMPLETE, FormWidgetType.CHIPS, FormWidgetType.TYPEAHEAD, FormWidgetType.RATING]);\n/**\n * Returns the parsed, updated bound expression\n * if the expression is $[data[$i][firstName]] + '--' + $[lastName] + '--' + $['@ID@']\n * returns __1.firstName + '--' + lastName + '--' + __1['@ID@']\n */\nconst getUpdatedExpr = (expr: string) => {\n    let updated = '', ch, next, i, j, matchCh, matchCount, isQuotedStr, subStr, isQuotedStrEvaluated;\n\n    expr = expr.replace(/\\$\\[data\\[\\$i\\]/g, '$[__1');\n\n    for (i = 0; i < expr.length; i++) {\n        ch = expr[i];\n        next = expr[i + 1];\n\n        /**\n         * if the expression starts with $[, check the next(ch) character,\n         *    if ch is a quote(', \") change the expr to __[\n         *    if ch is a whiteSpace, remove it\n         *    else remove $[\n         */\n        if (ch === '$' && next === '[') {\n            matchCount = 1;\n            isQuotedStrEvaluated = false;\n            isQuotedStr = false;\n\n            for (j = i + 2; j < expr.length; j++) {\n\n                matchCh = expr[j];\n\n                if (matchCh === ' ') {\n                    continue;\n                }\n\n                if (!isQuotedStrEvaluated) {\n                    isQuotedStr = expr[j] === '\"' || expr[j] === '\\'';\n                    isQuotedStrEvaluated = true;\n                }\n\n                if (matchCh === '[') {\n                    matchCount++;\n                } else if (matchCh === ']') {\n                    matchCount--;\n                }\n\n                if (!matchCount) {\n                    subStr = expr.substring(i + 2, j);\n                    if (isQuotedStr) {\n                        updated += '__1[' + subStr + ']';\n                    } else {\n                        updated += subStr;\n                    }\n\n                    break;\n                }\n            }\n            i = j;\n        } else {\n            updated += ch;\n        }\n    }\n\n    return updated;\n};\n\n/**\n * Returns the value for the provided key in the object\n */\nexport const getObjValueByKey = (obj: any, strKey: string) => {\n    /* check for the key-string */\n    if (strKey) {\n        let val;\n        /* convert indexes to properties, so as to work for even 'key1[0].child1'*/\n        strKey.replace(/\\[(\\w+)\\]/g, '.$1').split('.').forEach(key => {\n            // If obj is null, then assign val to null.\n            val = (val && val[key]) || (_.isNull(obj) ? obj : obj[key]);\n        });\n        return val;\n    }\n    return obj;\n};\n\n/**\n * returns the display field data for any dataset widgets\n * Based on the bind display expression or display expression or display name,\n * data is extracted and formatted from the passed option object\n * If there is field is specified, field value is obtained from the dataObj.\n * If expression is given, evaluates the expression value.\n * else check for bindExpression, extract the value from the dataObj\n */\nexport const getEvaluatedData = (dataObj: any, options: any, context?: any) => {\n    let expressionValue;\n    const field = options.field,\n        expr = options.expression,\n        bindExpr = options.bindExpression;\n\n    // if key is bound expression\n    if (bindExpr) {\n        // remove 'bind:' prefix from the boundExpressionName\n        expressionValue = bindExpr.replace('bind:', '');\n        // parse the expressionValue for replacing all the expressions with values in the object\n        expressionValue = getUpdatedExpr(expressionValue);\n    } else {\n        expressionValue = expr ? expr : field;\n    }\n\n    // Handling field name with special charecters\n    // Ex: field = \"f name\"\n    if (!bindExpr && !expr) {\n        return _.get(dataObj, field);\n    }\n\n    return $parseExpr(expressionValue)(context, Object.assign({}, dataObj, {__1: dataObj}));\n};\n\nexport const isActiveNavItem = (link, routeName) => {\n    if (!link || !routeName) {\n        return false;\n    }\n    routeName = routeName.indexOf('?') === -1 ? routeName : routeName.substring(0, routeName.indexOf('?'));\n    link = link.indexOf('?') === -1 ? link : link.substring(0, link.indexOf('?'));\n    const routeRegex = new RegExp('^(#\\/|#)' + routeName + '$');\n    return routeRegex.test(link);\n};\n\n\n/**\n * Returns the orderBy Expression based on the 'sort 'option in pageable object\n * returned by backend\n * @param pageableObj\n * @returns {string}\n */\nexport const getOrderByExpr = pageableObj => {\n    pageableObj = pageableObj || [];\n    const expressions       = [],\n        KEY_VAL_SEPARATOR = ' ',\n        FIELD_SEPARATOR   = ',';\n    _.forEach(pageableObj, obj => {\n        expressions.push(obj.property + KEY_VAL_SEPARATOR + obj.direction.toLowerCase());\n    });\n\n    return _.join(expressions, FIELD_SEPARATOR);\n};\n\nexport const isDataSetWidget = widget => {\n    return DATASET_WIDGETS.has(widget);\n};\n\n/*This function returns the url to the image after checking the validity of url*/\nexport const getImageUrl = (urlString, shouldEncode?, defaultUrl?) => {\n    /*In studio mode before setting picturesource, check if the studioController is loaded and new picturesource is in 'styles/images/' path or not.\n     * When page is refreshed, loader.gif will be loaded first and it will be in 'style/images/'.\n     * Prepend 'services/projects/' + $rootScope.project.id + '/web/resources/images/imagelists/'  if the image url is just image name in the project root,\n     * and if the url pointing to resources/images/ then 'services/projects/' + $rootScope.project.id + '/web/'*/\n    if (isValidWebURL(urlString)) {\n        return urlString;\n    }\n\n    // If no value is provided for picturesource assign pictureplaceholder or default-image\n    if (!urlString) {\n        urlString = defaultUrl || 'resources/images/imagelists/default-image.png';\n    }\n\n    urlString = shouldEncode ? encodeUrl(urlString) : urlString;\n\n    // if the resource to be loaded is inside a prefab\n    if (stringStartsWith(urlString, 'services/prefabs')) {\n        return urlString;\n    }\n\n    return urlString;\n};\n\n/*This method returns the url to the backgroundImage*/\nexport const getBackGroundImageUrl = (urlString) => {\n    if (urlString === '' || urlString === 'none') {\n        return urlString;\n    }\n    return 'url(' + getImageUrl(urlString) + ')';\n};\n\nexport function provideAs(reference: any, key: any, multi?: boolean) {\n    return {\n        provide: key,\n        useExisting: forwardRef(() => reference),\n        multi: multi\n    };\n}\n\nexport function provideAsNgValidators(reference: any) {\n    return provideAs(reference, NG_VALIDATORS, true);\n}\n\nexport function provideAsNgValueAccessor(reference: any) {\n    return provideAs(reference, NG_VALUE_ACCESSOR, true);\n}\n\nexport function provideAsWidgetRef(reference: any) {\n    return provideAs(reference, WidgetRef);\n}\n\nexport function provideAsDialogRef(reference: any) {\n    return provideAs(reference, DialogRef);\n}\n\nexport const NAVIGATION_TYPE = {\n    ADVANCED: 'Advanced',\n    BASIC: 'Basic',\n    CLASSIC: 'Classic',\n    INLINE: 'Inline',\n    NONE: 'None',\n    ONDEMAND: 'On-Demand',\n    PAGER: 'Pager',\n    SCROLL: 'Scroll'\n};\n\n\nexport const getWatchIdentifier = (...args) => args.join('_');\n\nconst typesMap = {\n    number: ['number', 'integer', 'big_integer', 'short', 'float', 'big_decimal', 'double', 'long', 'byte'],\n    string: ['string', 'text'],\n    character: ['character'],\n    date: ['date', 'time',  'timestamp', 'datetime']\n};\nconst modes = {\n    number: ['exact', 'notequals', 'lessthan', 'lessthanequal', 'greaterthan', 'greaterthanequal', 'null', 'isnotnull'],\n    string: ['anywhereignorecase', 'anywhere', 'startignorecase', 'start', 'endignorecase', 'end', 'exactignorecase', 'exact', 'notequalsignorecase', 'notequals', 'null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'],\n    character: ['exactignorecase', 'exact', 'notequalsignorecase', 'notequals', 'null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'],\n    date: ['exact', 'lessthan', 'lessthanequal', 'greaterthan', 'greaterthanequal', 'null', 'notequals', 'isnotnull']\n};\nconst matchModeTypesMap = {\n    boolean: ['exact', 'null', 'isnotnull'],\n    clob: [],\n    blob: []\n};\nexport const getMatchModeTypesMap = (multiMode?) => {\n    if (multiMode) {\n        modes.number.push('in', 'notin', 'between');\n        modes.date.push('between');\n        modes.string.push('in', 'notin');\n        modes.character.push('in', 'notin');\n    }\n\n    _.forEach(typesMap, (types, primType) => {\n        _.forEach(types, type => {\n            matchModeTypesMap[type] = modes[primType];\n        });\n    });\n    // this is used in filter criteria when the user types the column name manually and where we dont know the type of the column\n    matchModeTypesMap['default'] = _.union(modes['number'], modes['string'], modes['character'], modes['date'], modes['date']);\n    return matchModeTypesMap;\n};\n\nexport const getMatchModeMsgs = (appLocale) => {\n    return {\n        start            : appLocale.LABEL_STARTS_WITH,\n        startignorecase  : appLocale.LABEL_STARTS_WITH_IGNORECASE,\n        end              : appLocale.LABEL_ENDS_WITH,\n        endignorecase    : appLocale.LABEL_ENDS_WITH_IGNORECASE,\n        anywhere         : appLocale.LABEL_CONTAINS,\n        anywhereignorecase: appLocale.LABEL_CONTAINS_IGNORECASE,\n        exact            : appLocale.LABEL_IS_EQUAL_TO,\n        exactignorecase  : appLocale.LABEL_IS_EQUAL_TO_IGNORECASE,\n        notequals        : appLocale.LABEL_IS_NOT_EQUAL_TO,\n        notequalsignorecase: appLocale.LABEL_IS_NOT_EQUAL_TO_IGNORECASE,\n        lessthan         : appLocale.LABEL_LESS_THAN,\n        lessthanequal    : appLocale.LABEL_LESS_THAN_OR_EQUALS_TO,\n        greaterthan      : appLocale.LABEL_GREATER_THAN,\n        greaterthanequal : appLocale.LABEL_GREATER_THAN_OR_EQUALS_TO,\n        null             : appLocale.LABEL_IS_NULL,\n        isnotnull        : appLocale.LABEL_IS_NOT_NULL,\n        empty            : appLocale.LABEL_IS_EMPTY,\n        isnotempty       : appLocale.LABEL_IS_NOT_EMPTY,\n        nullorempty      : appLocale.LABEL_IS_NULL_OR_EMPTY,\n        in               : appLocale.LABEL_IN,\n        notin            : appLocale.LABEL_NOT_IN,\n        between          : appLocale.LABEL_BETWEEN\n    };\n};\n\n// Returns array of classes that are evaluated true for given object or array\nconst getClassesArray = classVal => {\n    let classes = [];\n\n    if (_.isArray(classVal)) {\n        classVal.forEach(v => {\n            classes = classes.concat(getClassesArray(v));\n        });\n        return classes;\n    }\n    if (_.isObject(classVal)) {\n        _.forEach(classVal, (val, key) => {\n            if (val) {\n                classes = classes.concat(key.split(' '));\n            }\n        });\n        return classes;\n    }\n};\n\nexport const getConditionalClasses = (nv, ov?) => {\n    let toAdd;\n    let toRemove;\n    // if the conditional class property has already toAdd and toRemove arrays then take that otherwise build those arrays\n    const classToAdd = nv.toAdd || nv;\n    const classToRemove = nv.toRemove || ov;\n    if (_.isObject(nv)) {\n        toAdd = _.isArray(classToAdd) ? classToAdd : getClassesArray(classToAdd || []);\n        toRemove = classToRemove ? (_.isArray(classToRemove) ? classToRemove : getClassesArray(classToRemove)) : [];\n    } else {\n        toAdd = classToAdd ? [classToAdd] : [];\n        toRemove = classToRemove ? [classToRemove] : [];\n    }\n    return {toAdd, toRemove};\n};\n\n/*helper function for prepareFieldDefs*/\nconst pushFieldDef = (dataObject, columnDefObj, namePrefix, options) => {\n    /*loop over the fields in the dataObject to process them*/\n    let modifiedTitle,\n        relatedTable,\n        relatedField,\n        relatedInfo,\n        fieldName,\n        isRelated;\n    if (!options) {\n        options = {};\n    }\n    _.forEach(dataObject, (value, title) => {\n        if (_.includes(title, '.')) {\n            relatedInfo  = _.split(title, '.');\n            relatedTable = relatedInfo[0];\n            relatedField = relatedInfo[1];\n            isRelated    = true;\n        }\n        if (options.noModifyTitle) {\n            modifiedTitle = title;\n        } else {\n            if (_.isString(title)) {\n                modifiedTitle = prettifyLabel(title);\n                modifiedTitle = deHyphenate(modifiedTitle);\n                modifiedTitle = namePrefix ? initCaps(namePrefix) + ' ' + modifiedTitle : modifiedTitle;\n            } else {\n                modifiedTitle = title;\n            }\n        }\n        title = namePrefix ? namePrefix + '.' + title : title;\n        if (isRelated) {\n            // For related columns, shorten the title to last two words\n            fieldName = _.split(modifiedTitle, ' ');\n            fieldName = fieldName.length > 1 ? fieldName[fieldName.length - 2] + ' ' + fieldName[fieldName.length - 1] : fieldName[0];\n        } else {\n            fieldName = modifiedTitle;\n        }\n        const defObj = options.setBindingField ? {'displayName': fieldName, 'field': title, 'relatedTable': relatedTable, 'relatedField': relatedField || modifiedTitle}\n        : {'displayName': fieldName, 'relatedTable': relatedTable, 'relatedField': relatedField || modifiedTitle};\n        /*if field is a leaf node, push it in the columnDefs*/\n        if (!_.isObject(value) || (_.isArray(value) && !value[0])) {\n            /*if the column counter has reached upperBound return*/\n            if (options.upperBound && options.columnCount === options.upperBound) {\n                return;\n            }\n            columnDefObj.terminals.push(defObj);\n            /*increment the column counter*/\n            options.columnCount += 1;\n        } else {\n            /*else field is an object, process it recursively*/\n            /* if parent node to be included, include it */\n            if (options.columnCount !== options.upperBound) {\n                columnDefObj.objects.push(defObj);\n            }\n\n            /* if field is an array node, process its first child */\n            if (_.isArray(value) && value[0]) {\n                pushFieldDef(value[0], columnDefObj, title + '[0]', options);\n            } else {\n                pushFieldDef(value, columnDefObj, title, options);\n            }\n        }\n    });\n};\n\nconst getMetaDataFromData = (data) => {\n    let dataObject;\n    if (_.isArray(data)) {\n        if (_.isObject(data[0])) {\n            dataObject = getClonedObject(data[0]);\n            /*Loop over the object to find out any null values. If any null values are present in the first row, check and assign the values from other row.\n             * As column generation is dependent on data, for related fields if first row value is null, columns are not generated.\n             * To prevent this, check the data in other rows and generate the columns. New keys from others rows are also added*/\n            _.forEach(data, (row, index) => {\n                if ((index + 1) >= 10) { // Limit the data search to first 10 records\n                    return false;\n                }\n                _.assignWith(dataObject, row, (objValue, srcValue) => {\n                    return (objValue === null || objValue === undefined) ? srcValue : objValue;\n                });\n            });\n        } else {\n            dataObject = data[0];\n        }\n    } else {\n        dataObject = data;\n    }\n    return dataObject;\n};\n\nexport const prepareFieldDefs = (data, options?) => {\n    let dataObject;\n    const columnDef = {\n            'objects' : [],\n            'terminals' : []\n        };\n    /*if no data provided, initialize default column definitions*/\n    if (!data) {\n        data = [];\n    }\n    if (!options) {\n        options = {};\n    }\n    options.setBindingField = true;\n    options.columnCount = 0;\n    dataObject = getMetaDataFromData(data);\n    /*first of the many data objects from grid data*/\n    pushFieldDef(dataObject, columnDef, '', options);\n    if (!options || (options && !options.filter)) {\n        return columnDef.terminals;\n    }\n    switch (options.filter) {\n        case 'all':\n            return columnDef;\n        case 'objects':\n            return columnDef.objects;\n        case 'terminals':\n            return columnDef.terminals;\n    }\n    return columnDef;\n};\n","import { DataSource, debounce, processFilterExpBindNode } from '@wm/core';\nimport { FormWidgetType, isDefined, MatchMode } from '@wm/core';\n\nimport { isDataSetWidget } from './widget-utils';\n\ndeclare const _;\n\nconst noop = () => {};\n\nexport enum Live_Operations {\n    INSERT = 'insert',\n    UPDATE = 'update',\n    DELETE = 'delete',\n    READ = 'read'\n}\n\nexport const ALLFIELDS = 'All Fields';\n\nexport const LIVE_CONSTANTS = {\n    'EMPTY_KEY'     : 'EMPTY_NULL_FILTER',\n    'EMPTY_VALUE'   : 'No Value',\n    'LABEL_KEY'     : 'key',\n    'LABEL_VALUE'   : 'value',\n    'NULL_EMPTY'    : ['null', 'empty'],\n    'NULL'          : 'null',\n    'EMPTY'         : 'empty'\n};\n\n// Returns true if widget is autocomplete or chips\nfunction isSearchWidgetType(widget) {\n    return _.includes([FormWidgetType.AUTOCOMPLETE, FormWidgetType.TYPEAHEAD, FormWidgetType.CHIPS], widget);\n}\n\nfunction onSuccess(response, res, rej) {\n    if (response.error) {\n        rej(response);\n    } else {\n        res(response);\n    }\n}\n\nexport function performDataOperation(dataSource, requestData, options): Promise<any> {\n    return new Promise((res, rej) => {\n        if (dataSource.execute(DataSource.Operation.SUPPORTS_CRUD)) {\n            let fn;\n            const operationType = options.operationType;\n            switch (operationType) {\n                case Live_Operations.UPDATE:\n                    fn = DataSource.Operation.UPDATE_RECORD;\n                    break;\n                case Live_Operations.INSERT:\n                    fn = DataSource.Operation.INSERT_RECORD;\n                    break;\n                case  Live_Operations.DELETE:\n                    fn = DataSource.Operation.DELETE_RECORD;\n                    break;\n            }\n            dataSource.execute(fn, requestData).then(response => onSuccess(response, res, rej), rej);\n        } else if (dataSource.execute(DataSource.Operation.IS_API_AWARE)) {\n            dataSource.execute(DataSource.Operation.SET_INPUT, requestData);\n            dataSource.execute(DataSource.Operation.INVOKE, {\n                'skipNotification': true\n            }).then(res, rej);\n        } else {\n            res(requestData);\n        }\n    });\n}\n\nexport function refreshDataSource(dataSource, options): Promise<any> {\n    return new Promise((res, rej) => {\n        if (!dataSource) {\n            rej();\n            return;\n        }\n        dataSource.execute(DataSource.Operation.LIST_RECORDS, {\n            'filterFields' : options.filterFields || {},\n            'orderBy' : options.orderBy,\n            'page': options.page || 1\n        }).then(res, rej);\n    });\n}\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.fetchRelatedFieldData\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * This function fetches the data for the related field in live form/ grid\n *\n * @param {object} columnDef field definition\n * @param {string} relatedField related field name\n * @param {string} datafield Datafield to be set on widget\n * @param {string} widget Type of the widget\n * @param {object} elScope element scope\n * @param {object} parentScope live form// grid scope\n */\nexport function fetchRelatedFieldData(dataSource, formField, options) {\n    let primaryKeys;\n    let displayField;\n    const relatedField = options.relatedField;\n    const datafield = options.datafield;\n\n    if (!dataSource) {\n        return;\n    }\n    primaryKeys = dataSource.execute(DataSource.Operation.GET_RELATED_PRIMARY_KEYS, relatedField);\n    formField.datafield = datafield;\n    formField._primaryKey = _.isEmpty(primaryKeys) ? undefined : primaryKeys[0];\n    formField.compareby = primaryKeys && primaryKeys.join(',');\n\n    displayField = datafield === ALLFIELDS ? undefined : datafield;\n    formField.displayfield = displayField = (formField.displayfield || displayField || formField._primaryKey);\n\n    if (isSearchWidgetType(formField[options.widget])) {\n        formField.dataoptions = {'relatedField': relatedField, 'filterExpr': formField.filterexpressions ? formField.filterexpressions : {}};\n        formField.datasource = dataSource;\n        formField.searchkey = formField.searchkey || displayField;\n        formField.displaylabel = formField.displayfield = (formField.displaylabel || displayField);\n    } else {\n        interpolateBindExpressions(formField.viewParent, formField.filterexpressions, (filterexpressions) => {\n            formField.filterexpressions = filterexpressions;\n            dataSource.execute(DataSource.Operation.GET_RELATED_TABLE_DATA, {\n                relatedField,\n                pagesize: formField.limit,\n                orderBy: formField.orderby ? _.replace(formField.orderby, /:/g, ' ') : '',\n                filterFields: {},\n                filterExpr: formField.filterexpressions ? formField.filterexpressions : {}\n            }).then(response => {\n                formField.dataset = response.data;\n                formField.displayfield = formField.displayfield || _.head(_.keys(_.get(response, '[0]')));\n            }, noop);\n        });\n    }\n}\n\n/**\n * used to interpolate the bind expression for keys in the query builder\n * @param context where we find the variable obj\n * @param filterexpressions - obj containing all the rule objs\n * @param callbackFn - function to be called with the new replaced values if any in the filterexpressions object\n */\nexport const interpolateBindExpressions = (context, filterexpressions, callbackFn) => {\n    const debouncedFn = debounce(() => {\n        if (_.isFunction(callbackFn)) {\n            callbackFn(filterexpressions);\n        }\n    }, 300);\n\n    /**\n     * calling the debounced function first for the case where if there is any filterexpression without the bindedvariables.\n     * without this it will never be called. processFilterExpBindNode will be called only for the binded variable expressions.\n     */\n    debouncedFn();\n    const filterExpressions = filterexpressions ? (_.isObject(filterexpressions) ? filterexpressions : JSON.parse(filterexpressions)) : {};\n    const destroyFn = context.registerDestroyListener ? context.registerDestroyListener.bind(context) : _.noop;\n    const filterSubscription =  processFilterExpBindNode(context, filterExpressions).subscribe((response: any) => {\n        filterexpressions = JSON.stringify(response.filterExpressions);\n        debouncedFn();\n    });\n    destroyFn(() => filterSubscription.unsubscribe());\n};\n/**\n * @ngdoc function\n * @name wm.widgets.live.LiveWidgetUtils#getDistinctFieldProperties\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Returns the properties required for dataset widgets\n *\n * @param {object} dataSource variable source for the widget\n * @param {object} formField definition of the column/ field\n *\n */\nexport const getDistinctFieldProperties = (dataSource, formField) => {\n    const props: any = {};\n    let fieldColumn;\n    if (formField['is-related']) {\n        props.tableName     = formField['lookup-type'];\n        fieldColumn         = formField['lookup-field'];\n        props.distinctField = fieldColumn;\n        props.aliasColumn   = fieldColumn.replace('.', '$'); // For related fields, In response . is replaced by $\n        props.filterExpr    = formField.filterexpressions ? (_.isObject(formField.filterexpressions) ? formField.filterexpressions : JSON.parse(formField.filterexpressions)) : {};\n    } else {\n        props.tableName     = dataSource.execute(DataSource.Operation.GET_ENTITY_NAME);\n        fieldColumn         = formField.field || formField.key;\n        props.distinctField = fieldColumn;\n        props.aliasColumn   = fieldColumn;\n    }\n    return props;\n};\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.LiveWidgetUtils#getDistinctValues\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Returns the distinct values for a field\n *\n * @param {object} formField definition of the column/ field\n * @param {string} widget widget property on the field\n * @param {object} variable variable for the widget\n * @param {function} callBack Function to be executed after fetching results\n *\n */\nexport function getDistinctValues(dataSource, formField, widget) {\n    let props;\n\n    return new Promise((res, rej) => {\n        if (isDataSetWidget(formField[widget]) && (!formField.isDataSetBound || widget === 'filterwidget')) {\n            props = getDistinctFieldProperties(dataSource, formField);\n            dataSource.execute(DataSource.Operation.GET_DISTINCT_DATA_BY_FIELDS, {\n                fields: props.distinctField,\n                entityName: props.tableName,\n                pagesize: formField.limit,\n                filterExpr: formField.filterexpressions ? JSON.parse(formField.filterexpressions) : {}\n            }).then(response => {\n                res({'field': formField, 'data': response.data, 'aliasColumn': props.aliasColumn});\n            }, rej);\n        }\n    });\n}\n\n// Set the data field properties on dataset widgets\nfunction setDataFields(formField, options?) {\n    // For search widget, set search key and display label\n    if (isSearchWidgetType(formField[options.widget])) {\n        formField.datafield = options.aliasColumn || LIVE_CONSTANTS.LABEL_KEY;\n        formField.searchkey = options.distinctField || LIVE_CONSTANTS.LABEL_KEY;\n        formField.displaylabel = formField.displayfield = (options.aliasColumn || LIVE_CONSTANTS.LABEL_VALUE);\n        return;\n    }\n    formField.datafield    = LIVE_CONSTANTS.LABEL_KEY;\n    formField.displayfield = LIVE_CONSTANTS.LABEL_VALUE;\n}\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.LiveWidgetUtils#setFieldDataSet\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to set the dataSet on the fields\n *\n * @param {object} formField definition of the column/ field\n * @param {object} data data returned from the server\n * @param {string} aliasColumn column field name\n * @param {string} widget widget property on the field\n * @param {boolean} isEnableEmptyFilter is null or empty values allowed on filter\n *\n */\nfunction setFieldDataSet(formField, data, options?) {\n    const emptySupportWidgets = [FormWidgetType.SELECT, FormWidgetType.RADIOSET];\n    const emptyOption         = {};\n    const dataSet = [];\n    if (options.isEnableEmptyFilter && _.includes(emptySupportWidgets, formField[options.widget]) &&\n        !formField['is-range'] && !formField.multiple) {\n        // If empty option is selected, push an empty object in to dataSet\n        emptyOption[LIVE_CONSTANTS.LABEL_KEY]   = LIVE_CONSTANTS.EMPTY_KEY;\n        emptyOption[LIVE_CONSTANTS.LABEL_VALUE] = options.EMPTY_VALUE || LIVE_CONSTANTS.EMPTY_VALUE;\n        dataSet.push(emptyOption);\n    }\n    _.each(data, key => {\n        const value  = key[options.aliasColumn];\n        const option = {};\n        if (value !== null && value !== '') {\n            option[LIVE_CONSTANTS.LABEL_KEY]   = value;\n            option[LIVE_CONSTANTS.LABEL_VALUE] = value;\n            dataSet.push(option);\n        }\n    });\n    setDataFields(formField, options);\n    formField.dataset = dataSet;\n}\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.LiveWidgetUtils#fetchDistinctValues\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to fetch the distinct values for a field\n *\n * @param {object} scope scope of the widget\n * @param {object} formFields definitions of the column/ field\n * @param {string} widget widget property on the field\n * @param {boolean} isEnableEmptyFilter is null or empty values allowed on filter\n *\n */\nexport function fetchDistinctValues(dataSource, formFields, options) {\n    if (_.isEmpty(formFields)) {\n        return;\n    }\n    formFields.forEach(formField => {\n        getDistinctValuesForField(dataSource, formField, options);\n    });\n}\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.LiveWidgetUtils#getDistinctValuesForField\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to fetch the distinct values for a field\n *\n * @param {object} scope scope of the widget\n * @param {object} formFields definitions of the column/ field\n * @param {string} widget widget property on the field\n * @param {boolean} isEnableEmptyFilter is null or empty values allowed on filter\n *\n */\nexport function getDistinctValuesForField(dataSource, formField, options?) {\n    if (!dataSource || !formField || formField.isDataSetBound) {\n        return;\n    }\n    if (isSearchWidgetType(formField[options.widget])) {\n        const dataoptions =  getDistinctFieldProperties(dataSource, formField);\n        formField.dataoptions = dataoptions;\n        setDataFields(formField, Object.assign(options || {}, dataoptions));\n        formField.datasource = dataSource;\n    } else {\n        interpolateBindExpressions(formField.viewParent, formField.filterexpressions, (filterexpressions) => {\n            formField.filterexpressions = filterexpressions;\n            getDistinctValues(dataSource, formField, options.widget).then((res: any) => {\n                setFieldDataSet(res.field, res.data, {\n                    aliasColumn: res.aliasColumn,\n                    widget: options.widget,\n                    isEnableEmptyFilter: getEnableEmptyFilter(options.enableemptyfilter),\n                    EMPTY_VALUE: options.EMPTY_VALUE\n                });\n            });\n        });\n    }\n}\n\nfunction isDefinedAndNotEmpty(val) {\n    return isDefined(val) && val !== '' && val !== null;\n}\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.getRangeFieldValue\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to get the field value for range\n *\n * @param {string} minValue min value selected\n * @param {string} maxValue max value selected\n */\nexport function getRangeFieldValue(minValue, maxValue) {\n    let fieldValue;\n    if (isDefinedAndNotEmpty(minValue) && isDefinedAndNotEmpty(maxValue)) {\n        fieldValue = [minValue, maxValue];\n    } else if (isDefinedAndNotEmpty(minValue)) {\n        fieldValue = minValue;\n    } else if (isDefinedAndNotEmpty(maxValue)) {\n        fieldValue = maxValue;\n    }\n    return fieldValue;\n}\n/**\n * @ngdoc function\n * @name wm.widgets.live.getRangeMatchMode\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to get the match mode for range\n *\n * @param {string} minValue min value selected\n * @param {string} maxValue max value selected\n */\nexport function getRangeMatchMode(minValue, maxValue) {\n    let matchMode;\n    // If two values exists, then it is between. Otherwise, greater or lesser\n    if (isDefinedAndNotEmpty(minValue) && isDefinedAndNotEmpty(maxValue)) {\n        matchMode = MatchMode.BETWEEN;\n    } else if (isDefinedAndNotEmpty(minValue)) {\n        matchMode = MatchMode.GREATER;\n    } else if (isDefinedAndNotEmpty(maxValue)) {\n        matchMode = MatchMode.LESSER;\n    }\n    return matchMode;\n}\n/**\n * @ngdoc function\n * @name wm.widgets.live.getEnableEmptyFilter\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * This function checks if enable filter options is set on live filter\n *\n * @param {object} enableemptyfilter empty filter options\n */\nexport function getEnableEmptyFilter(enableemptyfilter) {\n    return enableemptyfilter && _.intersection(enableemptyfilter.split(','), LIVE_CONSTANTS.NULL_EMPTY).length > 0;\n}\n/**\n * @ngdoc function\n * @name wm.widgets.live.getEmptyMatchMode\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to get the match mode based on the filter selected\n *\n * @param {object} enableemptyfilter empty filter options\n */\nexport function getEmptyMatchMode(enableemptyfilter) {\n    let matchMode;\n    const emptyFilterOptions = _.split(enableemptyfilter, ',');\n    if (_.intersection(emptyFilterOptions, LIVE_CONSTANTS.NULL_EMPTY).length === 2) {\n        matchMode = MatchMode.NULLOREMPTY;\n    } else if (_.includes(emptyFilterOptions, LIVE_CONSTANTS.NULL)) {\n        matchMode = MatchMode.NULL;\n    } else if (_.includes(emptyFilterOptions, LIVE_CONSTANTS.EMPTY)) {\n        matchMode = MatchMode.EMPTY;\n    }\n    return matchMode;\n}\n\n/**\n * converts the data passed to array.\n *  -> Array: [1,2,3] - [1,2,3]\n *  -> String: a,b,c - ['a','b','c']\n *  -> object: {a:1} - [{a:1}]\n *  -> null - []\n *  -> undefined - []\n * @param data\n * @returns {Array<any>}\n */\nexport const createArrayFrom = (data): Array<any> => {\n\n    if (_.isUndefined(data) || _.isNull(data)) {\n        return [];\n    }\n\n    if (_.isString(data)) {\n        data = data.split(',').map(Function.prototype.call, String.prototype.trim);\n    }\n\n    if (!_.isArray(data)) {\n        data = [data];\n    }\n\n    return data;\n};\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.applyFilterOnField\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * Function to get the updated values when filter on field is changed\n *\n * @param {object} $scope scope of the filter field/form field\n * @param {object} filterDef filter/form definition of the field\n * @param {boolean} isFirst boolean value to check if this method is called on load\n */\nexport function applyFilterOnField(dataSource, filterDef, formFields, newVal, options: any = {}) {\n    const fieldName      = filterDef.field || filterDef.key;\n    const filterOnFields = _.filter(formFields, {'filter-on': fieldName});\n\n    newVal = filterDef['is-range'] ? getRangeFieldValue(filterDef.minValue, filterDef.maxValue) : (isDefined(newVal) ? newVal : filterDef.value);\n    if (!dataSource || (options.isFirst && (_.isUndefined(newVal) || newVal === ''))) {\n        return;\n    }\n    // Loop over the fields for which the current field is filter on field\n    _.forEach(filterOnFields, filterField => {\n        const filterKey    = filterField.field || filterField.key;\n        const lookUpField  = filterDef['lookup-field'] || filterDef._primaryKey;\n        const filterWidget = filterField['edit-widget-type'] || filterField.widgettype;\n        let filterFields = {};\n        let filterOn     = filterField['filter-on'];\n        let filterVal;\n        let fieldColumn;\n        let matchMode;\n        if (!isDataSetWidget(filterWidget) || filterField.isDataSetBound || filterOn === filterKey) {\n            return;\n        }\n        // For related fields, add lookupfield for query generation\n        if (filterDef && filterDef['is-related']) {\n            filterOn += '.' +  lookUpField;\n        }\n        if (isDefined(newVal)) {\n            if (filterDef['is-range']) {\n                matchMode = getRangeMatchMode(filterDef.minValue, filterDef.maxValue);\n            } else if (getEnableEmptyFilter(options.enableemptyfilter) && newVal === LIVE_CONSTANTS.EMPTY_KEY) {\n                matchMode = getEmptyMatchMode(options.enableemptyfilter);\n            } else {\n                matchMode = MatchMode.EQUALS;\n            }\n            filterVal = (_.isObject(newVal) && !_.isArray(newVal)) ? newVal[lookUpField] : newVal;\n            filterFields[filterOn] = {\n                'value'     : filterVal,\n                'matchMode' : matchMode\n            };\n        } else {\n            filterFields = {};\n        }\n        fieldColumn = filterKey;\n\n        if (isSearchWidgetType(filterWidget) && filterField.dataoptions) {\n            filterField.dataoptions.filterFields = filterFields;\n        } else {\n            dataSource.execute(DataSource.Operation.GET_DISTINCT_DATA_BY_FIELDS, {\n                'fields'        : fieldColumn,\n                'filterFields'  : filterFields,\n                'pagesize'      : filterField.limit\n            }).then(response => {\n                setFieldDataSet(filterField, response.data, {\n                    aliasColumn: fieldColumn,\n                    widget: options.widget || 'widgettype',\n                    isEnableEmptyFilter: getEnableEmptyFilter(options.enableemptyfilter),\n                    EMPTY_VALUE: options.EMPTY_VALUE\n                });\n            }, noop);\n        }\n    });\n}\n\n// Transform data as required by data table\nexport function transformData(dataObject, variableName) {\n    let newObj,\n        tempArr,\n        keys,\n        oldKeys,\n        numKeys,\n        newObject,\n        tempObj;\n\n    // data sanity testing\n    dataObject = dataObject || [];\n    // if the dataObject is not an array make it an array\n    if (!_.isArray(dataObject)) {\n        // if the data returned is of type string, make it an object inside an array\n        if (_.isString(dataObject)) {\n            keys = variableName.substring(variableName.indexOf('.') + 1, variableName.length).split('.');\n            oldKeys = [];\n            numKeys = keys.length;\n            newObject = {};\n            tempObj = newObject;\n\n            // loop over the keys to form appropriate data object required for grid\n            keys.forEach((key, index) => {\n                // loop over old keys to create new object at the iterative level\n                oldKeys.forEach(oldKey  => {\n                    tempObj = newObject[oldKey];\n                });\n                tempObj[key] = index === numKeys - 1 ? dataObject : {};\n                oldKeys.push(key);\n            });\n\n            // change the string data to the new dataObject formed\n            dataObject = newObject;\n        }\n        dataObject = [dataObject];\n    } else {\n        /*if the dataObject is an array and each value is a string, then lite-transform the string to an object\n         * lite-transform: just checking if the first value is string and then transforming the object, instead of traversing through the whole array\n         * */\n        if (_.isString(dataObject[0])) {\n            tempArr = [];\n            _.forEach(dataObject, str => {\n                newObj = {};\n                newObj[variableName.split('.').join('-')] = str;\n                tempArr.push(newObj);\n            });\n            dataObject = tempArr;\n        }\n    }\n    return dataObject;\n}\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { FormWidgetType, getFormWidgetTemplate, IDGenerator, isMobileApp } from '@wm/core';\n\nimport { ALLFIELDS } from '../../../../utils/data-utils';\nimport { isDataSetWidget } from '../../../../utils/widget-utils';\n\nconst tagName = 'div';\nconst idGen = new IDGenerator('formfield_');\n\nconst getEventsTemplate = (attrs) => {\n    const eventAttrs = new Map();\n    if (!attrs.has('focus.event')) {\n        attrs.set('focus.event', '');\n    }\n    if (!attrs.has('blur.event')) {\n        attrs.set('blur.event', '');\n    }\n    attrs.forEach((value, key) => {\n       if (key.endsWith('.event')) {\n           if (key === 'focus.event') {\n               value = `_onFocusField($event);${value}`;\n           } else if (key === 'blur.event') {\n               value = `_onBlurField($event);${value}`;\n           }\n           eventAttrs.set(key, value);\n           attrs.delete(key);\n       }\n    });\n    return getFormMarkupAttr(eventAttrs);\n};\n\nconst DEFAULT_PLACEHOLDERS = new Map([\n    [FormWidgetType.SELECT, ['Select Min value', 'Select Max value', 'Select value']],\n    [FormWidgetType.DATETIME, ['Select Min date time', 'Select Max date time', 'Select date time']],\n    [FormWidgetType.TIME, ['Select Min time', 'Select Max time', 'Select time']],\n    [FormWidgetType.DATE, ['Select Min date', 'Select Max date', 'Select date']],\n    [FormWidgetType.TEXTAREA, ['', '', 'Enter value']],\n    [FormWidgetType.RICHTEXT, ['', '', 'Enter value']],\n    [FormWidgetType.COLORPICKER, ['Select Color', 'Select Color', 'Select Color']],\n    [FormWidgetType.CHIPS, ['', '', 'Type here...']],\n    [FormWidgetType.PASSWORD, ['Enter Min value', 'Enter Max value', 'Enter value']],\n    [FormWidgetType.NUMBER, ['Enter Min value', 'Enter Max value', 'Enter value']],\n    [FormWidgetType.TEXT, ['Enter Min value', 'Enter Max value', 'Enter value']],\n    [FormWidgetType.CURRENCY, ['Enter Min value', 'Enter Max value', 'Enter value']],\n    [FormWidgetType.AUTOCOMPLETE, ['', '', 'Search']],\n]);\n\nconst setDefaultPlaceholder = (attrs, widgetType, index) => {\n    const prop = index === 1 ? 'maxplaceholder' : 'placeholder';\n    let placeholder = attrs.get(prop);\n    if (placeholder || placeholder === '') {\n        return;\n    }\n    placeholder = DEFAULT_PLACEHOLDERS.get(widgetType) && DEFAULT_PLACEHOLDERS.get(widgetType)[index];\n    if (placeholder) {\n        attrs.set(prop, placeholder);\n    }\n};\n\nconst getWidgetTemplate = (attrs, options) => {\n    const name = attrs.get('name');\n    const fieldName = (attrs.get('key') || name || '').trim();\n    const formControl = options.isMaxWidget ? `formControlName=\"${fieldName}_max\"` : (options.isInList ? `[formControlName]=\"${options.counter}._fieldName\"` : `formControlName=\"${fieldName}\"`);\n    const tmplRef = options.isMaxWidget ? `#formWidgetMax` : `#formWidget`;\n    const widgetName = name ? (options.isMaxWidget ? `name=\"${name}_formWidgetMax\"` : `name=\"${name}_formWidget\"`) : '';\n    const defaultTmpl = `[class.hidden]=\"!${options.pCounter}.isUpdateMode && ${options.counter}.viewmodewidget !== 'default'\" ${formControl} ${options.eventsTmpl} ${tmplRef} ${widgetName}`;\n    return getFormWidgetTemplate(options.widgetType, defaultTmpl, attrs, {counter: options.counter, pCounter: options.pCounter});\n};\n\n\nconst getTemplate = (attrs, widgetType, eventsTmpl, counter, pCounter, isInList) => {\n    const isRange = attrs.get('is-range') === 'true';\n    if (!isRange) {\n        return getWidgetTemplate(attrs, {widgetType, eventsTmpl, counter, pCounter, isInList});\n    }\n    const layoutClass = isMobileApp() ? 'col-xs-6' : 'col-sm-6';\n    return `<div class=\"${layoutClass}\">${getWidgetTemplate(attrs, {widgetType, eventsTmpl, counter, pCounter})}</div>\n                <div class=\"${layoutClass}\">${getWidgetTemplate(attrs, {widgetType, eventsTmpl, counter, pCounter, isMaxWidget: true})}</div>`;\n};\n\nconst getCaptionByWidget = (attrs, widgetType, counter) => {\n    if (attrs.get('is-related') === 'true') {\n        return `${counter}.getDisplayExpr()`;\n    }\n    if (widgetType === FormWidgetType.PASSWORD) {\n        return '\\'********\\'';\n    }\n    let caption = `${counter}.value`;\n    if (widgetType === FormWidgetType.DATETIME || widgetType === FormWidgetType.TIMESTAMP) {\n        caption += ` | toDate:${counter}.formWidget.datepattern || 'yyyy-MM-dd hh:mm:ss a'`;\n        return caption;\n    }\n    if (widgetType === FormWidgetType.TIME) {\n        caption += ` | toDate:${counter}.formWidget.timepattern || 'hh:mm a'`;\n        return caption;\n    }\n    if (widgetType === FormWidgetType.DATE) {\n        caption += ` | toDate:${counter}.formWidget.datepattern ||  'yyyy-MMM-dd'`;\n        return caption;\n    }\n    if (widgetType === FormWidgetType.RATING || widgetType === FormWidgetType.UPLOAD) {\n        return '';\n    }\n    if (isDataSetWidget(widgetType) && attrs.get('datafield') === ALLFIELDS) {\n        return `${counter}.getDisplayExpr()`;\n    }\n    return `${counter}.getCaption()`;\n};\n\nconst registerFormField = (isFormField): IBuildTaskDef => {\n    return {\n        requires: ['wm-form', 'wm-liveform', 'wm-livefilter', 'wm-list'],\n        pre: (attrs, shared, parentForm, parentLiveForm, parentFilter, parentList) => {\n            const counter = idGen.nextUid();\n            const parent = parentForm || parentLiveForm || parentFilter;\n            const pCounter = (parent && parent.get('form_reference')) || 'form';\n            const widgetType = attrs.get('widget') || FormWidgetType.TEXT;\n            const dataRole = isFormField ? 'form-field' : 'filter-field';\n            const validationMsg = isFormField ? `<p *ngIf=\"${counter}._control?.invalid && ${counter}._control?.touched && ${pCounter}.isUpdateMode\"\n                                   class=\"help-block text-danger\"\n                                   [textContent]=\"${counter}.validationmessage\"></p>` : '';\n            const eventsTmpl = widgetType === FormWidgetType.UPLOAD ? '' : getEventsTemplate(attrs);\n            const controlLayout = isMobileApp() ? 'col-xs-12' : 'col-sm-12';\n            const isInList = pCounter === (parentList && parentList.get('parent_form_reference'));\n            attrs.delete('widget');\n            shared.set('counter', counter);\n\n            if (attrs.get('is-range') === 'true') {\n                setDefaultPlaceholder(attrs, widgetType, 0);\n                setDefaultPlaceholder(attrs, widgetType, 1);\n            } else {\n                setDefaultPlaceholder(attrs, widgetType, 2);\n            }\n\n            return `<${tagName} data-role=\"${dataRole}\" [formGroup]=\"${pCounter}.ngform\" wmFormField #${counter}=\"wmFormField\" widgettype=\"${widgetType}\" ${getFormMarkupAttr(attrs)}>\n                        <div class=\"live-field form-group app-composite-widget clearfix caption-{{${pCounter}.captionposition}}\" widget=\"${widgetType}\">\n                            <label [hidden]=\"!${counter}.displayname\" class=\"app-label control-label formfield-label {{${pCounter}._captionClass}}\" [title]=\"${counter}.displayname\"\n                                        [ngStyle]=\"{width: ${pCounter}.captionsize}\" [ngClass]=\"{'text-danger': ${counter}._control?.invalid && ${counter}._control?.touched && ${pCounter}.isUpdateMode,\n                                         required: ${pCounter}.isUpdateMode && ${counter}.required}\" [textContent]=\"${counter}.displayname\"> </label>\n                            <div [ngClass]=\"${counter}.displayname ? ${pCounter}._widgetClass : '${controlLayout}'\">\n                                 <label class=\"form-control-static app-label\"\n                                       [hidden]=\"${pCounter}.isUpdateMode || ${counter}.viewmodewidget === 'default' || ${counter}.widgettype === 'upload'\" [innerHTML]=\"${getCaptionByWidget(attrs, widgetType, counter)}\"></label>\n                                ${getTemplate(attrs, widgetType, eventsTmpl, counter, pCounter, isInList)}\n                                <p *ngIf=\"!(${counter}._control?.invalid && ${counter}._control?.touched) && ${pCounter}.isUpdateMode\"\n                                   class=\"help-block\" [textContent]=\"${counter}.hint\"></p>\n                                ${validationMsg}\n                            </div>\n                        </div>`;\n        },\n        post: () => `</${tagName}>`,\n        provide: (attrs, shared) => {\n            const provider = new Map();\n            provider.set('form_reference', shared.get('counter'));\n            return provider;\n        }\n    };\n};\n\nregister('wm-form-field', registerFormField.bind(this, true));\nregister('wm-filter-field', registerFormField.bind(this, false));\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nconst registerAction = (tmpl): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmFormAction name=\"${attrs.get('name') || attrs.get('key')}\" ${getAttrMarkup(attrs)} ${tmpl}>`,\n        post: () => `</${tagName}>`\n    };\n};\n\nregister('wm-form-action', registerAction.bind(this, ''));\nregister('wm-filter-action', registerAction.bind(this, ` update-mode=\"true\" `));\n\nexport default () => {};\n","import { Attribute, Element } from '@angular/compiler';\n\nimport { getAttrMarkup, IBuildTaskDef, register, getDataSource } from '@wm/transpiler';\nimport { IDGenerator } from '@wm/core';\n\nconst tagName = 'form';\nconst idGen = new IDGenerator('form_');\n\nconst formWidgets = new Set([\n    'wm-text',\n    'wm-textarea',\n    'wm-checkbox',\n    'wm-slider',\n    'wm-richtexteditor',\n    'wm-currency',\n    'wm-switch',\n    'wm-select',\n    'wm-checkboxset',\n    'wm-radioset',\n    'wm-date',\n    'wm-time',\n    'wm-timestamp',\n    'wm-upload',\n    'wm-rating',\n    'wm-datetime',\n    'wm-search',\n    'wm-chips',\n    'wm-colorpicker',\n    'wm-table'\n]);\n\nconst addFormControlName = (children = []) => {\n    children.forEach(childNode => {\n        if (formWidgets.has(childNode.name)) {\n            let key = childNode.attrs.find((attr) => attr.name === 'key' || attr.name === 'name');\n            key = key && key.value;\n            childNode.attrs.push(new Attribute('formControlName', key, <any>1, <any>1));\n            childNode.attrs.push(new Attribute('wmFormWidget', '', <any>1, <any>1));\n        }\n        addFormControlName(childNode.children);\n    });\n};\n\nconst updateFormDataSource = (attrMap) => {\n    if (attrMap.get('formdata.bind')) {\n        const formDataSource = getDataSource(attrMap.get('formdata.bind'));\n        if (formDataSource) {\n            attrMap.set('formdatasource.bind', formDataSource);\n        }\n    }\n};\n\nconst buildTask = (directiveAttr = ''): IBuildTaskDef => {\n    return {\n        requires: ['wm-livetable', 'wm-login'],\n        template: (node: Element) => {\n            addFormControlName(node.children);\n        },\n        pre: (attrs, shared, parentLiveTable, parentLoginWidget) => {\n            let tmpl;\n            let dialogId;\n            const role = parentLoginWidget && parentLoginWidget.get('isLogin') ? 'app-login' : '';\n            const counter = idGen.nextUid();\n            const dependsOn = attrs.get('dependson') ? `dependson=\"${attrs.get('dependson')}\"` : '';\n            const classProp = attrs.get('formlayout') === 'page' ? 'app-device-liveform panel liveform-inline' : '';\n            const dialogAttributes = ['title', 'title.bind', 'iconclass', 'iconclass.bind', 'width'];\n            attrs.delete('dependson');\n            const liveFormTmpl = `<${tagName} wmForm role=\"${role}\" ${directiveAttr} #${counter} ngNativeValidate [formGroup]=\"${counter}.ngform\" [noValidate]=\"${counter}.validationtype !== 'html'\"\n                    class=\"${classProp}\" [class]=\"${counter}.captionAlignClass\" [autocomplete]=\"${counter}.autocomplete ? 'on' : 'off'\" captionposition=${attrs.get('captionposition')}`;\n            shared.set('counter', counter);\n            updateFormDataSource(attrs);\n            if (attrs.get('formlayout') === 'dialog') {\n                dialogId = parentLiveTable ? parentLiveTable.get('liveform_dialog_id') : `liveform_dialog_id_${counter}`;\n                attrs.set('dialogId', dialogId);\n                const dialogAttrsMap = new Map<string, string>();\n                dialogAttributes.forEach((attr) => {\n                   if (attrs.get(attr)) {\n                       dialogAttrsMap.set(attr, attrs.get(attr));\n                   }\n                });\n                attrs.set('width', '100%');\n                tmpl = getAttrMarkup(attrs);\n                return `<div data-identifier=\"liveform\" init-widget class=\"app-liveform liveform-dialog\" ${dependsOn} dialogid=\"${dialogId}\">\n                            <div wmDialog class=\"app-liveform-dialog\" name=\"${dialogId}\" role=\"form\" ${getAttrMarkup(dialogAttrsMap)} modal=\"true\">\n                            <ng-template #dialogBody>\n                            ${liveFormTmpl} ${tmpl}>`;\n            }\n            let mobileFormContentTmpl = '';\n            let buttonTemplate = '';\n            // Include mobile-navbar above the form when formlayout is set to page\n            if (attrs.get('formlayout') === 'page') {\n                const name = `device_liveform_header_${counter}`;\n                const navbarAttrsMap = new Map<string, string>();\n                navbarAttrsMap.set('title', attrs.get('title'));\n                navbarAttrsMap.set('backbtnclick.event', attrs.get('backbtnclick.event'));\n                buttonTemplate = `<ng-template #buttonRef let-btn=\"btn\">\n                                            <button  wmButton name=\"{{btn.key}}\" class=\"navbar-btn btn-primary btn-transparent\" iconclass.bind=\"btn.iconclass\" show.bind=\"btn.show\"\n                                                     (click)=\"${counter}.invokeActionEvent($event, btn.action)\" type.bind=\"btn.type\" hint.bind=\"btn.title\" shortcutkey.bind=\"btn.shortcutkey\" disabled.bind=\"btn.disabled\"\n                                                     tabindex.bind=\"btn.tabindex\" [class.hidden]=\"btn.updateMode ? !${counter}.isUpdateMode : ${counter}.isUpdateMode\"></button>\n                                        </ng-template>`;\n                mobileFormContentTmpl = `<header wmMobileNavbar name=\"${name}\" ${getAttrMarkup(navbarAttrsMap)}>\n                                            <ng-container *ngFor=\"let btn of ${counter}.buttonArray\" [ngTemplateOutlet]=\"buttonRef\" [ngTemplateOutletContext]=\"{btn:btn}\">\n                                            </ng-container>\n                                        </header>\n                                        <div class=\"form-elements panel-body\" >`;\n            }\n\n            tmpl = getAttrMarkup(attrs);\n            return `${liveFormTmpl} ${tmpl} ${dependsOn}>\n                       ${buttonTemplate} ${mobileFormContentTmpl}`;\n        },\n        post: (attrs) => {\n            if (attrs.get('formlayout') === 'dialog') {\n                return '</form></ng-template></div></div>';\n            }\n            if (attrs.get('formlayout') === 'page') {\n                return `</div></${tagName}>`;\n            }\n            return `</${tagName}>`;\n        },\n        provide: (attrs, shared) => {\n            const provider = new Map();\n            provider.set('form_reference', shared.get('counter'));\n            return provider;\n        }\n    };\n};\n\nregister('wm-form', buildTask);\nregister('wm-liveform', () => buildTask('wmLiveForm'));\nregister('wm-livefilter', () => buildTask('wmLiveFilter'));\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'header';\n\nregister('wm-header', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmHeader partialContainer data-role=\"page-header\" role=\"banner\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-html', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmHtml ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'span';\n\nregister('wm-icon', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmIcon aria-hidden=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-iframe', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmIframe ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'label';\n\nregister('wm-label', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmLabel ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { Attribute, Element } from '@angular/compiler';\nimport { updateTemplateAttrs } from '@wm/core';\n\nimport { getAttrMarkup, getBoundToExpr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst wmListTag = 'wm-list';\nconst listTagName = 'div';\nconst dataSetKey = 'dataset';\n\nregister(wmListTag, (): IBuildTaskDef => {\n    return {\n        requires: ['wm-form', 'wm-liveform'],\n        template: (node: Element) => {\n\n            const datasetAttr = node.attrs.find(attr => attr.name === dataSetKey);\n            const widgetNameAttr = node.attrs.find(attr => attr.name === 'name');\n\n            if (!datasetAttr) {\n                return;\n            }\n            const boundExpr = getBoundToExpr(datasetAttr.value);\n\n            if (!boundExpr) {\n                return;\n            }\n            updateTemplateAttrs(node, boundExpr, widgetNameAttr.value, 'itemRef.');\n        },\n        pre: (attrs, shared, parentForm, parentLiveForm) => {\n            const parent = parentForm || parentLiveForm;\n            shared.set('form_reference', parent && parent.get('form_reference'));\n            return `<${listTagName} wmList wmLiveActions ${getAttrMarkup(attrs)}>`;\n        },\n        post: () => `</${listTagName}>`,\n        provide: (attrs, shared) => {\n            const provider = new Map();\n            provider.set('parent_form_reference', shared.get('form_reference'));\n            return provider;\n        }\n    };\n});\n\nregister('wm-listtemplate', (): IBuildTaskDef => {\n    return {\n        pre: () => `<ng-template #listTemplate let-item=\"item\" let-$index=\"$index\" let-itemRef=\"itemRef\" let-$first=\"$first\" let-$last=\"$last\"  let-currentItemWidgets=\"currentItemWidgets\" >`,\n        post: () => `</ng-template>`\n    };\n});\n\nfunction copyAttribute(from: Element, fromAttrName: string, to: Element, toAttrName: string) {\n    const fromAttr = from.attrs.find( a => a.name === fromAttrName);\n    if (fromAttr) {\n        to.attrs.push(new Attribute(toAttrName, fromAttr.value, fromAttr.sourceSpan, fromAttr.valueSpan));\n    }\n}\n\nregister('wm-list-action-template', (): IBuildTaskDef => {\n    return {\n        template: (node: Element) => {\n\n            const position = node.attrs.find(attr => attr.name === 'position').value;\n\n            const btns = <Element[]> node.children\n                .filter(e => e instanceof Element && (<Element> e).name === 'wm-button');\n\n            // add swipe-position on button nodes to identify whether buttons are from left or right action templates\n            btns.forEach((btnNode) => {\n                copyAttribute(node, 'position', btnNode, 'swipe-position');\n            });\n        },\n        pre: (attrs, el) => {\n            if (attrs.get('position') === 'left') {\n                return `<ng-template #listLeftActionTemplate>\n                            <li class=\"app-list-item-action-panel app-list-item-left-action-panel actionMenu\" ${getAttrMarkup(attrs)}>`;\n            }\n            if (attrs.get('position') === 'right') {\n                return `<ng-template #listRightActionTemplate>\n                            <li class=\"app-list-item-action-panel app-list-item-right-action-panel actionMenu\" ${getAttrMarkup(attrs)}>`;\n            }\n        },\n        post: () => `</li></ng-template>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-gridcolumn', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmLayoutGridColumn ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-gridrow', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmLayoutGridRow ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-layoutgrid', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmLayoutGrid ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'aside';\n\nregister('wm-left-panel', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmLeftPanel partialContainer data-role=\"page-left-panel\" role=\"complementary\" wmSmoothscroll=\"${attrs.get('smoothscroll') || 'true'}\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\nimport { IDGenerator } from '@wm/core';\n\nconst tagName = 'div';\nconst idGen = new IDGenerator('liveform_dialog_id_');\n\nregister('wm-livetable', (): IBuildTaskDef => {\n    return {\n        pre: (attrs, shared) => {\n            const counter = idGen.nextUid();\n            shared.set('counter', counter);\n            return `<${tagName} wmLiveTable role=\"table\" ${getAttrMarkup(attrs)} dialogid=\"${counter}\">`;\n        },\n        post: () => `</${tagName}>`,\n        provide: (attrs, shared) => {\n            const provider = new Map();\n            provider.set('liveform_dialog_id', shared.get('counter'));\n            return provider;\n        }\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-login', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmLogin ${getAttrMarkup(attrs)} eventsource.bind=\"Actions.loginAction\">`,\n        post: () => `</${tagName}>`,\n        provide: () => {\n            const provider = new Map();\n            provider.set('isLogin', true);\n            return provider;\n        }\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'marquee';\n\nregister('wm-marquee', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} onmouseover=\"this.stop();\" onmouseout=\"this.start();\" wmMarquee role=\"marquee\" aria-live=\"off\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'p';\n\nregister('wm-message', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmMessage aria-label=\"Notification Alerts\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-menu', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmMenu dropdown ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'li';\n\nregister('wm-nav-item', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmNavItem role=\"presentation\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'ul';\n\nregister('wm-nav', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmNav data-element-type=\"wmNav\" data-role=\"page-header\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'nav';\n\nregister('wm-navbar', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmNavbar data-element-type=\"wmNavbar\" role=\"navigation\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\n\nimport { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-number', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmNumber ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-page-content', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPageContent wmSmoothscroll=\"${attrs.get('smoothscroll') || 'true'}\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { Attribute, Element, ParseSourceSpan, Text } from '@angular/compiler';\n\nimport { isMobileApp } from '@wm/core';\nimport { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nconst findChild = (node: Element, childName: string): Element => {\n    const child = node && node.children.find(e => (e instanceof Element && (e as Element).name === childName));\n    return child as Element;\n};\n\nconst createElement = name => {\n    return new Element(name, [], [], noSpan, noSpan, noSpan);\n};\n\nconst addAtrribute = (node: Element, name: string, value: string) => {\n    const attr = new Attribute(name, value, noSpan, noSpan);\n    node.attrs.push(attr);\n};\n\nconst noSpan = ({} as ParseSourceSpan);\n\nregister('wm-page', (): IBuildTaskDef => {\n    return {\n        template: (node: Element) => {\n            if (isMobileApp()) {\n                const pageContentNode = findChild(findChild(node, 'wm-content'), 'wm-page-content');\n                if (pageContentNode) {\n                    const conditionalNode = createElement('ng-container');\n                    addAtrribute(conditionalNode, '*ngIf', 'compilePageContent');\n                    const loader = createElement('div');\n                    addAtrribute(loader, 'wmPageContentLoader', '');\n                    addAtrribute(loader, '*ngIf', '!showPageContent');\n                    conditionalNode.children = conditionalNode.children.concat(pageContentNode.children);\n                    conditionalNode.children.push(new Text('{{onPageContentReady()}}', null));\n                    pageContentNode.children = [conditionalNode, loader];\n                }\n            }\n        },\n        pre: attrs => `<${tagName} wmPage data-role=\"pageContainer\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'nav';\n\nregister('wm-pagination', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPagination data-identifier=\"pagination\" aria-label=\"Page navigation\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-panel', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPanel partialContainer aria-label=\"panel\" wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nregister('wm-panel-footer', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPanelFooter aria-label=\"panel footer\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'section';\n\nregister('wm-partial', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPartial data-role=\"partial\" role=\"region\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-param', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmParam hidden ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'img';\n\nregister('wm-picture', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPicture alt=\"image\" wmImageCache=\"${attrs.get('offline') || 'true'}\" ${getAttrMarkup(attrs)}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'wm-popover';\n\nregister('wm-popover', (): IBuildTaskDef => {\n    return {\n        requires: ['wm-table'],\n        pre: (attrs: Map<string, string>, shared: Map<string, any>, table) => {\n            const contentSource = attrs.get('contentsource');\n            let popoverTemplate;\n            if (contentSource !== 'inline') {\n                const content = attrs.get('content');\n                const bindContent = attrs.get('content.bind');\n\n                let contentMarkup = '';\n\n                if (content) {\n                    contentMarkup = `content=\"${content}\"`;\n                } else if (bindContent) {\n                    contentMarkup = `content.bind=\"${bindContent}\"`;\n                }\n\n                popoverTemplate = `<div wmContainer #partial partialContainer ${contentMarkup}>`;\n                shared.set('hasPopoverContent', true);\n            }\n\n            let markup = `<${tagName} wmPopover ${getAttrMarkup(attrs)}>`;\n            const contextAttrs = table ? `let-row=\"row\"` : ``;\n\n            markup += `<ng-template ${contextAttrs}><button class=\"popover-start\"></button>`;\n\n            // todo keyboard navigation - tab\n            if (popoverTemplate) {\n                markup += `${popoverTemplate ? popoverTemplate : ''}`;\n            }\n\n            return markup;\n        },\n        post: (attrs: Map<string, string>, shared: Map<string, any>) => {\n            let markup = '';\n            if (shared.get('hasPopoverContent')) {\n                markup += `</div>`;\n            }\n\n            return `${markup}<button class=\"popover-end\"></button></ng-template></${tagName}>`;\n        }\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, register } from '@wm/transpiler';\n\nconst tagName = 'section';\n\nregister('wm-prefab', () => {\n    return {\n        pre: attrs => `<${tagName} wmPrefab data-role=\"perfab\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-prefab-container', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmPrefabContainer ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};","import { Element } from '@angular/compiler';\n\nimport { getAttrMarkup, getBoundToExpr, IBuildTaskDef, register } from '@wm/transpiler';\n\ndeclare const _;\n\nconst tagName = 'div';\n\nconst getAttr = (node: Element, attrName: string) => node.attrs.find(attr => attr.name === attrName);\n\nconst getAttrValue = (node: Element, attrName: string): string | undefined => {\n    const match = getAttr(node, attrName);\n    if (match) {\n        return match.value;\n    }\n};\n\nconst getReplaceRegex = (v: string) => new RegExp(`bind:(${v}|${v}\\\\[\\\\$i])\\\\.`, 'g');\n\nregister('wm-progress-bar', (): IBuildTaskDef => {\n    return {\n        template: (node: Element) => {\n            const dataset = getAttrValue(node, 'dataset');\n            const boundExpr = getBoundToExpr(dataset);\n\n            if (boundExpr) {\n                let type = getAttrValue(node, 'type');\n                let datavalue = getAttrValue(node, 'datavalue');\n\n                const replaceRegex = getReplaceRegex(boundExpr);\n\n                if (type && type.includes(boundExpr)) {\n                    type = type.replace(replaceRegex, '');\n                    getAttr(node, 'type').value = type;\n                }\n\n                if (datavalue && datavalue.includes(boundExpr)) {\n                    datavalue = datavalue.replace(replaceRegex, '');\n                    getAttr(node, 'datavalue').value = datavalue;\n                }\n            }\n        },\n        pre: attrs => `<${tagName} wmProgressBar ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-progress-circle', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmProgressCircle ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\nimport { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'ul';\n\nregister('wm-radioset', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmRadioset role=\"radiogroup\" ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\nimport { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-rating', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmRating ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-richtexteditor', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmRichTextEditor role=\"textbox\" ${getFormMarkupAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'aside';\n\nregister('wm-right-panel', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmRightPanel partialContainer data-role=\"page-right-panel\" role=\"complementary\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\nimport { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-search', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmSearch ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\nimport { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'wm-select';\n\nregister('wm-select', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\nimport { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-slider', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmSlider ${getAttrMarkup(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-spinner', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmSpinner role=\"loading\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getNgModelAttr } from '@wm/core';\nimport { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-switch', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmSwitch ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-table-action', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} name=\"${attrs.get('name') || attrs.get('key')}\" wmTableAction ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-table-column-group', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTableColumnGroup ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { isNumberType, FormWidgetType, DataType, isMobileApp, isAndroid } from '@wm/core';\n\ndeclare const _;\n\nconst  VIEW_MODE_OPTIONS = {\n    DEFAULT : 'default',\n    LABEL : 'label'\n};\n\nexport const EDIT_MODE = {\n    QUICK_EDIT : 'quickedit',\n    INLINE : 'inline',\n    FORM : 'form',\n    DIALOG : 'dialog'\n};\n\n// Method to set the header config of the data table\nexport const setHeaderConfig = (headerConfig, config, field): void => {\n    _.forEach(headerConfig, cols => {\n        if (cols.isGroup) {\n            if (cols.field === field) {\n                cols.columns.push(config);\n            } else {\n                setHeaderConfig(cols.columns, config, field);\n            }\n        }\n    });\n};\n\nexport const setHeaderConfigForTable = (headerConfig, config, fieldName): void => {\n    if (fieldName) {\n        setHeaderConfig(headerConfig, config, fieldName);\n    } else {\n        headerConfig.push(config);\n    }\n};\n\nexport const getRowOperationsColumn = (): any => {\n    return {\n        'field'         : 'rowOperations',\n        'type'          : 'custom',\n        'displayName'   : 'Actions',\n        'width'         : '120px',\n        'readonly'      : true,\n        'sortable'      : false,\n        'searchable'    : false,\n        'resizable'     : false,\n        'selectable'    : false,\n        'show'          : true,\n        'operations'    : [],\n        'opConfig'      : {},\n        'pcDisplay'     : true,\n        'mobileDisplay' : true,\n        'include'       : true,\n        'isRowOperation': true\n    };\n};\n\n/**\n * Returns caption and widget bootstrap classes for the field\n */\nexport const getFieldLayoutConfig = (captionWidth, captionPosition, os): any => {\n    let captionCls = '',\n        widgetCls = '';\n\n    captionPosition = captionPosition || 'top';\n\n    if (captionPosition === 'top') {\n        if ((os && os === 'android') || !isMobileApp() || isAndroid()) { // Is android or not a mobile application\n            captionCls = widgetCls = 'col-xs-12';\n        } else if (isMobileApp()) { // Is a mobile application and not android\n            captionCls = 'col-xs-4';\n            widgetCls = 'col-xs-8';\n        }\n    } else if (captionWidth) {\n        // handling itemsperrow containing string of classes\n        _.forEach(_.split(captionWidth, ' '), function (cls) {\n            const keys = _.split(cls, '-'),\n                tier = keys[0];\n            let _captionWidth,\n                widgetWidth;\n            _captionWidth = parseInt(keys[1], 10);\n            widgetWidth  = 12 - _captionWidth;\n            widgetWidth  = widgetWidth <= 0 ? 12 : widgetWidth;\n            captionCls += ' ' + 'col-' + tier + '-' + _captionWidth;\n            widgetCls  += ' ' + 'col-' + tier + '-' + widgetWidth;\n        });\n    }\n    return {\n        'captionCls' : captionCls,\n        'widgetCls'  : widgetCls\n    };\n};\n\nexport const getDefaultViewModeWidget = widget => {\n    if (_.includes(['checkbox', 'toggle', 'rating'], widget)) {\n        return VIEW_MODE_OPTIONS.DEFAULT;\n    }\n    return VIEW_MODE_OPTIONS.LABEL;\n};\n\nconst parseBooleanValue = value => {\n    if (value === 'true') {\n        return true;\n    }\n    if (value === 'false') {\n        return false;\n    }\n    if (/^\\d+$/.test(value)) { // Check if the value is a string of number type like '123'\n        return +value;\n    }\n    return value;\n};\n\nexport const parseValueByType = (value, type, widget) => {\n    if (widget) {\n        if (widget === FormWidgetType.NUMBER || widget === FormWidgetType.SLIDER || widget === FormWidgetType.CURRENCY) {\n            return isNaN(Number(value)) ? null : Number(value);\n        }\n        if (widget === FormWidgetType.CHECKBOX || widget === FormWidgetType.TOGGLE) {\n            return parseBooleanValue(value);\n        }\n        return value;\n    }\n    if (isNumberType(type)) {\n        return isNaN(Number(value)) ? null : Number(value);\n    }\n    if (type === DataType.BOOLEAN) {\n        return parseBooleanValue(value);\n    }\n    return value;\n};\n\nconst fieldTypeWidgetTypeMap = {\n    'integer'    : ['number', 'text', 'select', 'checkboxset', 'radioset', 'rating', 'slider', 'currency', 'autocomplete', 'chips'],\n    'big_integer': ['number', 'text', 'select', 'checkboxset', 'radioset', 'rating', 'slider', 'currency', 'autocomplete', 'chips'],\n    'short'      : ['number', 'text', 'select', 'checkboxset', 'radioset', 'slider', 'currency', 'autocomplete', 'chips'],\n    'float'      : ['number', 'text', 'select', 'checkboxset', 'radioset', 'slider', 'currency', 'autocomplete', 'chips'],\n    'big_decimal': ['number', 'text', 'select', 'checkboxset', 'radioset', 'slider', 'currency', 'autocomplete', 'chips'],\n    'number'     : ['number', 'text', 'select', 'checkboxset', 'radioset', 'slider', 'currency', 'autocomplete', 'chips'],\n    'double'     : ['number', 'text', 'select', 'checkboxset', 'radioset', 'slider', 'currency', 'autocomplete', 'chips'],\n    'long'       : ['number', 'text', 'select', 'checkboxset', 'radioset', 'rating', 'slider', 'currency', 'autocomplete', 'chips'],\n    'byte'       : ['number', 'text', 'select', 'checkboxset', 'radioset', 'slider', 'currency', 'autocomplete', 'chips'],\n    'string'     : ['text', 'number',  'textarea', 'password', 'richtext', 'select', 'checkboxset', 'radioset', 'date', 'time', 'timestamp', 'switch', 'currency', 'autocomplete', 'chips', 'colorpicker'],\n    'character'  : ['text', 'number',  'textarea', 'password', 'richtext', 'select', 'checkboxset', 'radioset', 'switch', 'currency', 'autocomplete', 'chips'],\n    'text'       : ['text', 'number',  'textarea', 'password', 'richtext', 'select', 'checkboxset', 'radioset', 'date', 'time', 'timestamp', 'switch', 'currency', 'autocomplete', 'chips', 'colorpicker'],\n    'date'       : ['date', 'text', 'number', 'select', 'checkboxset', 'radioset', 'autocomplete', 'chips'],\n    'time'       : ['time', 'text', 'number', 'select', 'checkboxset', 'radioset', 'autocomplete', 'chips'],\n    'timestamp'  : ['timestamp', 'text', 'number', 'select', 'checkboxset', 'radioset', 'autocomplete', 'chips'],\n    'datetime'   : ['datetime', 'text', 'select', 'checkboxset', 'radioset', 'autocomplete', 'chips'],\n    'boolean'    : ['checkbox', 'radioset', 'toggle', 'select'],\n    'list'       : ['select', 'radioset', 'checkboxset', 'switch', 'autocomplete', 'chips'],\n    'clob'       : ['text', 'textarea', 'richtext'],\n    'blob'       : ['upload'],\n    'file'       : ['upload'],\n    'custom'     : ['text', 'number',  'textarea', 'password', 'checkbox', 'toggle', 'slider', 'richtext', 'currency', 'switch',\n        'select', 'checkboxset', 'radioset', 'date', 'time', 'timestamp', 'rating', 'datetime', 'autocomplete', 'chips', 'colorpicker']\n};\n\n// Get widgets applicable to the given type\nexport const getFieldTypeWidgetTypesMap = () => {\n    return fieldTypeWidgetTypeMap;\n};\n\n// Get filter widget applicable to the given type\nexport const getDataTableFilterWidget = type => {\n    let widget = fieldTypeWidgetTypeMap[type] && fieldTypeWidgetTypeMap[type][0];\n    if (type === DataType.BOOLEAN) {\n        widget = FormWidgetType.SELECT;\n    }\n    if (_.includes([FormWidgetType.TEXT, FormWidgetType.NUMBER, FormWidgetType.SELECT, FormWidgetType.AUTOCOMPLETE,\n            FormWidgetType.DATE, FormWidgetType.TIME, FormWidgetType.DATETIME], widget)) {\n        return widget;\n    }\n    return FormWidgetType.TEXT;\n};\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.getEditModeWidget\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * This function returns the default widget for grid\n *\n * @param {object} colDef field definition\n */\nexport const getEditModeWidget = colDef => {\n    if (colDef['related-entity-name'] && colDef['primary-key']) {\n        return FormWidgetType.SELECT;\n    }\n    return (fieldTypeWidgetTypeMap[colDef.type] && fieldTypeWidgetTypeMap[colDef.type][0]) || FormWidgetType.TEXT;\n};\n\n/**\n * @ngdoc function\n * @name wm.widgets.live.LiveWidgetUtils#getDefaultValue\n * @methodOf wm.widgets.live.LiveWidgetUtils\n * @function\n *\n * @description\n * return the formatted default value\n *\n * @param {string} value value to be formatted\n * @param {string} type column type of the value\n */\nexport const getDefaultValue = (value, type, widget) => {\n    if (widget) {\n        if (widget === FormWidgetType.NUMBER || widget === FormWidgetType.SLIDER || widget === FormWidgetType.CURRENCY) {\n            return isNaN(Number(value)) ? null : Number(value);\n        }\n        if (widget === FormWidgetType.CHECKBOX || widget === FormWidgetType.TOGGLE) {\n            return parseBooleanValue(value);\n        }\n        return value;\n    }\n    if (isNumberType(type)) {\n        return isNaN(Number(value)) ? null : Number(value);\n    }\n    if (type === DataType.BOOLEAN) {\n        return parseBooleanValue(value);\n    }\n    return value;\n};\n","import { Attribute, Element, Text } from '@angular/compiler';\n\nimport { DataType, FormWidgetType, getFormWidgetTemplate, IDGenerator, isDateTimeType } from '@wm/core';\nimport { getAttrMarkup, getDataSource, IBuildTaskDef, register } from '@wm/transpiler';\n\nimport { EDIT_MODE, getDataTableFilterWidget, getEditModeWidget } from '../../../../utils/live-utils';\n\nconst tagName = 'div';\nconst idGen = new IDGenerator('data_table_form_');\nconst formWidgets = new Set([\n    'wm-text',\n    'wm-textarea',\n    'wm-checkbox',\n    'wm-slider',\n    'wm-currency',\n    'wm-switch',\n    'wm-select',\n    'wm-checkboxset',\n    'wm-radioset',\n    'wm-date',\n    'wm-time',\n    'wm-timestamp',\n    'wm-rating',\n    'wm-datetime',\n    'wm-search',\n    'wm-chips',\n    'wm-colorpicker'\n]);\n\n// Add ngModelOptions standalone true as inner custom form widgets will be not part of table ngform\nconst addNgModelStandalone = (children = []) => {\n    children.forEach(childNode => {\n        if (formWidgets.has(childNode.name)) {\n            childNode.attrs.push(new Attribute('[ngModelOptions]', '{standalone: true}', <any>1, <any>1));\n        }\n        addNgModelStandalone(childNode.children);\n    });\n};\n\n// get the filter template (widget and filter menu) to be displayed in filter row\nconst getFilterTemplate = (attrs, pCounter)  => {\n    const widget = attrs.get('filterwidget') || getDataTableFilterWidget(attrs.get('type') || DataType.STRING);\n    const fieldName = attrs.get('binding');\n    const type = attrs.get('type') || 'string';\n    let datasourceBinding, submitEventBinding;\n    const datasetAttr = attrs.get('filterdataset.bind');\n    // when multicolumn is selected and filterwidget as autocomplete is assigned to dataset.\n    if (attrs.get('filterwidget') === 'autocomplete') {\n        if (datasetAttr) {\n            const binddatasource = getDataSource(datasetAttr);\n            datasourceBinding = `dataset.bind=\"${datasetAttr}\" datasource.bind=\"${binddatasource}\"`;\n        }\n        submitEventBinding = `submit.event=\"changeFn('${fieldName}')\"`;\n    }\n    const innerTmpl = `#filterWidget formControlName=\"${fieldName + '_filter'}\" ${datasourceBinding} ${submitEventBinding} change.event=\"changeFn('${fieldName}')\"\n                        disabled.bind=\"isDisabled('${fieldName}')\"`;\n    const options = {inputType: 'filterinputtype'} ;\n    const widgetTmpl = `${getFormWidgetTemplate(widget, innerTmpl, attrs, options)}`;\n\n    return `<ng-template #filterTmpl let-changeFn=\"changeFn\" let-isDisabled=\"isDisabled\">\n    <div class=\"input-group ${widget}\" data-col-identifier=\"${fieldName}\">\n        ${widgetTmpl}\n        <span class=\"input-group-addon filter-clear-icon\" *ngIf=\"${pCounter}.showClearIcon('${fieldName}')\">\n            <button class=\"btn-transparent btn app-button\" aria-label=\"Clear button\" type=\"button\" (click)=\"${pCounter}.clearRowFilter('${fieldName}')\">\n                <i class=\"app-icon wi wi-clear\" aria-hidden=\"true\"></i>\n            </button>\n         </span>\n        <span class=\"input-group-addon\" dropdown container=\"body\">\n            <button class=\"btn-transparent btn app-button\" type=\"button\" dropdownToggle><i class=\"app-icon wi wi-filter-list\"></i></button>\n            <ul class=\"matchmode-dropdown dropdown-menu\" *dropdownMenu>\n                   <li *ngFor=\"let matchMode of ${pCounter}.matchModeTypesMap['${type}']\"\n                        [ngClass]=\"{active: matchMode === (${pCounter}.rowFilter['${fieldName}'].matchMode || ${pCounter}.matchModeTypesMap['${type}'][0])}\">\n                        <a href=\"javascript:void(0);\" (click)=\"${pCounter}.onFilterConditionSelect('${fieldName}', matchMode)\" [innerText]=\"${pCounter}.matchModeMsgs[matchMode]\"></a>\n                    </li>\n             </ul>\n        </span>\n    </div></ng-template>`;\n};\n\nconst getEventsTmpl = attrs => {\n    let tmpl = '';\n    attrs.forEach((val, key) => {\n        if (key.endsWith('.event')) {\n            tmpl += `${key}=\"${val}\" `;\n        }\n    });\n    return tmpl;\n};\n\n// Generate inline edit properties template. Properties requiring row instance are generated here.\nconst getInlineEditRowPropsTmpl = attrs => {\n    const propAttrs = new Map();\n    const props = ['disabled', 'disabled.bind'];\n    props.forEach(prop => {\n        if (attrs.get(prop)) {\n            propAttrs.set(prop, attrs.get(prop));\n            attrs.delete(prop);\n        }\n    });\n    return getAttrMarkup(propAttrs);\n};\n\n// get the inline widget template\nconst getInlineEditWidgetTmpl = (attrs, isNewRow?, pCounter?) => {\n    const options: any = {};\n    const fieldName = attrs.get('binding');\n    const widget = attrs.get('edit-widget-type') || getEditModeWidget({\n        'type': attrs.get('type'),\n        'related-entity-name': attrs.get('related-entity-name'),\n        'primary-key': attrs.get('primary-key')\n    });\n    let widgetRef = '';\n    let formControl = '';\n    let wmFormWidget = '';\n    if (widget === FormWidgetType.UPLOAD) {\n        options.uploadProps = {\n            formName: idGen.nextUid(),\n            name: fieldName\n        };\n        options.counter = pCounter;\n    } else {\n        widgetRef = isNewRow ? '#inlineWidgetNew' : '#inlineWidget';\n        formControl = isNewRow ? `formControlName=\"${fieldName}_new\"` : `formControlName=\"${fieldName}\"`;\n        wmFormWidget = 'wmFormWidget';\n    }\n    options.inputType = 'editinputtype';\n    const tmplRef = isNewRow ? '#inlineWidgetTmplNew' : '#inlineWidgetTmpl';\n    const eventsTmpl = widget === FormWidgetType.UPLOAD ? '' : getEventsTmpl(attrs);\n    const rowPropsTl = getInlineEditRowPropsTmpl(attrs);\n    const innerTmpl = `${widgetRef} ${wmFormWidget} key=\"${fieldName}\" data-field-name=\"${fieldName}\" ${formControl} ${eventsTmpl} ${rowPropsTl}`;\n    const widgetTmpl = getFormWidgetTemplate(widget, innerTmpl, attrs, options);\n\n    return `<ng-template ${tmplRef} let-row=\"row\" let-getControl=\"getControl\" let-getValidationMessage=\"getValidationMessage\">\n                <div data-col-identifier=\"${fieldName}\" >\n                     ${widgetTmpl}\n                     <span placement=\"top\" container=\"body\" tooltip=\"{{getValidationMessage()}}\" class=\"text-danger wi wi-error\"\n                        *ngIf=\"getValidationMessage() && getControl() && getControl().invalid && getControl().touched\">\n                     </span>\n                     <span class=\"sr-only\" *ngIf=\"getValidationMessage()\">{{getValidationMessage()}}</span>\n                 </div>\n            </ng-template>`;\n};\n\nconst getFormatExpression = (attrs) => {\n    const columnValue = `row.getProperty('${attrs.get('binding')}')`;\n    let formatPattern = attrs.get('formatpattern');\n    let colExpression = '';\n    // For date time data types, if format pattern is not applied, Apply default toDate format\n    if (isDateTimeType(attrs.get('type')) && (!formatPattern || formatPattern === 'None')) {\n        attrs.set('formatpattern', 'toDate');\n        attrs.delete('datepattern');\n        formatPattern = 'toDate';\n    }\n    switch (formatPattern) {\n        case 'toDate':\n            colExpression = `{{${columnValue} | toDate: colDef.datepattern}}`;\n            break;\n        case 'toCurrency':\n            if (attrs.get('currencypattern')) {\n                colExpression = `{{${columnValue} | toCurrency: '${attrs.get('currencypattern')}`;\n\n                if (attrs.get('fractionsize')) {\n                    colExpression += `': ${attrs.get('fractionsize')}}}`;\n                } else {\n                    colExpression += `'}}`;\n                }\n            }\n            break;\n        case 'numberToString':\n            if (attrs.get('fractionsize')) {\n                colExpression = `{{${columnValue} | numberToString: '${attrs.get('fractionsize')}'}}`;\n            }\n            break;\n        case 'stringToNumber':\n            colExpression = `{{${columnValue} | stringToNumber}}`;\n            break;\n        case 'timeFromNow':\n            colExpression = `{{${columnValue} | timeFromNow}}`;\n            break;\n        case 'prefix':\n            if (attrs.get('prefix')) {\n                colExpression = `{{${columnValue} | prefix: '${attrs.get('prefix')}'}}`;\n            }\n            break;\n        case 'suffix':\n            if (attrs.get('suffix')) {\n                colExpression = `{{${columnValue} | suffix: '${attrs.get('suffix')}'}}`;\n            }\n            break;\n    }\n    return colExpression;\n};\n\nregister('wm-table-column', (): IBuildTaskDef => {\n    return {\n        requires: ['wm-table'],\n        template: (node: Element, shared) => {\n            if (node.children.length) {\n                // If node has children, but an empty text node dont generate custom expression\n                if (node.children.length === 1 && node.children[0] instanceof Text && (node.children[0] as Text).value.trim().length === 0) {\n                    return;\n                }\n                shared.set('customExpression', true);\n                addNgModelStandalone(node.children);\n            }\n        },\n        pre: (attrs, shared, parentTable) => {\n            let rowFilterTmpl = '';\n            let inlineEditTmpl = '';\n            let inlineNewEditTmpl = '';\n            let parentForm = '';\n            if (parentTable) {\n                const pCounter = parentTable.get('table_reference');\n                rowFilterTmpl = (parentTable.get('filtermode') === 'multicolumn' && attrs.get('searchable') !== 'false') ? getFilterTemplate(attrs, pCounter) : '';\n                const editMode = parentTable.get('editmode');\n                const isInlineEdit = (editMode !== EDIT_MODE.DIALOG && editMode !== EDIT_MODE.FORM && attrs.get('readonly') !== 'true');\n                inlineEditTmpl = isInlineEdit ? getInlineEditWidgetTmpl(attrs, false, pCounter) : '';\n                inlineNewEditTmpl = isInlineEdit && editMode === EDIT_MODE.QUICK_EDIT && parentTable.get('shownewrow') !== 'false' ? getInlineEditWidgetTmpl(attrs, true) : '';\n                parentForm = ` [formGroup]=\"${pCounter}.ngform\" `;\n            }\n            const formatPattern = attrs.get('formatpattern');\n            const customExpr = `<ng-template #customExprTmpl let-row=\"row\" let-colDef=\"colDef\" let-editRow=\"editRow\" let-deleteRow=\"deleteRow\" let-addNewRow=\"addNewRow\">`;\n            let customExprTmpl = '';\n            let formatExprTmpl = '';\n\n            if (shared.get('customExpression')) {\n                attrs.set('customExpression', 'true');\n                customExprTmpl = `${customExpr}<div data-col-identifier=\"${attrs.get('binding')}\">`;\n            } else if ((formatPattern && formatPattern !== 'None') || isDateTimeType(attrs.get('type'))) {\n                formatExprTmpl = getFormatExpression(attrs);\n                if (formatExprTmpl) {\n                    shared.set('customExpression', true);\n                    attrs.set('customExpression', 'true');\n                    customExprTmpl = `${customExpr}<div data-col-identifier=\"${attrs.get('binding')}\" title=\"${formatExprTmpl}\">${formatExprTmpl}`;\n                }\n            }\n\n            return `<${tagName} wmTableColumn ${getAttrMarkup(attrs)} ${parentForm}>\n                    ${rowFilterTmpl}\n                    ${inlineEditTmpl}\n                    ${inlineNewEditTmpl}\n                    ${customExprTmpl}`;\n        },\n        post: (attrs, shared) => {\n            let customExprTmpl = '';\n\n            if (shared.get('customExpression')) {\n                customExprTmpl = `</div></ng-template>`;\n            }\n            return `${customExprTmpl}</${tagName}>`;\n        }\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getRowActionAttrs } from '@wm/core';\n\nconst tagName = 'div';\n\nconst getRowExpansionActionTmpl = (attrs) => {\n    const tag = attrs.get('widget-type') === 'anchor' ? 'a' : 'button';\n    const directive = attrs.get('widget-type') === 'anchor' ? 'wmAnchor' : 'wmButton';\n    return `<ng-template #rowExpansionActionTmpl let-row=\"row\">\n               <${tag} ${directive}\n                    ${getRowActionAttrs(attrs)}\n                    class=\"${attrs.get('class')} row-expansion-button\"\n                    iconclass=\"${attrs.get('collapseicon')}\"\n                    type=\"button\"></${tag}>\n            </ng-template>`;\n};\n\nregister('wm-table-row', (): IBuildTaskDef => {\n    return {\n        pre: (attrs) => {\n            return `<${tagName} wmTableRow ${getAttrMarkup(attrs)}>\n                    ${getRowExpansionActionTmpl(attrs)}\n                    <ng-template #rowExpansionTmpl let-row=\"row\" let-rowDef=\"rowDef\" let-containerLoad=\"containerLoad\">\n                        <div wmContainer partialContainer content.bind=\"rowDef.content\" load.event=\"containerLoad(widget)\"\n                            [ngStyle]=\"{'height': rowDef.height, 'overflow-y': 'auto'}\">\n                         <div *ngFor=\"let param of rowDef.partialParams | keyvalue\" wmParam hidden\n                            [name]=\"param.key\" [value]=\"param.value\"></div>`;\n        },\n        post: () => `</div></ng-template></${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getRowActionAttrs } from '@wm/core';\n\nconst tagName = 'div';\n\nconst getSaveCancelTemplate = () => {\n    return `<button type=\"button\" aria-label=\"Save edit icon\" class=\"save row-action-button btn app-button btn-transparent save-edit-row-button hidden\" title=\"Save\">\n                <i class=\"wi wi-done\" aria-hidden=\"true\"></i>\n            </button>\n            <button type=\"button\" aria-label=\"Cancel edit icon\" class=\"cancel row-action-button btn app-button btn-transparent cancel-edit-row-button hidden\" title=\"Cancel\">\n                <i class=\"wi wi-cancel\" aria-hidden=\"true\"></i>\n            </button>`;\n};\n\n// get the inline widget template\nconst getRowActionTmpl = (attrs) => {\n    const action =  attrs.get('action');\n    const actionTmpl = action ? ` click.event.delayed=\"${action}\" ` : '';\n    const saveCancelTmpl = action && action.includes('editRow(') ? getSaveCancelTemplate() : '';\n    const btnClass = action ? (action.includes('editRow(') ? 'edit edit-row-button' :\n                        (action.includes('deleteRow(') ? 'delete delete-row-button' : '')) : '';\n    const tabIndex = attrs.get('tabindex') ? `tabindex=\"${attrs.get('tabindex')}\"` : '';\n    const tag = attrs.get('widget-type') === 'anchor' ? 'a' : 'button';\n    const directive = attrs.get('widget-type') === 'anchor' ? 'wmAnchor' : 'wmButton';\n    return `<ng-template #rowActionTmpl let-row=\"row\">\n               <${tag} ${directive} data-action-key=\"${attrs.get('key')}\"\n                    ${getRowActionAttrs(attrs)}\n                    class=\"row-action row-action-button ${attrs.get('class')} ${btnClass}\"\n                    iconclass=\"${attrs.get('iconclass')}\"\n                    ${actionTmpl}\n                    ${tabIndex}\n                    type=\"button\"></${tag}>\n                ${saveCancelTmpl}\n            </ng-template>`;\n};\n\nregister('wm-table-row-action', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTableRowAction ${getAttrMarkup(attrs)}>\n                        ${getRowActionTmpl(attrs)}`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { Element } from '@angular/compiler';\n\nimport { IDGenerator, updateTemplateAttrs } from '@wm/core';\nimport { getAttrMarkup, getBoundToExpr, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\nconst dataSetKey = 'dataset';\nconst idGen = new IDGenerator('table_');\n\nregister('wm-table', (): IBuildTaskDef => {\n    return {\n        template: (node: Element, shared) => {\n            // If table does not have child columns, set isdynamictable to true\n            if (node.children.length) {\n                const isColumnsPresent = node.children.some(childNode => {\n                    return (<any>childNode).name === 'wm-table-column' || (<any>childNode).name === 'wm-table-column-group';\n                });\n                shared.set('isdynamictable', isColumnsPresent ? 'false' : 'true');\n            } else {\n                shared.set('isdynamictable', 'true');\n            }\n\n            const datasetAttr = node.attrs.find(attr => attr.name === dataSetKey);\n            const widgetNameAttr = node.attrs.find(attr => attr.name === 'name');\n\n            if (!datasetAttr) {\n                return;\n            }\n            const boundExpr = getBoundToExpr(datasetAttr.value);\n\n            if (!boundExpr) {\n                return;\n            }\n            updateTemplateAttrs(node, boundExpr, widgetNameAttr.value, '', 'row');\n        },\n        pre: (attrs, shared) => {\n            const counter = idGen.nextUid();\n            shared.set('counter', counter);\n            attrs.set('isdynamictable', shared.get('isdynamictable'));\n            return `<${tagName} wmTable=\"${counter}\" wmTableFilterSort wmTableCUD #${counter} data-identifier=\"table\" role=\"table\" ${getAttrMarkup(attrs)}>`;\n        },\n        post: () => `</${tagName}>`,\n        provide: (attrs, shared) => {\n            const provider = new Map();\n            provider.set('table_reference', shared.get('counter'));\n            provider.set('filtermode', attrs.get('filtermode'));\n            provider.set('editmode', attrs.get('editmode'));\n            provider.set('shownewrow', attrs.get('shownewrow'));\n            return provider;\n        }\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'wm-input';\n\nregister('wm-text', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'wm-textarea';\n\nregister('wm-textarea', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} ${getFormMarkupAttr(attrs)} ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst  tagName = 'div';\n\nregister('wm-tile', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTile aria-describedby=\"Tile\" wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getFormMarkupAttr, IBuildTaskDef, register } from '@wm/transpiler';\nimport { getNgModelAttr } from '@wm/core';\n\nconst tagName = 'div';\n\nregister('wm-time', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTime ${getFormMarkupAttr(attrs)} role=\"input\" ${getNgModelAttr(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-tree', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTree redrawable ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'section';\n\nregister('wm-top-nav', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmTopNav partialContainer data-role=\"page-topnav\" role=\"region\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-video', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmVideo ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-wizard', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmWizard role=\"tablist\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { IDGenerator } from '@wm/core';\nimport { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'form';\nconst idGen = new IDGenerator('wizard_step_id_');\n\nregister('wm-wizardstep', (): IBuildTaskDef => {\n    return {\n        pre: attrs => {\n            const counter = idGen.nextUid();\n            return `<${tagName} wmWizardStep #${counter}=\"wmWizardStep\" ${getAttrMarkup(attrs)}>\n                       <ng-template [ngIf]=\"${counter}.isInitialized\">`;\n        },\n        post: () => `</ng-template></${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, getDataSource, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-fileupload', (): IBuildTaskDef => {\n    return {\n        pre: attrs => {\n            if (attrs.get('select.event')) {\n                const onSelectBinding = getDataSource(attrs.get('select.event'));\n                attrs.set('datasource.bind', onSelectBinding);\n            }\n            return `<${tagName} wmFileUpload ${getAttrMarkup(attrs)} role=\"input\">`;\n        },\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","export * from './widgets/common/accordion/accordion.build';\nexport * from './widgets/common/accordion/accordion-pane/accordion-pane.build';\nexport * from './widgets/common/tabs/tabs.build';\nexport * from './widgets/common/tabs/tab-pane/tab-pane.build';\nexport * from './widgets/common/anchor/anchor.build';\nexport * from './widgets/common/audio/audio.build';\nexport * from './widgets/common/breadcrumb/breadcrumb.build';\nexport * from './widgets/common/button-group/button-group.build';\nexport * from './widgets/common/button/button.build';\nexport * from './widgets/common/calendar/calendar.build';\nexport * from './widgets/common/card/card.build';\nexport * from './widgets/common/card/card-content/card-content.build';\nexport * from './widgets/common/card/card-actions/card-actions.build';\nexport * from './widgets/common/card/card-footer/card-footer.build';\nexport * from './widgets/common/carousel/carousel.build';\nexport * from './widgets/common/carousel/carousel-template/carousel-template.build';\nexport * from './widgets/common/chart/chart.build';\nexport * from './widgets/common/checkbox/checkbox.build';\nexport * from './widgets/common/checkboxset/checkboxset.build';\nexport * from './widgets/common/chips/chips.build';\nexport * from './widgets/common/color-picker/color-picker.build';\nexport * from './widgets/common/composite/composite.build';\nexport * from './widgets/common/container/container.build';\nexport * from './widgets/common/content/content.build';\nexport * from './widgets/common/currency/currency.build';\nexport * from './widgets/common/date-time/date-time.build';\nexport * from './widgets/common/date/date.build';\nexport * from './widgets/common/dialog/alert-dialog/alert-dialog.build';\nexport * from './widgets/common/dialog/confirm-dialog/confirm-dialog.build';\nexport * from './widgets/common/dialog/base/dialog-footer/dialog-footer.build';\nexport * from './widgets/common/dialog/design-dialog/dialog.build';\nexport * from './widgets/common/dialog/iframe-dialog/iframe-dialog.build';\nexport * from './widgets/common/dialog/login-dialog/login-dialog.build';\nexport * from './widgets/common/dialog/partial-dialog/partial-dialog.build';\nexport * from './widgets/common/footer/footer.build';\nexport * from './widgets/common/form/form-field/form-field.build';\nexport * from './widgets/common/form/form-action/form-action.build';\nexport * from './widgets/common/form/form.build';\nexport * from './widgets/common/header/header.build';\nexport * from './widgets/common/html/html.build';\nexport * from './widgets/common/icon/icon.build';\nexport * from './widgets/common/iframe/iframe.build';\nexport * from './widgets/common/label/label.build';\nexport * from './widgets/common/list/list.build';\nexport * from './widgets/common/layout-grid/layout-grid-column/layout-grid-column.build';\nexport * from './widgets/common/layout-grid/layout-grid-row/layout-grid-row.build';\nexport * from './widgets/common/layout-grid/layout-grid.build';\nexport * from './widgets/common/left-panel/left-panel.build';\nexport * from './widgets/common/live-table/live-table.build';\nexport * from './widgets/common/login/login.build';\nexport * from './widgets/common/marquee/marquee.build';\nexport * from './widgets/common/message/message.build';\nexport * from './widgets/common/menu/menu.build';\nexport * from './widgets/common/nav/nav-item/nav-item.build';\nexport * from './widgets/common/nav/nav.build';\nexport * from './widgets/common/navbar/navbar.build';\nexport * from './widgets/common/number/number.build';\nexport * from './widgets/common/page-content/page-content.build';\nexport * from './widgets/common/page/page.build';\nexport * from './widgets/common/pagination/pagination.build';\nexport * from './widgets/common/panel/panel.build';\nexport * from './widgets/common/partial/partial.build';\nexport * from './widgets/common/partial-param/partial-param.build';\nexport * from './widgets/common/picture/picture.build';\nexport * from './widgets/common/popover/popover.build';\nexport * from './widgets/common/prefab/prefab.build';\nexport * from './widgets/common/prefab-container/prefab-container.build';\nexport * from './widgets/common/progress-bar/progress-bar.build';\nexport * from './widgets/common/progress-bar/progress-circle/progress-circle.build';\nexport * from './widgets/common/radioset/radioset.build';\nexport * from './widgets/common/rating/rating.build';\nexport * from './widgets/common/rich-text-editor/rich-text-editor.build';\nexport * from './widgets/common/right-panel/right-panel.build';\nexport * from './widgets/common/search/search.build';\nexport * from './widgets/common/select/select.build';\nexport * from './widgets/common/slider/slider.build';\nexport * from './widgets/common/spinner/spinner.build';\nexport * from './widgets/common/switch/switch.build';\nexport * from './widgets/common/table/table-action/table-action.build';\nexport * from './widgets/common/table/table-column-group/table-column-group.build';\nexport * from './widgets/common/table/table-column/table-column.build';\nexport * from './widgets/common/table/table-row/table-row.build';\nexport * from './widgets/common/table/table-row-action/table-row-action.build';\nexport * from './widgets/common/table/table.build';\nexport * from './widgets/common/text/text.build';\nexport * from './widgets/common/textarea/textarea.build';\nexport * from './widgets/common/tile/tile.build';\nexport * from './widgets/common/time/time.build';\nexport * from './widgets/common/tree/tree.build';\nexport * from './widgets/common/top-nav/top-nav.build';\nexport * from './widgets/common/video/video.build';\nexport * from './widgets/common/wizard/wizard.build';\nexport * from './widgets/common/wizard/wizard-step/wizard-step.build';\nexport * from './widgets/common/file-upload/file-upload.build';\n\nexport * from '@wm/transpiler';\n\nexport const initComponentsBuildTask = () => {};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api_buildtask';\n"],"names":["tagName","idGen","this","dataSetKey","formWidgets"],"mappings":";;;;;;;AAEA,IAAM,OAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,cAAc,EAAE;IACrB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAI,OAAO,oEAA2D,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC3G,IAAI,EAAE,cAAM,OAAA,OAAK,OAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,kBAAkB,EAAE;IACzB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,wEAAiE,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACjH,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,gBAAW,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC3D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AACtB,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,qCAAgC,aAAa,CAAC,KAAK,CAAC,sDAA+C,GAAA;QAC5H,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,SAAO,GAAG,GAAG,CAAC;AAEpB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,2DAAkD,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAClG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,iBAAY,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,IAAI,CAAC;AAErB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,sBAAiB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACjE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,uEAA8D,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC9G,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,QAAQ,CAAC;AAEzB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,kBAAa,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC7D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,oDAA6C,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC7F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,gBAAW,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC3D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,wCAAmC,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACnF,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,uBAAkB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAClE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,sBAAiB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACjE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACLH,IAAM,eAAe,GAAG,UAAU,CAAC;AACnC,IAAM,UAAU,GAAG,SAAS,CAAC;AAC7B,IAAM,KAAK,GAAG,IAAI,WAAW,CAAC,kBAAkB,CAAC,CAAC;AAElD,IAAM,iBAAiB,GAAG,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,GAAA,CAAC,GAAA,CAAC;;AAE5G,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM;;YAEf,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACpC,OAAO,2CAAuC,eAAe,qBAAgB,OAAO,yBAAkB,aAAa,CAAC,KAAK,CAAC,oCAA4B,OAAO,wBAAoB,CAAC;SACrL;QACD,IAAI,EAAE,cAAM,OAAA,OAAK,eAAe,YAAS,GAAA;QACzC,QAAQ,EAAE,UAAC,IAAa;;YAEpB,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE;gBACzB,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,UAAU,GAAA,CAAC,CAAC;gBACtE,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,MAAM,GAAA,CAAC,CAAC;gBAErE,IAAI,CAAC,WAAW,EAAE;oBACd,OAAO;iBACV;gBACD,IAAM,SAAS,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAEpD,IAAI,CAAC,SAAS,EAAE;oBACZ,OAAO;iBACV;gBACD,mBAAmB,CAAC,IAAI,EAAE,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;aAC9D;SACJ;;QAED,OAAO,EAAE,UAAC,KAAK,EAAE,MAAM;YACnB,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YACzD,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC,CAAC;;ACzCH,IAAM,sBAAsB,GAAG,OAAO,CAAC;;AAGvC,QAAQ,CAAC,qBAAqB,EAAE;IAC5B,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAI,sBAAsB,6BAAwB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACvF,IAAI,EAAE,cAAM,OAAA,OAAK,sBAAsB,MAAG,GAAA;KAC7C,CAAC;CACL,CAAC,CAAC;;AAGH,QAAQ,CAAC,sBAAsB,EAAE;IAC7B,OAAO;QACH,QAAQ,EAAE,CAAC,aAAa,CAAC;QACzB,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAE,cAAc;YAC/B,IAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACvD,OAAO,mBAAgB,WAAW,uBAAiB,WAAW,qDACnD,sBAAsB,6BAAwB,aAAa,CAAC,KAAK,CAAC,8BAAwB,WAAW,sMAEpG,sBAAsB,wFAC+B,CAAC;SACrE;QACD,IAAI,EAAE,cAAM,OAAA,gBAAgB,GAAA;KAC/B,CAAC;CACL,CAAC,CAAC;;ACxBH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,4BAAuB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACvE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,mCAA4B,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACzG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,IAAI,CAAC;AAErB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,uBAAkB,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC/F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,IAAI,CAAC;AAErB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,kCAA2B,aAAa,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACpG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,uBAAkB,aAAa,CAAC,KAAK,CAAC,wBAAiB,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACxG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,cAAc,EAAE;IACrB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,oCAA6B,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC7E,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,cAAc,EAAE;IACrB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,wDAAiD,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,OAAO,YAAK,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1I,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,MAAM,CAAC;AAEvB,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,4DAAmD,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACnG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,oBAAe,aAAa,CAAC,KAAK,CAAC,wBAAiB,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACrG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,oBAAe,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,gBAAW,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACxF,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,0EAAiE,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACjH,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,kBAAkB,EAAE;IACzB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,uDAAgD,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAChG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,kBAAkB,EAAE;IACzB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,iCAA+BA,SAAO,mDAA4C,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACvH,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,oBAAiB,GAAA;KAC5C,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,kBAAa,aAAa,CAAC,KAAK,CAAC,6DAAwD,GAAA;QAClH,IAAI,EAAE,cAAM,OAAA,qBAAmBA,SAAO,MAAG,GAAA;KAC5C,CAAC;CACL,CAAC,CAAC;;AAGH,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,EAAE,GAAA;QAChB,IAAI,EAAE,cAAM,OAAA,EAAE,GAAA;KACjB,CAAC;CACL,CAAC,CAAC;;ACfH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,sDAA+C,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC/F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,gCAA2B,aAAa,CAAC,KAAK,CAAC,sGAA+F,GAAA;QACvK,IAAI,EAAE,cAAM,OAAA,qBAAmBA,SAAO,MAAG,GAAA;KAC5C,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM;YACf,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACrC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAExB,IAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC/C,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAE7B,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACvC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAE3B,IAAI,eAAe,GAAG,EAAE,CAAC;YACzB,IAAI,aAAa,GAAG,EAAE,CAAC;YAEvB,IAAI,MAAM,EAAE;gBACR,eAAe,GAAG,kBAAe,MAAM,OAAG,CAAC;aAC9C;YAED,IAAI,YAAY,EAAE;gBACd,aAAa,GAAG,oBAAiB,YAAY,OAAG,CAAC;aACpD;iBAAM,IAAI,OAAO,EAAE;gBAChB,aAAa,GAAG,eAAY,OAAO,OAAG,CAAC;aAC1C;YAED,IAAI,eAAe,GAAG,EAAE,CAAC;YACzB,IAAI,aAAa,EAAE;gBAEf,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;gBACtC,eAAe,IAAI,oDAAkD,aAAa,wCAA+B,eAAe,MAAG,CAAC;aACvI;YAED,OAAO,MAAIA,SAAO,yBAAoB,aAAa,CAAC,KAAK,CAAC,SAAI,eAAiB,CAAC;SACnF;QACD,IAAI,EAAE,UAAC,KAAK,EAAE,MAAM;YAChB,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;gBACjC,UAAU,GAAI,sBAAsB,CAAC;aACxC;YACD,OAAU,UAAU,UAAKA,SAAO,MAAG,CAAC;SACvC;KACJ,CAAC;CACL,CAAC,CAAC;;AC5CH,IAAMA,SAAO,GAAG,QAAQ,CAAC;AAEzB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,kFAAyE,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACzH,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACcI,IAAM,OAAO,GAAG,IAAI,cAAc,CAAC,4BAA4B,CAAC,CAAC;;ACfxE,IAAM,eAAe,GAAG,IAAI,GAAG,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,QAAQ;IACvG,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,YAAY,EAAE,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;AAChI,AA+IO,IAAM,eAAe,GAAG,UAAA,MAAM;IACjC,OAAO,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;CACtC,CAAC;;AClJF,IAAY,eAKX;AALD,WAAY,eAAe;IACvB,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;IACjB,gCAAa,CAAA;CAChB,EALW,eAAe,KAAf,eAAe,QAK1B;AAED,AAAO,IAAM,SAAS,GAAG,YAAY,CAAC;;ACVtC,IAAMA,SAAO,GAAG,KAAK,CAAC;AACtB,IAAMC,OAAK,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC;AAE5C,IAAM,iBAAiB,GAAG,UAAC,KAAK;IAC5B,IAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;QAC3B,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;KAChC;IACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QAC1B,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;KAC/B;IACD,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;QACtB,IAAI,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACxB,IAAI,GAAG,KAAK,aAAa,EAAE;gBACvB,KAAK,GAAG,2BAAyB,KAAO,CAAC;aAC5C;iBAAM,IAAI,GAAG,KAAK,YAAY,EAAE;gBAC7B,KAAK,GAAG,0BAAwB,KAAO,CAAC;aAC3C;YACD,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3B,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACrB;KACH,CAAC,CAAC;IACH,OAAO,iBAAiB,CAAC,UAAU,CAAC,CAAC;CACxC,CAAC;AAEF,IAAM,oBAAoB,GAAG,IAAI,GAAG,CAAC;IACjC,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;IACjF,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;IAC/F,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IAC9E,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;IAChD,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAChF,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAC9E,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;IAChF,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;CACpD,CAAC,CAAC;AAEH,IAAM,qBAAqB,GAAG,UAAC,KAAK,EAAE,UAAU,EAAE,KAAK;IACnD,IAAM,IAAI,GAAG,KAAK,KAAK,CAAC,GAAG,gBAAgB,GAAG,aAAa,CAAC;IAC5D,IAAI,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClC,IAAI,WAAW,IAAI,WAAW,KAAK,EAAE,EAAE;QACnC,OAAO;KACV;IACD,WAAW,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;IAClG,IAAI,WAAW,EAAE;QACb,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KAChC;CACJ,CAAC;;AAEF,IAAM,iBAAiB,GAAG,UAAC,KAAK,EAAE,OAAO;IACrC,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC/B,IAAM,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;IAC1D,IAAM,WAAW,GAAG,OAAO,CAAC,WAAW,GAAG,uBAAoB,SAAS,WAAO,IAAI,OAAO,CAAC,QAAQ,GAAG,yBAAsB,OAAO,CAAC,OAAO,kBAAc,GAAG,uBAAoB,SAAS,OAAG,CAAC,CAAC;IAC7L,IAAM,OAAO,GAAG,OAAO,CAAC,WAAW,GAAG,gBAAgB,GAAG,aAAa,CAAC;IACvE,IAAM,UAAU,GAAG,IAAI,IAAI,OAAO,CAAC,WAAW,GAAG,YAAS,IAAI,qBAAiB,GAAG,YAAS,IAAI,kBAAc,IAAI,EAAE,CAAC;IACpH,IAAM,WAAW,GAAG,uBAAoB,OAAO,CAAC,QAAQ,yBAAoB,OAAO,CAAC,OAAO,wCAAkC,WAAW,SAAI,OAAO,CAAC,UAAU,SAAI,OAAO,SAAI,UAAY,CAAC;IAC1L,OAAO,qBAAqB,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,EAAE,EAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAC,CAAC,CAAC;CAChI,CAAC;;AAGF,IAAM,WAAW,GAAG,UAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ;IAC3E,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC;IACjD,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,iBAAiB,CAAC,KAAK,EAAE,EAAC,UAAU,YAAA,EAAE,UAAU,YAAA,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAC,CAAC,CAAC;KAC1F;IACD,IAAM,WAAW,GAAG,WAAW,EAAE,GAAG,UAAU,GAAG,UAAU,CAAC;IAC5D,OAAO,kBAAe,WAAW,WAAK,iBAAiB,CAAC,KAAK,EAAE,EAAC,UAAU,YAAA,EAAE,UAAU,YAAA,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAC,CAAC,6CACjF,WAAW,WAAK,iBAAiB,CAAC,KAAK,EAAE,EAAC,UAAU,YAAA,EAAE,UAAU,YAAA,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAE,WAAW,EAAE,IAAI,EAAC,CAAC,WAAQ,CAAC;CAC9I,CAAC;;AAEF,IAAM,kBAAkB,GAAG,UAAC,KAAK,EAAE,UAAU,EAAE,OAAO;IAClD,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,MAAM,EAAE;QACpC,OAAU,OAAO,sBAAmB,CAAC;KACxC;IACD,IAAI,UAAU,KAAK,cAAc,CAAC,QAAQ,EAAE;QACxC,OAAO,cAAc,CAAC;KACzB;IACD,IAAI,OAAO,GAAM,OAAO,WAAQ,CAAC;IACjC,IAAI,UAAU,KAAK,cAAc,CAAC,QAAQ,IAAI,UAAU,KAAK,cAAc,CAAC,SAAS,EAAE;QACnF,OAAO,IAAI,eAAa,OAAO,uDAAoD,CAAC;QACpF,OAAO,OAAO,CAAC;KAClB;IACD,IAAI,UAAU,KAAK,cAAc,CAAC,IAAI,EAAE;QACpC,OAAO,IAAI,eAAa,OAAO,yCAAsC,CAAC;QACtE,OAAO,OAAO,CAAC;KAClB;IACD,IAAI,UAAU,KAAK,cAAc,CAAC,IAAI,EAAE;QACpC,OAAO,IAAI,eAAa,OAAO,8CAA2C,CAAC;QAC3E,OAAO,OAAO,CAAC;KAClB;IACD,IAAI,UAAU,KAAK,cAAc,CAAC,MAAM,IAAI,UAAU,KAAK,cAAc,CAAC,MAAM,EAAE;QAC9E,OAAO,EAAE,CAAC;KACb;IACD,IAAI,eAAe,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,SAAS,EAAE;QACrE,OAAU,OAAO,sBAAmB,CAAC;KACxC;IACD,OAAU,OAAO,kBAAe,CAAC;CACpC,CAAC;;AAEF,IAAM,iBAAiB,GAAG,UAAC,WAAW;IAClC,OAAO;QACH,QAAQ,EAAE,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE,SAAS,CAAC;QAChE,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,YAAY,EAAE,UAAU;YACrE,IAAM,OAAO,GAAGA,OAAK,CAAC,OAAO,EAAE,CAAC;YAChC,IAAM,MAAM,GAAG,UAAU,IAAI,cAAc,IAAI,YAAY,CAAC;YAC5D,IAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,MAAM,CAAC;YACpE,IAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC;YAC9D,IAAM,QAAQ,GAAG,WAAW,GAAG,YAAY,GAAG,cAAc,CAAC;YAC7D,IAAM,aAAa,GAAG,WAAW,GAAG,gBAAa,OAAO,8BAAyB,OAAO,8BAAyB,QAAQ,iJAEjF,OAAO,8BAA0B,GAAG,EAAE,CAAC;YAC/E,IAAM,UAAU,GAAG,UAAU,KAAK,cAAc,CAAC,MAAM,GAAG,EAAE,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACxF,IAAM,aAAa,GAAG,WAAW,EAAE,GAAG,WAAW,GAAG,WAAW,CAAC;YAChE,IAAM,QAAQ,GAAG,QAAQ,MAAM,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC;YACtF,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACvB,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAE/B,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,EAAE;gBAClC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;gBAC5C,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;aAC/C;iBAAM;gBACH,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;aAC/C;YAED,OAAO,MAAID,SAAO,qBAAe,QAAQ,yBAAkB,QAAQ,+BAAyB,OAAO,sCAA8B,UAAU,WAAK,iBAAiB,CAAC,KAAK,CAAC,8GAChF,QAAQ,sCAA+B,UAAU,4DACrG,OAAO,yEAAkE,QAAQ,qCAA8B,OAAO,oFACzG,QAAQ,oDAA6C,OAAO,8BAAyB,OAAO,8BAAyB,QAAQ,2EACrI,QAAQ,yBAAoB,OAAO,qCAA8B,OAAO,+EAC/E,OAAO,uBAAkB,QAAQ,yBAAoB,aAAa,iJAE7D,QAAQ,yBAAoB,OAAO,yCAAoC,OAAO,iDAA0C,kBAAkB,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,qDACvL,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,uDAC3D,OAAO,8BAAyB,OAAO,+BAA0B,QAAQ,iGAChD,OAAO,sDAC5C,aAAa,yEAEhB,CAAC;SACvB;QACD,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;QAC3B,OAAO,EAAE,UAAC,KAAK,EAAE,MAAM;YACnB,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YACtD,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC;;AAEF,QAAQ,CAAC,eAAe,EAAE,iBAAiB,CAAC,IAAI,CAACE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC9D,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,IAAI,CAACA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;;AC7JjE,IAAMF,SAAO,GAAG,KAAK,CAAC;AAEtB,IAAM,cAAc,GAAG,UAAC,IAAI;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,8BAAuB,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,YAAK,aAAa,CAAC,KAAK,CAAC,SAAI,IAAI,MAAG,GAAA;QACzH,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC;AAEF,QAAQ,CAAC,gBAAgB,EAAE,cAAc,CAAC,IAAI,CAACE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1D,QAAQ,CAAC,kBAAkB,EAAE,cAAc,CAAC,IAAI,CAACA,IAAI,EAAE,wBAAsB,CAAC,CAAC,CAAC;;ACPhF,IAAMF,SAAO,GAAG,MAAM,CAAC;AACvB,IAAMC,OAAK,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAEvC,IAAM,WAAW,GAAG,IAAI,GAAG,CAAC;IACxB,SAAS;IACT,aAAa;IACb,aAAa;IACb,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,WAAW;IACX,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,SAAS;IACT,cAAc;IACd,WAAW;IACX,WAAW;IACX,aAAa;IACb,WAAW;IACX,UAAU;IACV,gBAAgB;IAChB,UAAU;CACb,CAAC,CAAC;AAEH,IAAM,kBAAkB,GAAG,UAAC,QAAa;IAAb,yBAAA,EAAA,aAAa;IACrC,QAAQ,CAAC,OAAO,CAAC,UAAA,SAAS;QACtB,IAAI,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACjC,IAAI,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,GAAA,CAAC,CAAC;YACtF,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC;YACvB,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,iBAAiB,EAAE,GAAG,EAAO,CAAC,EAAO,CAAC,CAAC,CAAC,CAAC;YAC5E,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,cAAc,EAAE,EAAE,EAAO,CAAC,EAAO,CAAC,CAAC,CAAC,CAAC;SAC3E;QACD,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KAC1C,CAAC,CAAC;CACN,CAAC;AAEF,IAAM,oBAAoB,GAAG,UAAC,OAAO;IACjC,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;QAC9B,IAAM,cAAc,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;QACnE,IAAI,cAAc,EAAE;YAChB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,cAAc,CAAC,CAAC;SACtD;KACJ;CACJ,CAAC;AAEF,IAAM,SAAS,GAAG,UAAC,aAAkB;IAAlB,8BAAA,EAAA,kBAAkB;IACjC,OAAO;QACH,QAAQ,EAAE,CAAC,cAAc,EAAE,UAAU,CAAC;QACtC,QAAQ,EAAE,UAAC,IAAa;YACpB,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC;QACD,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,iBAAiB;YACnD,IAAI,IAAI,CAAC;YACT,IAAI,QAAQ,CAAC;YACb,IAAM,IAAI,GAAG,iBAAiB,IAAI,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,WAAW,GAAG,EAAE,CAAC;YACtF,IAAM,OAAO,GAAGA,OAAK,CAAC,OAAO,EAAE,CAAC;YAChC,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,iBAAc,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,OAAG,GAAG,EAAE,CAAC;YACxF,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,MAAM,GAAG,2CAA2C,GAAG,EAAE,CAAC;YACxG,IAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACzF,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC1B,IAAM,YAAY,GAAG,MAAID,SAAO,uBAAiB,IAAI,WAAK,aAAa,UAAK,OAAO,wCAAkC,OAAO,iCAA0B,OAAO,kEAC5I,SAAS,qBAAc,OAAO,8CAAuC,OAAO,uDAAiD,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAG,CAAC;YAC7K,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC/B,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,QAAQ,EAAE;gBACtC,QAAQ,GAAG,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,wBAAsB,OAAS,CAAC;gBACzG,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAChC,IAAM,gBAAc,GAAG,IAAI,GAAG,EAAkB,CAAC;gBACjD,gBAAgB,CAAC,OAAO,CAAC,UAAC,IAAI;oBAC3B,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBACjB,gBAAc,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;qBAC7C;iBACH,CAAC,CAAC;gBACH,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC3B,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC5B,OAAO,0FAAoF,SAAS,oBAAc,QAAQ,4FAC5D,QAAQ,yBAAiB,aAAa,CAAC,gBAAc,CAAC,6GAEtG,YAAY,SAAI,IAAI,MAAG,CAAC;aACzC;YACD,IAAI,qBAAqB,GAAG,EAAE,CAAC;YAC/B,IAAI,cAAc,GAAG,EAAE,CAAC;;YAExB,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,MAAM,EAAE;gBACpC,IAAM,MAAI,GAAG,4BAA0B,OAAS,CAAC;gBACjD,IAAM,cAAc,GAAG,IAAI,GAAG,EAAkB,CAAC;gBACjD,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChD,cAAc,CAAC,GAAG,CAAC,oBAAoB,EAAE,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC1E,cAAc,GAAG,2SAE+B,OAAO,4RAC+C,OAAO,wBAAmB,OAAO,sFAChG,CAAC;gBACxC,qBAAqB,GAAG,mCAAgC,MAAI,WAAK,aAAa,CAAC,cAAc,CAAC,yFAC/B,OAAO,gSAGN,CAAC;aACpE;YAED,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAU,YAAY,SAAI,IAAI,SAAI,SAAS,kCAC9B,cAAc,SAAI,qBAAuB,CAAC;SAC1D;QACD,IAAI,EAAE,UAAC,KAAK;YACR,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,QAAQ,EAAE;gBACtC,OAAO,mCAAmC,CAAC;aAC9C;YACD,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,MAAM,EAAE;gBACpC,OAAO,aAAWA,SAAO,MAAG,CAAC;aAChC;YACD,OAAO,OAAKA,SAAO,MAAG,CAAC;SAC1B;QACD,OAAO,EAAE,UAAC,KAAK,EAAE,MAAM;YACnB,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YACtD,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC;AAEF,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAC/B,QAAQ,CAAC,aAAa,EAAE,cAAM,OAAA,SAAS,CAAC,YAAY,CAAC,GAAA,CAAC,CAAC;AACvD,QAAQ,CAAC,eAAe,EAAE,cAAM,OAAA,SAAS,CAAC,cAAc,CAAC,GAAA,CAAC,CAAC;;AChI3D,IAAMA,SAAO,GAAG,QAAQ,CAAC;AAEzB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,6EAAoE,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACpH,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,gBAAW,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC3D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,MAAM,CAAC;AAEvB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,qCAA8B,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC9E,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,kBAAa,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC7D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,OAAO,CAAC;AAExB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,iBAAY,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5D,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACJH,IAAM,SAAS,GAAG,SAAS,CAAC;AAC5B,IAAM,WAAW,GAAG,KAAK,CAAC;AAC1B,IAAMG,YAAU,GAAG,SAAS,CAAC;AAE7B,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,QAAQ,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;QACpC,QAAQ,EAAE,UAAC,IAAa;YAEpB,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAKA,YAAU,GAAA,CAAC,CAAC;YACtE,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,MAAM,GAAA,CAAC,CAAC;YAErE,IAAI,CAAC,WAAW,EAAE;gBACd,OAAO;aACV;YACD,IAAM,SAAS,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEpD,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO;aACV;YACD,mBAAmB,CAAC,IAAI,EAAE,SAAS,EAAE,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;SAC1E;QACD,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc;YAC3C,IAAM,MAAM,GAAG,UAAU,IAAI,cAAc,CAAC;YAC5C,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrE,OAAO,MAAI,WAAW,8BAAyB,aAAa,CAAC,KAAK,CAAC,MAAG,CAAC;SAC1E;QACD,IAAI,EAAE,cAAM,OAAA,OAAK,WAAW,MAAG,GAAA;QAC/B,OAAO,EAAE,UAAC,KAAK,EAAE,MAAM;YACnB,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACpE,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC,CAAC;AAEH,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,cAAM,OAAA,uLAA2K,GAAA;QACtL,IAAI,EAAE,cAAM,OAAA,gBAAgB,GAAA;KAC/B,CAAC;CACL,CAAC,CAAC;AAEH,SAAS,aAAa,CAAC,IAAa,EAAE,YAAoB,EAAE,EAAW,EAAE,UAAkB;IACvF,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,YAAY,GAAA,CAAC,CAAC;IAChE,IAAI,QAAQ,EAAE;QACV,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;KACrG;CACJ;AAED,QAAQ,CAAC,yBAAyB,EAAE;IAChC,OAAO;QACH,QAAQ,EAAE,UAAC,IAAa;YAEpB,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,UAAU,GAAA,CAAC,CAAC,KAAK,CAAC;YAEzE,IAAM,IAAI,GAAe,IAAI,CAAC,QAAQ;iBACjC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,YAAY,OAAO,IAAe,CAAE,CAAC,IAAI,KAAK,WAAW,GAAA,CAAC,CAAC;;YAG7E,IAAI,CAAC,OAAO,CAAC,UAAC,OAAO;gBACjB,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;aAC9D,CAAC,CAAC;SACN;QACD,GAAG,EAAE,UAAC,KAAK,EAAE,EAAE;YACX,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,EAAE;gBAClC,OAAO,4JACyF,aAAa,CAAC,KAAK,CAAC,MAAG,CAAC;aAC3H;YACD,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;gBACnC,OAAO,8JAC0F,aAAa,CAAC,KAAK,CAAC,MAAG,CAAC;aAC5H;SACJ;QACD,IAAI,EAAE,cAAM,OAAA,qBAAqB,GAAA;KACpC,CAAC;CACL,CAAC,CAAC;;AC/EH,IAAMH,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,4BAAuB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACvE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,yBAAoB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACpE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,sBAAiB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACjE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,OAAO,CAAC;AAExB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,6GAAkG,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,MAAM,YAAK,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1L,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,SAAO,GAAG,KAAK,CAAC;AACtB,IAAMC,OAAK,GAAG,IAAI,WAAW,CAAC,qBAAqB,CAAC,CAAC;AAErD,QAAQ,CAAC,cAAc,EAAE;IACrB,OAAO;QACH,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM;YACf,IAAM,OAAO,GAAGA,OAAK,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC/B,OAAO,MAAID,SAAO,oCAA6B,aAAa,CAAC,KAAK,CAAC,oBAAc,OAAO,QAAI,CAAC;SAChG;QACD,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;QAC3B,OAAO,EAAE,UAAC,KAAK,EAAE,MAAM;YACnB,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1D,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC,CAAC;;AClBH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,iBAAY,aAAa,CAAC,KAAK,CAAC,+CAA0C,GAAA;QACnG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;QAC3B,OAAO,EAAE;YACL,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC9B,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC,CAAC;;ACZH,IAAMA,SAAO,GAAG,SAAS,CAAC;AAE1B,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,gHAAmG,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACnJ,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,GAAG,CAAC;AAEpB,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,sDAA+C,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC/F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,yBAAoB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACpE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,IAAI,CAAC;AAErB,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,yCAAkC,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAClF,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,IAAI,CAAC;AAErB,QAAQ,CAAC,QAAQ,EAAE;IACf,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,qEAA4D,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5G,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,qEAA4D,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5G,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACLH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,kBAAa,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACTH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,yCAAkC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,MAAM,YAAK,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1H,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACJH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,IAAM,SAAS,GAAG,UAAC,IAAa,EAAE,SAAiB;IAC/C,IAAM,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,QAAC,CAAC,YAAY,OAAO,IAAK,CAAa,CAAC,IAAI,KAAK,SAAS,IAAC,CAAC,CAAC;IAC3G,OAAO,KAAgB,CAAC;CAC3B,CAAC;AAEF,IAAM,aAAa,GAAG,UAAA,IAAI;IACtB,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;CAC5D,CAAC;AAEF,IAAM,YAAY,GAAG,UAAC,IAAa,EAAE,IAAY,EAAE,KAAa;IAC5D,IAAM,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACxD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACzB,CAAC;AAEF,IAAM,MAAM,GAAI,EAAsB,CAAC;AAEvC,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,QAAQ,EAAE,UAAC,IAAa;YACpB,IAAI,WAAW,EAAE,EAAE;gBACf,IAAM,eAAe,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,EAAE,iBAAiB,CAAC,CAAC;gBACpF,IAAI,eAAe,EAAE;oBACjB,IAAM,eAAe,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;oBACtD,YAAY,CAAC,eAAe,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;oBAC7D,IAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;oBACpC,YAAY,CAAC,MAAM,EAAE,qBAAqB,EAAE,EAAE,CAAC,CAAC;oBAChD,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;oBAClD,eAAe,CAAC,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;oBACrF,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC,CAAC;oBAC1E,eAAe,CAAC,QAAQ,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;iBACxD;aACJ;SACJ;QACD,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,4CAAqC,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACrF,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACzCH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,oFAA2E,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC3H,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,qFAA4E,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5H,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;AAEH,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,mDAA4C,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5F,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACdH,IAAMA,SAAO,GAAG,SAAS,CAAC;AAE1B,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,yDAAgD,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAChG,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,wBAAmB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACnE,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,SAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,iDAAwC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,MAAM,YAAK,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;KAC9H,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,SAAO,GAAG,YAAY,CAAC;AAE7B,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,QAAQ,EAAE,CAAC,UAAU,CAAC;QACtB,GAAG,EAAE,UAAC,KAA0B,EAAE,MAAwB,EAAE,KAAK;YAC7D,IAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACjD,IAAI,eAAe,CAAC;YACpB,IAAI,aAAa,KAAK,QAAQ,EAAE;gBAC5B,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACrC,IAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAE9C,IAAI,aAAa,GAAG,EAAE,CAAC;gBAEvB,IAAI,OAAO,EAAE;oBACT,aAAa,GAAG,eAAY,OAAO,OAAG,CAAC;iBAC1C;qBAAM,IAAI,WAAW,EAAE;oBACpB,aAAa,GAAG,oBAAiB,WAAW,OAAG,CAAC;iBACnD;gBAED,eAAe,GAAG,gDAA8C,aAAa,MAAG,CAAC;gBACjF,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;aACzC;YAED,IAAI,MAAM,GAAG,MAAIA,SAAO,mBAAc,aAAa,CAAC,KAAK,CAAC,MAAG,CAAC;YAC9D,IAAM,YAAY,GAAG,KAAK,GAAG,iBAAe,GAAG,EAAE,CAAC;YAElD,MAAM,IAAI,kBAAgB,YAAY,+CAA0C,CAAC;;YAGjF,IAAI,eAAe,EAAE;gBACjB,MAAM,IAAI,MAAG,eAAe,GAAG,eAAe,GAAG,EAAE,CAAE,CAAC;aACzD;YAED,OAAO,MAAM,CAAC;SACjB;QACD,IAAI,EAAE,UAAC,KAA0B,EAAE,MAAwB;YACvD,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,IAAI,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;gBACjC,MAAM,IAAI,QAAQ,CAAC;aACtB;YAED,OAAU,MAAM,+DAAwDA,SAAO,MAAG,CAAC;SACtF;KACJ,CAAC;CACL,CAAC,CAAC;;AC7CH,IAAMA,SAAO,GAAG,SAAS,CAAC;AAE1B,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,SAAO,uCAAgC,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAChF,IAAI,EAAE,cAAM,OAAA,OAAKA,SAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,qBAAqB,EAAE;IAC5B,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,2BAAsB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACtE,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACHH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,IAAM,OAAO,GAAG,UAAC,IAAa,EAAE,QAAgB,IAAK,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,QAAQ,GAAA,CAAC,GAAA,CAAC;AAErG,IAAM,YAAY,GAAG,UAAC,IAAa,EAAE,QAAgB;IACjD,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACtC,IAAI,KAAK,EAAE;QACP,OAAO,KAAK,CAAC,KAAK,CAAC;KACtB;CACJ,CAAC;AAEF,IAAM,eAAe,GAAG,UAAC,CAAS,IAAK,OAAA,IAAI,MAAM,CAAC,WAAS,CAAC,SAAI,CAAC,iBAAc,EAAE,GAAG,CAAC,GAAA,CAAC;AAEtF,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,QAAQ,EAAE,UAAC,IAAa;YACpB,IAAM,OAAO,GAAG,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAC9C,IAAM,SAAS,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;YAE1C,IAAI,SAAS,EAAE;gBACX,IAAI,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBACtC,IAAI,SAAS,GAAG,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBAEhD,IAAM,YAAY,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;gBAEhD,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBAClC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;oBACtC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;iBACtC;gBAED,IAAI,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBAC5C,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;oBAChD,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;iBAChD;aACJ;SACJ;QACD,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,uBAAkB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAClE,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;AC3CH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,oBAAoB,EAAE;IAC3B,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,0BAAqB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACrE,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,UAAO,GAAG,IAAI,CAAC;AAErB,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,wCAAiC,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC9G,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,kBAAa,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1F,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,mBAAmB,EAAE;IAC1B,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,2CAAoC,iBAAiB,CAAC,KAAK,CAAC,MAAG,GAAA;QACxF,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,OAAO,CAAC;AAExB,QAAQ,CAAC,gBAAgB,EAAE;IACvB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,6FAAoF,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACpI,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,kBAAa,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1F,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,WAAW,CAAC;AAE5B,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,SAAI,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACjF,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,kBAAa,aAAa,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACtF,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,oCAA6B,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC7E,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,kBAAa,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QAC1F,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,iBAAU,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,0BAAmB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAClH,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,uBAAuB,EAAE;IAC9B,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,4BAAuB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACvE,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACAI,IAAM,SAAS,GAAG;IACrB,UAAU,EAAG,WAAW;IACxB,MAAM,EAAG,QAAQ;IACjB,IAAI,EAAG,MAAM;IACb,MAAM,EAAG,QAAQ;CACpB,CAAC;AAEF,AAqHA,IAAM,sBAAsB,GAAG;IAC3B,SAAS,EAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IAC/H,aAAa,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IAC/H,OAAO,EAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACrH,OAAO,EAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACrH,aAAa,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACrH,QAAQ,EAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACrH,QAAQ,EAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACrH,MAAM,EAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IAC/H,MAAM,EAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACrH,QAAQ,EAAO,CAAC,MAAM,EAAE,QAAQ,EAAG,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,EAAE,aAAa,CAAC;IACtM,WAAW,EAAI,CAAC,MAAM,EAAE,QAAQ,EAAG,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IAC1J,MAAM,EAAS,CAAC,MAAM,EAAE,QAAQ,EAAG,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,EAAE,aAAa,CAAC;IACtM,MAAM,EAAS,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACvG,MAAM,EAAS,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACvG,WAAW,EAAI,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IAC5G,UAAU,EAAK,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;IACjG,SAAS,EAAM,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAC3D,MAAM,EAAS,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC;IACvF,MAAM,EAAS,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC;IAC/C,MAAM,EAAS,CAAC,QAAQ,CAAC;IACzB,MAAM,EAAS,CAAC,QAAQ,CAAC;IACzB,QAAQ,EAAO,CAAC,MAAM,EAAE,QAAQ,EAAG,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ;QACvH,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,OAAO,EAAE,aAAa,CAAC;CACtI,CAAC;AAEF,AAKA;AACA,AAAO,IAAM,wBAAwB,GAAG,UAAA,IAAI;IACxC,IAAI,MAAM,GAAG,sBAAsB,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,IAAI,IAAI,KAAK,QAAQ,CAAC,OAAO,EAAE;QAC3B,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;KAClC;IACD,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,YAAY;QACtG,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,EAAE;QACjF,OAAO,MAAM,CAAC;KACjB;IACD,OAAO,cAAc,CAAC,IAAI,CAAC;CAC9B,CAAC;;;;;;;;;;;;AAaF,AAAO,IAAM,iBAAiB,GAAG,UAAA,MAAM;IACnC,IAAI,MAAM,CAAC,qBAAqB,CAAC,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;QACxD,OAAO,cAAc,CAAC,MAAM,CAAC;KAChC;IACD,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,IAAI,CAAC;CACjH,CAAC;;AC1LF,IAAMA,UAAO,GAAG,KAAK,CAAC;AACtB,IAAMC,OAAK,GAAG,IAAI,WAAW,CAAC,kBAAkB,CAAC,CAAC;AAClD,IAAMG,aAAW,GAAG,IAAI,GAAG,CAAC;IACxB,SAAS;IACT,aAAa;IACb,aAAa;IACb,WAAW;IACX,aAAa;IACb,WAAW;IACX,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,SAAS;IACT,cAAc;IACd,WAAW;IACX,aAAa;IACb,WAAW;IACX,UAAU;IACV,gBAAgB;CACnB,CAAC,CAAC;;AAGH,IAAM,oBAAoB,GAAG,UAAC,QAAa;IAAb,yBAAA,EAAA,aAAa;IACvC,QAAQ,CAAC,OAAO,CAAC,UAAA,SAAS;QACtB,IAAIA,aAAW,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACjC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,kBAAkB,EAAE,oBAAoB,EAAO,CAAC,EAAO,CAAC,CAAC,CAAC,CAAC;SACjG;QACD,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KAC5C,CAAC,CAAC;CACN,CAAC;AAEF;AACA,IAAM,iBAAiB,GAAG,UAAC,KAAK,EAAE,QAAQ;IACtC,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC3G,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvC,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC;IAC3C,IAAI,iBAAiB,EAAE,kBAAkB,CAAC;IAC1C,IAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;;IAEpD,IAAI,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,cAAc,EAAE;QAC9C,IAAI,WAAW,EAAE;YACb,IAAM,cAAc,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC;YAClD,iBAAiB,GAAG,oBAAiB,WAAW,6BAAsB,cAAc,OAAG,CAAC;SAC3F;QACD,kBAAkB,GAAG,8BAA2B,SAAS,SAAK,CAAC;KAClE;IACD,IAAM,SAAS,GAAG,sCAAkC,SAAS,GAAG,SAAS,YAAK,iBAAiB,SAAI,kBAAkB,kCAA4B,SAAS,kEACzG,SAAS,SAAK,CAAC;IAChE,IAAM,OAAO,GAAG,EAAC,SAAS,EAAE,iBAAiB,EAAC,CAAE;IAChD,IAAM,UAAU,GAAG,KAAG,qBAAqB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,CAAG,CAAC;IAEjF,OAAO,qHACmB,MAAM,iCAA0B,SAAS,qBAC7D,UAAU,8EAC+C,QAAQ,wBAAmB,SAAS,kIACO,QAAQ,yBAAoB,SAAS,4dAOjG,QAAQ,4BAAuB,IAAI,0EACxB,QAAQ,oBAAe,SAAS,wBAAmB,QAAQ,4BAAuB,IAAI,sFAClF,QAAQ,kCAA6B,SAAS,sCAA+B,QAAQ,+HAI7H,CAAC;CACzB,CAAC;AAEF,IAAM,aAAa,GAAG,UAAA,KAAK;IACvB,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,KAAK,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;QACnB,IAAI,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACxB,IAAI,IAAO,GAAG,WAAK,GAAG,QAAI,CAAC;SAC9B;KACJ,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;CACf,CAAC;AAEF;AACA,IAAM,yBAAyB,GAAG,UAAA,KAAK;IACnC,IAAM,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5B,IAAM,KAAK,GAAG,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;IAC5C,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;QACd,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACjB,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACrC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACtB;KACJ,CAAC,CAAC;IACH,OAAO,aAAa,CAAC,SAAS,CAAC,CAAC;CACnC,CAAC;AAEF;AACA,IAAM,uBAAuB,GAAG,UAAC,KAAK,EAAE,QAAS,EAAE,QAAS;IACxD,IAAM,OAAO,GAAQ,EAAE,CAAC;IACxB,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvC,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,iBAAiB,CAAC;QAC9D,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC;QACzB,qBAAqB,EAAE,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC;QACvD,aAAa,EAAE,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC;KAC1C,CAAC,CAAC;IACH,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,MAAM,KAAK,cAAc,CAAC,MAAM,EAAE;QAClC,OAAO,CAAC,WAAW,GAAG;YAClB,QAAQ,EAAEH,OAAK,CAAC,OAAO,EAAE;YACzB,IAAI,EAAE,SAAS;SAClB,CAAC;QACF,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;KAC9B;SAAM;QACH,SAAS,GAAG,QAAQ,GAAG,kBAAkB,GAAG,eAAe,CAAC;QAC5D,WAAW,GAAG,QAAQ,GAAG,uBAAoB,SAAS,WAAO,GAAG,uBAAoB,SAAS,OAAG,CAAC;QACjG,YAAY,GAAG,cAAc,CAAC;KACjC;IACD,OAAO,CAAC,SAAS,GAAG,eAAe,CAAC;IACpC,IAAM,OAAO,GAAG,QAAQ,GAAG,sBAAsB,GAAG,mBAAmB,CAAC;IACxE,IAAM,UAAU,GAAG,MAAM,KAAK,cAAc,CAAC,MAAM,GAAG,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IAChF,IAAM,UAAU,GAAG,yBAAyB,CAAC,KAAK,CAAC,CAAC;IACpD,IAAM,SAAS,GAAM,SAAS,SAAI,YAAY,eAAS,SAAS,6BAAsB,SAAS,WAAK,WAAW,SAAI,UAAU,SAAI,UAAY,CAAC;IAC9I,IAAM,UAAU,GAAG,qBAAqB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAE5E,OAAO,kBAAgB,OAAO,sJACU,SAAS,mCAC9B,UAAU,8cAMN,CAAC;CAC3B,CAAC;AAEF,IAAM,mBAAmB,GAAG,UAAC,KAAK;IAC9B,IAAM,WAAW,GAAG,sBAAoB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,OAAI,CAAC;IACjE,IAAI,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC/C,IAAI,aAAa,GAAG,EAAE,CAAC;;IAEvB,IAAI,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,aAAa,IAAI,aAAa,KAAK,MAAM,CAAC,EAAE;QACnF,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QACrC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC5B,aAAa,GAAG,QAAQ,CAAC;KAC5B;IACD,QAAQ,aAAa;QACjB,KAAK,QAAQ;YACT,aAAa,GAAG,OAAK,WAAW,oCAAiC,CAAC;YAClE,MAAM;QACV,KAAK,YAAY;YACb,IAAI,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE;gBAC9B,aAAa,GAAG,OAAK,WAAW,wBAAmB,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAG,CAAC;gBAElF,IAAI,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;oBAC3B,aAAa,IAAI,QAAM,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,OAAI,CAAC;iBACxD;qBAAM;oBACH,aAAa,IAAI,KAAK,CAAC;iBAC1B;aACJ;YACD,MAAM;QACV,KAAK,gBAAgB;YACjB,IAAI,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;gBAC3B,aAAa,GAAG,OAAK,WAAW,4BAAuB,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,QAAK,CAAC;aACzF;YACD,MAAM;QACV,KAAK,gBAAgB;YACjB,aAAa,GAAG,OAAK,WAAW,wBAAqB,CAAC;YACtD,MAAM;QACV,KAAK,aAAa;YACd,aAAa,GAAG,OAAK,WAAW,qBAAkB,CAAC;YACnD,MAAM;QACV,KAAK,QAAQ;YACT,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACrB,aAAa,GAAG,OAAK,WAAW,oBAAe,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAK,CAAC;aAC3E;YACD,MAAM;QACV,KAAK,QAAQ;YACT,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACrB,aAAa,GAAG,OAAK,WAAW,oBAAe,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAK,CAAC;aAC3E;YACD,MAAM;KACb;IACD,OAAO,aAAa,CAAC;CACxB,CAAC;AAEF,QAAQ,CAAC,iBAAiB,EAAE;IACxB,OAAO;QACH,QAAQ,EAAE,CAAC,UAAU,CAAC;QACtB,QAAQ,EAAE,UAAC,IAAa,EAAE,MAAM;YAC5B,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;;gBAEtB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,IAAI,IAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAU,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxH,OAAO;iBACV;gBACD,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;gBACrC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACvC;SACJ;QACD,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAE,WAAW;YAC5B,IAAI,aAAa,GAAG,EAAE,CAAC;YACvB,IAAI,cAAc,GAAG,EAAE,CAAC;YACxB,IAAI,iBAAiB,GAAG,EAAE,CAAC;YAC3B,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,WAAW,EAAE;gBACb,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBACpD,aAAa,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,aAAa,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,OAAO,IAAI,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACnJ,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAC7C,IAAM,YAAY,IAAI,QAAQ,KAAK,SAAS,CAAC,MAAM,IAAI,QAAQ,KAAK,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,CAAC,CAAC;gBACxH,cAAc,GAAG,YAAY,GAAG,uBAAuB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACrF,iBAAiB,GAAG,YAAY,IAAI,QAAQ,KAAK,SAAS,CAAC,UAAU,IAAI,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,OAAO,GAAG,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC/J,UAAU,GAAG,oBAAiB,QAAQ,eAAW,CAAC;aACrD;YACD,IAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACjD,IAAM,UAAU,GAAG,qJAA2I,CAAC;YAC/J,IAAI,cAAc,GAAG,EAAE,CAAC;YACxB,IAAI,cAAc,GAAG,EAAE,CAAC;YAExB,IAAI,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;gBAChC,KAAK,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;gBACtC,cAAc,GAAM,UAAU,mCAA6B,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,QAAI,CAAC;aACvF;iBAAM,IAAI,CAAC,aAAa,IAAI,aAAa,KAAK,MAAM,KAAK,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;gBACzF,cAAc,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAC5C,IAAI,cAAc,EAAE;oBAChB,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;oBACrC,KAAK,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;oBACtC,cAAc,GAAM,UAAU,mCAA6B,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAY,cAAc,WAAK,cAAgB,CAAC;iBAClI;aACJ;YAED,OAAO,MAAID,UAAO,uBAAkB,aAAa,CAAC,KAAK,CAAC,SAAI,UAAU,+BAC5D,aAAa,8BACb,cAAc,8BACd,iBAAiB,8BACjB,cAAgB,CAAC;SAC9B;QACD,IAAI,EAAE,UAAC,KAAK,EAAE,MAAM;YAChB,IAAI,cAAc,GAAG,EAAE,CAAC;YAExB,IAAI,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;gBAChC,cAAc,GAAG,sBAAsB,CAAC;aAC3C;YACD,OAAU,cAAc,UAAKA,UAAO,MAAG,CAAC;SAC3C;KACJ,CAAC;CACL,CAAC,CAAC;;ACzPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,IAAM,yBAAyB,GAAG,UAAC,KAAK;IACpC,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;IACnE,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC;IAClF,OAAO,4EACO,GAAG,SAAI,SAAS,8BACZ,iBAAiB,CAAC,KAAK,CAAC,sCACjB,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,iEACd,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,kDACpB,GAAG,kCACd,CAAC;CAC3B,CAAC;AAEF,QAAQ,CAAC,cAAc,EAAE;IACrB,OAAO;QACH,GAAG,EAAE,UAAC,KAAK;YACP,OAAO,MAAIA,UAAO,oBAAe,aAAa,CAAC,KAAK,CAAC,+BAC3C,yBAAyB,CAAC,KAAK,CAAC,uhBAKsB,CAAC;SACpE;QACD,IAAI,EAAE,cAAM,OAAA,2BAAyBA,UAAO,MAAG,GAAA;KAClD,CAAC;CACL,CAAC,CAAC;;AC3BH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,IAAM,qBAAqB,GAAG;IAC1B,OAAO,ghBAKW,CAAC;CACtB,CAAC;AAEF;AACA,IAAM,gBAAgB,GAAG,UAAC,KAAK;IAC3B,IAAM,MAAM,GAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACpC,IAAM,UAAU,GAAG,MAAM,GAAG,4BAAyB,MAAM,QAAI,GAAG,EAAE,CAAC;IACrE,IAAM,cAAc,GAAG,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,qBAAqB,EAAE,GAAG,EAAE,CAAC;IAC5F,IAAM,QAAQ,GAAG,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,sBAAsB;SAC1D,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,0BAA0B,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;IAC5F,IAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,gBAAa,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,OAAG,GAAG,EAAE,CAAC;IACpF,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;IACnE,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC;IAClF,OAAO,mEACO,GAAG,SAAI,SAAS,2BAAqB,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,gCACjD,iBAAiB,CAAC,KAAK,CAAC,mEACY,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,SAAI,QAAQ,4CACvD,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,gCACjC,UAAU,8BACV,QAAQ,gDACQ,GAAG,2BACvB,cAAc,iCACL,CAAC;CAC3B,CAAC;AAEF,QAAQ,CAAC,qBAAqB,EAAE;IAC5B,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,0BAAqB,aAAa,CAAC,KAAK,CAAC,mCAChD,gBAAgB,CAAC,KAAK,CAAG,GAAA;QAC3C,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACrCH,IAAMA,UAAO,GAAG,KAAK,CAAC;AACtB,IAAMG,YAAU,GAAG,SAAS,CAAC;AAC7B,IAAMF,OAAK,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;AAExC,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,QAAQ,EAAE,UAAC,IAAa,EAAE,MAAM;;YAE5B,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACtB,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,SAAS;oBACjD,OAAa,SAAU,CAAC,IAAI,KAAK,iBAAiB,IAAU,SAAU,CAAC,IAAI,KAAK,uBAAuB,CAAC;iBAC3G,CAAC,CAAC;gBACH,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,gBAAgB,GAAG,OAAO,GAAG,MAAM,CAAC,CAAC;aACrE;iBAAM;gBACH,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;aACxC;YAED,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAKE,YAAU,GAAA,CAAC,CAAC;YACtE,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,MAAM,GAAA,CAAC,CAAC;YAErE,IAAI,CAAC,WAAW,EAAE;gBACd,OAAO;aACV;YACD,IAAM,SAAS,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEpD,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO;aACV;YACD,mBAAmB,CAAC,IAAI,EAAE,SAAS,EAAE,cAAc,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;SACzE;QACD,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM;YACf,IAAM,OAAO,GAAGF,OAAK,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC/B,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1D,OAAO,MAAID,UAAO,mBAAa,OAAO,yCAAmC,OAAO,kDAAyC,aAAa,CAAC,KAAK,CAAC,MAAG,CAAC;SACpJ;QACD,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;QAC3B,OAAO,EAAE,UAAC,KAAK,EAAE,MAAM;YACnB,IAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YACvD,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;YACpD,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAChD,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;YACpD,OAAO,QAAQ,CAAC;SACnB;KACJ,CAAC;CACL,CAAC,CAAC;;AChDH,IAAMA,UAAO,GAAG,UAAU,CAAC;AAE3B,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,SAAI,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACjF,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,aAAa,CAAC;AAE9B,QAAQ,CAAC,aAAa,EAAE;IACpB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,SAAI,iBAAiB,CAAC,KAAK,CAAC,SAAI,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACjF,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAOA,UAAO,GAAG,KAAK,CAAC;AAEvB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,wEAA+D,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC/G,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,gBAAW,iBAAiB,CAAC,KAAK,CAAC,wBAAiB,cAAc,CAAC,KAAK,CAAC,MAAG,GAAA;QACrG,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACRH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,SAAS,EAAE;IAChB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,2BAAsB,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACtE,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,SAAS,CAAC;AAE1B,QAAQ,CAAC,YAAY,EAAE;IACnB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,6EAAoE,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QACpH,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,UAAU,EAAE;IACjB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,iBAAY,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5D,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACPH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,WAAW,EAAE;IAClB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK,IAAI,OAAA,MAAIA,UAAO,mCAA4B,aAAa,CAAC,KAAK,CAAC,MAAG,GAAA;QAC5E,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ACNH,IAAMA,UAAO,GAAG,MAAM,CAAC;AACvB,IAAMC,OAAK,GAAG,IAAI,WAAW,CAAC,iBAAiB,CAAC,CAAC;AAEjD,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK;YACN,IAAM,OAAO,GAAGA,OAAK,CAAC,OAAO,EAAE,CAAC;YAChC,OAAO,MAAID,UAAO,uBAAkB,OAAO,0BAAmB,aAAa,CAAC,KAAK,CAAC,wDAChD,OAAO,sBAAkB,CAAC;SAC/D;QACD,IAAI,EAAE,cAAM,OAAA,qBAAmBA,UAAO,MAAG,GAAA;KAC5C,CAAC;CACL,CAAC,CAAC;;ACbH,IAAMA,UAAO,GAAG,KAAK,CAAC;AAEtB,QAAQ,CAAC,eAAe,EAAE;IACtB,OAAO;QACH,GAAG,EAAE,UAAA,KAAK;YACN,IAAI,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;gBAC3B,IAAM,eAAe,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;gBACjE,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;aACjD;YACD,OAAO,MAAIA,UAAO,sBAAiB,aAAa,CAAC,KAAK,CAAC,qBAAgB,CAAC;SAC3E;QACD,IAAI,EAAE,cAAM,OAAA,OAAKA,UAAO,MAAG,GAAA;KAC9B,CAAC;CACL,CAAC,CAAC;;ICkFU,uBAAuB,GAAG,eAAQ;;ACjG/C;;GAEG;;;;"}
