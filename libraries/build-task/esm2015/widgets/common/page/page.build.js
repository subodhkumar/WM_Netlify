import { Attribute, Element, Text } from '@angular/compiler';
import { isMobileApp } from '@wm/core';
import { getAttrMarkup, register } from '@wm/transpiler';
const tagName = 'div';
const findChild = (node, childName) => {
    const child = node && node.children.find(e => (e instanceof Element && e.name === childName));
    return child;
};
const ɵ0 = findChild;
const createElement = name => {
    return new Element(name, [], [], noSpan, noSpan, noSpan);
};
const ɵ1 = createElement;
const addAtrribute = (node, name, value) => {
    const attr = new Attribute(name, value, noSpan, noSpan);
    node.attrs.push(attr);
};
const ɵ2 = addAtrribute;
const noSpan = {};
register('wm-page', () => {
    return {
        template: (node) => {
            if (isMobileApp()) {
                const pageContentNode = findChild(findChild(node, 'wm-content'), 'wm-page-content');
                if (pageContentNode) {
                    const conditionalNode = createElement('ng-container');
                    addAtrribute(conditionalNode, '*ngIf', 'compilePageContent');
                    const loader = createElement('div');
                    addAtrribute(loader, 'wmPageContentLoader', '');
                    addAtrribute(loader, '*ngIf', '!showPageContent');
                    conditionalNode.children = conditionalNode.children.concat(pageContentNode.children);
                    conditionalNode.children.push(new Text('{{onPageContentReady()}}', null));
                    pageContentNode.children = [conditionalNode, loader];
                }
            }
        },
        pre: attrs => `<${tagName} wmPage data-role="pageContainer" ${getAttrMarkup(attrs)}>`,
        post: () => `</${tagName}>`
    };
});
export default () => { };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5idWlsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsid2lkZ2V0cy9jb21tb24vcGFnZS9wYWdlLmJ1aWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFtQixJQUFJLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU5RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV0QixNQUFNLFNBQVMsR0FBRyxDQUFDLElBQWEsRUFBRSxTQUFpQixFQUFXLEVBQUU7SUFDNUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksT0FBTyxJQUFLLENBQWEsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMzRyxPQUFPLEtBQWdCLENBQUM7QUFDNUIsQ0FBQyxDQUFDOztBQUVGLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFO0lBQ3pCLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUM7O0FBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFhLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxFQUFFO0lBQ2hFLE1BQU0sSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQzs7QUFFRixNQUFNLE1BQU0sR0FBSSxFQUFzQixDQUFDO0FBRXZDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBa0IsRUFBRTtJQUNwQyxPQUFPO1FBQ0gsUUFBUSxFQUFFLENBQUMsSUFBYSxFQUFFLEVBQUU7WUFDeEIsSUFBSSxXQUFXLEVBQUUsRUFBRTtnQkFDZixNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUNwRixJQUFJLGVBQWUsRUFBRTtvQkFDakIsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN0RCxZQUFZLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO29CQUM3RCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3BDLFlBQVksQ0FBQyxNQUFNLEVBQUUscUJBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ2hELFlBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7b0JBQ2xELGVBQWUsQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUNyRixlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUMxRSxlQUFlLENBQUMsUUFBUSxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUN4RDthQUNKO1FBQ0wsQ0FBQztRQUNELEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksT0FBTyxxQ0FBcUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHO1FBQ3JGLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLE9BQU8sR0FBRztLQUM5QixDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCxlQUFlLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0dHJpYnV0ZSwgRWxlbWVudCwgUGFyc2VTb3VyY2VTcGFuLCBUZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuXG5pbXBvcnQgeyBpc01vYmlsZUFwcCB9IGZyb20gJ0B3bS9jb3JlJztcbmltcG9ydCB7IGdldEF0dHJNYXJrdXAsIElCdWlsZFRhc2tEZWYsIHJlZ2lzdGVyIH0gZnJvbSAnQHdtL3RyYW5zcGlsZXInO1xuXG5jb25zdCB0YWdOYW1lID0gJ2Rpdic7XG5cbmNvbnN0IGZpbmRDaGlsZCA9IChub2RlOiBFbGVtZW50LCBjaGlsZE5hbWU6IHN0cmluZyk6IEVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGNoaWxkID0gbm9kZSAmJiBub2RlLmNoaWxkcmVuLmZpbmQoZSA9PiAoZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgKGUgYXMgRWxlbWVudCkubmFtZSA9PT0gY2hpbGROYW1lKSk7XG4gICAgcmV0dXJuIGNoaWxkIGFzIEVsZW1lbnQ7XG59O1xuXG5jb25zdCBjcmVhdGVFbGVtZW50ID0gbmFtZSA9PiB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50KG5hbWUsIFtdLCBbXSwgbm9TcGFuLCBub1NwYW4sIG5vU3Bhbik7XG59O1xuXG5jb25zdCBhZGRBdHJyaWJ1dGUgPSAobm9kZTogRWxlbWVudCwgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgYXR0ciA9IG5ldyBBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIG5vU3Bhbiwgbm9TcGFuKTtcbiAgICBub2RlLmF0dHJzLnB1c2goYXR0cik7XG59O1xuXG5jb25zdCBub1NwYW4gPSAoe30gYXMgUGFyc2VTb3VyY2VTcGFuKTtcblxucmVnaXN0ZXIoJ3dtLXBhZ2UnLCAoKTogSUJ1aWxkVGFza0RlZiA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGU6IChub2RlOiBFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNNb2JpbGVBcHAoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VDb250ZW50Tm9kZSA9IGZpbmRDaGlsZChmaW5kQ2hpbGQobm9kZSwgJ3dtLWNvbnRlbnQnKSwgJ3dtLXBhZ2UtY29udGVudCcpO1xuICAgICAgICAgICAgICAgIGlmIChwYWdlQ29udGVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uYWxOb2RlID0gY3JlYXRlRWxlbWVudCgnbmctY29udGFpbmVyJyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZEF0cnJpYnV0ZShjb25kaXRpb25hbE5vZGUsICcqbmdJZicsICdjb21waWxlUGFnZUNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9hZGVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZEF0cnJpYnV0ZShsb2FkZXIsICd3bVBhZ2VDb250ZW50TG9hZGVyJywgJycpO1xuICAgICAgICAgICAgICAgICAgICBhZGRBdHJyaWJ1dGUobG9hZGVyLCAnKm5nSWYnLCAnIXNob3dQYWdlQ29udGVudCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25hbE5vZGUuY2hpbGRyZW4gPSBjb25kaXRpb25hbE5vZGUuY2hpbGRyZW4uY29uY2F0KHBhZ2VDb250ZW50Tm9kZS5jaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbmFsTm9kZS5jaGlsZHJlbi5wdXNoKG5ldyBUZXh0KCd7e29uUGFnZUNvbnRlbnRSZWFkeSgpfX0nLCBudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Tm9kZS5jaGlsZHJlbiA9IFtjb25kaXRpb25hbE5vZGUsIGxvYWRlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcmU6IGF0dHJzID0+IGA8JHt0YWdOYW1lfSB3bVBhZ2UgZGF0YS1yb2xlPVwicGFnZUNvbnRhaW5lclwiICR7Z2V0QXR0ck1hcmt1cChhdHRycyl9PmAsXG4gICAgICAgIHBvc3Q6ICgpID0+IGA8LyR7dGFnTmFtZX0+YFxuICAgIH07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge307XG4iXX0=