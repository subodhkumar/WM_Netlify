import { DataSource } from '@wm/core';
import DatasetUtil from '../util/dataset-util';
export class BaseVariable {
    execute(operation, options) {
        let returnVal;
        switch (operation) {
            case DataSource.Operation.GET_NAME:
                returnVal = this.name;
                break;
            case DataSource.Operation.GET_UNIQUE_IDENTIFIER:
                returnVal = this._id;
                break;
            case DataSource.Operation.GET_CONTEXT_IDENTIFIER:
                returnVal = this._context;
                break;
            case DataSource.Operation.ADD_ITEM:
                returnVal = this.addItem(options.item);
                break;
            case DataSource.Operation.SET_ITEM:
                returnVal = this.setItem(options.prevItem, options.item);
                break;
            case DataSource.Operation.REMOVE_ITEM:
                returnVal = this.removeItem(options.item);
                break;
        }
        return returnVal;
    }
    getData() {
        return this.dataSet;
    }
    setData(dataSet) {
        if (DatasetUtil.isValidDataset(dataSet, this.isList)) {
            this.dataSet = dataSet;
        }
        return this.dataSet;
    }
    getValue(key, index) {
        return DatasetUtil.getValue(this.dataSet, key, index, this.isList);
    }
    setValue(key, value) {
        return DatasetUtil.setValue(this.dataSet, key, value, this.isList);
    }
    getItem(index) {
        return DatasetUtil.getItem(this.dataSet, index, this.isList);
    }
    /**
     *
     * @param index, a number in ideal case
     *        it can be the object to be replaced by the passed value
     * @param value
     * @returns {any}
     */
    setItem(index, value) {
        return DatasetUtil.setItem(this.dataSet, index, value, this.isList);
    }
    addItem(value, index) {
        return DatasetUtil.addItem(this.dataSet, value, index, this.isList);
    }
    removeItem(index, exactMatch) {
        return DatasetUtil.removeItem(this.dataSet, index, exactMatch);
    }
    clearData() {
        this.dataSet = DatasetUtil.getValidDataset(this.isList);
        return this.dataSet;
    }
    getCount() {
        return DatasetUtil.getCount(this.dataSet, this.isList);
    }
    /**
     * Return the prefab name if the variable is form a prefab
     * @returns {string}
     */
    getPrefabName() {
        // __self__ is a prefab name given to a prefab which is run in preview mode
        return this._context && (this._context.prefabName !== '__self__' && this._context.prefabName);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12YXJpYWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS92YXJpYWJsZXMvIiwic291cmNlcyI6WyJtb2RlbC9iYXNlLXZhcmlhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsTUFBTSxPQUFnQixZQUFZO0lBWTlCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTztRQUN0QixJQUFJLFNBQVMsQ0FBQztRQUNkLFFBQVEsU0FBUyxFQUFFO1lBQ2YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVE7Z0JBQzlCLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUN0QixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLHFCQUFxQjtnQkFDM0MsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCO2dCQUM1QyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDMUIsTUFBTTtZQUNWLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRO2dCQUM5QixTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZDLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUTtnQkFDOUIsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pELE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVztnQkFDakMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxQyxNQUFNO1NBQ2I7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQVk7UUFDaEIsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUMvQixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQzVCLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBYTtRQUNqQixPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxPQUFPLENBQUMsS0FBVSxFQUFFLEtBQVU7UUFDMUIsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFVLEVBQUUsS0FBYztRQUM5QixPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQVUsRUFBRSxVQUFvQjtRQUN2QyxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFNBQVM7UUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTtRQUNKLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsYUFBYTtRQUNULDJFQUEyRTtRQUMzRSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsS0FBSyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnQHdtL2NvcmUnO1xuXG5pbXBvcnQgRGF0YXNldFV0aWwgZnJvbSAnLi4vdXRpbC9kYXRhc2V0LXV0aWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVZhcmlhYmxlIHtcblxuICAgIHByb3RlY3RlZCBfaWQ6IHN0cmluZztcblxuICAgIG5hbWU6IHN0cmluZztcbiAgICBvd25lcjogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgaXNMaXN0OiBib29sZWFuO1xuICAgIGRhdGFTZXQ6IGFueTtcbiAgICBkYXRhQmluZGluZzogYW55O1xuICAgIF9jb250ZXh0OiBhbnk7XG5cbiAgICBleGVjdXRlKG9wZXJhdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBsZXQgcmV0dXJuVmFsO1xuICAgICAgICBzd2l0Y2ggKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5HRVRfTkFNRTpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0aGlzLm5hbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLkdFVF9VTklRVUVfSURFTlRJRklFUjpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0aGlzLl9pZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uR0VUX0NPTlRFWFRfSURFTlRJRklFUjpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0aGlzLl9jb250ZXh0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5BRERfSVRFTTpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0aGlzLmFkZEl0ZW0ob3B0aW9ucy5pdGVtKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uU0VUX0lURU06XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdGhpcy5zZXRJdGVtKG9wdGlvbnMucHJldkl0ZW0sIG9wdGlvbnMuaXRlbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLlJFTU9WRV9JVEVNOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMucmVtb3ZlSXRlbShvcHRpb25zLml0ZW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXR1cm5WYWw7XG4gICAgfVxuXG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNldDtcbiAgICB9XG5cbiAgICBzZXREYXRhKGRhdGFTZXQ6IGFueSkge1xuICAgICAgICBpZiAoRGF0YXNldFV0aWwuaXNWYWxpZERhdGFzZXQoZGF0YVNldCwgdGhpcy5pc0xpc3QpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTZXQgPSBkYXRhU2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXQ7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoa2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRVdGlsLmdldFZhbHVlKHRoaXMuZGF0YVNldCwga2V5LCBpbmRleCwgdGhpcy5pc0xpc3QpO1xuICAgIH1cblxuICAgIHNldFZhbHVlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5zZXRWYWx1ZSh0aGlzLmRhdGFTZXQsIGtleSwgdmFsdWUsIHRoaXMuaXNMaXN0KTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRVdGlsLmdldEl0ZW0odGhpcy5kYXRhU2V0LCBpbmRleCwgdGhpcy5pc0xpc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4LCBhIG51bWJlciBpbiBpZGVhbCBjYXNlXG4gICAgICogICAgICAgIGl0IGNhbiBiZSB0aGUgb2JqZWN0IHRvIGJlIHJlcGxhY2VkIGJ5IHRoZSBwYXNzZWQgdmFsdWVcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7YW55fVxuICAgICAqL1xuICAgIHNldEl0ZW0oaW5kZXg6IGFueSwgdmFsdWU6IGFueSkge1xuICAgICAgICByZXR1cm4gRGF0YXNldFV0aWwuc2V0SXRlbSh0aGlzLmRhdGFTZXQsIGluZGV4LCB2YWx1ZSwgdGhpcy5pc0xpc3QpO1xuICAgIH1cblxuICAgIGFkZEl0ZW0odmFsdWU6IGFueSwgaW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRVdGlsLmFkZEl0ZW0odGhpcy5kYXRhU2V0LCB2YWx1ZSwgaW5kZXgsIHRoaXMuaXNMaXN0KTtcbiAgICB9XG5cbiAgICByZW1vdmVJdGVtKGluZGV4OiBhbnksIGV4YWN0TWF0Y2g/OiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5yZW1vdmVJdGVtKHRoaXMuZGF0YVNldCwgaW5kZXgsIGV4YWN0TWF0Y2gpO1xuICAgIH1cblxuICAgIGNsZWFyRGF0YSgpIHtcbiAgICAgICAgdGhpcy5kYXRhU2V0ID0gRGF0YXNldFV0aWwuZ2V0VmFsaWREYXRhc2V0KHRoaXMuaXNMaXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNldDtcbiAgICB9XG5cbiAgICBnZXRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRVdGlsLmdldENvdW50KHRoaXMuZGF0YVNldCwgdGhpcy5pc0xpc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgcHJlZmFiIG5hbWUgaWYgdGhlIHZhcmlhYmxlIGlzIGZvcm0gYSBwcmVmYWJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldFByZWZhYk5hbWUoKSB7XG4gICAgICAgIC8vIF9fc2VsZl9fIGlzIGEgcHJlZmFiIG5hbWUgZ2l2ZW4gdG8gYSBwcmVmYWIgd2hpY2ggaXMgcnVuIGluIHByZXZpZXcgbW9kZVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dCAmJiAodGhpcy5fY29udGV4dC5wcmVmYWJOYW1lICE9PSAnX19zZWxmX18nICYmIHRoaXMuX2NvbnRleHQucHJlZmFiTmFtZSk7XG4gICAgfVxufVxuIl19