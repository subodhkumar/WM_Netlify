import { DataSource, isDefined } from '@wm/core';
import { VariableManagerFactory } from '../../factory/variable-manager.factory';
import { BaseVariable } from '../base-variable';
import { VARIABLE_CONSTANTS } from '../../constants/variables.constants';
import { appManager } from '../../util/variable/variables.utils';
const getManager = () => {
    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.MODEL);
};
const ɵ0 = getManager;
export class ModelVariable extends BaseVariable {
    constructor(variable) {
        super();
        Object.assign(this, variable);
    }
    init() {
        if (this.isList) {
            getManager().removeFirstEmptyObject(this);
        }
        getManager().initBinding(this, 'dataBinding', 'dataSet');
    }
    execute(operation, options) {
        let returnVal = super.execute(operation, options);
        if (isDefined(returnVal)) {
            return returnVal;
        }
        switch (operation) {
            case DataSource.Operation.IS_API_AWARE:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_CRUD:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_DISTINCT_API:
                returnVal = false;
                break;
            case DataSource.Operation.IS_PAGEABLE:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_SERVER_FILTER:
                returnVal = false;
                break;
            case DataSource.Operation.IS_BOUND_TO_LOCALE:
                returnVal = this.isBoundToLocale();
                break;
            case DataSource.Operation.GET_DEFAULT_LOCALE:
                returnVal = this.getDefaultLocale();
                break;
            default:
                returnVal = {};
                break;
        }
        return returnVal;
    }
    isBoundToLocale() {
        return this.name === 'supportedLocale';
    }
    getDefaultLocale() {
        return appManager.getSelectedLocale();
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwtdmFyaWFibGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vdmFyaWFibGVzLyIsInNvdXJjZXMiOlsibW9kZWwvdmFyaWFibGUvbW9kZWwtdmFyaWFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFOUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVqRSxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDcEIsT0FBTyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pFLENBQUMsQ0FBQzs7QUFFRixNQUFNLE9BQU8sYUFBYyxTQUFRLFlBQVk7SUFLM0MsWUFBWSxRQUFhO1FBQ3JCLEtBQUssRUFBRSxDQUFDO1FBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixVQUFVLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QztRQUVELFVBQVUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU87UUFDdEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEQsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFFRCxRQUFRLFNBQVMsRUFBRTtZQUNmLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZO2dCQUNsQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWE7Z0JBQ25DLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMscUJBQXFCO2dCQUMzQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLFdBQVc7Z0JBQ2pDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCO2dCQUM1QyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLGtCQUFrQjtnQkFDeEMsU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDbkMsTUFBTTtZQUNWLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0I7Z0JBQ3hDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDcEMsTUFBTTtZQUNWO2dCQUNJLFNBQVMsR0FBRyxFQUFFLENBQUM7Z0JBQ2YsTUFBTTtTQUNiO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVELGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUM7SUFDM0MsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE9BQU8sVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDMUMsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSwgSURhdGFTb3VyY2UsIGlzRGVmaW5lZCB9IGZyb20gJ0B3bS9jb3JlJztcblxuaW1wb3J0IHsgVmFyaWFibGVNYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4uLy4uL2ZhY3RvcnkvdmFyaWFibGUtbWFuYWdlci5mYWN0b3J5JztcbmltcG9ydCB7IEJhc2VWYXJpYWJsZSB9IGZyb20gJy4uL2Jhc2UtdmFyaWFibGUnO1xuaW1wb3J0IHsgVkFSSUFCTEVfQ09OU1RBTlRTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3ZhcmlhYmxlcy5jb25zdGFudHMnO1xuaW1wb3J0IHsgYXBwTWFuYWdlciB9IGZyb20gJy4uLy4uL3V0aWwvdmFyaWFibGUvdmFyaWFibGVzLnV0aWxzJztcblxuY29uc3QgZ2V0TWFuYWdlciA9ICgpID0+IHtcbiAgICByZXR1cm4gVmFyaWFibGVNYW5hZ2VyRmFjdG9yeS5nZXQoVkFSSUFCTEVfQ09OU1RBTlRTLkNBVEVHT1JZLk1PREVMKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBNb2RlbFZhcmlhYmxlIGV4dGVuZHMgQmFzZVZhcmlhYmxlIGltcGxlbWVudHMgSURhdGFTb3VyY2Uge1xuXG4gICAgdHlwZTogYW55O1xuICAgIHNhdmVJblBob25lZ2FwOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcih2YXJpYWJsZTogYW55KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcyBhcyBhbnksIHZhcmlhYmxlKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5pc0xpc3QpIHtcbiAgICAgICAgICAgIGdldE1hbmFnZXIoKS5yZW1vdmVGaXJzdEVtcHR5T2JqZWN0KHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0TWFuYWdlcigpLmluaXRCaW5kaW5nKHRoaXMsICdkYXRhQmluZGluZycsICdkYXRhU2V0Jyk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZShvcGVyYXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHJldHVyblZhbCA9IHN1cGVyLmV4ZWN1dGUob3BlcmF0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChyZXR1cm5WYWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uSVNfQVBJX0FXQVJFOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5TVVBQT1JUU19DUlVEOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5TVVBQT1JUU19ESVNUSU5DVF9BUEk6XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLklTX1BBR0VBQkxFOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5TVVBQT1JUU19TRVJWRVJfRklMVEVSOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5JU19CT1VORF9UT19MT0NBTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdGhpcy5pc0JvdW5kVG9Mb2NhbGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uR0VUX0RFRkFVTFRfTE9DQUxFOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMuZ2V0RGVmYXVsdExvY2FsZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB7fTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgIH1cblxuICAgIGlzQm91bmRUb0xvY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSA9PT0gJ3N1cHBvcnRlZExvY2FsZSc7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdExvY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIGFwcE1hbmFnZXIuZ2V0U2VsZWN0ZWRMb2NhbGUoKTtcbiAgICB9XG5cbn1cbiJdfQ==