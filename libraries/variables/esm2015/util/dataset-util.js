export default class DatasetUtil {
    static isValidDataset(dataSet, isList) {
        if (!dataSet) {
            return false;
        }
        // check array type dataset for list type variable
        if (isList && !_.isArray(dataSet)) {
            return false;
        }
        // change the dataSet
        return dataSet;
    }
    static getValue(dataSet, key, index, isList) {
        index = index || 0;
        // return the value against the specified key
        return isList ? dataSet[index][key] : dataSet[key];
    }
    static setValue(dataSet, key, value, isList) {
        // check param sanity
        if (key && !isList) {
            dataSet[key] = value;
        }
        // return the new dataSet
        return dataSet;
    }
    static getItem(dataSet, index, isList) {
        // return the object against the specified index
        return isList ? dataSet[index] : dataSet;
    }
    static setItem(dataSet, i, value, isList) {
        let index;
        // check param sanity
        if (_.isUndefined(i) || !isList) {
            return dataSet;
        }
        if (_.isObject(i)) {
            index = _.findIndex(dataSet, i);
        }
        else {
            index = i;
        }
        if (index > -1) {
            // set the value against the specified index
            dataSet[index] = value;
        }
        // return the new dataSet
        return dataSet;
    }
    static addItem(dataSet, value, index, isList) {
        // check param sanity
        if (_.isUndefined(value) || !isList) {
            return dataSet;
        }
        // check for index sanity
        index = index !== undefined ? index : dataSet.length;
        // set the value against the specified index
        dataSet.splice(index, 0, value);
        // return the new dataSet
        return dataSet;
    }
    /**
     *
     * @param dataSet
     * @param i, can be index value of the object/element in array
     *      or
     * the whole object which needs to be removed
     * @param exactMatch
     * @returns {any}
     */
    static removeItem(dataSet, i, exactMatch) {
        let index;
        // check for index sanity
        i = i !== undefined ? i : dataSet.length - 1;
        if (_.isObject(i)) {
            index = _.findIndex(dataSet, i);
            // When exactMatch property is set to true delete only when every property values are same*/
            if (index > -1 && (!exactMatch || (exactMatch && _.isEqual(dataSet[index], i)))) {
                dataSet.splice(index, 1);
            }
        }
        else {
            dataSet.splice(i, 1);
        }
        // return the new dataSet
        return dataSet;
    }
    static getValidDataset(isList) {
        return isList ? [] : {};
    }
    static getCount(dataSet, isList) {
        return isList ? dataSet.length : Object.keys(dataSet).length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNldC11dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL3ZhcmlhYmxlcy8iLCJzb3VyY2VzIjpbInV0aWwvZGF0YXNldC11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sV0FBVztJQUU1QixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxNQUFPO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELGtEQUFrRDtRQUNsRCxJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxxQkFBcUI7UUFDckIsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTztRQUN4QyxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUVuQiw2Q0FBNkM7UUFDN0MsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU87UUFDeEMscUJBQXFCO1FBQ3JCLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDeEI7UUFFRCx5QkFBeUI7UUFDekIsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFPO1FBQ2xDLGdEQUFnRDtRQUNoRCxPQUFPLE1B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Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgY29uc3QgXztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YXNldFV0aWwge1xuXG4gICAgc3RhdGljIGlzVmFsaWREYXRhc2V0KGRhdGFTZXQsIGlzTGlzdD8pIHtcbiAgICAgICAgaWYgKCFkYXRhU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBhcnJheSB0eXBlIGRhdGFzZXQgZm9yIGxpc3QgdHlwZSB2YXJpYWJsZVxuICAgICAgICBpZiAoaXNMaXN0ICYmICFfLmlzQXJyYXkoZGF0YVNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoYW5nZSB0aGUgZGF0YVNldFxuICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VmFsdWUoZGF0YVNldCwga2V5LCBpbmRleCwgaXNMaXN0Pykge1xuICAgICAgICBpbmRleCA9IGluZGV4IHx8IDA7XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSB2YWx1ZSBhZ2FpbnN0IHRoZSBzcGVjaWZpZWQga2V5XG4gICAgICAgIHJldHVybiBpc0xpc3QgPyBkYXRhU2V0W2luZGV4XVtrZXldIDogZGF0YVNldFtrZXldO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRWYWx1ZShkYXRhU2V0LCBrZXksIHZhbHVlLCBpc0xpc3Q/KSB7XG4gICAgICAgIC8vIGNoZWNrIHBhcmFtIHNhbml0eVxuICAgICAgICBpZiAoa2V5ICYmICFpc0xpc3QpIHtcbiAgICAgICAgICAgIGRhdGFTZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBuZXcgZGF0YVNldFxuICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SXRlbShkYXRhU2V0LCBpbmRleCwgaXNMaXN0Pykge1xuICAgICAgICAvLyByZXR1cm4gdGhlIG9iamVjdCBhZ2FpbnN0IHRoZSBzcGVjaWZpZWQgaW5kZXhcbiAgICAgICAgcmV0dXJuIGlzTGlzdCA/IGRhdGFTZXRbaW5kZXhdIDogZGF0YVNldDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0SXRlbShkYXRhU2V0LCBpLCB2YWx1ZSwgaXNMaXN0Pykge1xuICAgICAgICBsZXQgaW5kZXg7XG5cbiAgICAgICAgLy8gY2hlY2sgcGFyYW0gc2FuaXR5XG4gICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKGkpIHx8ICFpc0xpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhU2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uaXNPYmplY3QoaSkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gXy5maW5kSW5kZXgoZGF0YVNldCwgaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBhZ2FpbnN0IHRoZSBzcGVjaWZpZWQgaW5kZXhcbiAgICAgICAgICAgIGRhdGFTZXRbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXR1cm4gdGhlIG5ldyBkYXRhU2V0XG4gICAgICAgIHJldHVybiBkYXRhU2V0O1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRJdGVtKGRhdGFTZXQsIHZhbHVlLCBpbmRleCwgaXNMaXN0Pykge1xuICAgICAgICAvLyBjaGVjayBwYXJhbSBzYW5pdHlcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQodmFsdWUpIHx8ICFpc0xpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhU2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGluZGV4IHNhbml0eVxuICAgICAgICBpbmRleCA9IGluZGV4ICE9PSB1bmRlZmluZWQgPyBpbmRleCA6IGRhdGFTZXQubGVuZ3RoO1xuXG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgYWdhaW5zdCB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICAgIGRhdGFTZXQuc3BsaWNlKGluZGV4LCAwLCB2YWx1ZSk7XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBuZXcgZGF0YVNldFxuICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhU2V0XG4gICAgICogQHBhcmFtIGksIGNhbiBiZSBpbmRleCB2YWx1ZSBvZiB0aGUgb2JqZWN0L2VsZW1lbnQgaW4gYXJyYXlcbiAgICAgKiAgICAgIG9yXG4gICAgICogdGhlIHdob2xlIG9iamVjdCB3aGljaCBuZWVkcyB0byBiZSByZW1vdmVkXG4gICAgICogQHBhcmFtIGV4YWN0TWF0Y2hcbiAgICAgKiBAcmV0dXJucyB7YW55fVxuICAgICAqL1xuICAgIHN0YXRpYyByZW1vdmVJdGVtKGRhdGFTZXQsIGksIGV4YWN0TWF0Y2gpIHtcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICAvLyBjaGVjayBmb3IgaW5kZXggc2FuaXR5XG4gICAgICAgIGkgPSBpICE9PSB1bmRlZmluZWQgPyBpIDogZGF0YVNldC5sZW5ndGggLSAxO1xuXG4gICAgICAgIGlmIChfLmlzT2JqZWN0KGkpKSB7XG4gICAgICAgICAgICBpbmRleCA9IF8uZmluZEluZGV4KGRhdGFTZXQsIGkpO1xuICAgICAgICAgICAgLy8gV2hlbiBleGFjdE1hdGNoIHByb3BlcnR5IGlzIHNldCB0byB0cnVlIGRlbGV0ZSBvbmx5IHdoZW4gZXZlcnkgcHJvcGVydHkgdmFsdWVzIGFyZSBzYW1lKi9cbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xICYmICghZXhhY3RNYXRjaCB8fCAoZXhhY3RNYXRjaCAmJiBfLmlzRXF1YWwoZGF0YVNldFtpbmRleF0sIGkpKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhU2V0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhU2V0LnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gdGhlIG5ldyBkYXRhU2V0XG4gICAgICAgIHJldHVybiBkYXRhU2V0O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRWYWxpZERhdGFzZXQoaXNMaXN0Pykge1xuICAgICAgICByZXR1cm4gaXNMaXN0ID8gW10gOiB7fTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Q291bnQoZGF0YVNldCwgaXNMaXN0Pykge1xuICAgICAgICByZXR1cm4gaXNMaXN0ID8gZGF0YVNldC5sZW5ndGggOiBPYmplY3Qua2V5cyhkYXRhU2V0KS5sZW5ndGg7XG4gICAgfVxufVxuIl19