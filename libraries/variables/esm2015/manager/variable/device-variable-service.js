import { $invokeWatchers } from '@wm/core';
import { initiateCallback } from '../../util/variable/variables.utils';
import { CONSTANTS, VARIABLE_CONSTANTS } from '../../constants/variables.constants';
export class DeviceVariableService {
    invoke(variable, options) {
        const operation = this.operations.find(o => {
            return o.name === variable.operation;
        });
        if (operation == null) {
            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null);
            return Promise.reject(`Could not find operation '${variable.operation}' in service '${this.name}'`);
        }
        else if (CONSTANTS.hasCordova) {
            const dataBindings = new Map();
            if (variable.dataBinding !== undefined) {
                Object.entries(variable).forEach(o => {
                    dataBindings.set(o[0], o[1]);
                });
                Object.entries(variable.dataBinding).forEach(o => {
                    dataBindings.set(o[0], o[1]);
                });
            }
            return operation.invoke(variable, options, dataBindings)
                .then(function (data) {
                variable.dataSet = data;
                $invokeWatchers(true);
                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, data);
                return data;
            }, function (reason) {
                variable.dataSet = {};
                $invokeWatchers(true);
                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null);
                return reason;
            });
        }
        else {
            return Promise.resolve()
                .then(() => {
                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, operation.model);
                return operation.model;
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXZhcmlhYmxlLXNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vdmFyaWFibGVzLyIsInNvdXJjZXMiOlsibWFuYWdlci92YXJpYWJsZS9kZXZpY2UtdmFyaWFibGUtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVwRixNQUFNLE9BQU8scUJBQXFCO0lBTTlCLE1BQU0sQ0FBQyxRQUFhLEVBQUUsT0FBWTtRQUM5QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN2QyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtZQUNuQixnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqRSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsNkJBQTZCLFFBQVEsQ0FBQyxTQUFTLGlCQUFpQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUN2RzthQUFNLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRTtZQUM3QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBZSxDQUFDO1lBQzVDLElBQUksUUFBUSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUM3QyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakMsQ0FBQyxDQUFDLENBQUM7YUFDTjtZQUNELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQztpQkFDbkQsSUFBSSxDQUFDLFVBQVUsSUFBSTtnQkFDaEIsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3hCLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ25FLE9BQU8sSUFBSSxDQUFDO1lBQ2hCLENBQUMsRUFBRSxVQUFVLE1BQU07Z0JBQ2YsUUFBUSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ2pFLE9BQU8sTUFBTSxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1NBQ1Y7YUFBTTtZQUNILE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRTtpQkFDbkIsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDUCxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlFLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztTQUNWO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJGludm9rZVdhdGNoZXJzIH0gZnJvbSAnQHdtL2NvcmUnO1xuXG5pbXBvcnQgeyBpbml0aWF0ZUNhbGxiYWNrIH0gZnJvbSAnLi4vLi4vdXRpbC92YXJpYWJsZS92YXJpYWJsZXMudXRpbHMnO1xuaW1wb3J0IHsgSURldmljZVZhcmlhYmxlT3BlcmF0aW9uIH0gZnJvbSAnLi9kZXZpY2UtdmFyaWFibGUtb3BlcmF0aW9uJztcbmltcG9ydCB7IENPTlNUQU5UUywgVkFSSUFCTEVfQ09OU1RBTlRTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3ZhcmlhYmxlcy5jb25zdGFudHMnO1xuXG5leHBvcnQgY2xhc3MgRGV2aWNlVmFyaWFibGVTZXJ2aWNlIHtcblxuICAgIG5hbWU6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBvcGVyYXRpb25zOiBJRGV2aWNlVmFyaWFibGVPcGVyYXRpb25bXTtcblxuICAgIGludm9rZSh2YXJpYWJsZTogYW55LCBvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLm9wZXJhdGlvbnMuZmluZChvID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvLm5hbWUgPT09IHZhcmlhYmxlLm9wZXJhdGlvbjtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcGVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgaW5pdGlhdGVDYWxsYmFjayhWQVJJQUJMRV9DT05TVEFOVFMuRVZFTlQuRVJST1IsIHZhcmlhYmxlLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgQ291bGQgbm90IGZpbmQgb3BlcmF0aW9uICcke3ZhcmlhYmxlLm9wZXJhdGlvbn0nIGluIHNlcnZpY2UgJyR7dGhpcy5uYW1lfSdgKTtcbiAgICAgICAgfSBlbHNlIGlmIChDT05TVEFOVFMuaGFzQ29yZG92YSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YUJpbmRpbmdzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgICAgICAgICAgIGlmICh2YXJpYWJsZS5kYXRhQmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModmFyaWFibGUpLmZvckVhY2gobyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFCaW5kaW5ncy5zZXQob1swXSwgb1sxXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModmFyaWFibGUuZGF0YUJpbmRpbmcpLmZvckVhY2gobyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFCaW5kaW5ncy5zZXQob1swXSwgb1sxXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3BlcmF0aW9uLmludm9rZSh2YXJpYWJsZSwgb3B0aW9ucywgZGF0YUJpbmRpbmdzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmRhdGFTZXQgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAkaW52b2tlV2F0Y2hlcnModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYXRlQ2FsbGJhY2soVkFSSUFCTEVfQ09OU1RBTlRTLkVWRU5ULlNVQ0NFU1MsIHZhcmlhYmxlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5kYXRhU2V0ID0ge307XG4gICAgICAgICAgICAgICAgICAgICRpbnZva2VXYXRjaGVycyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhdGVDYWxsYmFjayhWQVJJQUJMRV9DT05TVEFOVFMuRVZFTlQuRVJST1IsIHZhcmlhYmxlLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYXNvbjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhdGVDYWxsYmFjayhWQVJJQUJMRV9DT05TVEFOVFMuRVZFTlQuU1VDQ0VTUywgdmFyaWFibGUsIG9wZXJhdGlvbi5tb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcGVyYXRpb24ubW9kZWw7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=