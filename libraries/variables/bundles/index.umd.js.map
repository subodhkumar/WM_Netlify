{"version":3,"file":"index.umd.js.map","sources":["ng://@wm/variables/constants/variables.constants.ts","node_modules/tslib/tslib.es6.js","ng://@wm/variables/util/variable/variables.utils.ts","ng://@wm/variables/manager/variable/base-variable.manager.ts","ng://@wm/variables/manager/variable/model-variable.manager.ts","ng://@wm/variables/util/notify-promise.ts","ng://@wm/variables/util/file-upload.util.ts","ng://@wm/variables/util/oAuth.utils.ts","ng://@wm/variables/util/variable/service-variable.utils.ts","ng://@wm/variables/util/inflight-queue.ts","ng://@wm/variables/manager/variable/service-variable.manager.ts","ng://@wm/variables/util/variable/live-variable.utils.ts","ng://@wm/variables/util/variable/live-variable.http.utils.ts","ng://@wm/variables/manager/variable/live-variable.manager.ts","ng://@wm/variables/util/action/navigation-action.utils.ts","ng://@wm/variables/manager/action/base-action.manager.ts","ng://@wm/variables/manager/action/navigation-action.manager.ts","ng://@wm/variables/manager/action/notification-action.manager.ts","ng://@wm/variables/manager/action/login-action.manager.ts","ng://@wm/variables/manager/action/logout-action.manager.ts","ng://@wm/variables/manager/action/timer-action.manager.ts","ng://@wm/variables/manager/variable/device-variable-manager.ts","ng://@wm/variables/manager/variable/web-socket-variable.manager.ts","ng://@wm/variables/factory/variable-manager.factory.ts","ng://@wm/variables/manager/variable/device-variable-service.ts","ng://@wm/variables/util/dataset-util.ts","ng://@wm/variables/model/base-variable.ts","ng://@wm/variables/model/variable/api-aware-variable.ts","ng://@wm/variables/model/variable/device-variable.ts","ng://@wm/variables/model/variable/live-variable.ts","ng://@wm/variables/model/base-action.ts","ng://@wm/variables/model/action/navigation-action.ts","ng://@wm/variables/model/variable/model-variable.ts","ng://@wm/variables/model/variable/service-variable.ts","ng://@wm/variables/model/action/notification-action.ts","ng://@wm/variables/model/action/login-action.ts","ng://@wm/variables/model/action/logout-action.ts","ng://@wm/variables/model/action/timer-action.ts","ng://@wm/variables/model/variable/web-socket-variable.ts","ng://@wm/variables/factory/variable.factory.ts","ng://@wm/variables/service/metadata-service/metadata.service.ts","ng://@wm/variables/service/variables.service.ts","ng://@wm/variables/variables.module.ts","ng://@wm/variables/index.ts"],"sourcesContent":["export const CONSTANTS = {\n    hasCordova: window['cordova'] !== undefined,\n    isWaveLens: window['WaveLens'] !== undefined,\n    isStudioMode: false,\n    isRunMode: true,\n    XSRF_COOKIE_NAME: 'wm_xsrf_token',\n    DEFAULT_TIMER_DELAY: 500,\n    WIDGET_DOESNT_EXIST : 'The widget you\\'re trying to navigate to doesn\\'t exist on this page'\n};\nexport const VARIABLE_CONSTANTS = {\n    CATEGORY: {\n        MODEL: 'wm.Variable',\n        LIVE: 'wm.LiveVariable',\n        SERVICE: 'wm.ServiceVariable',\n        WEBSOCKET: 'wm.WebSocketVariable',\n        NAVIGATION: 'wm.NavigationVariable',\n        NOTIFICATION: 'wm.NotificationVariable',\n        TIMER: 'wm.TimerVariable',\n        LOGIN: 'wm.LoginVariable',\n        LOGOUT: 'wm.LogoutVariable',\n        DEVICE: 'wm.DeviceVariable'\n    },\n    EVENTS: ['onBefore',\n        'onBeforeUpdate',\n        'onResult',\n        'onBeforeOpen',\n        'onOpen',\n        'onBeforeMessageSend',\n        'onMessageReceive',\n        'onProgress',\n        'onError',\n        'onBeforeDatasetReady',\n        'onCanUpdate',\n        'onClick',\n        'onHide',\n        'onOk',\n        'onCancel',\n        'onBeforeClose',\n        'onClose',\n        'onTimerFire',\n        'onSuccess',\n        'onOnline',\n        'onOffline'],\n    EVENT: {\n        'CAN_UPDATE': 'onCanUpdate',\n        'BEFORE': 'onBefore',\n        'BEFORE_UPDATE': 'onBeforeUpdate',\n        'PREPARE_SETDATA': 'onBeforeDatasetReady',\n        'RESULT': 'onResult',\n        'ERROR': 'onError',\n        'ABORT': 'onAbort',\n        'PROGRESS': 'onProgress',\n        'CLICK': 'onClick',\n        'HIDE': 'onHide',\n        'OK': 'onOk',\n        'CANCEL': 'onCancel',\n        'CLOSE': 'onClose',\n        'TIMER_FIRE': 'onTimerFire',\n        'SUCCESS': 'onSuccess',\n        'BEFORE_OPEN': 'onBeforeOpen',\n        'OPEN': 'onOpen',\n        'BEFORE_SEND': 'onBeforeMessageSend',\n        'MESSAGE_RECEIVE': 'onMessageReceive',\n        'BEFORE_CLOSE': 'onBeforeClose'\n    },\n    OWNER: {\n        'APP': 'App',\n        'PAGE': 'Page'\n    },\n    REST_SUPPORTED_SERVICES: ['JavaService', 'SoapService', 'FeedService', 'RestService', 'SecurityServiceType', 'DataService', 'WebSocketService'],\n    PAGINATION_PARAMS: ['page', 'size', 'sort'],\n    REST_SERVICE: {\n        'BASE_PATH_KEY': 'x-WM-BASE_PATH',\n        'RELATIVE_PATH_KEY': 'x-WM-RELATIVE_PATH',\n        'OAUTH_PROVIDER_KEY': 'x-WM-PROVIDER_ID',\n        'AUTH_HDR_KEY': 'Authorization',\n        'SECURITY_DEFN': {\n            'BASIC': 'basic',\n            'OAUTH2': 'oauth2',\n        },\n        'AUTH_TYPE': {\n            'BASIC': 'BASIC',\n            'OAUTH': 'OAUTH2',\n            'NONE': 'NONE',\n        },\n        'CONTENT_TYPE_KEY': 'x-WM-CONTENT_TYPE',\n        'ACCESSTOKEN_PLACEHOLDER': {\n            'LEFT': '',\n            'RIGHT': '.access_token'\n        },\n        ERR_TYPE: {\n            NO_ACCESSTOKEN: 'missing_accesstoken',\n            NO_CREDENTIALS: 'no_credentials',\n            METADATA_MISSING: 'metadata_missing',\n            USER_UNAUTHORISED: 'user_unauthorised',\n            REQUIRED_FIELD_MISSING: 'required_field_missing',\n        },\n        ERR_MSG: {\n            NO_ACCESSTOKEN: 'Access token missing',\n            NO_CREDENTIALS: 'No credentials present',\n            METADATA_MISSING: 'Metadata missing',\n            USER_UNAUTHORISED: 'Unauthorized User',\n            REQUIRED_FIELD_MISSING: 'Required field(s) missing: \"${0}\"'\n        },\n        UNCLOAKED_HEADERS: ['CONTENT-TYPE', 'ACCEPT', 'CONTENT-LENGTH', 'ACCEPT-ENCODING', 'ACCEPT-LANGUAGE'],\n        PREFIX: {\n            AUTH_HDR_VAL: {\n                BASIC: 'Basic',\n                OAUTH: 'Bearer'\n            },\n            CLOAK_HEADER_KEY: 'X-WM-'\n        }\n    },\n    SERVICE_TYPE: {\n        JAVA: 'JavaService',\n        REST: 'RestService',\n        SOAP: 'SoapService',\n        FEED: 'FeedService',\n        DATA: 'DataService',\n        SECURITY: 'SecurityServiceType',\n        WEBSOCKET: 'WebSocketService',\n    },\n    CONTROLLER_TYPE: {\n        QUERY: 'QueryExecution',\n        PROCEDURE: 'ProcedureExecution'\n    },\n    HTTP_STATUS_CODE: {\n        CORS_FAILURE: -1,\n        UNAUTHORIZED: 401,\n        FORBIDDEN: 403\n    },\n    EXPORT_TYPES_MAP: {\n        'EXCEL' : '.xlsx',\n        'CSV' : '.csv'},\n    DEFAULT_VAR : {\n        'NOTIFICATION' : 'appNotification'\n    }\n};\n\nexport const WS_CONSTANTS = {\n    NON_BODY_HTTP_METHODS: ['GET', 'HEAD'],\n    CONTENT_TYPES: {\n        FORM_URL_ENCODED: 'application/x-www-form-urlencoded',\n        MULTIPART_FORMDATA: 'multipart/form-data',\n        OCTET_STREAM: 'application/octet-stream'\n    }\n};\n\nexport const DB_CONSTANTS = {\n    'DATABASE_MATCH_MODES': {\n        'like'             : 'LIKE',\n        'start'            : 'STARTING_WITH',\n        'startignorecase'  : 'STARTING_WITH_IGNORECASE',\n        'end'              : 'ENDING_WITH',\n        'endignorecase'    : 'ENDING_WITH_IGNORECASE',\n        'anywhere'         : 'CONTAINING',\n        'anywhereignorecase': 'CONTAINING_IGNORECASE',\n        'exact'            : 'EQUALS',\n        'exactignorecase'  : 'EQUALS_IGNORECASE',\n        'notequals'        : 'NOT_EQUALS',\n        \"notequalsignorecase\": \"NOT_EQUALS_IGNORECASE\",\n        'between'          : 'BETWEEN',\n        'in'               : 'IN',\n        \"notin\"            : \"NOTIN\",\n        'lessthan'         : 'LESS_THAN',\n        'lessthanequal'    : 'LESS_THAN_OR_EQUALS',\n        'greaterthan'      : 'GREATER_THAN',\n        'greaterthanequal' : 'GREATER_THAN_OR_EQUALS',\n        'null'             : 'NULL',\n        'isnotnull'        : 'IS_NOT_NULL',\n        'empty'            : 'EMPTY',\n        'isnotempty'       : 'IS_NOT_EMPTY',\n        'nullorempty'      : 'NULL_OR_EMPTY'\n    },\n    'DATABASE_EMPTY_MATCH_MODES': ['NULL', 'IS_NOT_NULL', 'EMPTY', 'IS_NOT_EMPTY', 'NULL_OR_EMPTY'],\n    'DATABASE_RANGE_MATCH_MODES': ['IN', 'NOTIN', 'BETWEEN', 'LESS_THAN', 'LESS_THAN_OR_EQUALS', 'GREATER_THAN', 'GREATER_THAN_OR_EQUALS', 'NOT_EQUALS'],\n    'DATABASE_NULL_EMPTY_MATCH': {\n        'NULL'          : 'NULL',\n        'IS_NOT_NULL'   : 'IS_NOT_NULL',\n        'EMPTY'         : 'NULL',\n        'IS_NOT_EMPTY'  : 'IS_NOT_NULL',\n        'NULL_OR_EMPTY' : 'NULL'\n    },\n    'DATABASE_MATCH_MODES_WITH_QUERY': {\n        'LIKE'                   : '${0} like ${1}',\n        'STARTING_WITH'          : '${0} like ${1}',\n        'STARTING_WITH_IGNORECASE': '${0} like ${1}',\n        'ENDING_WITH'            : '${0} like ${1}',\n        'ENDING_WITH_IGNORECASE' : '${0} like ${1}',\n        'CONTAINING'             : '${0} like ${1}',\n        'CONTAINING_IGNORECASE'  : '${0} like ${1}',\n        'EQUALS'                 : '${0}=${1}',\n        'EQUALS_IGNORECASE'      : '${0}=${1}',\n        'NOT_EQUALS'             : '${0}!=${1}',\n        \"NOT_EQUALS_IGNORECASE\"  : \"${0}!=${1}\",\n        'BETWEEN'                : '${0} between ${1}',\n        'IN'                     : '${0} in ${1}',\n        'NOTIN'                  : \"${0} not in ${1}\",\n        'LESS_THAN'              : '${0}<${1}',\n        'LESS_THAN_OR_EQUALS'    : '${0}<=${1}',\n        'GREATER_THAN'           : '${0}>${1}',\n        'GREATER_THAN_OR_EQUALS' : '${0}>=${1}',\n        'NULL'                   : '${0} is null',\n        'IS_NOT_NULL'            : '${0} is not null',\n        'EMPTY'                  : '${0}=\\'\\'',\n        'IS_NOT_EMPTY'           : '${0}<>\\'\\'',\n        'NULL_OR_EMPTY'          : '${0} is null or ${0}=\\'\\''\n    },\n    'DATABASE_STRING_MODES': ['LIKE', 'STARTING_WITH', 'STARTING_WITH_IGNORECASE', 'ENDING_WITH', 'ENDING_WITH_IGNORECASE', 'CONTAINING', 'CONTAINING_IGNORECASE', 'EQUALS', 'EQUALS_IGNORECASE', 'NOT_EQUALS', \"NOT_EQUALS_IGNORECASE\"]\n};\n\nexport const SWAGGER_CONSTANTS = {\n    WM_DATA_JSON: 'wm_data_json',\n    WM_HTTP_JSON: 'wm_httpRequestDetails'\n};\n\nexport const VARIABLE_URLS = {\n    DATABASE: {\n    searchTableData: {\n        url: '/:service/:dataModelName/:entityName/search?page=:page&size=:size&:sort',\n            method: 'POST'\n    },\n    searchTableDataWithQuery: {\n        url: '/:service/:dataModelName/:entityName/filter?page=:page&size=:size&:sort',\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    },\n    readTableData: {\n        url: '/:service/:dataModelName/:entityName?page=:page&size=:size&:sort',\n            method: 'GET'\n    },\n    insertTableData: {\n        url: '/:service/:dataModelName/:entityName',\n            method: 'POST'\n    },\n    insertMultiPartTableData: {\n        url: '/:service/:dataModelName/:entityName',\n            method: 'POST',\n            headers: {}\n            // ,transformRequest: WM.identity\n    },\n    updateTableData: {\n        url: '/:service/:dataModelName/:entityName/:id',\n            method: 'PUT'\n    },\n    updateMultiPartTableData: {\n        url: '/:service/:dataModelName/:entityName/:id',\n            method: 'POST',\n            headers: {}\n            // ,transformRequest: WM.identity\n    },\n    deleteTableData: {\n        url: '/:service/:dataModelName/:entityName/:id',\n            method: 'DELETE'\n    },\n    updateCompositeTableData: {\n        url: '/:service/:dataModelName/:entityName/composite-id?:id',\n            method: 'PUT'\n    },\n    periodUpdateCompositeTableData: {\n        url: '/:service/:dataModelName/:entityName/composite-id/periods?:id',\n            method: 'PUT'\n    },\n    updateMultiPartCompositeTableData: {\n        url: '/:service/:dataModelName/:entityName/composite-id?:id',\n            method: 'POST',\n            headers: {}\n            // , transformRequest: WM.identity\n    },\n    deleteCompositeTableData: {\n        url: '/:service/:dataModelName/:entityName/composite-id?:id',\n            method: 'DELETE'\n    },\n    periodDeleteCompositeTableData: {\n        url: '/:service/:dataModelName/:entityName/composite-id/periods?:id',\n            method: 'DELETE'\n    },\n    getDistinctDataByFields: {\n        url: '/:service/:dataModelName/:entityName/aggregations?page=:page&size=:size&:sort',\n            method: 'POST'\n    },\n    exportTableData: {\n        url: '/services/:dataModelName/:entityName/export?:sort',\n            method: 'POST'\n    },\n    readTableRelatedData: {\n        url: '/:service/:dataModelName/:entityName/:id/:relatedFieldName?page=:page&size=:size&:sort',\n            method: 'GET'\n    },\n    executeNamedQuery: {\n        url: '/:service/:dataModelName/queryExecutor/queries/:queryName?page=:page&size=:size&:queryParams',\n            method: 'GET'\n    },\n    executeCustomQuery: {\n        url: '/:service/:dataModelName/queries/execute?page=:page&size=:size',\n            method: 'POST'\n    },\n    executeAggregateQuery: {\n        url: '/services/:dataModelName/:entityName/aggregations?page=:page&size=:size&sort=:sort',\n            method: 'POST'\n    },\n    executeNamedProcedure: {\n        url: '/:service/:dataModelName/procedureExecutor/procedure/execute/:procedureName?page=:page&size=:size&:procedureParams',\n            method: 'GET'\n    },\n    countTableDataWithQuery : {\n        url: '/:service/:dataModelName/:entityName/count',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    }\n},\n    oauthConfiguration : {\n        getAuthorizationUrl: {\n            url: 'services/oauth2/:providerId/authorizationUrl',\n                method: 'GET'\n        }\n    }\n};\n\nexport const $rootScope = {\n    project: {\n        deployedUrl: './',\n        id: 'temp_id'\n    },\n    projectName: 'test_project_name',\n    isApplicationType: true\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { extractType, DataType, DEFAULT_FORMATS, $parseEvent, $watch, findValueOf, getBlob, getClonedObject, stringStartsWith, triggerFn } from '@wm/core';\n\nimport { CONSTANTS, VARIABLE_CONSTANTS, WS_CONSTANTS } from '../../constants/variables.constants';\n\ndeclare const window, _, $, moment;\n\nconst exportTypesMap   = { 'EXCEL' : '.xlsx', 'CSV' : '.csv'};\n\nexport let appManager;\nexport let httpService;\nexport let metadataService;\nexport let navigationService;\nexport let routerService;\nexport let toasterService;\nexport let oauthService;\nexport let securityService;\nexport let dialogService;\n\nconst DOT_EXPR_REX = /^\\[(\"|')[\\w\\W]*(\\1)\\]$/,\n    internalBoundNodeMap = new Map(),\n    timers = new Map();\n\nconst _invoke = (variable, op) => {\n    let debouncedFn,\n        cancelFn = _.noop,\n        retVal;\n    if (timers.has(variable)) {\n        cancelFn = timers.get(variable).cancel;\n    }\n    cancelFn();\n    debouncedFn = _.debounce(function () {\n        retVal = variable[op]();\n        // handle promises to avoid uncaught promise errors in console\n        if (retVal instanceof Promise) {\n            retVal.catch(_.noop);\n        }\n    }, 100);\n    timers.set(variable, debouncedFn);\n    debouncedFn();\n};\n\nconst processVariablePostBindUpdate = (nodeName, nodeVal, nodeType, variable, noUpdate) => {\n    switch (variable.category) {\n        case VARIABLE_CONSTANTS.CATEGORY.LIVE:\n            if (variable.operation === 'read') {\n                if (nodeName === 'dataBinding') {\n                    _.forEach(nodeVal, function (val, key) {\n                        variable.filterFields[key] = {\n                            'value': val\n                        };\n                    });\n                } else {\n                    variable.filterFields[nodeName] = {\n                        'value': nodeVal,\n                        'type' : nodeType\n                    };\n                }\n                /* if auto-update set for the variable with read operation only, get its data */\n                if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.listRecords) && !noUpdate) {\n                    _invoke(variable, 'listRecords');\n                }\n            } else {\n                if (nodeName === 'dataBinding') {\n                    variable.inputFields = nodeVal;\n                } else {\n                    variable.inputFields[nodeName] = nodeVal;\n                }\n                /* if auto-update set for the variable with read operation only, get its data */\n                if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable[variable.operation + 'Record']) && !noUpdate) {\n                    _invoke(variable, variable.operation + 'Record');\n                }\n            }\n            break;\n        case VARIABLE_CONSTANTS.CATEGORY.SERVICE:\n        case VARIABLE_CONSTANTS.CATEGORY.LOGIN:\n            if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.invoke) && !noUpdate) {\n                _invoke(variable, 'invoke');\n            }\n            break;\n        case VARIABLE_CONSTANTS.CATEGORY.DEVICE:\n            variable[nodeName] = nodeVal;\n            if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.invoke) && !noUpdate) {\n                _invoke(variable, 'invoke');\n            }\n            break;\n    }\n};\n\nexport const setDependency = (type: string, ref: any) => {\n    switch (type) {\n        case 'appManager':\n            appManager = ref;\n            break;\n        case 'http':\n            httpService = ref;\n            break;\n        case 'metadata':\n            metadataService = ref;\n            break;\n        case 'navigationService':\n            navigationService = ref;\n            break;\n        case 'router':\n            routerService = ref;\n            break;\n        case 'toaster':\n            toasterService =  ref;\n            break;\n        case 'oAuth':\n            oauthService =  ref;\n            break;\n        case 'security':\n            securityService =  ref;\n            break;\n        case 'dialog':\n            dialogService = ref;\n            break;\n    }\n};\n\nexport const initiateCallback = (type: string, variable: any, data: any, options?: any, skipDefaultNotification?: boolean) => {\n\n    /*checking if event is available and variable has event property and variable event property bound to function*/\n    const eventValues = variable[type],\n        callBackScope = variable._context;\n    let errorVariable;\n    /**\n     * For error event:\n     * trigger app level error handler.\n     * if no event is assigned, trigger default appNotification variable.\n     */\n   if (type === VARIABLE_CONSTANTS.EVENT.ERROR && !skipDefaultNotification) {\n        if (!eventValues) {\n            /* in case of error, if no event assigned, handle through default notification variable */\n            errorVariable = callBackScope.Actions[VARIABLE_CONSTANTS.DEFAULT_VAR.NOTIFICATION];\n            if (errorVariable) {\n                data = errorVariable.getMessage() || data;\n                data = _.isString(data) ? data : 'An error has occured. Please check the app logs.';\n                errorVariable.invoke({ 'message' : data}, undefined, undefined);\n                 // $rootScope.$evalAsync(function () {\n                    // $rootScope.$emit(\"invoke-service\", VARIABLE_CONSTANTS.DEFAULT_VAR.NOTIFICATION, {scope: callBackScope, message: response});\n                // });\n            }\n        }\n    }\n    // TODO: [Vibhu], check whether to support legacy event calling mechanism (ideally, it should have been migrated)\n    const fn = $parseEvent(variable[type]);\n    if (type === VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE) {\n        if (variable.category === 'wm.LiveVariable' && variable.operation === 'read') {\n            return fn(variable._context, {variable: variable, dataFilter: data});\n        } else {\n            return fn(variable._context, {variable: variable, inputData: data});\n        }\n    } else {\n        return fn(variable._context, {variable: variable, data: data, options: options});\n    }\n};\n\nconst triggerOnTimeout = (success) => {\n    setTimeout(() => { triggerFn(success); }, 500);\n};\n\nconst downloadFilefromResponse = (response, headers, success, error) => {\n    // check for a filename\n    let filename = '',\n        filenameRegex,\n        matches,\n        type,\n        blob,\n        URL,\n        downloadUrl,\n        popup;\n    const disposition = headers.get('Content-Disposition');\n    if (disposition && disposition.indexOf('attachment') !== -1) {\n        filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n        matches = filenameRegex.exec(disposition);\n        if (matches !== null && matches[1]) {\n            filename = matches[1].replace(/['\"]/g, '');\n        }\n    }\n\n    type = headers.get('Content-Type');\n    blob = new Blob([response], { type: type });\n\n    if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.\"\n        if (window.navigator.msSaveBlob(blob, filename)) {\n            triggerOnTimeout(success);\n        } else {\n            triggerFn(error);\n        }\n    } else {\n        URL         = window.URL || window.webkitURL;\n        downloadUrl = URL.createObjectURL(blob);\n\n        if (filename) {\n            // use HTML5 a[download] attribute to specify filename\n            const a = document.createElement('a');\n            let reader;\n            // safari doesn't support this yet\n            if (typeof a.download === 'undefined') {\n                reader = new FileReader();\n                reader.onloadend = function () {\n                    const url = reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n                    popup = window.open(url, '_blank');\n                    if (!popup) {\n                        window.location.href = url;\n                    }\n                };\n                reader.onload = triggerOnTimeout.bind(undefined, success);\n                reader.onerror = error;\n                reader.readAsDataURL(blob);\n            } else {\n                a.href = downloadUrl;\n                a.download = filename;\n                document.body.appendChild(a);\n                a.click();\n                triggerOnTimeout(success);\n            }\n        } else {\n            popup = window.open(downloadUrl, '_blank');\n            if (!popup) {\n                window.location.href = downloadUrl;\n            }\n        }\n\n        setTimeout(() => { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\n    }\n};\n\nconst getService = (serviceName) => {\n    if (!serviceName) {\n        return;\n    }\n    return serviceName;\n    // Todo: Shubham, uncomment below code\n    /* /!* get a reference to the element where ng-app is defined *!/\n     let appEl = WM.element('[id=ng-app]'), injector;\n     if (appEl) {\n     try {\n     injector = appEl.injector(); // get the angular injector\n     if (injector) {\n     return injector.get(serviceName); // return the service\n     }\n     } catch (e) {\n     return undefined;\n     }\n     }*/\n};\n\n/**\n * Construct the form data params from the URL\n * @param queryParams\n * @param params\n */\nconst setParamsFromURL = (queryParams, params) => {\n    queryParams = _.split(queryParams, '&');\n    _.forEach(queryParams, function (param) {\n        param = _.split(param, '=');\n        params[param[0]] = decodeURIComponent(_.join(_.slice(param, 1), '='));\n    });\n};\n\n/**\n * [Todo: Shubham], Implement Download through I frame\n * Simulates file download in an app through creating and submitting a hidden form in DOM.\n * The action will be initiated through a Service Variable\n *\n * Query Params\n * The request params like query params are added as hidden input elements\n *\n * Header Params\n * The header params for a request are also added along with hidden input elements.\n * This is done as headers can not be set for a form POST call from JavaScript\n *\n * Finally, request parameters are sent as follows:\n * For a GET request, the request data is sent along with the query params.\n * For POST, it is sent as request body.\n *\n * @param variable: the variable that is called from user action\n * @param requestParams object consisting the info to construct the XHR request for the service\n */\nconst downloadThroughIframe = (requestParams, success) => {\n    // Todo: SHubham: URL contains '//' in between which should be handled at the URL formation only\n    if (requestParams.url[1] === '/' && requestParams.url[2] === '/') {\n        requestParams.url = requestParams.url.slice(0, 1) + requestParams.url.slice(2);\n    }\n    let iFrameElement,\n        formEl,\n        paramElement,\n        queryParams     = '';\n    const IFRAME_NAME     = 'fileDownloadIFrame',\n        FORM_NAME       = 'fileDownloadForm',\n        CONTENT_TYPE    = 'Content-Type',\n        url             = requestParams.url,\n        encType         = _.get(requestParams.headers, CONTENT_TYPE),\n        params          = _.pickBy(requestParams.headers, function (val, key) {return key !== CONTENT_TYPE; });\n    /* Todo: shubham : define getService method\n     WS_CONSTANTS    = getService('WS_CONSTANTS');*/\n\n    /* look for existing iframe. If exists, remove it first */\n    iFrameElement = $('#' + IFRAME_NAME);\n    if (iFrameElement.length) {\n        iFrameElement.first().remove();\n    }\n    iFrameElement = $('<iframe id=\"' + IFRAME_NAME + '\" name=\"' + IFRAME_NAME + '\" class=\"ng-hide\"></iframe>');\n    formEl        = $('<form id=\"' + FORM_NAME + '\" name=\"' + FORM_NAME + '\"></form>');\n    formEl.attr({\n        'target'  : iFrameElement.attr('name'),\n        'action'  : url,\n        'method'  : requestParams.method,\n        'enctype' : encType\n    });\n\n    /* process query params, append a hidden input element in the form against each param */\n    queryParams += url.indexOf('?') !== -1 ? url.substring(url.indexOf('?') + 1) : '';\n    queryParams += encType === WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED ? ((queryParams ? '&' : '') + requestParams.dataParams) : '';\n\n    // For Non body methods only, set the input fields from query parameters\n    if (_.includes(WS_CONSTANTS.NON_BODY_HTTP_METHODS, _.toUpper(requestParams.method))) {\n        setParamsFromURL(queryParams, params); // Set params for URL query params\n    }\n    setParamsFromURL(requestParams.data, params); // Set params for request data\n    _.forEach(params, function (val, key) {\n        paramElement = $('<input type=\"hidden\">');\n        paramElement.attr({\n            'name'  : key,\n            'value' : val\n        });\n        formEl.append(paramElement);\n    });\n\n    /* append form to iFrame and iFrame to the document and submit the form */\n    $('body').append(iFrameElement);\n\n    // timeout for IE 10, iframeElement.contents() is empty in IE 10 without timeout\n    setTimeout(function () {\n        iFrameElement.contents().find('body').append(formEl);\n        formEl.submit();\n        triggerFn(success);\n    }, 100);\n};\n\n/**\n * Makes an XHR call against the config\n * the response is converted into a blob url, which is assigned to the src attribute of an anchor element with download=true\n * a click is simulated on the anchor to download the file\n * @param config\n * @param success\n * @param error\n */\nconst downloadThroughAnchor = (config, success, error) => {\n    const url     = config.url,\n        method  = config.method,\n        data    = config.dataParams || config.data,\n        headers = config.headers;\n\n    headers['Content-Type'] = headers['Content-Type'] || 'application/x-www-form-urlencoded';\n\n    // Todo: Replace http with getService\n    httpService.send({\n        'target' : 'WebService',\n        'action' : 'invokeRuntimeRestCall',\n        'method' : method,\n        'url'    : url,\n        'headers': headers,\n        'data'   : data,\n        'responseType': 'arraybuffer'\n    }).then(function (response) {\n        setTimeout(() => {\n            downloadFilefromResponse(response.body, response.headers, success, error);\n        }, 900);\n    }, function (err) {\n        triggerFn(error, err);\n    });\n};\n\n/**\n * appends a timestamp on the passed filename to prevent caching\n * returns the modified file name\n * @param fileName\n * @param exportFormat\n * @returns {string}\n */\nconst getModifiedFileName = (fileName, exportFormat) => {\n    let fileExtension;\n    const currentTimestamp = Date.now();\n\n    if (exportFormat) {\n        fileExtension = exportTypesMap[exportFormat];\n    } else {\n        fileExtension = '.' + _.last(_.split(fileName, '.'));\n        fileName = _.replace(fileName, fileExtension, '');\n    }\n    return fileName + '_' + currentTimestamp + fileExtension;\n};\n\nconst getCookieByName = (name) => {\n    // Todo: Shubham Implement cookie native js\n    return 'cookie';\n};\n\n/**\n * This function returns the cookieValue if xsrf is enabled.\n * In device, xsrf cookie is stored in localStorage.\n * @returns xsrf cookie value\n */\nconst isXsrfEnabled = () => {\n    if (CONSTANTS.hasCordova) {\n        return localStorage.getItem(CONSTANTS.XSRF_COOKIE_NAME);\n    }\n    return false;\n};\n\n/**\n * Returns the object node for a bind object, where the value has to be updated\n * obj.target = \"a\"\n * @param obj\n * @param root\n * @param variable\n * @returns {*}\n */\nconst getTargetObj = (obj, root, variable) => {\n    /*\n     * if the target key is in the form as \"['my.param']\"\n     * keep the target key as \"my.param\" and do not split further\n     * this is done, so that, the computed value against this binding is assigned as\n     *      {\"my.param\": \"value\"}\n     * and not as\n     *      {\n     *          \"my\": {\n     *              \"param\": \"value\"\n     *          }\n     *      }\n     */\n    let target = obj.target,\n        targetObj;\n    const rootNode = variable[root];\n    if (DOT_EXPR_REX.test(target)) {\n        targetObj = rootNode;\n    } else {\n        target = target.substr(0, target.lastIndexOf('.'));\n        if (obj.target === root) {\n            targetObj = variable;\n        } else if (target) {\n            targetObj = findValueOf(rootNode, target, true);\n        } else {\n            targetObj = rootNode;\n        }\n    }\n    return targetObj;\n};\n\n/**\n * Gets the key for the target object\n * the computed value will be updated against this key in the targetObject(computed by getTargetObj())\n * @param target\n * @param regex\n * @returns {*}\n */\nconst getTargetNodeKey = (target) => {\n    /*\n     * if the target key is in the form as \"['my.param']\"\n     * keep the target key as \"my.param\" and do not split further\n     * this is done, so that, the computed value against this binding is assigned as\n     *      {\"my.param\": \"value\"}\n     * and not as\n     *      {\n     *          \"my\": {\n     *              \"param\": \"value\"\n     *          }\n     *      }\n     */\n    let targetNodeKey;\n    if (DOT_EXPR_REX.test(target)) {\n        targetNodeKey = target.replace(/^(\\[[\"'])|([\"']\\])$/g, '');\n    } else {\n        targetNodeKey = target.split('.').pop();\n    }\n    return targetNodeKey;\n};\n\nconst setValueToNode = (target, obj, root, variable, value, noUpdate?) => {\n    const targetNodeKey = getTargetNodeKey(target),\n        targetObj = getTargetObj(obj, root, variable);\n    value = !_.isUndefined(value) ? value : obj.value;\n    /* sanity check, user can bind parent nodes to non-object values, so child node bindings may fail */\n    if (targetObj) {\n        targetObj[targetNodeKey] = value;\n    }\n    processVariablePostBindUpdate(targetNodeKey, value, obj.type, variable, noUpdate);\n};\n\n/**\n * The model internalBoundNodeMap stores the reference to latest computed values against internal(nested) bound nodes\n * This is done so that the internal node's computed value is not lost, once its parent node's value is computed at a later point\n * E.g.\n * Variable.employeeVar has following bindings\n * \"dataBinding\": [\n     {\n         \"target\": \"department.budget\",\n         \"value\": \"bind:Variables.budgetVar.dataSet\"\n     },\n     {\n         \"target\": \"department\",\n         \"value\": \"bind:Variables.departmentVar.dataSet\"\n     }\n ]\n * When department.budget is computed, employeeVar.dataSet = {\n *  \"department\": {\n *      \"budget\": {\"q1\": 1111}\n *  }\n * }\n *\n * When department is computed\n *  \"department\": {\n *      \"name\": \"HR\",\n *      \"location\": \"Hyderabad\"\n *  }\n * The budget field (computed earlier) is LOST.\n *\n * To avoid this, the latest values against internal nodes (in this case department.budget) are stored in a map\n * These values are assigned back to internal fields if the parent is computed (in this case department)\n * @param target\n * @param root\n * @param variable\n */\nconst updateInternalNodes = (target, root, variable) => {\n    const boundInternalNodes = _.keys(_.get(internalBoundNodeMap.get(variable), [variable.name, root])),\n        targetNodeKey = getTargetNodeKey(target);\n    let internalNodes;\n    function findInternalNodeBound() {\n        return _.filter(boundInternalNodes, function (node) {\n            // the later condition in check (targetNodeKey === root || targetNodeKey === 'dataBinding') is specifically for live variable of insert/update types\n            return (node !== targetNodeKey && _.includes(node, targetNodeKey)) || ((targetNodeKey === root || targetNodeKey === 'dataBinding') && node !== targetNodeKey);\n        });\n    }\n    internalNodes = findInternalNodeBound();\n    if ((internalNodes.length)) {\n        _.forEach(internalNodes, function (node) {\n            setValueToNode(node, {target: node}, root, variable, _.get(internalBoundNodeMap.get(variable), [variable.name, root, node]));\n        });\n    }\n};\n\n/**\n * New Implementation (DataBinding Flat Structure with x-path targets)\n * processes a dataBinding object, if bound to expression, watches over it, else assigns value to the expression\n * @param obj dataBinding object\n * @param scope scope of the variable\n * @param root root node string (dataBinding for all variables, dataSet for static variable)\n * @param variable variable object\n */\nconst processBindObject = (obj, scope, root, variable) => {\n    const target = obj.target,\n        targetObj = getTargetObj(obj, root, variable),\n        targetNodeKey = getTargetNodeKey(target),\n        runMode = true;\n    const destroyFn = scope.registerDestroyListener ? scope.registerDestroyListener.bind(scope) : _.noop;\n\n    if (stringStartsWith(obj.value, 'bind:')) {\n        destroyFn(\n            $watch(obj.value.replace('bind:', ''), scope, {}, function (newVal, oldVal) {\n                if ((newVal === oldVal && _.isUndefined(newVal)) || (_.isUndefined(newVal) && (!_.isUndefined(oldVal) || !_.isUndefined(targetObj[targetNodeKey])))) {\n                    return;\n                }\n                // Skip cloning for blob column\n                if (!_.includes(['blob', 'file'], obj.type)) {\n                    newVal = getClonedObject(newVal);\n                }\n                setValueToNode(target, obj, root, variable, newVal); // cloning newVal to keep the source clean\n\n                if (runMode) {\n                    /*set the internal bound node map with the latest updated value*/\n                    if (!internalBoundNodeMap.has(variable)) {\n                        internalBoundNodeMap.set(variable, {});\n                    }\n                    _.set(internalBoundNodeMap.get(variable), [variable.name, root, target], newVal);\n                    /*update the internal nodes after internal node map is set*/\n                    if (_.isObject(newVal)) {\n                        updateInternalNodes(target, root, variable);\n                    }\n                }\n            })\n        );\n    } else if (!_.isUndefined(obj.value)) {\n        setValueToNode(target, obj, root, variable, obj.value, true);\n        if (runMode && root !== targetNodeKey) {\n            if (!internalBoundNodeMap.has(variable)) {\n                internalBoundNodeMap.set(variable, {});\n            }\n            _.set(internalBoundNodeMap.get(variable), [variable.name, root, target], obj.value);\n        }\n    }\n};\n\n// *********************************************************** PUBLIC *********************************************************** //\n\n/**\n * Initializes watchers for binding expressions configured in the variable\n * @param variable\n * @param context, scope context in which the variable exists\n * @param {string} bindSource,  the field in variable where the databindings are configured\n *                              for most variables, it will be 'dataBinding', hence default fallback is to 'dataBinding'\n *                              for some it can be 'dataSet' and hence will be passed as param\n * @param {string} bindTarget, the object field in variable where the computed bindings will be set\n */\nexport const processBinding = (variable: any, context: any, bindSource?: string, bindTarget?: string) => {\n    bindSource = bindSource || 'dataBinding';\n    bindTarget = bindTarget || 'dataBinding';\n\n    const bindMap = variable[bindSource];\n    variable[bindSource] = {};\n    variable['_bind' + bindSource] = bindMap;\n    if (!bindMap) {\n        return;\n    }\n    bindMap.forEach(function (node) {\n        /* for static variable change the binding with target 'dataBinding' to 'dataSet', as the results have to reflect directly in the dataSet */\n        if (variable.category === 'wm.Variable' && node.target === 'dataBinding') {\n            node.target = 'dataSet';\n        }\n        processBindObject(node, context, bindTarget, variable);\n    });\n};\n\n/**\n * Downloads a file in the browser.\n * Two methods to do so, namely:\n * 1. downloadThroughAnchor, called if\n *      - if a header is to be passed\n *      OR\n *      - if security is ON and XSRF token is to be sent as well\n * NOTE: This method does not work with Safari version 10.0 and below\n *\n * 2. downloadThroughIframe\n *      - this method works across browsers and uses an iframe to downlad the file.\n * @param requestParams request params object\n * @param fileName represents the file name\n * @param exportFormat downloaded file format\n * @param success success callback\n * @param error error callback\n */\nexport const simulateFileDownload = (requestParams, fileName, exportFormat, success, error) => {\n    /*success and error callbacks are executed incase of downloadThroughAnchor\n     Due to technical limitation cannot be executed incase of iframe*/\n    if (CONSTANTS.hasCordova) {\n        let fileExtension;\n        if (exportFormat) {\n            fileExtension = exportTypesMap[exportFormat];\n        }\n        appManager.notify('device-file-download', { url: requestParams.url, name: fileName, extension: fileExtension, successCb: success, errorCb: error});\n    } else if (!_.isEmpty(requestParams.headers) || isXsrfEnabled()) {\n        downloadThroughAnchor(requestParams, success, error);\n    } else {\n        downloadThroughIframe(requestParams, success);\n    }\n};\n\n/**\n * sets the value against passed key on the \"inputFields\" object in the variable\n * @param targetObj: the object in which the key, value is to be set\n * @param variable\n * @param key: can be:\n *  - a string e.g. \"username\"\n *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n * @param val\n * - if key is string, the value against it (for that data type)\n * - if key is object, not required\n * @param options\n * @returns {any}\n */\nexport const setInput = (targetObj: any, key: any, val: any, options: any) => {\n    targetObj = targetObj || {};\n    let keys,\n        lastKey,\n        paramObj = {};\n\n    // content type check\n    if (_.isObject(options)) {\n        switch (options.type) {\n            case 'file':\n                val = getBlob(val, options.contentType);\n                break;\n            case 'number':\n                val = _.isNumber(val) ? val : parseInt(val, 10);\n                break;\n        }\n    }\n\n    if (_.isObject(key)) {\n        // check if the passed parameter is an object itself\n        paramObj = key;\n    } else if (key.indexOf('.') > -1) {\n        // check for '.' in key e.g. 'employee.department'\n        keys = key.split('.');\n        lastKey = keys.pop();\n        // Finding the object based on the key\n        targetObj = findValueOf(targetObj, keys.join('.'), true);\n        key = lastKey;\n        paramObj[key] = val;\n    } else {\n        paramObj[key] = val;\n    }\n\n    _.forEach(paramObj, function (paramVal, paramKey) {\n        targetObj[paramKey] = paramVal;\n    });\n    return targetObj;\n};\n\n/**\n * returns true if HTML5 File API is available else false\n * @returns {{prototype: Blob; new(blobParts?: any[], options?: BlobPropertyBag): Blob}}\n */\nexport const isFileUploadSupported = () => {\n    return (window.File && window.FileReader && window.FileList && window.Blob);\n};\n\n/**\n *\n * @param varOrder\n * @param optionsOrder\n * @returns {any}\n */\nexport const getEvaluatedOrderBy = (varOrder, optionsOrder) => {\n    let optionFields,\n        varOrderBy;\n    // If options order by is not defined, return variable order\n    if (!optionsOrder || _.isEmpty(optionsOrder)) {\n        return varOrder;\n    }\n    // If variable order by is not defined, return options order\n    if (!varOrder) {\n        return optionsOrder;\n    }\n    // If both are present, combine the options order and variable order, with options order as precedence\n    varOrder     = _.split(varOrder, ',');\n    optionsOrder = _.split(optionsOrder, ',');\n    optionFields = _.map(optionsOrder, function (order) {\n        return _.split(_.trim(order), ' ')[0];\n    });\n    // If a field is present in both options and variable, remove the variable orderby\n    _.remove(varOrder, function (orderBy) {\n        return _.includes(optionFields, _.split(_.trim(orderBy), ' ')[0]);\n    });\n    varOrderBy = varOrder.length ? ',' + _.join(varOrder, ',') : '';\n    return _.join(optionsOrder, ',') + varOrderBy;\n};\n\n/**\n * formatting the expression as required by backend which was enclosed by ${<expression>}.\n * @param fieldDefs\n * returns fieldDefs\n */\nexport const formatExportExpression = fieldDefs => {\n    _.forEach(fieldDefs, function (fieldDef) {\n        if (fieldDef.expression) {\n            fieldDef.expression = '${' + fieldDef.expression + '}';\n        }\n    });\n    return fieldDefs;\n};\n\nexport const debounceVariableCall = _invoke;\n\nconst getDateTimeFormatForType = (type) => {\n    return DEFAULT_FORMATS[_.toUpper(type)];\n};\n\n// Format value for datetime types\nconst _formatDate = (dateValue, type) => {\n    let epoch;\n    if (_.isDate(dateValue)) {\n        epoch = dateValue.getTime();\n    } else {\n        if (!isNaN(dateValue)) {\n            dateValue = parseInt(dateValue, 10);\n        }\n        epoch = dateValue && moment(dateValue).valueOf();\n    }\n    if (type === DataType.TIMESTAMP) {\n        return epoch;\n    }\n    if (type === DataType.TIME && !epoch) {\n        epoch = moment(new Date().toDateString() + ' ' + dateValue).valueOf();\n    }\n    return dateValue && appManager.getPipe('date').transform(epoch, getDateTimeFormatForType(type));\n};\n\n// Function to convert values of date time types into default formats\nexport const formatDate = (value, type) => {\n    if (_.includes(type, '.')) {\n        type = _.toLower(extractType(type));\n    }\n    if (_.isArray(value)) {\n        return _.map(value, function (val) {\n            return _formatDate(val, type);\n        });\n    }\n    return _formatDate(value, type);\n};\n","import { httpService, processBinding } from '../../util/variable/variables.utils';\nimport { appManager} from './../../util/variable/variables.utils';\nimport { AdvancedOptions } from '../../advanced-options';\n\ndeclare const _;\n\nexport abstract class BaseVariableManager {\n\n    initBinding(variable, bindSource?, bindTarget?) {\n        processBinding(variable, variable._context, bindSource, bindTarget);\n    }\n\n    notifyInflight(variable, status: boolean, data?: any) {\n        appManager.notify('toggle-variable-state', {\n            variable: variable,\n            active: status,\n            data: data\n        });\n    }\n\n    /**\n     * This method makes the final angular http call that returns an observable.\n     * We attach this observable to variable to cancel a network call\n     * @param requestParams\n     * @param variable\n     * @param dbOperation\n     */\n    httpCall(requestParams, variable, params?: any) {\n        return new Promise((resolve, reject) => {\n            variable._observable = httpService.sendCallAsObservable(requestParams, params).subscribe((response: any) => {\n                if (response && response.type) {\n                    resolve(response);\n                }\n            }, (err: any) => {\n                if (httpService.isPlatformSessionTimeout(err)) {\n                    // send the notification manually to hide any context spinners on page.\n                    // [TODO]: any spinners on widget listening on this variable will also go off. Need to see an approach to sovle that.\n                    this.notifyInflight(variable, false, err);\n                    err._401Subscriber.asObservable().subscribe(\n                        response => resolve(response),\n                        e => reject(e));\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    }\n\n    /**\n     * This method prepares the options parameter for variable callbacks.\n     * @param xhrObj, The xhrObj to be passed\n     * @param moreOptions, any other info to be passed in the options param\n     */\n    prepareCallbackOptions(xhrObj: any, moreOptions? : any): AdvancedOptions {\n        let options: AdvancedOptions = {};\n        options['xhrObj'] = xhrObj;\n        if (moreOptions) {\n            _.extend(options, moreOptions);\n        }\n        return options;\n    }\n}\n","import { BaseVariableManager } from './base-variable.manager';\n\ndeclare const _;\n\nconst checkEmptyObject = (obj) => {\n    let isEmpty = true;\n    _.forEach(obj, (value) => {\n        if (_.isEmpty(value)) {\n          return;\n        }\n        if (!_.isObject(value)) {\n            isEmpty = false;\n        } else if (_.isArray(value)) {\n            // If array, check if array is empty or if it has only one value and the value is empty\n            isEmpty = _.isEmpty(value) || (value.length === 1 ? _.isEmpty(value[0]) : false);\n        } else {\n            // If object, loop over the object to check if it is empty or not\n            isEmpty = checkEmptyObject(value);\n        }\n        return isEmpty; // isEmpty false will break the loop\n    });\n    return isEmpty;\n};\n\nexport class ModelVariableManager extends BaseVariableManager {\n    /*\n    * Case: a LIST type static variable having only one object\n    * and the object has all fields empty, remove that object\n    */\n    removeFirstEmptyObject(variable) {\n        if (_.isArray(variable.dataSet) && variable.dataSet.length === 1 && checkEmptyObject(variable.dataSet[0])) {\n            variable.dataSet = [];\n        }\n    }\n}\n","export class NotifyPromise {\n\n    constructor(fn) {\n        const notifyQueue = [],\n            notify = status => {\n            notifyQueue.forEach(fn1 => {\n                fn1(status);\n            });\n        };\n\n        const cleanUp = function() {\n            notifyQueue.length = 0;\n        };\n\n        const p1 =  new Promise((res, rej) => {\n            fn(res, rej, notify);\n        });\n\n        (p1 as any).superThen = p1.then.bind(p1);\n        (p1 as any).then = (onResolve, onReject, onNotify) => {\n            (p1 as any).superThen(\n                response => {\n                    onResolve(response);\n                    cleanUp();\n                },\n                reason => {\n                    onResolve(reason);\n                    cleanUp();\n                }\n            );\n            if (onNotify) {\n                notifyQueue.push(onNotify);\n            }\n        };\n        return p1;\n    }\n}\n\n// let newPromise = new PromiseWithNotify((resolve, reject, notify) => {\n//     setInterval(notify, 1000);\n// })\n// console.log(newPromise)\n// newPromise.then(undefined, undefined, () => console.log(3));\n","import { triggerFn } from '@wm/core';\n\nimport { NotifyPromise } from './notify-promise';\nimport { httpService } from './variable/variables.utils';\n\ndeclare const _;\n\nenum HTTP_EVENT_TYPE {\n    Sent = 0,\n    UploadProgress = 1,\n    ResponseHeader = 2,\n    DownloadProgress = 3,\n    Response= 4,\n    User = 5\n}\n\nenum UPLOAD_STATUS {\n    QUEUED        = 'queued',\n    IN_PROGRESS   = 'inprogress',\n    SUCCESS       = 'success',\n    ERROR         = 'error',\n    ABORTED       = 'abort'\n}\n\nfunction transformEvent(event) {\n    event.target = event.target || {\n        status: event.responseCode,\n        response: event.response\n    };\n    return event;\n}\n\nclass FileTransferObject {\n    name: string;\n    size: string;\n    status: string;\n    transferFn: Function;\n    abortFn: Function;\n    promise: any;\n    progress: number;\n\n    constructor(file, transferFn, promise, abortFn) {\n        this.name = file.name;\n        this.size = file.size || '';\n        this.status = UPLOAD_STATUS.QUEUED;\n        this.transferFn = transferFn;\n        this.promise = promise;\n        this.abortFn = abortFn;\n    }\n\n    start() {\n        if (this.status === UPLOAD_STATUS.QUEUED) {\n            this.status = UPLOAD_STATUS.IN_PROGRESS;\n            triggerFn(this.transferFn);\n        }\n    }\n\n    then(onSuccess, onError, onProgress) {\n        const self = this;\n        this.promise.then(function (event) {\n            self.status = UPLOAD_STATUS.SUCCESS;\n            triggerFn(onSuccess, event);\n        }, function (event) {\n            self.status = UPLOAD_STATUS.ERROR;\n            triggerFn(onError, event);\n        }, function (event) {\n            self.progress = Math.round(event.loaded / event.total * 100);\n            triggerFn(onProgress, event);\n        });\n        return this;\n    }\n\n    finally(onFinal?) {\n        this.promise.finally(onFinal);\n    }\n\n    /* aborts the file upload */\n    abort() {\n        this.status = UPLOAD_STATUS.ABORTED;\n        triggerFn(this.abortFn);\n        this.finally();\n    }\n\n}\n\nclass AjaxFileTransferObject extends FileTransferObject {\n    constructor(file, transferFn, promise, abortFn) {\n        super(file, transferFn, promise, abortFn);\n    }\n}\n\n/* upload file using fileTransfer */\nfunction uploadWithFileTransfer(file, url, options) {}\n\nfunction appendFileToFormData(file, fd, options) {\n    /* append file to form data */\n    if (_.isArray(file)) {\n        _.forEach(file, function (fileObject) {\n            fd.append(options.paramName, fileObject.content || fileObject, fileObject.name);\n        });\n    } else if (_.isObject(file)) {\n        fd.append(options.paramName, file.content || file, file.name);\n    }\n}\n\n/* upload file with ajax calling */\nfunction uploadWithAjax(file, fd, url, options) {\n    const cloneFD = new FormData();\n    const iterate = (value, key) => {\n        const fileObject = (_.isArray(value) ? value[0] : value);\n        if (!(fileObject instanceof File || fileObject instanceof Blob)) {\n            cloneFD.append(key, value);\n        }\n    };\n    // The foreeach method on form data doesn't exist in IE. Hence we check if it exists\n    // or else use the lodash forEach\n    if (fd.forEach) {\n        fd.forEach(iterate);\n    } else {\n        _.forEach(fd, iterate);\n    }\n    appendFileToFormData(file, cloneFD, options);\n\n    const promise = new NotifyPromise((resolve, reject, notify) => {\n        const request = httpService.upload(url, cloneFD).subscribe(event => {\n            if (event.type === HTTP_EVENT_TYPE.UploadProgress) {\n                const uploadProgress = Math.round(100 * event.loaded / event.total);\n                notify(uploadProgress);\n            }\n\n            if (event.type === HTTP_EVENT_TYPE.Response) {\n                resolve(event.body);\n            }\n        });\n        file._uploadProgress = request;\n    });\n\n    return promise;\n}\n\n/* upload the file - IE9 support */\nfunction uploadWithIframe(file, url, options) {}\n\n/* upload the next file depending on the status */\nfunction starNextFileTransfer(fts) {\n    const ft = _.find(fts, function (f) {\n        return f.status === UPLOAD_STATUS.QUEUED;\n    });\n    if (ft) {\n        ft.start();\n        ft.finally(starNextFileTransfer.bind(undefined, fts));\n    }\n}\n\n/* upload the max no of files at once i.e. two at once based on max*/\nfunction startFileTransfers(fts, max) {\n    let i = 0;\n    const len = fts.length;\n    while (i < max && i < len) {\n        starNextFileTransfer(fts);\n        i++;\n    }\n}\n\nfunction isMobileApp() {\n    return false;\n}\n\n/**\n * This function uploads the file to the given url endpoint.\n *\n * @param file file to upload\n * @param url http endpoint to which the file has to be submitted.\n * @param options\n * @returns a promise to listen for success, event, onProgress.\n *  One can also abort the upload by simply calling abort function.\n */\nexport function upload(files, fd, config, options?) {\n    options = _.extend({\n        'paramName' : config.fileParamName\n    }, options);\n    return uploadWithAjax(files, fd, config.url, options);\n    // let fileTransfers = [],\n    //     url = config.uploadUrl;\n    // options = _.extend({\n    //     'paramName' : config.fileParamName\n    // }, options);\n    //\n    // if (isMobileApp()) {\n    //     _.forEach(files, function (file) {\n    //         fileTransfers.push(uploadWithFileTransfer(file, url, options));\n    //     });\n    // } else if ((window as any).FormData) {\n    //     _.forEach(files, function (file) {\n    //         fileTransfers.push(uploadWithAjax(file, url, options));\n    //     });\n    // } else {\n    //     _.forEach(files, function (file) {\n    //         fileTransfers.push(uploadWithIframe(file, url, options));\n    //     });\n    // }\n    // startFileTransfers(fileTransfers, 2);\n    // return fileTransfers;\n}\n","import { oauthService } from './variable/variables.utils';\n\nexport const performAuthorization = (url, providerId, onSuccess, onError) => {\n    oauthService.perfromOAuthorization(url, providerId, onSuccess, onError);\n};\n\nexport const getAccessToken = (provider, checkLoaclStorage) => {\n    return oauthService.getAccessToken(provider, checkLoaclStorage);\n};\n\nexport const removeAccessToken = (provider) => {\n    oauthService.removeAccessToken(provider);\n}\n","import { extractType, getBlob, isDateTimeType, isDefined, replace } from '@wm/core';\n\nimport { $rootScope, CONSTANTS, SWAGGER_CONSTANTS, VARIABLE_CONSTANTS, WS_CONSTANTS } from '../../constants/variables.constants';\nimport { isFileUploadSupported } from './variables.utils';\nimport { getAccessToken } from './../oAuth.utils';\nimport { formatDate } from '../../util/variable/variables.utils';\n\ndeclare const _;\n\n/**\n * returns true if a Service variable is:\n *  - for a query/procedure\n *  - performs a PUT/POST operation, i.e, takes a Request Body as input\n * @param variable\n * @returns {any}\n */\nconst isBodyTypeQueryOrProcedure = (variable) => {\n    return (_.includes(['QueryExecution', 'ProcedureExecution'], variable.controller)) && (_.includes(['put', 'post'], variable.operationType));\n};\n\n/**\n * returns true if the variable is a Query service variable\n * @param {string} controller\n * @param {string} serviceType\n * @returns {boolean}\n */\nconst isQueryServiceVar = (controller: string, serviceType: string) => {\n    return controller === VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY && serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.DATA;\n};\n\n/**\n * Append given value to the formdata\n * @param formData\n * @param param - Param from which value has to be taken\n * @param paramValue - Value which is to be appended to formdata\n */\nconst getFormData = (formData, param, paramValue) => {\n    const paramType = _.toLower(extractType(_.get(param, 'items.type') || param.type)),\n        paramContentType = CONSTANTS.isStudioMode ? param['x-WM-CONTENT_TYPE'] : param.contentType;\n    if (isFileUploadSupported()) {\n        if ((paramType !== 'file') && (paramContentType === 'string' || !paramContentType)) {\n            if (_.isObject(paramValue)) {\n                paramValue = JSON.stringify(paramValue);\n            }\n            formData.append(param.name, paramValue);\n        } else {\n            if (_.isArray(paramValue) && paramType === 'file') {\n                _.forEach(paramValue, function (fileObject) {\n                    formData.append(param.name, (fileObject && fileObject.content) || getBlob(fileObject), fileObject.name);\n                });\n            } else {\n                formData.append(param.name, getBlob(paramValue, paramContentType), paramValue && paramValue.name);\n            }\n        }\n        return formData;\n    }\n};\n\n/**\n * Check for missing required params and format the date/time param values\n * @param inputData\n * @param params\n * @returns {{requestBody: {}; missingParams: any[]}}\n */\nconst processRequestBody = (inputData, params) => {\n    const requestBody = {},\n        missingParams = [];\n    let paramValue;\n    _.forEach(params, function (param) {\n        paramValue = _.get(inputData, param.name);\n        if (!_.isUndefined(paramValue) && paramValue !== '' && paramValue !== null && !param.readOnly) {\n            paramValue = isDateTimeType(param.type) ? formatDate(paramValue, param.type) : paramValue;\n            // Construct ',' separated string if param is not array type but value is an array\n            if (_.isArray(paramValue) && _.toLower(extractType(param.type)) === 'string') {\n                paramValue = _.join(paramValue, ',');\n            }\n            requestBody[param.name] = paramValue;\n        } else if (param.required) {\n            missingParams.push(param.name || param.id);\n        }\n    });\n    return {\n        'requestBody': requestBody,\n        'missingParams': missingParams\n    };\n};\n\n/**\n * Done only for HTTP calls made via the proxy server\n * Goes though request headers, appends 'X-' to certain headers\n * these headers need not be processed at proxy server and should directly be passed to the server\n * e.g. Authorization, Cookie, etc.\n * @param headers\n * @returns {{}}\n */\nconst cloakHeadersForProxy = (headers) => {\n    const _headers = {},\n        UNCLOAKED_HEADERS = VARIABLE_CONSTANTS.REST_SERVICE.UNCLOAKED_HEADERS,\n        CLOAK_PREFIX = VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.CLOAK_HEADER_KEY;\n    _.forEach(headers, function (val, key) {\n        if (_.includes(UNCLOAKED_HEADERS, key.toUpperCase())) {\n            _headers[key] = val;\n        } else {\n            _headers[CLOAK_PREFIX + key] = val;\n        }\n    });\n\n    return _headers;\n};\n\nexport class ServiceVariableUtils {\n    /**\n     * prepares the HTTP request info for a Service Variable\n     * @param variable\n     * @param operationInfo\n     * @param inputFields\n     * @returns {any}\n     */\n    static constructRequestParams(variable, operationInfo, inputFields) {\n        variable = variable || {};\n\n        // operationInfo is specifically null for un_authorized access\n        if (operationInfo === null) {\n            return {\n                'error' : {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.USER_UNAUTHORISED,\n                    'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.USER_UNAUTHORISED,\n                    'field': '_wmServiceOperationInfo'\n                }\n            };\n        } else if (_.isEmpty(operationInfo)) {\n            return {\n                'error' : {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING,\n                    'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.METADATA_MISSING,\n                    'field': '_wmServiceOperationInfo'\n                }\n            };\n        }\n\n        const directPath = operationInfo.directPath || '',\n        relativePath = operationInfo.basePath ? operationInfo.basePath + operationInfo.relativePath : operationInfo.relativePath,\n        isBodyTypeQueryProcedure = isBodyTypeQueryOrProcedure(variable);\n        let queryParams = '',\n        bodyInfo,\n        headers = {},\n        requestBody,\n        url,\n        requiredParamMissing = [],\n        target,\n        pathParamRex,\n        invokeParams,\n        authDetails = null,\n        uname,\n        pswd,\n        method,\n        formData,\n        isProxyCall,\n        paramValueInfo,\n        params,\n        securityDefnObj,\n        accessToken,\n        withCredentials;\n\n        function getFormDataObj() {\n            if (formData) {\n                return formData;\n            }\n            formData = new FormData();\n            return formData;\n        }\n\n        securityDefnObj = _.get(operationInfo.securityDefinitions, '0');\n\n        if (securityDefnObj) {\n            switch (securityDefnObj.type) {\n                case VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2:\n                    accessToken = getAccessToken(securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);\n                    if (accessToken) {\n                        headers[VARIABLE_CONSTANTS.REST_SERVICE.AUTH_HDR_KEY] = VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.AUTH_HDR_VAL.OAUTH + ' ' + accessToken;\n                    } else {\n                        return {\n                            'error': {\n                                'type' : VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_ACCESSTOKEN,\n                                'message' : VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.NO_ACCESSTOKEN\n                            },\n                            'securityDefnObj': securityDefnObj\n                        };\n                    }\n                    break;\n                case VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.BASIC:\n                    uname = inputFields['wm_auth_username'];\n                    pswd = inputFields['wm_auth_password'];\n                    if (uname && pswd) {\n                        // TODO[VIBHU]: bas64 encoding alternative.\n                        headers[VARIABLE_CONSTANTS.REST_SERVICE.AUTH_HDR_KEY] = VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.AUTH_HDR_VAL.BASIC + ' ' + btoa(uname + ':' + pswd);\n                        authDetails = {\n                            'type': VARIABLE_CONSTANTS.REST_SERVICE.AUTH_TYPE.BASIC\n                        };\n                    } else {\n                        return {\n                            'error': {\n                                'type' : VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_CREDENTIALS,\n                                'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.NO_CREDENTIALS\n                            },\n                            'securityDefnObj': securityDefnObj\n                        };\n                    }\n                    break;\n            }\n        }\n        operationInfo.proxySettings = operationInfo.proxySettings || {web: true, mobile: false};\n        method = operationInfo.httpMethod || operationInfo.methodType;\n        isProxyCall = (function () {\n            if (CONSTANTS.hasCordova) {\n                return operationInfo.proxySettings.mobile;\n            }\n            return operationInfo.proxySettings.web;\n        }());\n        withCredentials = operationInfo.proxySettings.withCredentials;\n        url = isProxyCall ? relativePath : directPath;\n\n        /* loop through all the parameters */\n        _.forEach(operationInfo.parameters, function (param) {\n            // Set params based on current workspace\n            function setParamsOfChildNode() {\n                if (inputFields) {\n                    // specific case for body type query/procedure variable with query params\n                    if (inputFields[param.name] && _.isObject(inputFields[param.name])) {\n                        paramValueInfo = inputFields[param.name];\n                    } else {\n                        paramValueInfo = inputFields;\n                    }\n                    params = _.get(operationInfo, ['definitions', param.type]);\n                } else {\n                    // For Api Designer\n                    paramValueInfo = paramValue || {};\n                    params = param.children;\n                }\n            }\n\n            let paramValue = param.sampleValue;\n\n            if ((isDefined(paramValue) && paramValue !== null && paramValue !== '') || (isBodyTypeQueryProcedure && param.type !== 'file')) {\n                // Format dateTime params for dataService variables\n                if (variable.serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.DATA && isDateTimeType(param.type)) {\n                    paramValue = formatDate(paramValue, param.type);\n                }\n                // Construct ',' separated string if param is not array type but value is an array\n                if (_.isArray(paramValue) && _.toLower(extractType(param.type)) === 'string' && variable.serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.DATA) {\n                    paramValue = _.join(paramValue, ',');\n                }\n                switch (param.parameterType.toUpperCase()) {\n                    case 'QUERY':\n                        // Ignore null valued query params for queryService variable\n                        if (_.isNull(paramValue) && isQueryServiceVar(variable.controller, variable.serviceType)) {\n                            break;\n                        }\n                        if (!queryParams) {\n                            queryParams = '?' + param.name + '=' + encodeURIComponent(paramValue);\n                        } else {\n                            queryParams += '&' + param.name + '=' + encodeURIComponent(paramValue);\n                        }\n                        break;\n                    case 'PATH':\n                        /* replacing the path param based on the regular expression in the relative path */\n                        pathParamRex = new RegExp('\\\\s*\\\\{\\\\s*' + param.name + '(:\\\\.\\\\+)?\\\\s*\\\\}\\\\s*');\n                        url = url.replace(pathParamRex, paramValue);\n                        break;\n                    case 'HEADER':\n                        headers[param.name] = paramValue;\n                        break;\n                    case 'BODY':\n                        // For post/put query methods wrap the input\n                        if (isBodyTypeQueryProcedure) {\n                            setParamsOfChildNode();\n                            bodyInfo = processRequestBody(paramValueInfo, params);\n                            requestBody = bodyInfo.requestBody;\n                            requiredParamMissing = _.concat(requiredParamMissing, bodyInfo.missingParams);\n                        } else {\n                            requestBody = paramValue;\n                        }\n                        break;\n                    case 'FORMDATA':\n                        if (isBodyTypeQueryProcedure && param.name === SWAGGER_CONSTANTS.WM_DATA_JSON) {\n                            setParamsOfChildNode();\n                            // Process query/procedure formData non-file params params\n                            bodyInfo = processRequestBody(paramValueInfo, params);\n                            requestBody = getFormData(getFormDataObj(), param, bodyInfo.requestBody);\n                            requiredParamMissing = _.concat(requiredParamMissing, bodyInfo.missingParams);\n                        } else {\n                            requestBody = getFormData(getFormDataObj(), param, paramValue);\n                        }\n                        break;\n                }\n            } else if (param.required) {\n                requiredParamMissing.push(param.name || param.id);\n            }\n        });\n\n        // if required param not found, return error\n        if (requiredParamMissing.length) {\n            return {\n                'error': {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.REQUIRED_FIELD_MISSING,\n                    'field': requiredParamMissing.join(','),\n                    'message': replace(VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.REQUIRED_FIELD_MISSING, [requiredParamMissing.join(',')]),\n                    'skipDefaultNotification': true\n                }\n            };\n        }\n\n        // Setting appropriate content-Type for request accepting request body like POST, PUT, etc\n        if (!_.includes(WS_CONSTANTS.NON_BODY_HTTP_METHODS, _.toUpper(method))) {\n            /*Based on the formData browser will automatically set the content type to 'multipart/form-data' and webkit boundary*/\n            if (!(operationInfo.consumes && (operationInfo.consumes[0] === WS_CONSTANTS.CONTENT_TYPES.MULTIPART_FORMDATA))) {\n                headers['Content-Type'] = (operationInfo.consumes && operationInfo.consumes[0]) || 'application/json';\n            }\n        }\n\n        // if the consumes has application/x-www-form-urlencoded and\n        // if the http request of given method type can have body send the queryParams as Form Data\n        if (_.includes(operationInfo.consumes, WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED)\n            && !_.includes(WS_CONSTANTS.NON_BODY_HTTP_METHODS, (method || '').toUpperCase())) {\n            // remove the '?' at the start of the queryParams\n            if (queryParams) {\n                requestBody = (requestBody ? requestBody + '&' : '') + queryParams.substring(1);\n            }\n            headers['Content-Type'] = WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED;\n        } else {\n            url += queryParams;\n        }\n\n        /*\n         * for proxy calls:\n         *  - cloak the proper headers (required only for REST services)\n         *  - prepare complete url from relativeUrl\n         */\n        if (isProxyCall) {\n            // avoiding cloakHeadersForProxy when the method is invoked from apidesigner.\n                headers = variable.serviceType !== VARIABLE_CONSTANTS.SERVICE_TYPE.REST || operationInfo.skipCloakHeaders ? headers : cloakHeadersForProxy(headers);\n            if (variable.getPrefabName() && VARIABLE_CONSTANTS.REST_SUPPORTED_SERVICES.indexOf(variable.serviceType) !== -1) {\n                /* if it is a prefab variable (used in a normal project), modify the url */\n                url = 'prefabs/' + variable.getPrefabName() + url;\n                target = 'invokePrefabRestService';\n            } else if (!variable.getPrefabName()) {\n                url = 'services' + url;\n            }\n            url = $rootScope.project.deployedUrl + url;\n        }\n\n        /*creating the params needed to invoke the service. url is generated from the relative path for the operation*/\n        invokeParams = {\n            'projectID': $rootScope.project.id,\n            'url': url,\n            'target': target,\n            'method': method,\n            'headers': headers,\n            'data': requestBody,\n            'authDetails': authDetails,\n            'isDirectCall': !isProxyCall,\n            'isExtURL': variable.serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.REST,\n            'withCredentials': withCredentials\n        };\n\n        return invokeParams;\n    }\n\n    static isFileUploadRequest(variable) {\n        // temporary fix, have to find proper solution for deciding weather to upload file through variable\n        return variable.service === 'FileService' && variable.operation === 'uploadFile';\n    }\n\n    /**\n     * This method returns array of query param names for variable other then page,size,sort\n     * @params {params} params of the variable\n     */\n    static excludePaginationParams(params) {\n        return _.map(_.reject(params, (param) => {\n            return _.includes(VARIABLE_CONSTANTS.PAGINATION_PARAMS, param.name);\n        }), function (param) {\n            return param.name;\n        });\n    }\n}\n","class InflightQueue {\n    requestsQueue = new Map();\n\n    /**\n     * pushes the process against a variable in its queue\n     * @param variable\n     * @param {{resolve: (value?: any) => void; reject: (reason?: any) => void}} param2\n     * the resolve callback will be called on\n     */\n    private addToQueue(variable: any, param2: {resolve: (value?: (any)) => void; reject: (reason?: any) => void}) {\n        if (this.requestsQueue.has(variable)) {\n            this.requestsQueue.get(variable).push(param2);\n        } else {\n            const processes = [];\n            processes.push({resolve: param2.resolve, reject: param2.reject, active: false});\n            this.requestsQueue.set(variable, processes);\n        }\n    }\n\n    /**\n     * Calls the reject method against the passed process\n     * @param process\n     */\n    private rejectProcess(process: any) {\n        process.reject('Process rejected in the queue. Check the \"Inflight behavior\" for more info.');\n    }\n\n    /**\n     * clears the queue against a variable\n     * @param variable\n     */\n    public clear(variable) {\n        this.requestsQueue.delete(variable);\n    }\n\n    /**\n     * executes the n/w calls for a specified variable pushed in its respective queue (pushed while it was inFlight)\n     * @param variable\n     */\n    process(variable: any) {\n        const processes: [any] = this.requestsQueue.get(variable);\n        let nextProcess;\n\n        // process request queue for the variable only if it is not empty\n        if (!processes || !processes.length) {\n            this.clear(variable);\n            return;\n        }\n\n        // If only one item in queue\n        if (processes.length === 1) {\n            nextProcess = processes[0];\n            if (nextProcess.active) {\n                this.clear(variable);\n            } else {\n                nextProcess.active = true;\n                nextProcess.resolve();\n            }\n            return;\n        }\n\n        switch (variable.inFlightBehavior) {\n            case 'executeLast':\n                for (let i = 0; i < processes.length - 2; i++) {\n                    this.rejectProcess(processes[i]);\n                }\n                processes.splice(0, processes.length - 1);\n                this.process(variable);\n                break;\n            case 'executeAll':\n                nextProcess = processes.splice(0, 1)[0];\n                if (nextProcess.active) {\n                    nextProcess = processes.splice(0, 1)[0];\n                }\n                nextProcess.active = true;\n                nextProcess.resolve();\n                break;\n            default:\n                for (let i = 0; i < processes.length - 1; i++) {\n                    this.rejectProcess(processes[i]);\n                }\n                this.clear(variable);\n                break;\n        }\n    }\n\n    /**\n     * initializes the queue against a variable and makes the first process call\n     * If already initialized and a process in queue is in progress, the queue is not processed.\n     * To process the next item in the queue, the process method has to be called from the caller.\n     * @param variable\n     * @returns {Promise<any>}\n     */\n    submit(variable: any) {\n        return new Promise((resolve, reject) => {\n            this.addToQueue(variable, {resolve: resolve, reject: reject});\n\n            if (this.requestsQueue.get(variable).length === 1) {\n                this.process(variable);\n            }\n        });\n    }\n}\n\nexport const $queue = new InflightQueue();\n","import { $invokeWatchers, getClonedObject, getValidJSON, isDefined, isPageable, isValidWebURL, noop, triggerFn, xmlToJson } from '@wm/core';\n\nimport { upload } from '../../util/file-upload.util';\nimport { ServiceVariable } from '../../model/variable/service-variable';\nimport { ServiceVariableUtils } from '../../util/variable/service-variable.utils';\nimport { $queue } from '../../util/inflight-queue';\nimport { BaseVariableManager } from './base-variable.manager';\nimport { CONSTANTS, VARIABLE_CONSTANTS, WS_CONSTANTS } from '../../constants/variables.constants';\nimport { appManager, formatExportExpression, setInput } from './../../util/variable/variables.utils';\nimport { getEvaluatedOrderBy, httpService, initiateCallback, metadataService, securityService, simulateFileDownload } from '../../util/variable/variables.utils';\nimport { getAccessToken, performAuthorization, removeAccessToken } from '../../util/oAuth.utils';\nimport { AdvancedOptions } from '../../advanced-options';\n\ndeclare const _;\n\nexport class ServiceVariableManager extends BaseVariableManager {\n\n    fileUploadResponse: any = [];\n    fileUploadCount = 0;\n    totalFilesCount = 0;\n    successFileUploadCount = 0;\n    failedFileUploadCount = 0;\n\n    /**\n     * function to process error response from a service\n     * @param {ServiceVariable} variable\n     * @param {string} errMsg\n     * @param {Function} errorCB\n     * @param xhrObj\n     * @param {boolean} skipNotification\n     * @param {boolean} skipDefaultNotification\n     */\n    private processErrorResponse(variable: ServiceVariable, errMsg: string, errorCB: Function, xhrObj?: any, skipNotification?: boolean, skipDefaultNotification?: boolean) {\n        const methodInfo = this.getMethodInfo(variable, {}, {});\n        const securityDefnObj = _.get(methodInfo, 'securityDefinitions.0');\n        const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(xhrObj);\n        // EVENT: ON_ERROR\n        if (!skipNotification) {\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, errMsg, advancedOptions, skipDefaultNotification);\n        }\n        if (_.get(securityDefnObj, 'type') === VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2\n            && _.includes([VARIABLE_CONSTANTS.HTTP_STATUS_CODE.UNAUTHORIZED, VARIABLE_CONSTANTS.HTTP_STATUS_CODE.FORBIDDEN], _.get(xhrObj, 'status'))) {\n            removeAccessToken(securityDefnObj['x-WM-PROVIDER_ID']);\n        }\n        /* trigger error callback */\n        triggerFn(errorCB, errMsg);\n\n        if (!CONSTANTS.isStudioMode) {\n            /* process next requests in the queue */\n            variable.canUpdate = true;\n            $queue.process(variable);\n\n            // EVENT: ON_CAN_UPDATE\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, errMsg, advancedOptions);\n        }\n    }\n\n    /**\n     * function to process success response from a service\n     * @param response\n     * @param variable\n     * @param options\n     * @param success\n     */\n    private processSuccessResponse(response, variable, options, success) {\n        let dataSet;\n        let newDataSet;\n        let pagination = {};\n        let advancedOptions: AdvancedOptions;\n        let jsonParsedResponse: any = getValidJSON(response);\n\n        response = isDefined(jsonParsedResponse) ? jsonParsedResponse : (xmlToJson(response) || response);\n\n        const isResponsePageable = isPageable(response);\n        if (isResponsePageable) {\n            dataSet = response.content;\n            pagination = _.omit(response, 'content');\n        } else {\n            dataSet = response;\n        }\n        /**\n         * send pagination object with advancedOptions all the time.\n         * With this, user can provide pagination option, even if it is not there.\n         * applicable to 3rd party services that do not support pagination out of the box.\n         */\n        advancedOptions = this.prepareCallbackOptions(options.xhrObj, {pagination: pagination, rawData: dataSet});\n\n        // EVENT: ON_RESULT\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n\n        // trigger success callback, pass data received from server as it is.\n        triggerFn(success, response, pagination);\n\n        /* if dataTransformation enabled, transform the data */\n        if (variable.transformationColumns) {\n            this.transformData(response, variable);\n        }\n\n        // if a primitive type response is returned, wrap it in an object\n        dataSet = (!_.isObject(dataSet)) ? {'value': dataSet} : dataSet;\n\n        // EVENT: ON_PREPARE_SETDATA\n        newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, dataSet, advancedOptions);\n        if (isDefined(newDataSet)) {\n            // setting newDataSet as the response to service variable onPrepareSetData\n            dataSet = newDataSet;\n        }\n\n        /* update the dataset against the variable, if response is non-object, insert the response in 'value' field of dataSet */\n        if (!options.forceRunMode && !options.skipDataSetUpdate) {\n            variable.pagination = pagination;\n            variable.dataSet = dataSet;\n\n            // legacy properties in dataSet, [content]\n            if (isResponsePageable) {\n                Object.defineProperty(variable.dataSet, 'content', {\n                    get: () => {\n                        return variable.dataSet;\n                    }\n                });\n            }\n        }\n\n        $invokeWatchers(true);\n        setTimeout(() => {\n            // EVENT: ON_SUCCESS\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, dataSet, advancedOptions);\n\n            if (!CONSTANTS.isStudioMode) {\n                /* process next requests in the queue */\n                variable.canUpdate = true;\n                $queue.process(variable);\n            }\n\n            // EVENT: ON_CAN_UPDATE\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, dataSet, advancedOptions);\n        });\n\n        return {\n            data: variable.dataSet,\n            pagination: variable.pagination\n        };\n    }\n\n    private uploadFileInFormData(variable: ServiceVariable, options: any, success: Function, error: Function, file, requestParams) {\n        const promise = upload(file, requestParams.data, {\n            fileParamName: 'files',\n            url: requestParams.url\n        });\n        (promise as any).then((data) => {\n            this.fileUploadCount++;\n            this.successFileUploadCount++;\n            this.fileUploadResponse.push(data[0]);\n            if (this.totalFilesCount === this.fileUploadCount) {\n                if (this.failedFileUploadCount === 0) {\n                    this.processSuccessResponse(this.fileUploadResponse, variable, options, success);\n                    this.fileUploadResponse = [];\n                    appManager.notifyApp(appManager.getAppLocale().MESSAGE_FILE_UPLOAD_SUCCESS, 'success');\n                } else {\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, this.fileUploadResponse);\n                    this.fileUploadResponse = [];\n                    appManager.notifyApp(appManager.getAppLocale().MESSAGE_FILE_UPLOAD_ERROR, 'error');\n                }\n                this.fileUploadCount = 0;\n                this.successFileUploadCount = 0;\n                this.totalFilesCount = 0;\n            }\n            return data;\n        }, (e) => {\n            this.fileUploadCount++;\n            this.failedFileUploadCount++;\n            this.fileUploadResponse.push(e);\n            if (this.totalFilesCount === this.fileUploadCount) {\n                this.processErrorResponse(variable, this.fileUploadResponse, error, options.xhrObj, options.skipNotification);\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, this.fileUploadResponse);\n                this.fileUploadResponse = [];\n                this.fileUploadCount = 0;\n                this.failedFileUploadCount = 0;\n                this.totalFilesCount = 0;\n            }\n            return e;\n        }, (data) => {\n            if (variable._progressObservable) {\n                variable._progressObservable.next({\n                    'progress': data,\n                    'status': VARIABLE_CONSTANTS.EVENT.PROGRESS,\n                    'fileName': file.name});\n            }\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.PROGRESS, variable, data);\n            return data;\n        });\n        return promise;\n    }\n\n    /**\n     * Checks if the user is logged in or not and returns appropriate error\n     * If user is not logged in, Session timeout logic is run, for user to login\n     * @param variable\n     * @returns {any}\n     */\n    private handleAuthError(variable, success, errorCB, options) {\n        const isUserAuthenticated = _.get(securityService.get(), 'authenticated');\n        let info;\n\n        if (isUserAuthenticated) {\n            info = {\n                error: {\n                    message: 'You\\'re not authorised to access the resource \"' + variable.service + '\".'\n                }\n            };\n        } else {\n            info = {\n                error: {\n                    message: 'You\\'re not authenticated to access the resource \"' + variable.service + '\".',\n                    skipDefaultNotification: true\n                }\n            };\n            appManager.pushToSessionFailureRequests(variable.invoke.bind(variable, options, success, errorCB));\n            appManager.handle401();\n        }\n        return info;\n    }\n\n    /**\n     * Handles error, when variable's metadata is not found. The reason for this can be:\n     *  - API is secure and user is not logged in\n     *  - API is secure and user is logged in but not authorized\n     *  - The servicedefs are not generated properly at the back end (need to edit the variable and re-run the project)\n     * @param info\n     * @param variable\n     * @param errorCB\n     * @param options\n     */\n    private handleRequestMetaError(info, variable, success, errorCB, options) {\n        const err_type = _.get(info, 'error.type');\n\n        switch (err_type) {\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_ACCESSTOKEN:\n                performAuthorization(undefined, info.securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], this.invoke.bind(this, variable, options, null, errorCB), null);\n                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, true, true);\n                break;\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.USER_UNAUTHORISED:\n                info = this.handleAuthError(variable, success, errorCB, options);\n                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);\n                break;\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING:\n                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);\n                break;\n            default:\n                if (info.error.message) {\n                    console.warn(info.error.message, variable.name);\n                    this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);\n                }\n        }\n        return info;\n    }\n\n    /**\n     * function to transform the service data as according to the variable configuration\n     * this is used when 'transformationColumns' property is set on the variable\n     * @param data: data returned from the service\n     * @variable: variable object triggering the service\n     */\n    private transformData(data, variable) {\n        data.wmTransformedData = [];\n\n        const columnsArray = variable.transformationColumns,\n            dataArray = _.get(data, variable.dataField) || [],\n            transformedData = data.wmTransformedData;\n\n        _.forEach(dataArray, function (datum, index) {\n            transformedData[index] = {};\n            _.forEach(columnsArray, function (column, columnIndex) {\n                transformedData[index][column] = datum[columnIndex];\n            });\n        });\n    }\n\n    /**\n     * gets the service operation info against a service variable\n     * this is extracted from the metadataservice\n     * @param variable\n     * @param inputFields: sample values, if provided, will be set against params in the definition\n     * @param options\n     * @returns {any}\n     */\n    private getMethodInfo(variable, inputFields, options) {\n        const serviceDef = getClonedObject(metadataService.getByOperationId(variable.operationId, variable.getPrefabName()));\n        const methodInfo = serviceDef === null ? null : _.get(serviceDef, 'wmServiceOperationInfo');\n        if (!methodInfo) {\n            return methodInfo;\n        }\n        const securityDefnObj = _.get(methodInfo.securityDefinitions, '0'),\n            isOAuthTypeService = securityDefnObj && (securityDefnObj.type === VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2);\n        if (methodInfo.parameters) {\n            methodInfo.parameters.forEach(function (param) {\n                // Ignore readOnly params in case of formData file params will be duplicated\n                if (param.readOnly) {\n                    return;\n                }\n                param.sampleValue = inputFields[param.name];\n                /* supporting pagination for query service variable */\n                if (VARIABLE_CONSTANTS.PAGINATION_PARAMS.indexOf(param.name) !== -1) {\n                    if (param.name === 'size') {\n                        param.sampleValue = options.size || param.sampleValue || parseInt(variable.maxResults, 10);\n                    } else if (param.name === 'page') {\n                        param.sampleValue = options.page || param.sampleValue || 1;\n                    } else if (param.name === 'sort') {\n                        param.sampleValue = getEvaluatedOrderBy(variable.orderBy, options.orderBy) || param.sampleValue || '';\n                    }\n                } else if (param.name === 'access_token' && isOAuthTypeService) {\n                    param.sampleValue = getAccessToken(securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);\n                }\n            });\n        }\n        return methodInfo;\n    }\n\n    /**\n     * Returns true if any of the files are in onProgress state\n     */\n    private isFileUploadInProgress(dataBindings) {\n        let filesStatus = false;\n        _.forEach(dataBindings, (dataBinding) => {\n            if (_.isArray(dataBinding) && dataBinding[0] instanceof File) {\n                _.forEach(dataBinding, (file) => {\n                    if (file.status === 'onProgress') {\n                        filesStatus = true;\n                        return;\n                    }\n                });\n            }\n        });\n        return filesStatus;\n    }\n\n    // Makes the call for Uploading file/ files\n    private uploadFile(variable, options, success, error, inputFields, requestParams ) {\n        let fileParamCount = 0;\n        const fileArr: any = [], promArr: any = [];\n        _.forEach(inputFields, (inputField) => {\n            if (_.isArray(inputField)) {\n                if (inputField[0] instanceof File) {\n                    fileParamCount++;\n                }\n                _.forEach(inputField, (input) => {\n                    if (input instanceof File || _.find(_.values(input), o => o instanceof Blob)) {\n                        fileArr.push(input);\n                        this.totalFilesCount++;\n                        fileParamCount = fileParamCount || 1;\n                    }\n                });\n            } else {\n                if (inputField instanceof File) {\n                    fileParamCount++;\n                    this.totalFilesCount++;\n                    fileArr.push(inputField);\n                }\n            }\n        });\n        if (fileParamCount === 1) {\n            if (inputFields.files.length > 1) {\n                _.forEach(fileArr, (file) => {\n                    promArr.push(this.uploadFileInFormData(variable, options, success, error, file, requestParams));\n                });\n                return Promise.all(promArr);\n            } else {\n                return this.uploadFileInFormData(variable, options, success, error, fileArr[0], requestParams);\n            }\n        }\n    }\n\n    /**\n     * proxy for the invoke call\n     * Request Info is constructed\n     * if error found, error is thrown\n     * else, call is made\n     * @param {ServiceVariable} variable\n     * @param options\n     * @param {Function} success\n     * @param {Function} error\n     * @returns {any}\n     * @private\n     */\n    private _invoke (variable: ServiceVariable, options: any, success: Function, error: Function) {\n        let inputFields = getClonedObject(options.inputFields || variable.dataBinding);\n        // EVENT: ON_BEFORE_UPDATE\n        const output: any = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, inputFields, options);\n        let successHandler;\n        let errorHandler;\n\n        if (output === false) {\n            $queue.process(variable);\n            triggerFn(error);\n            return;\n        }\n        if (_.isObject(output)) {\n            inputFields = output;\n        }\n\n        const operationInfo = this.getMethodInfo(variable, inputFields, options),\n            requestParams = ServiceVariableUtils.constructRequestParams(variable, operationInfo, inputFields);\n\n        // check errors\n        if (requestParams.error) {\n            const info = this.handleRequestMetaError(requestParams, variable, success, error, options);\n            const reason = (_.get(info, 'error.message') || 'An error occurred while triggering the variable: ') + ': ' +  variable.name;\n            triggerFn(error);\n            return Promise.reject(reason);\n        }\n\n        // file upload\n        if (ServiceVariableUtils.isFileUploadRequest(variable)) {\n            const uploadPromise = this.uploadFile(variable, options, success, error, inputFields, requestParams);\n            if (uploadPromise) {\n                return uploadPromise;\n            }\n        }\n\n        // file download\n        if (operationInfo && _.isArray(operationInfo.produces) && _.includes(operationInfo.produces, WS_CONSTANTS.CONTENT_TYPES.OCTET_STREAM)) {\n            return simulateFileDownload(requestParams, variable.dataBinding.file || variable.name, variable.dataBinding.exportType, function () {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, null, null, null);\n                $queue.process(variable);\n                triggerFn(success);\n            }, function () {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null, null, null);\n                triggerFn(error);\n            });\n        }\n\n        // notify variable progress\n        this.notifyInflight(variable, !options.skipToggleState);\n\n        successHandler = (response, resolve) => {\n            if (response && response.type) {\n                const data = this.processSuccessResponse(response.body, variable, _.extend(options, {'xhrObj': response}), success);\n                // notify variable success\n                this.notifyInflight(variable, false, data);\n                resolve(response);\n            }\n        };\n\n        errorHandler = (err, reject) => {\n            const errMsg = httpService.getErrMessage(err);\n            // notify variable error\n            this.notifyInflight(variable, false);\n            this.processErrorResponse(variable, errMsg, error, err, options.skipNotification);\n            reject({\n                error: errMsg,\n                details: err\n            });\n        };\n\n        // make the call and return a promise to the user to support script calls made by users\n        return new Promise((resolve, reject) => {\n            requestParams.responseType = 'text'; // this is to return text response. JSON & XML-to-JSON parsing is handled in success handler.\n            this.httpCall(requestParams, variable).then((response) => {\n                successHandler(response, resolve);\n            }, err => {\n                errorHandler(err, reject);\n            });\n            // the _observable property on variable is used store the observable using which the network call is made\n            // this can be used to cancel the variable calls.\n        });\n    }\n\n    // *********************************************************** PUBLIC ***********************************************************//\n\n    public invoke(variable, options, success, error) {\n        options = options || {};\n        options.inputFields = options.inputFields || getClonedObject(variable.dataBinding);\n        return $queue.submit(variable).then(this._invoke.bind(this, variable, options, success, error), error);\n    }\n\n    public download(variable, options, successHandler, errorHandler) {\n        options = options || {};\n        const inputParams  = getClonedObject(variable.dataBinding);\n        const inputData = options.data || {};\n        const methodInfo   = this.getMethodInfo(variable, inputParams, options);\n        let requestParams;\n\n        methodInfo.relativePath += '/export';\n        requestParams = ServiceVariableUtils.constructRequestParams(variable, methodInfo, inputParams);\n\n        requestParams.data = inputData;\n        requestParams.data.fields = formatExportExpression(inputData.fields || []);\n\n        // extra options provided, these may be used in future for integrating export feature with ext. services\n        requestParams.method = options.httpMethod || 'POST';\n        requestParams.url = options.url || requestParams.url;\n\n        // If request params returns error then show an error toaster\n        if (_.hasIn(requestParams, 'error.message')) {\n            triggerFn(errorHandler, requestParams.error.message);\n            return Promise.reject(requestParams.error.message);\n        }\n        return httpService.send(requestParams).then(response => {\n            if (response && isValidWebURL(response.body.result)) {\n                window.location.href = response.body.result;\n                triggerFn(successHandler, response);\n            } else {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response);\n                triggerFn(errorHandler, response);\n            }\n        }, (response, xhrObj) => {\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response, xhrObj);\n            triggerFn(errorHandler, response);\n        });\n    }\n\n    public getInputParms(variable) {\n        const wmServiceOperationInfo = _.get(metadataService.getByOperationId(variable.operationId), 'wmServiceOperationInfo');\n        return _.get(wmServiceOperationInfo, 'parameters');\n    }\n\n    public setInput(variable, key, val, options) {\n        return setInput(variable.dataBinding, key, val, options);\n    }\n\n    /**\n     * Cancels an on going service request\n     * @param variable\n     * @param $file\n     */\n    public cancel(variable, $file?) {\n        // CHecks if there is any pending requests in the queue\n        if ($queue.requestsQueue.has(variable)) {\n            // If the request is a File upload request then modify the elements associated with file upload\n            // else unsubscribe from the observable on the variable.\n            if (ServiceVariableUtils.isFileUploadRequest(variable)) {\n                $file._uploadProgress.unsubscribe();\n                $file.status = 'abort';\n                this.totalFilesCount--;\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ABORT, variable, $file);\n                if (!this.isFileUploadInProgress(variable.dataBinding) && this.totalFilesCount === 0) {\n                    $queue.process(variable);\n                    // notify inflight variable\n                    this.notifyInflight(variable, false);\n                }\n            } else {\n                if (variable._observable) {\n                    variable._observable.unsubscribe();\n                    $queue.process(variable);\n                    // notify inflight variable\n                    this.notifyInflight(variable, false);\n                }\n            }\n        }\n    }\n\n    public defineFirstLastRecord(variable) {\n        if (variable.isList) {\n            Object.defineProperty(variable, 'firstRecord', {\n                'configurable': true,\n                'get': function () {\n                    const dataSet = variable.dataSet;\n                    // For procedure(v1) data doesn't come under content\n                    return _.head(dataSet && dataSet.content) || _.head(dataSet) || {};\n                }\n            });\n            Object.defineProperty(variable, 'lastRecord', {\n                'configurable': true,\n                'get': function () {\n                    const dataSet = variable.dataSet;\n                    // For procedure(v1) data doesn't come under content\n                    return _.last(dataSet && dataSet.content) || _.last(dataSet) || {};\n                }\n            });\n        }\n    }\n\n    // Gets the input params of the service variable and also add params from the searchKeys (filterfields)\n    private getQueryParams(filterFields, searchValue, variable) {\n        const inputParams = this.getInputParms(variable);\n        const queryParams = ServiceVariableUtils.excludePaginationParams(inputParams);\n        const inputFields = {};\n\n        // check if some param value is already available in databinding and update the inputFields accordingly\n        _.map(variable.dataBinding, function (value, key) {\n            inputFields[key] = value;\n        });\n\n        // add the query params mentioned in the searchkey to inputFields\n        _.forEach(filterFields, function (value) {\n            if (_.includes(queryParams, value)) {\n                inputFields[value] = searchValue;\n            }\n        });\n\n        return inputFields;\n    }\n\n    /**\n     * This method returns filtered records based on searchKey and queryText.\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}\n     */\n    public searchRecords(variable, options, success, error) {\n        const inputFields = this.getQueryParams(_.split(options.searchKey, ','), options.query, variable);\n\n        const requestParams = {\n            page: options.page,\n            pagesize: options.pagesize,\n            skipDataSetUpdate: true, // dont update the actual variable dataset,\n            skipToggleState: true, // Dont change the varibale toggle state as this is a independent call\n            inFlightBehavior: 'executeAll',\n            inputFields: inputFields\n        };\n\n        if (options.onBeforeservicecall) {\n            options.onBeforeservicecall(inputFields);\n        }\n\n        return this.invoke(variable, requestParams, success, error).catch(noop);\n    }\n}\n","import { getClonedObject, hasCordova, isDefined, isNumberType, replace, triggerFn } from '@wm/core';\n\nimport { $rootScope, DB_CONSTANTS, SWAGGER_CONSTANTS } from '../../constants/variables.constants';\nimport { formatDate, getEvaluatedOrderBy } from './variables.utils';\n\ndeclare const _;\n\nexport class LiveVariableUtils {\n\n    static isCompositeKey(primaryKey) {\n        return !primaryKey || (primaryKey && (!primaryKey.length || primaryKey.length > 1));\n    }\n\n    static isNoPrimaryKey(primaryKey) {\n        return (!primaryKey || (primaryKey && !primaryKey.length));\n    }\n\n    // Generate the URL based on the primary keys and their values\n    static getCompositeIDURL(primaryKeysData) {\n        let compositeId = '';\n        //  Loop over the 'compositeKeysData' and construct the 'compositeId'.\n        _.forEach(primaryKeysData, (paramValue, paramName) => {\n            compositeId += paramName + '=' + encodeURIComponent(paramValue) + '&';\n        });\n        compositeId = compositeId.slice(0, -1);\n        return compositeId;\n    }\n\n\n    // Check if table has blob column\n    static hasBlob(variable) {\n        return _.find(_.get(variable, ['propertiesMap', 'columns']), {'type': 'blob'});\n    }\n\n    static getPrimaryKey(variable) {\n        if (!variable.propertiesMap) {\n            return [];\n        }\n\n        if (variable.propertiesMap.primaryFields) {\n            return variable.propertiesMap.primaryFields;\n        }\n        /*Old projects do not have primary fields. Get primary key from the columns*/\n        const primaryKey = [];\n        /*Loop through the propertiesMap and get the primary key column.*/\n        _.forEach(variable.propertiesMap.columns, (index, column) => {\n            if (column.isPrimaryKey) {\n                if (column.isRelated && (!_.includes(column.relatedFieldName, primaryKey))) {\n                    primaryKey.push(column.relatedFieldName);\n                } else if (!_.includes(column.fieldName, primaryKey)) {\n                    primaryKey.push(column.fieldName);\n                }\n            }\n        });\n        return primaryKey;\n    }\n\n    //  Construct the URL for blob columns and set it in the data, so that widgets can use this\n    static processBlobColumns(responseData, variable) {\n        if (!responseData) {\n            return;\n        }\n        const blobCols = _.map(_.filter(variable.propertiesMap.columns, {'type': 'blob'}), 'fieldName'),\n            deployedUrl = _.trim($rootScope.project.deployedUrl);\n        let href = '',\n            primaryKeys;\n\n        if (_.isEmpty(blobCols)) {\n            return;\n        }\n        if (hasCordova()) {\n             href += _.endsWith(deployedUrl, '/') ? deployedUrl : deployedUrl + '/';\n        }\n        href += ((variable._prefabName !== '' && variable._prefabName !== undefined) ? 'prefabs/' + variable._prefabName : 'services') + '/' + variable.liveSource + '/' + variable.type + '/';\n        primaryKeys = variable.propertiesMap.primaryFields || variable.propertiesMap.primaryKeys;\n        _.forEach(responseData, data => {\n            if (data) {\n                _.forEach(blobCols, col => {\n                    const compositeKeysData = {};\n                    if (data[col] === null || !_.isEmpty(_.trim(data[col]))) {\n                        return;\n                    }\n                    if (LiveVariableUtils.isCompositeKey(primaryKeys)) {\n                        primaryKeys.forEach(key => {\n                            compositeKeysData[key] = data[key];\n                        });\n                        data[col] = href + 'composite-id/content/' + col + '?' + LiveVariableUtils.getCompositeIDURL(compositeKeysData);\n                    } else {\n                        data[col] = href + data[_.join(primaryKeys)] + '/content/' + col;\n                    }\n                });\n            }\n        });\n    }\n\n    static getHibernateOrSqlType(variable, fieldName, type, entityName?: string) {\n        const columns = variable.propertiesMap.columns;\n        let column,\n            relatedCols,\n            relatedCol;\n        if (_.includes(fieldName, '.')) {\n            column = _.find(columns, col => {\n                return col.fieldName === fieldName.split('.')[0];\n            });\n            relatedCols = column && column.columns;\n            relatedCol = _.find(relatedCols, col => {\n                return col.fieldName === fieldName.split('.')[1];\n            });\n            return relatedCol && relatedCol[type];\n        }\n        column = _.find(columns, col => {\n            return col.fieldName === fieldName || col.relatedColumnName === fieldName;\n        });\n        if (!column && entityName) {\n            const entity = _.find(columns, col => col.relatedEntityName === entityName);\n            column = _.find(entity.columns, col => {\n                return col.fieldName === fieldName || col.relatedColumnName === fieldName;\n            });\n        }\n        return column && column[type];\n    }\n\n    /*Function to get the sqlType of the specified field.*/\n    static getSqlType(variable, fieldName, entityName?: string) {\n        return LiveVariableUtils.getHibernateOrSqlType(variable, fieldName, 'type', entityName);\n    }\n\n    /*Function to check if the specified field has a one-to-many relation or not.*/\n    static isRelatedFieldMany(variable, fieldName) {\n        const columns = variable.propertiesMap.columns,\n            columnsCount = columns.length;\n        let index,\n            column;\n        /*Loop through the columns of the liveVariable*/\n        for (index = 0; index < columnsCount; index += 1) {\n            column = columns[index];\n            /*If the specified field is found in the columns of the variable,\n            * then it has a many-to-one relation.*/\n            if (column.fieldName === fieldName) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static isStringType(type) {\n        return _.includes(['text', 'string'], _.toLower(type));\n    }\n\n    static getSQLFieldType(variable, options) {\n        if (_.includes(['timestamp', 'datetime', 'date'], options.type)) {\n            return options.type;\n        }\n        return LiveVariableUtils.getSqlType(variable, options.fieldName) || options.type;\n    }\n\n    static getAttributeName(variable, fieldName) {\n        let attrName = fieldName;\n        variable.propertiesMap.columns.forEach(column => {\n            if (column.fieldName === fieldName && column.isRelated) {\n                attrName = column.relatedFieldName;\n            }\n        });\n        return attrName;\n    }\n\n    static getFilterCondition(filterCondition) {\n        if (_.includes(DB_CONSTANTS.DATABASE_RANGE_MATCH_MODES, filterCondition)) {\n            return filterCondition;\n        }\n        return DB_CONSTANTS.DATABASE_MATCH_MODES['exact'];\n    }\n\n    static getFilterOption(variable, fieldOptions, options) {\n        let attributeName,\n            fieldValue = fieldOptions.value,\n            filterOption,\n            filterCondition;\n\n        const matchModes = DB_CONSTANTS.DATABASE_MATCH_MODES,\n            fieldName = fieldOptions.fieldName,\n            fieldRequired = fieldOptions.required || false,\n            fieldType = LiveVariableUtils.getSQLFieldType(variable, fieldOptions);\n\n        filterCondition = matchModes[fieldOptions.matchMode] || matchModes[fieldOptions.filterCondition] || fieldOptions.filterCondition;\n\n        fieldOptions.type = fieldType;\n        /* if the field value is an object(complex type), loop over each field inside and push only first level fields */\n        if (_.isObject(fieldValue) && !_.isArray(fieldValue)) {\n            const firstLevelValues = [];\n            _.forEach(fieldValue, (subFieldValue, subFieldName) => {\n                if (subFieldValue && !_.isObject(subFieldValue)) {\n                    firstLevelValues.push(fieldName + '.' + subFieldName + '=' + subFieldValue);\n                }\n            });\n            return firstLevelValues;\n        }\n\n        if (_.includes(DB_CONSTANTS.DATABASE_EMPTY_MATCH_MODES, filterCondition)) {\n            attributeName = LiveVariableUtils.getAttributeName(variable, fieldName);\n            // For non string types empty match modes are not supported, so convert them to null match modes.\n            if (fieldType && !LiveVariableUtils.isStringType(fieldType)) {\n                filterCondition = DB_CONSTANTS.DATABASE_NULL_EMPTY_MATCH[filterCondition];\n            }\n            filterOption = {\n                'attributeName': attributeName,\n                'attributeValue': '',\n                'attributeType': _.toUpper(fieldType),\n                'filterCondition': filterCondition,\n                'required': fieldRequired\n            };\n            if (options.searchWithQuery) {\n                filterOption.isVariableFilter = fieldOptions.isVariableFilter;\n            }\n            return filterOption;\n        }\n\n        if (isDefined(fieldValue) && fieldValue !== null && fieldValue !== '') {\n            /*Based on the sqlType of the field, format the value & set the filter condition.*/\n            if (fieldType) {\n                switch (fieldType) {\n                    case 'integer':\n                        fieldValue = _.isArray(fieldValue) ? _.reduce(fieldValue, (result, value) => {\n                            value = parseInt(value, 10);\n                            if (!_.isNaN(value)) {\n                                result.push(value);\n                            }\n                            return result;\n                        }, []) : parseInt(fieldValue, 10);\n                        filterCondition = filterCondition ? LiveVariableUtils.getFilterCondition(filterCondition) : matchModes['exact'];\n                        break;\n                    case 'date':\n                    case 'datetime':\n                    case 'timestamp':\n                        fieldValue = formatDate(fieldValue, fieldType);\n                        filterCondition = filterCondition ? LiveVariableUtils.getFilterCondition(filterCondition) : matchModes['exact'];\n                        break;\n                    case 'text':\n                    case 'string':\n                        if (_.isArray(fieldValue)) {\n                            filterCondition = _.includes([matchModes['in'], matchModes['notin']], filterCondition) ? filterCondition : matchModes['exact'];\n                        } else {\n                            filterCondition = filterCondition || matchModes['anywhereignorecase'];\n                        }\n                        break;\n                    default:\n                        filterCondition = filterCondition ? LiveVariableUtils.getFilterCondition(filterCondition) : matchModes['exact'];\n                        break;\n                }\n            } else {\n                filterCondition = _.isString(fieldValue) ? matchModes['anywhereignorecase'] : matchModes['exact'];\n            }\n            attributeName = LiveVariableUtils.getAttributeName(variable, fieldName);\n            filterOption = {\n                'attributeName': attributeName,\n                'attributeValue': fieldValue,\n                'attributeType': _.toUpper(fieldType),\n                'filterCondition': filterCondition,\n                'required': fieldRequired\n            };\n            if (options.searchWithQuery) {\n                filterOption.isVariableFilter = fieldOptions.isVariableFilter;\n            }\n            return filterOption;\n        }\n    }\n\n    static getFilterOptions(variable, filterFields, options) {\n        let filterOptions = [];\n        _.each(filterFields, (fieldOptions) => {\n            const filterOption = LiveVariableUtils.getFilterOption(variable, fieldOptions, options);\n            if (!_.isNil(filterOption)) {\n                if (_.isArray(filterOption)) {\n                    filterOptions = filterOptions.concat(filterOption);\n                } else {\n                    filterOptions.push(filterOption);\n                }\n            }\n        });\n        return filterOptions;\n    }\n\n    // Wrap the field name and value in lower() in ignore case scenario\n    // TODO: Change the function name to represent the added functionality of identifiers for datetime, timestamp and float types. Previously only lower was warapped.\n    static wrapInLowerCase(value, options, ignoreCase, isField?) {\n        const type = _.toLower(options.attributeType);\n        if (!isField) {\n            // Wrap the identifiers for datetime, timestamp and float types. Wrappring is not required for fields.\n            if (type === 'datetime') {\n                return 'wm_dt(' + value + ')';\n            }\n            if (type === 'timestamp') {\n                return 'wm_ts(' + value + ')';\n            }\n            if (type === 'float') {\n                return 'wm_float(' + value + ')';\n            }\n            if (type === 'boolean') {\n                return 'wm_bool(' + value + ')';\n            }\n        }\n        // If ignore case is true and type is string/ text and match mode is string type, wrap in lower()\n        if (ignoreCase && (!type || LiveVariableUtils.isStringType(type)) && _.includes(DB_CONSTANTS.DATABASE_STRING_MODES, options.filterCondition)) {\n            return 'lower(' + value + ')';\n        }\n        return value;\n    }\n\n    static encodeAndAddQuotes(value, type, skipEncode) {\n        let encodedValue = skipEncode ? value : encodeURIComponent(value);\n        type = _.toLower(type);\n        encodedValue = _.replace(encodedValue, /'/g, '\\'\\'');\n        // For number types, don't wrap the value in quotes\n        if ((isNumberType(type) && type !== 'float')) {\n            return encodedValue;\n        }\n        return '\\'' + encodedValue + '\\'';\n    }\n\n    static getParamValue(value, options, ignoreCase, skipEncode) {\n        let param;\n        const filterCondition = options.filterCondition,\n            dbModes = DB_CONSTANTS.DATABASE_MATCH_MODES,\n            type = options.attributeType;\n        if (_.includes(DB_CONSTANTS.DATABASE_EMPTY_MATCH_MODES, filterCondition)) {\n            // For empty matchmodes, no value is required\n            return '';\n        }\n        switch (filterCondition) {\n            case dbModes.startignorecase:\n            case dbModes.start:\n                param = LiveVariableUtils.encodeAndAddQuotes(value + '%', type, skipEncode);\n                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);\n                break;\n            case dbModes.endignorecase:\n            case dbModes.end:\n                param = LiveVariableUtils.encodeAndAddQuotes('%' + value, type, skipEncode);\n                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);\n                break;\n            case dbModes.anywhereignorecase:\n            case dbModes.anywhere:\n                param = LiveVariableUtils.encodeAndAddQuotes('%' + value + '%', type, skipEncode);\n                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);\n                break;\n            case dbModes.between:\n                param = _.join(_.map(value, val => {\n                    return LiveVariableUtils.wrapInLowerCase(LiveVariableUtils.encodeAndAddQuotes(val, type, skipEncode), options, ignoreCase);\n                }), ' and ');\n                break;\n            case dbModes.in:\n            case dbModes.notin:\n                param = _.join(_.map(value, val => {\n                    return LiveVariableUtils.wrapInLowerCase(LiveVariableUtils.encodeAndAddQuotes(val, type, skipEncode), options, ignoreCase);\n                }), ', ');\n                param = '(' + param + ')';\n                break;\n            /*case dbModes.exactignorecase:\n            case dbModes.exact:\n            case dbModes.notequals:\n            The above three cases will be handled by default*/\n            default:\n                param = LiveVariableUtils.encodeAndAddQuotes(value, type, skipEncode);\n                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);\n                break;\n        }\n        return isDefined(param) ? param : '';\n    }\n\n    static getSearchQuery(filterOptions, operator, ignoreCase, skipEncode?) {\n        let query;\n        const params = [];\n        _.forEach(filterOptions, fieldValue => {\n            const value = fieldValue.attributeValue,\n                dbModes = DB_CONSTANTS.DATABASE_MATCH_MODES,\n                isValArray = _.isArray(value);\n            let fieldName = fieldValue.attributeName,\n                filterCondition = fieldValue.filterCondition,\n                matchModeExpr,\n                paramValue;\n            // If value is an empty array, do not generate the query\n            // If values is NaN and number type, do not generate query for this field\n            if ((isValArray && _.isEmpty(value)) || (!isValArray && isNaN(value) && isNumberType(fieldValue.attributeType))) {\n                return;\n            }\n            if (isValArray) {\n                // If array is value and mode is between, pass between. Else pass as in query\n                filterCondition = filterCondition === dbModes.between || filterCondition === dbModes.notin ? filterCondition : dbModes.in;\n                fieldValue.filterCondition = filterCondition;\n            }\n            matchModeExpr = DB_CONSTANTS.DATABASE_MATCH_MODES_WITH_QUERY[filterCondition];\n            paramValue = LiveVariableUtils.getParamValue(value, fieldValue, ignoreCase, skipEncode);\n            fieldName = LiveVariableUtils.wrapInLowerCase(fieldName, fieldValue, ignoreCase, true);\n            params.push(replace(matchModeExpr, [fieldName, paramValue]));\n        });\n        query = _.join(params, operator); // empty space added intentionally around OR\n        return query;\n    }\n\n    /**\n     * creating the proper values from the actual object like for between,in matchModes value has to be an array like [1,2]\n     * @param rules recursive filterexpressions object\n     * @param variable variable object\n     * @param options options\n     */\n    static processFilterFields(rules, variable, options) {\n        _.remove(rules, rule => {\n            return rule && (_.isString(rule.value) && rule.value.indexOf('bind:') === 0 || (rule.matchMode === 'between' ? (_.isString(rule.secondvalue) && rule.secondvalue.indexOf('bind:') === 0) : false));\n        });\n\n        _.forEach(rules, (rule, index) => {\n            if (rule) {\n                if (rule.rules) {\n                    LiveVariableUtils.processFilterFields(rule.rules, variable, options);\n                } else {\n                    if (!_.isNull(rule.target)) {\n                        const value = rule.matchMode.toLowerCase() === DB_CONSTANTS.DATABASE_MATCH_MODES.between.toLowerCase()\n                            ? (_.isArray(rule.value) ? rule.value : [rule.value, rule.secondvalue])\n                            : (rule.matchMode.toLowerCase() === DB_CONSTANTS.DATABASE_MATCH_MODES.in.toLowerCase() || rule.matchMode.toLowerCase() === DB_CONSTANTS.DATABASE_MATCH_MODES.notin.toLowerCase()\n                                ? (_.isArray(rule.value) ? rule.value : (rule.value ? rule.value.split(',').map(val => val.trim()) : ''))\n                                : rule.value);\n                        rules[index] = LiveVariableUtils.getFilterOption(variable, {\n                            'fieldName': rule.target,\n                            'type': rule.type,\n                            'value': value,\n                            'required': rule.required,\n                            'filterCondition': rule.matchMode || options.matchMode || variable.matchMode\n                        }, options);\n                    }\n                }\n            }\n        });\n    }\n\n    static getSearchField(fieldValue, ignoreCase, skipEncode) {\n        let fieldName = fieldValue.attributeName;\n        let matchModeExpr;\n        let paramValue;\n        let filterCondition = fieldValue.filterCondition;\n\n        const value = fieldValue.attributeValue;\n        const isValArray = _.isArray(value);\n        const dbModes = DB_CONSTANTS.DATABASE_MATCH_MODES;\n\n        // If value is an empty array, do not generate the query\n        // If values is NaN and number type, do not generate query for this field\n        if ((isValArray && _.isEmpty(value)) || (isValArray && _.some(value, val => (_.isNull(val) || _.isNaN(val) || val === ''))) || (!isValArray && isNaN(value) && isNumberType(fieldValue.attributeType))) {\n            return;\n        }\n        if (isValArray) {\n            // If array is value and mode is between, pass between. Else pass as in query\n            filterCondition = filterCondition === dbModes.between || filterCondition === dbModes.notin ? filterCondition : dbModes.in;\n            fieldValue.filterCondition = filterCondition;\n        }\n        matchModeExpr = DB_CONSTANTS.DATABASE_MATCH_MODES_WITH_QUERY[filterCondition];\n        paramValue = LiveVariableUtils.getParamValue(value, fieldValue, ignoreCase, skipEncode);\n        fieldName = LiveVariableUtils.wrapInLowerCase(fieldName, fieldValue, ignoreCase, true);\n        return replace(matchModeExpr, [fieldName, paramValue]);\n    }\n\n    /**\n     * this is used to identify whether to use ignorecase at each criteria level and not use the variable\n     * level isIgnoreCase flag and apply it to all the rules.\n     * Instead of adding an extra param to the criteria object, we have added few other matchmodes for string types like\n     * anywhere with anywhereignorecase, start with startignorecase, end with endignorecase, exact with exactignorecase,\n     * So while creating the criteria itseld user can choose whether to use ignore case or not for a particular column while querying\n     * @param matchMode\n     * @param ignoreCase\n     * @returns {*} boolean\n     */\n    static getIgnoreCase(matchMode, ignoreCase) {\n        const matchModes = DB_CONSTANTS.DATABASE_MATCH_MODES;\n        if (_.indexOf([matchModes['anywhere'], matchModes['start'], matchModes['end'], matchModes['exact']], matchMode) !== -1) {\n            return false;\n        }\n        if (_.indexOf([matchModes['anywhereignorecase'], matchModes['startignorecase'], matchModes['endignorecase'], matchModes['exactignorecase']], matchMode) !== -1) {\n            return true;\n        }\n        return ignoreCase;\n    }\n\n    static generateSearchQuery(rules, condition, ignoreCase, skipEncode) {\n        const params = [];\n        _.forEach(rules, rule => {\n            if (rule) {\n                if (rule.rules) {\n                    const query = LiveVariableUtils.generateSearchQuery(rule.rules, rule.condition, ignoreCase, skipEncode);\n                    if (query !== '') {\n                        params.push('(' + query + ')');\n                    }\n                } else {\n                    const searchField = LiveVariableUtils.getSearchField(rule, LiveVariableUtils.getIgnoreCase(rule.filterCondition, ignoreCase), skipEncode);\n                    if (!_.isNil(searchField)) {\n                        params.push(searchField);\n                    }\n                }\n            }\n        });\n        return _.join(params, ' ' + condition + ' ');\n    }\n\n    static prepareTableOptionsForFilterExps(variable, options, clonedFields) {\n        if (!isDefined(options.searchWithQuery)) {\n            options.searchWithQuery = true; // Using query api instead of  search api\n        }\n\n        const filterOptions = [];\n        const matchModes = DB_CONSTANTS.DATABASE_MATCH_MODES;\n        let orderByFields,\n            orderByOptions,\n            query;\n        let clonedObj = clonedFields || getClonedObject(variable.filterExpressions);\n\n        // if filterexpression from live filter is present use it to query\n        if (options.filterExpr && !_.isEmpty(options.filterExpr)) {\n            clonedObj = options.filterExpr;\n        }\n        // merge live filter runtime values\n        let filterRules: any = {};\n        if (!_.isEmpty(options.filterFields)) {\n            filterRules = {'condition': options.logicalOp || 'AND', 'rules': []};\n            _.forEach(options.filterFields, (filterObj, filterName) => {\n                const filterCondition = matchModes[filterObj.matchMode] || matchModes[filterObj.filterCondition] || filterObj.filterCondition;\n                if (_.includes(DB_CONSTANTS.DATABASE_EMPTY_MATCH_MODES, filterCondition) ||\n                    (!_.isNil(filterObj.value) && filterObj.value !== '')) {\n                    const type = filterObj.type || LiveVariableUtils.getSqlType(variable, filterName, options.entityName);\n                    const ruleObj = {\n                        'target': filterName,\n                        'type': type,\n                        'matchMode': filterObj.matchMode || (LiveVariableUtils.isStringType(type) ? 'startignorecase' : 'exact'),\n                        'value': filterObj.value,\n                        'required': filterObj.required || false\n                    };\n                    filterRules.rules.push(ruleObj);\n                }\n            });\n        }\n        if (!_.isEmpty(clonedObj)) {\n            if (!_.isNil(filterRules.rules) && filterRules.rules.length) {\n                // combine both the rules using 'AND'\n                const tempRules = {'condition': 'AND', 'rules': []};\n                tempRules.rules.push(getClonedObject(clonedObj));\n                tempRules.rules.push(filterRules);\n                clonedObj = tempRules;\n            }\n        } else {\n            clonedObj = filterRules;\n        }\n\n        LiveVariableUtils.processFilterFields(clonedObj.rules, variable, options);\n        query = LiveVariableUtils.generateSearchQuery(clonedObj.rules, clonedObj.condition, variable.ignoreCase, options.skipEncode);\n\n        orderByFields = getEvaluatedOrderBy(variable.orderBy, options.orderBy);\n        orderByOptions = orderByFields ? 'sort=' + orderByFields : '';\n\n        return {\n            'filter' : filterOptions,\n            'sort'   : orderByOptions,\n            'query'  : query\n        };\n    }\n\n    static prepareTableOptions(variable, options, clonedFields?) {\n        if (variable.operation === 'read') {\n            return LiveVariableUtils.prepareTableOptionsForFilterExps(variable, options, clonedFields);\n        }\n        if (!isDefined(options.searchWithQuery)) {\n            options.searchWithQuery = true; //  Using query api instead of  search api\n        }\n        const filterFields = [];\n        let filterOptions = [],\n            orderByFields,\n            orderByOptions,\n            query,\n            optionsQuery;\n        clonedFields = clonedFields || variable.filterFields;\n        // get the filter fields from the variable\n        _.forEach(clonedFields, (value, key) => {\n            if (_.isObject(value) && (!options.filterFields || !options.filterFields[key] || options.filterFields[key].logicalOp === 'AND')) {\n                value.fieldName = key;\n                if (LiveVariableUtils.isStringType(LiveVariableUtils.getSQLFieldType(variable, value))) {\n                    value.filterCondition = DB_CONSTANTS.DATABASE_MATCH_MODES[value.matchMode || variable.matchMode];\n                }\n                value.isVariableFilter = true;\n                filterFields.push(value);\n            }\n        });\n        // get the filter fields from the options\n        _.forEach(options.filterFields, (value, key) => {\n            value.fieldName = key;\n            value.filterCondition = DB_CONSTANTS.DATABASE_MATCH_MODES[value.matchMode || options.matchMode || variable.matchMode];\n            filterFields.push(value);\n        });\n        if (variable.operation === 'read' || options.operation === 'read') {\n            filterOptions = LiveVariableUtils.getFilterOptions(variable, filterFields, options);\n        }\n        /*if searchWithQuery is true, then convert the input params into query string. For example if firstName and lastName\n         should be sent as params then query string will be q='firstName containing 'someValue' OR lastName containing 'someValue''\n         */\n        if (options.searchWithQuery && filterOptions.length) {\n            // Generate query for variable filter fields. This has AND logical operator\n            query = LiveVariableUtils.getSearchQuery(_.filter(filterOptions, {'isVariableFilter': true}), ' AND ', variable.ignoreCase, options.skipEncode);\n            // Generate query for option filter fields. This has default logical operator as OR\n            optionsQuery = LiveVariableUtils.getSearchQuery(_.filter(filterOptions, {'isVariableFilter': undefined}), ' ' + (options.logicalOp || 'AND') + ' ', variable.ignoreCase, options.skipEncode);\n            if (optionsQuery) {\n                // If both variable and option query are present, merge them with AND\n                query = query ? (query + ' AND ( ' + optionsQuery + ' )') : optionsQuery;\n            }\n        }\n        orderByFields = getEvaluatedOrderBy(variable.orderBy, options.orderBy);\n        orderByOptions = orderByFields ? 'sort=' + orderByFields : '';\n\n        return {\n            'filter': filterOptions,\n            'sort': orderByOptions,\n            'query': query\n        };\n    }\n\n    /* Function to check if specified field is of type date*/\n    static getFieldType(fieldName, variable, relatedField?) {\n        let fieldType,\n            columns,\n            result;\n        if (variable.propertiesMap) {\n            columns = variable.propertiesMap.columns || [];\n            result = _.find(columns, obj => {\n                return obj.fieldName === fieldName;\n            });\n            // if related field name passed, get its type from columns inside the current field\n            if (relatedField && result) {\n                result = _.find(result.columns, obj => {\n                    return obj.fieldName === relatedField;\n                });\n            }\n            fieldType = result && result.type;\n        }\n        return fieldType;\n    }\n\n    // Prepare formData for blob columns\n    static prepareFormData(variableDetails, rowObject) {\n        const formData: any = new FormData();\n        formData.rowData = _.clone(rowObject);\n        _.forEach(rowObject, (colValue, colName) => {\n            if (LiveVariableUtils.getFieldType(colName, variableDetails) === 'blob') {\n                if (_.isObject(colValue)) {\n                    if (_.isArray(colValue)) {\n                        _.forEach(colValue, fileObject => {\n                            formData.append(colName, fileObject, fileObject.name);\n                        });\n                    } else {\n                        formData.append(colName, colValue, colValue.name);\n                    }\n                }\n                rowObject[colName] = colValue !== null ? '' : null;\n            }\n        });\n        formData.append(SWAGGER_CONSTANTS.WM_DATA_JSON, new Blob([JSON.stringify(rowObject)], {\n            type: 'application/json'\n        }));\n        return formData;\n    }\n\n    static traverseFilterExpressions(filterExpressions, traverseCallbackFn) {\n        if (filterExpressions && filterExpressions.rules) {\n            _.forEach(filterExpressions.rules, (filExpObj, i) => {\n                if (filExpObj.rules) {\n                    LiveVariableUtils.traverseFilterExpressions(filExpObj, traverseCallbackFn);\n                } else {\n                    return triggerFn(traverseCallbackFn, filterExpressions, filExpObj);\n                }\n            });\n        }\n    }\n\n    /**\n     * Traverses recursively the filterExpressions object and if there is any required field present with no value,\n     * then we will return without proceeding further. Its upto the developer to provide the mandatory value,\n     * if he wants to assign it in teh onbefore<delete/insert/update>function then make that field in\n     * the filter query section as optional\n     * @param filterExpressions - recursive rule Object\n     * @returns {Object} object or boolean. Object if everything gets validated or else just boolean indicating failure in the validations\n     */\n    static getFilterExprFields(filterExpressions) {\n        let isRequiredFieldAbsent = false;\n        const traverseCallbackFn = (parentFilExpObj, filExpObj) => {\n            if (filExpObj\n                && filExpObj.required\n                && ((_.indexOf(['null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'], filExpObj.matchMode) === -1) && filExpObj.value === '')) {\n                isRequiredFieldAbsent = true;\n                return false;\n            }\n        };\n        LiveVariableUtils.traverseFilterExpressions(filterExpressions, traverseCallbackFn);\n        return isRequiredFieldAbsent ? !isRequiredFieldAbsent : filterExpressions;\n    }\n\n    /**\n     *\n     * @param variable\n     * @param options\n     * @returns {function(*=): *} returns a function which should be called for the where clause.\n     * This return function can take a function as argument. This argument function can modify the filter fields\n     * before generating where clause.\n     */\n    static getWhereClauseGenerator(variable, options, updatedFilterFields?: any) {\n        return (modifier, skipEncode?: boolean) => {\n            const clonedFields = LiveVariableUtils.getFilterExprFields(getClonedObject(updatedFilterFields || variable.filterExpressions));\n            // this flag skips the encoding of the query\n            if (isDefined(skipEncode)) {\n                options.skipEncode = skipEncode;\n            }\n            if (modifier) {\n                // handling the scenario where variable can also have filterFields\n                if (options.filterFields) {\n                    modifier(clonedFields, options);\n                } else {\n                    modifier(clonedFields);\n                }\n            }\n            return LiveVariableUtils.prepareTableOptions(variable, options, clonedFields).query;\n        };\n    }\n}\n\n","import { getClonedObject, removeExtraSlashes } from '@wm/core';\n\nimport { VARIABLE_URLS } from '../../constants/variables.constants';\nimport { httpService } from './variables.utils';\n\ndeclare const _;\n\nconst isStudioMode = false;\n\nexport const parseConfig = (serviceParams: any): any => {\n\n    let val, param, config;\n    const urlParams = serviceParams.urlParams;\n\n    /*get the config out of baseServiceManager*/\n    if (VARIABLE_URLS.hasOwnProperty(serviceParams.target) && VARIABLE_URLS[serviceParams.target].hasOwnProperty(serviceParams.action)) {\n        config = getClonedObject(VARIABLE_URLS[serviceParams.target][serviceParams.action]);\n\n        /*To handle dynamic urls, append the serviceParams.config.url with the static url(i.e., config.url)*/\n        if (serviceParams.config) {\n            config.url = (serviceParams.config.url || '') + config.url;\n            config.method = serviceParams.config.method || config.method;\n            config.headers = config.headers || {};\n\n            // TODO[Shubham] - change to for - of\n            for (const key in serviceParams.config.headers) {\n                val = serviceParams.config.headers[key];\n                config.headers[key] = val;\n            }\n        }\n        /* check for url parameters to replace the url */\n        if (urlParams) {\n            for (param in urlParams) {\n                if (urlParams.hasOwnProperty(param)) {\n                    val = urlParams[param];\n                    if (!_.isUndefined(val) && val !== null) {\n                        config.url = config.url.replace(new RegExp(':' + param, 'g'), val);\n                    }\n                }\n            }\n        }\n\n        /* check for data */\n        if (serviceParams.params) {\n            config.params = serviceParams.params;\n        }\n        /* check for data */\n        if (!_.isUndefined(serviceParams.data)) {\n            config.data = serviceParams.data;\n        }\n        /* check for data parameters, written to support old service calls (.json calls) */\n        if (serviceParams.dataParams) {\n            config.data.params = serviceParams.dataParams;\n        }\n        /* check for headers */\n        if (serviceParams.headers) {\n            config.headers = serviceParams.headers;\n        }\n\n        /* set extra config flags */\n        config.byPassResult    = serviceParams.byPassResult;\n        config.isDirectCall    = serviceParams.isDirectCall;\n        config.isExtURL        = serviceParams.isExtURL;\n        config.preventMultiple = serviceParams.preventMultiple;\n        config.responseType    = serviceParams.responseType;\n\n        return config;\n    }\n\n    return null;\n};\n\nexport const generateConnectionParams = (params, action) => {\n    let connectionParams,\n        urlParams,\n        requestData;\n    requestData = params.data;\n\n    urlParams = {\n        projectID        : params.projectID,\n        service          : !_.isUndefined(params.service) ? params.service : 'services',\n        dataModelName    : params.dataModelName,\n        entityName       : params.entityName,\n        queryName        : params.queryName,\n        queryParams      : params.queryParams,\n        procedureName    : params.procedureName,\n        procedureParams  : params.procedureParams,\n        id               : params.id,\n        relatedFieldName : params.relatedFieldName,\n        page             : params.page,\n        size             : params.size,\n        sort             : params.sort\n    };\n    connectionParams = {\n        target    : 'DATABASE',\n        action    : action,\n        urlParams : urlParams,\n        data      : requestData || '',\n        config    : {\n            'url' : params.url\n        }\n    };\n\n    connectionParams = parseConfig(connectionParams);\n    // TODO: Remove after backend fix\n    connectionParams.url = removeExtraSlashes(connectionParams.url);\n\n    return connectionParams;\n};\n\nconst initiateAction = (action, params, successCallback?, failureCallback?, noproxy?) => {\n    let connectionParams,\n        urlParams,\n        requestData,\n        param,\n        val,\n        config,\n        headers,\n        httpDetails;\n\n    /*\n    config      = getClonedObject(config[action]);\n    headers     = config && config.headers;\n\n    requestData = params.data;\n\n    urlParams = {\n        projectID        : params.projectID,\n        service          : !_.isUndefined(params.service) ? params.service : 'services',\n        dataModelName    : params.dataModelName,\n        entityName       : params.entityName,\n        queryName        : params.queryName,\n        queryParams      : params.queryParams,\n        procedureName    : params.procedureName,\n        procedureParams  : params.procedureParams,\n        id               : params.id,\n        relatedFieldName : params.relatedFieldName,\n        page             : params.page,\n        size             : params.size,\n        sort             : params.sort\n    };\n    */\n    if (params.url && isStudioMode && !noproxy) {\n/*\n        /!* Check for url parameters to replace the URL.\n         * So the variable parameters in the URL will be replaced by the actual parameter values.*!/\n        if (urlParams) {\n            for (param in urlParams) {\n                if (urlParams.hasOwnProperty(param)) {\n                    val = urlParams[param];\n                    if (!_.isUndefined(val) && val !== null) {\n                        config.url = config.url.replace(new RegExp(':' + param, 'g'), val);\n                    }\n                }\n            }\n        }\n        headers = headers || {};\n        headers.skipSecurity = 'true';\n        headers['Content-Type'] = headers['Content-Type'] || 'application/json';\n        /!*(!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy is added in endpointAddress to differentiate desktop from saas*!/\n        if (action === 'testRunQuery') {\n            headers['Content-Type'] = undefined;\n            httpDetails = {\n                'endpointAddress'   : $window.location.protocol + (!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy ? ('//' + $window.location.host) : '') + params.url + config.url,\n                'method'            : config.method,\n                'content-Type'      : 'multipart/form-data',\n                'headers'           : headers\n            };\n            requestData.append(SWAGGER_CONSTANTS.WM_HTTP_JSON, new Blob([JSON.stringify(httpDetails)], {\n                type: 'application/json'\n            }));\n            connectionParams = {\n                'data': requestData,\n                'headers': headers,\n                'urlParams'         : {\n                    projectID: $rootScope.project.id\n                }\n            };\n        } else {\n            connectionParams = {\n                'data': {\n                    'endpointAddress'   : $window.location.protocol + (!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy ? ('//' + $window.location.host) : '') + params.url + config.url,\n                    'method'            : config.method,\n                    'requestBody'       : JSON.stringify(requestData),\n                    'headers'           : headers\n                },\n                'urlParams'         : {\n                    projectID: $rootScope.project.id\n                }\n            };\n        }\n        WebService.testRestService(connectionParams, function (response) {\n            var parsedData = getValidJSON(response.responseBody),\n                errMsg,\n                localeObject;\n            if (parsedData.hasOwnProperty('result')) {\n                triggerFn(successCallback, parsedData.result);\n            } else if (parsedData.hasOwnProperty('error')) {\n                triggerFn(failureCallback, (parsedData.error && parsedData.error.message) || parsedData.error);\n            } else if (parsedData.hasOwnProperty('errorDetails')) {\n                localeObject = $rootScope.locale || $rootScope.appLocale;\n                errMsg = getClonedObject(localeObject[parsedData.errorDetails.code]);\n                triggerFn(failureCallback, replace(errMsg, parsedData.errorDetails.data) || parsedData.errorDetails);\n            } else {\n                triggerFn(successCallback, parsedData);\n            }\n        }, failureCallback);*/\n    } else {\n        connectionParams = generateConnectionParams(params, action);\n        params.operation = action;\n        return httpService.sendCallAsObservable({\n            url: connectionParams.url,\n            method: connectionParams.method,\n            data: connectionParams.data,\n            headers: connectionParams.headers\n        }, params);\n    }\n};\n\nexport const LVService = {\n    searchTableDataWithQuery: (params, successCallback, failureCallback) => initiateAction('searchTableDataWithQuery', params, successCallback, failureCallback),\n    executeAggregateQuery: (params, successCallback, failureCallback) => initiateAction('executeAggregateQuery', params, successCallback, failureCallback),\n    searchTableData: (params, successCallback, failureCallback) => initiateAction('searchTableData', params, successCallback, failureCallback),\n    readTableData: (params, successCallback, failureCallback) => initiateAction('readTableData', params, successCallback, failureCallback),\n    insertTableData: (params, successCallback, failureCallback) => initiateAction('insertTableData', params, successCallback, failureCallback),\n    insertMultiPartTableData: (params, successCallback, failureCallback) => initiateAction('insertMultiPartTableData', params, successCallback, failureCallback),\n    updateTableData: (params, successCallback, failureCallback) => initiateAction('updateTableData', params, successCallback, failureCallback),\n    updateCompositeTableData: (params, successCallback, failureCallback) => initiateAction('updateCompositeTableData', params, successCallback, failureCallback),\n    periodUpdateCompositeTableData: (params, successCallback, failureCallback) => initiateAction('periodUpdateCompositeTableData', params, successCallback, failureCallback),\n    updateMultiPartTableData: (params, successCallback, failureCallback) => initiateAction('updateMultiPartTableData', params, successCallback, failureCallback),\n    updateMultiPartCompositeTableData: (params, successCallback, failureCallback) => initiateAction('updateMultiPartCompositeTableData', params, successCallback, failureCallback),\n    deleteTableData: (params, successCallback, failureCallback) => initiateAction('deleteTableData', params, successCallback, failureCallback),\n    deleteCompositeTableData: (params, successCallback, failureCallback) => initiateAction('deleteCompositeTableData', params, successCallback, failureCallback),\n    periodDeleteCompositeTableData: (params, successCallback, failureCallback) => initiateAction('periodDeleteCompositeTableData', params, successCallback, failureCallback),\n    exportTableData: params => initiateAction('exportTableData', params),\n    getDistinctDataByFields: params => initiateAction('getDistinctDataByFields', params),\n    countTableDataWithQuery: (params, successCallback, failureCallback) => initiateAction('countTableDataWithQuery', params, successCallback, failureCallback)\n};\n","import { $invokeWatchers, getClonedObject, isDateTimeType, isDefined, processFilterExpBindNode, triggerFn } from '@wm/core';\n\nimport { BaseVariableManager } from './base-variable.manager';\nimport {debounceVariableCall, formatExportExpression, initiateCallback, setInput, appManager, httpService, formatDate} from '../../util/variable/variables.utils';\nimport { LiveVariableUtils } from '../../util/variable/live-variable.utils';\nimport { $queue } from '../../util/inflight-queue';\nimport { $rootScope, CONSTANTS, VARIABLE_CONSTANTS, DB_CONSTANTS } from '../../constants/variables.constants';\nimport { AdvancedOptions } from '../../advanced-options';\nimport { generateConnectionParams } from '../../util/variable/live-variable.http.utils';\n\ndeclare const _, window;\nconst emptyArr = [];\n\nexport class LiveVariableManager extends BaseVariableManager {\n\n    public initFilterExpressionBinding(variable) {\n        const context = variable._context;\n        const destroyFn = context.registerDestroyListener ? context.registerDestroyListener.bind(context) : _.noop;\n\n        const filterSubscription = processFilterExpBindNode(context, variable.filterExpressions).subscribe((response: any) => {\n            if (variable.operation === 'read') {\n                /* if auto-update set for the variable with read operation only, get its data */\n                if (variable.autoUpdate && !_.isUndefined(response.newVal) && _.isFunction(variable.update)) {\n                    debounceVariableCall(variable, 'update');\n                }\n            } else {\n                /* if auto-update set for the variable with read operation only, get its data */\n                if (variable.autoUpdate && !_.isUndefined(response.newVal) && _.isFunction(variable[variable.operation + 'Record'])) {\n                    debounceVariableCall(variable, variable.operation + 'Record');\n                }\n            }\n        });\n\n        destroyFn(() => filterSubscription.unsubscribe());\n    }\n\n    private updateDataset(variable, data, propertiesMap, pagination) {\n        variable.pagination = pagination;\n        variable.dataSet = data;\n\n        // legacy properties in dataSet, [data, pagination]\n        Object.defineProperty(variable.dataSet, 'data', {\n            get: () => {\n                return variable.dataSet;\n            }\n        });\n        Object.defineProperty(variable.dataSet, 'pagination', {\n            get: () => {\n                return variable.pagination;\n            }\n        });\n    }\n\n    // Set the _options on variable which can be used by the widgets\n    private setVariableOptions(variable, options) {\n        variable._options = variable._options || {};\n        variable._options.orderBy = options && options.orderBy;\n        variable._options.filterFields = options && options.filterFields;\n    }\n\n    private handleError(variable, errorCB, response, options, advancedOptions?) {\n        let opt: AdvancedOptions;\n        /* If callback function is provided, send the data to the callback.\n         * The same callback if triggered in case of error also. The error-handling is done in grid.js*/\n        triggerFn(errorCB, response);\n\n        //  EVENT: ON_RESULT\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n\n        /* update the dataSet against the variable */\n        if (!options.skipDataSetUpdate) {\n            this.updateDataset(variable, emptyArr, variable.propertiesMap, null);\n        }\n\n        //  EVENT: ON_ERROR\n        opt = this.prepareCallbackOptions(options.errorDetails);\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response, opt);\n        //  EVENT: ON_CAN_UPDATE\n        variable.canUpdate = true;\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response, advancedOptions);\n    }\n\n    /**\n     * Traverses recursively the filterExpressions object and if there is any required field present with no value,\n     * then we will return without proceeding further. Its upto the developer to provide the mandatory value,\n     * if he wants to assign it in teh onbefore<delete/insert/update>function then make that field in\n     * the filter query section as optional\n     * @param filterExpressions - recursive rule Object\n     * @returns {Object} object or boolean. Object if everything gets validated or else just boolean indicating failure in the validations\n     */\n    private getFilterExprFields = function (filterExpressions) {\n        let isRequiredFieldAbsent = false;\n        const traverseCallbackFn = function (parentFilExpObj, filExpObj) {\n            if (filExpObj\n                && filExpObj.required\n                && ((_.indexOf(['null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'], filExpObj.matchMode) === -1) && filExpObj.value === '')) {\n                isRequiredFieldAbsent = true;\n                return false;\n            }\n        };\n        LiveVariableUtils.traverseFilterExpressions(filterExpressions, traverseCallbackFn);\n        return isRequiredFieldAbsent ? !isRequiredFieldAbsent : filterExpressions;\n    };\n\n    /**\n     * Allows the user to get the criteria of filtering and the filter fields, based on the method called\n     */\n    private getDataFilterObj = function (clonedFilterFields) {\n        return (function (clonedFields) {\n            function getCriteria(filterField) {\n                const criterian = [];\n                LiveVariableUtils.traverseFilterExpressions(clonedFields, function (filterExpressions, criteria) {\n                    if (filterField === criteria.target) {\n                        criterian.push(criteria);\n                    }\n                });\n                return criterian;\n            }\n\n            function getFilterFields() {\n                return clonedFields;\n            }\n\n            return {\n                getFilterFields: getFilterFields,\n                getCriteria: getCriteria\n            };\n        }(clonedFilterFields));\n    };\n\n    private makeCall(variable, dbOperation, params) {\n        const successHandler = (response, resolve) => {\n            if (response && response.type) {\n                resolve(response);\n            }\n        };\n        const errorHandler = (error, reject) => {\n            const errMsg = httpService.getErrMessage(error);\n            // notify variable error\n            this.notifyInflight(variable, false);\n            reject({\n                error: errMsg,\n                details: error\n            });\n        };\n        return new Promise((resolve, reject) => {\n            let reqParams = generateConnectionParams(params, dbOperation);\n            reqParams = {\n                url: reqParams.url,\n                method: reqParams.method,\n                data: reqParams.data,\n                headers: reqParams.headers\n            };\n            params.operation = dbOperation;\n            this.httpCall(reqParams, variable, params).then((response) => {\n                successHandler(response, resolve);\n            }, (e) => {\n                errorHandler(e, reject);\n            });\n        });\n    }\n\n    private getEntityData(variable, options, success, error) {\n        const dataObj: any = {};\n        let tableOptions,\n            dbOperation,\n            output,\n            newDataSet,\n            clonedFields,\n            requestData,\n            dbOperationOptions,\n            getEntitySuccess,\n            getEntityError;\n\n        // empty array kept (if variable is not of read type filterExpressions will be undefined)\n        clonedFields = this.getFilterExprFields(getClonedObject(variable.filterExpressions || {}));\n        // clonedFields = getClonedObject(variable.filterFields);\n        //  EVENT: ON_BEFORE_UPDATE\n        output = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, this.getDataFilterObj(clonedFields), options);\n        // if filterFields are updated or modified inside the onBeforeUpdate event then in device use these fields to filter.\n        const updateFilterFields = _.isObject(output) ? getClonedObject(output) : undefined;\n        if (output === false) {\n            $queue.process(variable);\n            // $rootScope.$emit('toggle-variable-state', variable, false);\n            triggerFn(error, 'Call stopped from the event: ' + VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);\n            return Promise.reject('Call stopped from the event: ' + VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);\n        }\n\n        variable.canUpdate = false;\n\n        tableOptions = LiveVariableUtils.prepareTableOptions(variable, options, _.isObject(output) ? output : clonedFields);\n\n        //  if tableOptions object has query then set the dbOperation to 'searchTableDataWithQuery'\n        if (options.searchWithQuery) {\n            dbOperation = 'searchTableDataWithQuery';\n            requestData = tableOptions.query ? ('q=' + tableOptions.query) : '';\n        } else {\n            dbOperation = (tableOptions.filter && tableOptions.filter.length) ? 'searchTableData' : 'readTableData';\n            requestData = tableOptions.filter;\n        }\n        dbOperationOptions = {\n            'projectID': $rootScope.project.id,\n            'service': variable.getPrefabName() ? '' : 'services',\n            'dataModelName': variable.liveSource,\n            'entityName': variable.type,\n            'page': options.page || 1,\n            'size': options.pagesize || (CONSTANTS.isRunMode ? (variable.maxResults || 20) : (variable.designMaxResults || 20)),\n            'sort': tableOptions.sort,\n            'data': requestData,\n            'filter': LiveVariableUtils.getWhereClauseGenerator(variable, options, updateFilterFields),\n            // 'filterMeta': tableOptions.filter,\n            'url': variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl\n        };\n        getEntitySuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                response = response.body;\n                dataObj.data = response.content;\n                dataObj.pagination = _.omit(response, 'content');\n                const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(response, {pagination: dataObj.pagination});\n\n                if ((response && response.error) || !response || !_.isArray(response.content)) {\n                    this.handleError(variable, error, response.error, options, advancedOptions);\n                    return Promise.reject(response.error);\n                }\n\n                LiveVariableUtils.processBlobColumns(response.content, variable);\n\n                if (!options.skipDataSetUpdate) {\n                    //  EVENT: ON_RESULT\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, dataObj.data, advancedOptions);\n                    //  EVENT: ON_PREPARESETDATA\n                    newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, dataObj.data, advancedOptions);\n                    if (newDataSet) {\n                        // setting newDataSet as the response to service variable onPrepareSetData\n                        dataObj.data = newDataSet;\n                    }\n                    /* update the dataSet against the variable */\n                    this.updateDataset(variable, dataObj.data, variable.propertiesMap, dataObj.pagination);\n                    this.setVariableOptions(variable, options);\n\n                    // watchers should get triggered before calling onSuccess event.\n                    // so that any variable/widget depending on this variable's data is updated\n                    $invokeWatchers(true);\n                    setTimeout(() => {\n                        // if callback function is provided, send the data to the callback\n                        triggerFn(success, dataObj.data, variable.propertiesMap, dataObj.pagination);\n\n                        //  EVENT: ON_SUCCESS\n                        initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, dataObj.data, advancedOptions);\n                        //  EVENT: ON_CAN_UPDATE\n                        variable.canUpdate = true;\n                        initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, dataObj.data, advancedOptions);\n                    });\n                }\n                return resolve({data: dataObj.data, pagination: dataObj.pagination});\n            }\n        };\n        getEntityError = (e: any, reject: any) => {\n            this.setVariableOptions(variable, options);\n            this.handleError(variable, error, e.error, _.extend(options, {errorDetails: e.details}));\n\n            return reject(e.error);\n        };\n        /* if it is a prefab variable (used in a normal project), modify the url */\n        /*Fetch the table data*/\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                getEntitySuccess(response, resolve);\n            }, err => {\n                getEntityError(err, reject);\n            });\n        });\n    }\n\n    private performCUD(operation, variable, options, success, error) {\n        options = options || {};\n        options.inputFields = options.inputFields || getClonedObject(variable.inputFields);\n        return $queue.submit(variable).then(() => {\n            this.notifyInflight(variable, !options.skipToggleState);\n            return this.doCUD(operation, variable, options, success, error)\n                .then((response) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, response);\n                    return Promise.resolve(response);\n                }, (err) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, err);\n                    return Promise.reject(err);\n                });\n        }, error);\n    }\n\n    private doCUD(action, variable, options, success, error) {\n        const projectID = $rootScope.project.id || $rootScope.projectName,\n            primaryKey = LiveVariableUtils.getPrimaryKey(variable),\n            isFormDataSupported = (window.File && window.FileReader && window.FileList && window.Blob);\n\n        let dbName,\n            compositeId = '',\n            rowObject = {},\n            prevData,\n            compositeKeysData = {},\n            prevCompositeKeysData = {},\n            id,\n            columnName,\n            clonedFields,\n            output,\n            onCUDerror,\n            onCUDsuccess,\n            inputFields = options.inputFields || variable.inputFields;\n\n        // EVENT: ON_BEFORE_UPDATE\n        clonedFields = getClonedObject(inputFields);\n        output = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, clonedFields, options);\n        if (output === false) {\n            // $rootScope.$emit('toggle-variable-state', variable, false);\n            triggerFn(error);\n            return Promise.reject('Call stopped from the event: ' + VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);\n        }\n        inputFields = _.isObject(output) ? output : clonedFields;\n        variable.canUpdate = false;\n\n        if (options.row) {\n            rowObject = options.row;\n            // For datetime types, convert the value to the format accepted by backend\n            _.forEach(rowObject, (value, key) => {\n                const fieldType = LiveVariableUtils.getFieldType(key, variable);\n                let fieldValue;\n                if (isDateTimeType(fieldType)) {\n                    fieldValue = formatDate(value, fieldType);\n                    rowObject[key] = fieldValue;\n                } else if (_.isArray(value) && LiveVariableUtils.isStringType(fieldType)) {\n                    // Construct ',' separated string if param is not array type but value is an array\n                    fieldValue = _.join(value, ',');\n                    rowObject[key] = fieldValue;\n                }\n            });\n            // Merge inputFields along with dataObj while making Insert/Update/Delete\n            _.forEach(inputFields, (attrValue, attrName) => {\n                if ((isDefined(attrValue) && attrValue !== '') && (!isDefined(rowObject[attrName]) || rowObject[attrName] === '')) {\n                    rowObject[attrName] = attrValue;\n                }\n            });\n        } else {\n            _.forEach(inputFields, (fieldValue, fieldName) => {\n                let fieldType;\n                const primaryKeys = variable.propertiesMap.primaryFields || variable.propertiesMap.primaryKeys;\n                if (!_.isUndefined(fieldValue) && fieldValue !== '') {\n                    /*For delete action, the inputFields need to be set in the request URL. Hence compositeId is set.\n                     * For insert action inputFields need to be set in the request data. Hence rowObject is set.\n                     * For update action, both need to be set.*/\n                    if (action === 'deleteTableData') {\n                        compositeId = fieldValue;\n                    }\n                    if (action === 'updateTableData') {\n                        primaryKeys.forEach(key => {\n                            if (fieldName === key) {\n                                compositeId = fieldValue;\n                            }\n                        });\n                    }\n                    if (action !== 'deleteTableData' || LiveVariableUtils.isCompositeKey(primaryKey)) {\n                        fieldType = LiveVariableUtils.getFieldType(fieldName, variable);\n                        if (isDateTimeType(fieldType)) {\n                            fieldValue = formatDate(fieldValue, fieldType);\n                        } else if (_.isArray(fieldValue) && LiveVariableUtils.isStringType(fieldType)) {\n                            // Construct ',' separated string if param is not array type but value is an array\n                            fieldValue = _.join(fieldValue, ',');\n                        }\n                        rowObject[fieldName] = fieldValue;\n                    }\n                    // for related entities, clear the blob type fields\n                    if (_.isObject(fieldValue) && !_.isArray(fieldValue)) {\n                        _.forEach(fieldValue, (val, key) => {\n                            if (LiveVariableUtils.getFieldType(fieldName, variable, key) === 'blob') {\n                                fieldValue[key] = val === null ? val : '';\n                            }\n                        });\n                    }\n                }\n            });\n        }\n\n        switch (action) {\n            case 'updateTableData':\n                prevData = options.prevData || {};\n                /*Construct the \"requestData\" based on whether the table associated with the live-variable has a composite key or not.*/\n                if (LiveVariableUtils.isCompositeKey(primaryKey)) {\n                    if (LiveVariableUtils.isNoPrimaryKey(primaryKey)) {\n                        prevCompositeKeysData = prevData || options.rowData || rowObject;\n                        compositeKeysData = rowObject;\n                    } else {\n                        primaryKey.forEach(key => {\n                            compositeKeysData[key] = rowObject[key];\n                            // In case of periodic update for Business temporal fields, passing updated field data.\n                            if (options.period) {\n                                prevCompositeKeysData[key] = rowObject[key];\n                            } else {\n                                prevCompositeKeysData[key] = prevData[key] || (options.rowData && options.rowData[key]) || rowObject[key];\n                            }\n                        });\n                    }\n                    options.row = compositeKeysData;\n                    options.compositeKeysData = prevCompositeKeysData;\n                } else {\n                    primaryKey.forEach((key) => {\n                        if (key.indexOf('.') === -1) {\n                            id = prevData[key] || (options.rowData && options.rowData[key]) || rowObject[key];\n                        } else {\n                            columnName = key.split('.');\n                            id = prevData[columnName[0]][columnName[1]];\n                        }\n                    });\n                    options.id = id;\n                    options.row = rowObject;\n                }\n\n                break;\n            case 'deleteTableData':\n                /*Construct the \"requestData\" based on whether the table associated with the live-variable has a composite key or not.*/\n                if (LiveVariableUtils.isCompositeKey(primaryKey)) {\n                    if (LiveVariableUtils.isNoPrimaryKey(primaryKey)) {\n                        compositeKeysData = rowObject;\n                    } else {\n                        primaryKey.forEach(key => {\n                            compositeKeysData[key] = rowObject[key];\n                        });\n                    }\n                    options.compositeKeysData = compositeKeysData;\n                } else if (!_.isEmpty(rowObject)) {\n                    primaryKey.forEach(key => {\n                        if (key.indexOf('.') === -1) {\n                            id = rowObject[key];\n                        } else {\n                            columnName = key.split('.');\n                            id = rowObject[columnName[0]][columnName[1]];\n                        }\n                    });\n                    options.id = id;\n                }\n                break;\n            default:\n                break;\n        }\n        // If table has blob column then send multipart data\n        if ((action === 'updateTableData' || action === 'insertTableData') && LiveVariableUtils.hasBlob(variable) && isFormDataSupported) {\n            if (action === 'updateTableData') {\n                action = 'updateMultiPartTableData';\n            } else {\n                action = 'insertMultiPartTableData';\n            }\n            rowObject = LiveVariableUtils.prepareFormData(variable, rowObject);\n        }\n        /*Check if \"options\" have the \"compositeKeysData\" property.*/\n        if (options.compositeKeysData) {\n            switch (action) {\n                case 'updateTableData':\n                    action = 'updateCompositeTableData';\n                    break;\n                case 'deleteTableData':\n                    action = 'deleteCompositeTableData';\n                    break;\n                case 'updateMultiPartTableData':\n                    action = 'updateMultiPartCompositeTableData';\n                    break;\n                default:\n                    break;\n            }\n            compositeId = LiveVariableUtils.getCompositeIDURL(options.compositeKeysData);\n        }\n        dbName = variable.liveSource;\n\n        /*Set the \"data\" in the request to \"undefined\" if there is no data.\n        * This handles cases such as \"Delete\" requests where data should not be passed.*/\n        if (_.isEmpty(rowObject) && action === 'deleteTableData') {\n            rowObject = undefined;\n        }\n\n        if ((action === 'updateCompositeTableData' || action === 'deleteCompositeTableData') && options.period) {\n            // capitalize first character\n            action = 'period' + action.charAt(0).toUpperCase() + action.substr(1);\n        }\n\n        const dbOperations = {\n            'projectID': projectID,\n            'service': variable._prefabName ? '' : 'services',\n            'dataModelName': dbName,\n            'entityName': variable.type,\n            'id': !_.isUndefined(options.id) ? encodeURIComponent(options.id) : compositeId,\n            'data': rowObject,\n            'url': variable._prefabName ? ($rootScope.project.deployedUrl + '/prefabs/' + variable._prefabName) : $rootScope.project.deployedUrl\n        };\n\n        onCUDerror = (response: any, reject: any) => {\n            const errMsg = response.error;\n            const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(response);\n            // EVENT: ON_RESULT\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, errMsg, advancedOptions);\n            // EVENT: ON_ERROR\n            if (!options.skipNotification) {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, errMsg, advancedOptions);\n            }\n            // EVENT: ON_CAN_UPDATE\n            variable.canUpdate = true;\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, errMsg, advancedOptions);\n            triggerFn(error, errMsg);\n            reject(errMsg);\n        };\n\n        onCUDsuccess = (data: any, resolve: any) => {\n            let response = data.body;\n            const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(data);\n\n            $queue.process(variable);\n            /* if error received on making call, call error callback */\n            if (response && response.error) {\n                // EVENT: ON_RESULT\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n                // EVENT: ON_ERROR\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response.error, advancedOptions);\n                // EVENT: ON_CAN_UPDATE\n                variable.canUpdate = true;\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response.error, advancedOptions);\n                triggerFn(error, response.error);\n                return Promise.reject(response.error);\n            }\n\n            // EVENT: ON_RESULT\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n            if (variable.operation !== 'read') {\n                // EVENT: ON_PREPARESETDATA\n                const newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, response, advancedOptions);\n                if (newDataSet) {\n                    // setting newDataSet as the response to service variable onPrepareSetData\n                    response = newDataSet;\n                }\n                variable.dataSet = response;\n            }\n\n            // watchers should get triggered before calling onSuccess event.\n            // so that any variable/widget depending on this variable's data is updated\n            $invokeWatchers(true);\n            setTimeout(() => {\n                // EVENT: ON_SUCCESS\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, response, advancedOptions);\n                // EVENT: ON_CAN_UPDATE\n                variable.canUpdate = true;\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response, advancedOptions);\n            });\n            triggerFn(success, response);\n            resolve(response);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, action, dbOperations).then(data => {\n                onCUDsuccess(data, resolve);\n            }, response => {\n                onCUDerror(response, reject);\n            });\n        });\n    }\n\n\n\n    private aggregateData(deployedUrl, variable, options, success, error) {\n        let tableOptions,\n            dbOperationOptions,\n            aggregateDataSuccess,\n            aggregateDataError;\n        const dbOperation = 'executeAggregateQuery';\n        options = options || {};\n        options.skipEncode = true;\n        if (variable.filterFields) {\n            tableOptions = LiveVariableUtils.prepareTableOptions(variable, options);\n            options.aggregations.filter = tableOptions.query;\n        }\n        dbOperationOptions = {\n            'dataModelName': variable.liveSource,\n            'entityName': variable.type,\n            'page': options.page || 1,\n            'size': options.size || variable.maxResults,\n            'sort': options.sort || '',\n            'url': deployedUrl,\n            'data': options.aggregations\n        };\n        aggregateDataSuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                if ((response && response.error) || !response) {\n                    triggerFn(error, response.error);\n                    return;\n                }\n                triggerFn(success, response);\n                resolve(response);\n            }\n        };\n        aggregateDataError = (errorMsg: any, reject: any) => {\n            triggerFn(error, errorMsg);\n            reject(errorMsg);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                aggregateDataSuccess(response, resolve);\n            }, err => {\n                aggregateDataError(err, reject);\n            });\n        });\n    }\n\n\n    // *********************************************************** PUBLIC ***********************************************************//\n\n    /**\n     * Makes http call for a Live Variable against the configured DB Entity.\n     * Gets the paginated records against the entity\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public listRecords(variable, options, success, error) {\n        options = options || {};\n        options.filterFields = options.filterFields || getClonedObject(variable.filterFields);\n        return $queue.submit(variable).then(() => {\n            this.notifyInflight(variable, !options.skipToggleState);\n            return this.getEntityData(variable, options, success, error)\n                .then((response) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, response);\n                    return Promise.resolve(response);\n                }, (err) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, err);\n                    return Promise.reject(err);\n                });\n        }, error);\n    }\n\n    /**\n     * Makes a POST http call for a Live Variable against the configured DB Entity.\n     * Sends a Table record object with the request body\n     * the record is inserted into the entity at the backend\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public insertRecord(variable, options, success, error) {\n        return this.performCUD('insertTableData', variable, options, success, error);\n    }\n\n    /**\n     * Makes a PUT http call for a Live Variable against the configured DB Entity.\n     * Sends a Table record object with the request body against the primary key of an existing record\n     * the record is updated into the entity at the backend\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public updateRecord(variable, options, success, error) {\n        return this.performCUD('updateTableData', variable, options, success, error);\n    }\n\n    /**\n     * Makes a DELETE http call for a Live Variable against the configured DB Entity.\n     * Sends the primary key of an existing record\n     * the record is deleted from the entity at the backend\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public deleteRecord(variable, options, success, error) {\n        return this.performCUD('deleteTableData', variable, options, success, error);\n    }\n\n    /**\n     * sets the value against passed key on the \"inputFields\" object in the variable\n     * @param variable\n     * @param key: can be:\n     *  - a string e.g. \"username\"\n     *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n     * @param val\n     * - if key is string, the value against it (for that data type)\n     * - if key is object, not required\n     * @param options\n     * @returns {any}\n     */\n    public setInput(variable, key, val, options) {\n        variable.inputFields = variable.inputFields || {};\n        return setInput(variable.inputFields, key, val, options);\n    }\n\n    /**\n     * sets the value against passed key on the \"filterFields\" object in the variable\n     * @param variable\n     * @param key: can be:\n     *  - a string e.g. \"username\"\n     *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n     * @param val\n     * - if key is string, the value against it (for that data type)\n     * - if key is object, not required\n     * @param options\n     * @returns {any}\n     */\n    public setFilter(variable, key, val) {\n        let paramObj: any = {},\n            targetObj: any = {};\n        if (_.isObject(key)) {\n            paramObj = key;\n        } else {\n            paramObj[key] = val;\n        }\n\n        if (!variable.filterExpressions) {\n            variable.filterExpressions = {'condition': 'AND', 'rules': []};\n        }\n        targetObj = variable.filterExpressions;\n\n        // find the existing criteria if present or else return null. Find the first one and return.\n        // If the user wants to set a different object, then he has to use the getCriteria API defined\n        // on the dataFilter object passed to the onBeforeListRecords\n        function getExistingCriteria(filterField) {\n            let existingCriteria = null;\n            LiveVariableUtils.traverseFilterExpressions(targetObj, function (filterExpressions, criteria) {\n                if (filterField === criteria.target) {\n                    return existingCriteria = criteria;\n                }\n            });\n            return existingCriteria;\n        }\n\n        _.forEach(paramObj, function (paramVal, paramKey) {\n            const existingCriteria = getExistingCriteria(paramKey);\n            if (existingCriteria !== null) {\n                existingCriteria.value = paramVal;\n            } else {\n                targetObj.rules.push({\n                    target: paramKey,\n                    type: '',\n                    matchMode: '',\n                    value: paramVal,\n                    required: false\n                });\n            }\n        });\n\n        return targetObj;\n    }\n\n    /**\n     * Makes a file download call for a table\n     * @param variable\n     * @param options\n     */\n    public download(variable, options, successHandler, errorHandler) {\n        options = options || {};\n        let tableOptions,\n            dbOperationOptions,\n            downloadSuccess,\n            downloadError;\n        const data: any = {};\n        const dbOperation = 'exportTableData';\n        const projectID = $rootScope.project.id || $rootScope.projectName;\n        options.data.searchWithQuery = true; // For export, query api is used. So set this flag to true\n        options.data.skipEncode = true;\n        tableOptions = LiveVariableUtils.prepareTableOptions(variable, options.data, undefined);\n        data.query = tableOptions.query ? tableOptions.query : '';\n        data.exportSize = options.data.exportSize;\n        data.exportType = options.data.exportType;\n        data.fields = formatExportExpression(options.data.fields);\n        if (options.data.fileName) {\n            data.fileName = options.data.fileName;\n        }\n        dbOperationOptions = {\n            'projectID': projectID,\n            'service': variable.getPrefabName() ? '' : 'services',\n            'dataModelName': variable.liveSource,\n            'entityName': variable.type,\n            'sort': tableOptions.sort,\n            'url': variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl,\n            'data': data,\n            'filter': LiveVariableUtils.getWhereClauseGenerator(variable, options)\n            // 'filterMeta'    : tableOptions.filter\n        };\n        downloadSuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                window.location.href = response.body.result;\n                triggerFn(successHandler, response);\n                resolve(response);\n            }\n        };\n        downloadError = (err: any, reject: any) => {\n            const opt: AdvancedOptions = this.prepareCallbackOptions(err.details);\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, err.error, opt);\n            triggerFn(errorHandler, err.error);\n            reject(err);\n        };\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                downloadSuccess(response, resolve);\n            }, (error) => {\n                downloadError(error, reject);\n            });\n        });\n    }\n\n    /**\n     * gets primary keys against the passed related Table\n     * @param variable\n     * @param relatedField\n     * @returns {any}\n     */\n    public getRelatedTablePrimaryKeys(variable, relatedField) {\n        let primaryKeys,\n            result,\n            relatedCols;\n        if (!variable.propertiesMap) {\n            return;\n        }\n        result = _.find(variable.propertiesMap.columns || [], {'fieldName': relatedField});\n        // if related field name passed, get its type from columns inside the current field\n        if (result) {\n            relatedCols = result.columns;\n            primaryKeys = _.map(_.filter(relatedCols, 'isPrimaryKey'), 'fieldName');\n            if (primaryKeys.length) {\n                return primaryKeys;\n            }\n            if (relatedCols && relatedCols.length) {\n                relatedCols = _.find(relatedCols, {'isRelated': false});\n                return relatedCols && relatedCols.fieldName;\n            }\n        }\n    }\n\n    /**\n     * Makes HTTP call to get the data for related entity of a field in an entity\n     * @param variable\n     * @param columnName\n     * @param options\n     * @param success\n     * @param error\n     */\n    public getRelatedTableData(variable, columnName, options, success, error) {\n        const projectID = $rootScope.project.id || $rootScope.projectName;\n        const relatedTable = _.find(variable.relatedTables, table => table.relationName === columnName || table.columnName === columnName); // Comparing column name to support the old projects\n        const selfRelatedCols = _.map(_.filter(variable.relatedTables, o => o.type === variable.type), 'relationName');\n        const filterFields = [];\n        let orderBy,\n            filterOptions,\n            query,\n            action,\n            dbOperationOptions,\n            getRelatedTableDataSuccess,\n            getRelatedTableDataError;\n        _.forEach(options.filterFields, (value, key) => {\n            value.fieldName = key;\n            value.type = LiveVariableUtils.getFieldType(columnName, variable, key);\n            /**\n             * for 'in' mode we are taking the input as comma separated values and for between in ui there are two different fields\n             * but these are processed and merged into a single value with comma as separator. For these conditions like 'in' and 'between',\n             * for building the query, the function expects the values to be an array\n             */\n            if (value.filterCondition === DB_CONSTANTS.DATABASE_MATCH_MODES.in.toLowerCase() || value.filterCondition === DB_CONSTANTS.DATABASE_MATCH_MODES.between.toLowerCase()) {\n                value.value = value.value.split(',');\n            }\n            filterFields.push(value);\n        });\n        filterOptions = LiveVariableUtils.getFilterOptions(variable, filterFields, options);\n        query = LiveVariableUtils.getSearchQuery(filterOptions, ' ' + (options.logicalOp || 'AND') + ' ', variable.ignoreCase);\n        if (options.filterExpr) {\n            const _clonedFields = getClonedObject(_.isObject(options.filterExpr) ? options.filterExpr : JSON.parse(options.filterExpr));\n            LiveVariableUtils.processFilterFields(_clonedFields.rules, variable, options);\n            const filterExpQuery = LiveVariableUtils.generateSearchQuery(_clonedFields.rules, _clonedFields.condition, variable.ignoreCase, options.skipEncode);\n            if (query !== '') {\n                if (filterExpQuery !== '') {\n                    query = '(' + query + ') AND (' + filterExpQuery + ')';\n                }\n            } else if (filterExpQuery !== '') {\n                query = filterExpQuery;\n            }\n        }\n        query = query ? ('q=' + query) : '';\n        action = 'searchTableDataWithQuery';\n        orderBy = _.isEmpty(options.orderBy) ? '' : 'sort=' + options.orderBy;\n        dbOperationOptions = {\n            projectID: projectID,\n            service: variable.getPrefabName() ? '' : 'services',\n            dataModelName: variable.liveSource,\n            entityName: relatedTable ? relatedTable.type : '',\n            page: options.page || 1,\n            size: options.pagesize || undefined,\n            url: variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl,\n            data: query || '',\n            filter: LiveVariableUtils.getWhereClauseGenerator(variable, options),\n            sort: orderBy\n        };\n        getRelatedTableDataSuccess = (res: any, resolve: any) => {\n            if (res && res.type) {\n                const response = res.body;\n                /*Remove the self related columns from the data. As backend is restricting the self related column to one level, In liveform select, dataset and datavalue object\n                 * equality does not work. So, removing the self related columns to acheive the quality*/\n                const data = _.map(response.content, o => _.omit(o, selfRelatedCols));\n\n                const pagination = Object.assign({}, response);\n                delete pagination.content;\n\n                const result = {data: data, pagination};\n                triggerFn(success, result);\n\n                resolve(result);\n            }\n        };\n        getRelatedTableDataError = (errMsg: any, reject: any) => {\n            triggerFn(error, errMsg);\n            reject(errMsg);\n        };\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, action, dbOperationOptions).then((response) => {\n                getRelatedTableDataSuccess(response, resolve);\n            }, err => {\n                getRelatedTableDataError(err, reject);\n            });\n        });\n    }\n\n    /**\n     * Gets the distinct records for an entity\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     */\n    public getDistinctDataByFields(variable, options, success, error) {\n        const dbOperation = 'getDistinctDataByFields';\n        const projectID = $rootScope.project.id || $rootScope.projectName;\n        const requestData: any = {};\n        let sort;\n        let tableOptions,\n            dbOperationOptions,\n            getDistinctDataByFieldsSuccess,\n            getDistinctDataByFieldsError;\n        options.skipEncode = true;\n        options.operation = 'read';\n        options = options || {};\n        tableOptions = LiveVariableUtils.prepareTableOptions(variable, options);\n        if (tableOptions.query) {\n            requestData.filter = tableOptions.query;\n        }\n        requestData.groupByFields = _.isArray(options.fields) ? options.fields : [options.fields];\n        sort = options.sort || requestData.groupByFields[0] + ' asc';\n        sort = sort ? 'sort=' + sort : '';\n        dbOperationOptions = {\n            'projectID': projectID,\n            'service': variable.getPrefabName() ? '' : 'services',\n            'dataModelName': variable.liveSource,\n            'entityName': options.entityName || variable.type,\n            'page': options.page || 1,\n            'size': options.pagesize,\n            'sort': sort,\n            'data': requestData,\n            'filter': LiveVariableUtils.getWhereClauseGenerator(variable, options),\n            'url': variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl\n        };\n        getDistinctDataByFieldsSuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                if ((response && response.error) || !response) {\n                    triggerFn(error, response.error);\n                    return Promise.reject(response.error);\n                }\n                let result = response.body;\n                const pagination = Object.assign({}, response.body);\n                delete pagination.content;\n\n                result = {data: result.content, pagination};\n                triggerFn(success, result);\n                resolve(result);\n            }\n        };\n        getDistinctDataByFieldsError = (errorMsg: any, reject: any) => {\n            triggerFn(error, errorMsg);\n            reject(errorMsg);\n        };\n\n            return new Promise((resolve, reject) => {\n                this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                    getDistinctDataByFieldsSuccess(response, resolve);\n                }, () => {\n                    getDistinctDataByFieldsError(error, reject);\n                });\n            });\n    }\n\n    /*Function to get the aggregated data based on the fields chosen*/\n    public getAggregatedData(variable, options, success, error) {\n        const deployedURL = appManager.getDeployedURL();\n        if (deployedURL) {\n            return this.aggregateData(deployedURL, variable, options, success, error);\n        }\n    }\n\n    public defineFirstLastRecord(variable) {\n        if (variable.operation === 'read') {\n            Object.defineProperty(variable, 'firstRecord', {\n                'configurable': true,\n                'get': () => {\n                    return _.get(variable.dataSet, 'data[0]', {});\n                }\n            });\n            Object.defineProperty(variable, 'lastRecord', {\n                'configurable': true,\n                'get': () => {\n                    const data = _.get(variable.dataSet, 'data', []);\n                    return data[data.length - 1];\n                }\n            });\n        }\n    }\n\n    public getPrimaryKey(variable) {\n        return LiveVariableUtils.getPrimaryKey(variable);\n    }\n\n    // Returns the search query params.\n    public prepareRequestParams(options) {\n        let requestParams;\n\n        const searchKeys = _.split(options.searchKey, ','),\n            matchModes = _.split(options.matchMode, ','),\n            formFields = {};\n\n        _.forEach(searchKeys, (colName, index) => {\n            formFields[colName] = {\n                value: options.query,\n                logicalOp: 'AND',\n                matchMode: matchModes[index] || matchModes[0] || 'startignorecase'\n            };\n        });\n\n        requestParams = {\n            filterFields: formFields,\n            page: options.page,\n            pagesize: options.limit || options.pagesize,\n            skipDataSetUpdate: true, // dont update the actual variable dataset,\n            skipToggleState: true, // Dont change the variable toggle state as this is a independent call\n            inFlightBehavior: 'executeAll',\n            logicalOp: 'OR',\n            orderBy: options.orderby ? _.replace(options.orderby, /:/g, ' ') : ''\n        };\n\n        if (options.onBeforeservicecall) {\n            options.onBeforeservicecall(formFields);\n        }\n\n        return requestParams;\n    }\n\n    /**\n     * Gets the filtered records based on searchKey\n     * @param variable\n     * @param options contains the searchKey and queryText\n     * @param success\n     * @param error\n     * @returns {Promise<any>}\n     */\n    public searchRecords(variable, options, success, error) {\n        const requestParams = this.prepareRequestParams(options);\n\n        return this.listRecords(variable, requestParams, success, error);\n    }\n\n    /**\n     * used in onBeforeUpdate call - called last in the function - used in old Variables using dataBinding.\n     * This function migrates the old data dataBinding to filterExpressions equivalent format\n     * @param variable\n     * @param inputData\n     * @private\n     */\n    public upgradeInputDataToFilterExpressions(variable, response, inputData) {\n        if (_.isObject(response)) {\n            inputData = response;\n            inputData.condition = 'AND';\n            inputData.rules = [];\n        }\n        /**\n         * if the user deletes a particular criteria, we need to remove this form our data aswell.\n         * so we are keeping a copy of it and the emptying the existing object and now fill it with the\n         * user set criteria. If its just modified, change the data and push it tohe rules or else just add a new criteria\n         */\n        const clonedRules = _.cloneDeep(inputData.rules);\n        inputData.rules = [];\n        _.forEach(inputData, function (valueObj, key) {\n            if (key !== 'condition' && key !== 'rules') {\n                const filteredObj = _.find(clonedRules, o => o.target === key);\n                // if the key is found update the value, else create a new rule obj and add it to the existing rules\n                if (filteredObj) {\n                    filteredObj.value = valueObj.value;\n                    filteredObj.matchMode = valueObj.matchMode || valueObj.filterCondition || filteredObj.matchMode || '';\n                    inputData.rules.push(filteredObj);\n                } else {\n                    inputData.rules.push({\n                        'target': key,\n                        'type': '',\n                        'matchMode': valueObj.matchMode || valueObj.filterCondition || '',\n                        'value': valueObj.value,\n                        'required': false\n                    });\n                }\n                delete inputData[key];\n            }\n        });\n        return inputData;\n    }\n\n    /**\n     * used in onBeforeUpdate call - called first in the function - used in old Variables using dataBinding.\n     * This function migrates the filterExpressions object to flat map structure\n     * @param variable\n     * @param inputData\n     * @private\n     */\n    public downgradeFilterExpressionsToInputData(variable, inputData) {\n        if (inputData.hasOwnProperty('getFilterFields')) {\n            inputData = inputData.getFilterFields();\n        }\n        _.forEach(inputData.rules, function (ruleObj) {\n            if (!_.isNil(ruleObj.target) && ruleObj.target !== '') {\n                inputData[ruleObj.target] = {\n                    'value': ruleObj.value,\n                    'matchMode': ruleObj.matchMode\n                };\n            }\n        });\n        return inputData;\n    }\n\n    public cancel(variable, options) {\n        if ($queue.requestsQueue.has(variable) && variable._observable) {\n            variable._observable.unsubscribe();\n            $queue.process(variable);\n            // notify inflight variable\n            this.notifyInflight(variable, false);\n        }\n    }\n}\n","import { navigationService } from '../variable/variables.utils';\n\n/**\n * Handles variable navigation operations\n * @param variable\n * @param options\n */\nexport const navigate = (variable, options) => {\n    variable.dataSet = (options && options.data) || variable.dataSet;\n    let viewName;\n    const pageName = variable.dataBinding.pageName || variable.pageName,\n        operation = variable.operation,\n        urlParams = variable.dataSet;\n\n    options = options || {};\n\n    /* if operation is goToPage, navigate to the pageName */\n    switch (operation) {\n        case 'goToPreviousPage':\n            navigationService.goToPrevious();\n            break;\n        case 'gotoPage':\n            navigationService.goToPage(pageName, {\n                transition: variable.pageTransitions,\n                $event: options.$event,\n                urlParams: urlParams\n            });\n            break;\n        case 'gotoView':\n            viewName = (variable.dataBinding && variable.dataBinding.viewName) || variable.viewName;\n            break;\n        case 'gotoTab':\n            viewName = (variable.dataBinding && variable.dataBinding.tabName) || variable.tabName;\n            break;\n        case 'gotoAccordion':\n            viewName = (variable.dataBinding && variable.dataBinding.accordionName) || variable.accordionName;\n            break;\n        case 'gotoSegment':\n            viewName = (variable.dataBinding && variable.dataBinding.segmentName) || variable.segmentName;\n            break;\n    }\n\n    /* if view name found, call routine to navigate to it */\n    if (viewName) {\n        navigationService.goToView(viewName, {\n            pageName: pageName,\n            transition: variable.pageTransitions,\n            $event: options.$event,\n            urlParams: urlParams\n        }, variable);\n    }\n};\n","import { appManager, processBinding } from '../../util/variable/variables.utils';\n\nexport abstract class BaseActionManager {\n    initBinding(variable, bindSource?, bindTarget?) {\n        processBinding(variable, variable._context, bindSource, bindTarget);\n    }\n\n    notifyInflight(variable, status: boolean, data?: any) {\n        appManager.notify('toggle-variable-state', {\n            variable: variable,\n            active: status,\n            data: data\n        });\n    }\n}\n","import * as NVUtils from '../../util/action/navigation-action.utils';\nimport { BaseActionManager } from './base-action.manager';\n\nexport class NavigationActionManager extends BaseActionManager {\n\n    invoke(variable, options) {\n        NVUtils.navigate(variable, options);\n    }\n}\n","import { BaseActionManager } from './base-action.manager';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { initiateCallback, toasterService, dialogService } from '../../util/variable/variables.utils';\n\ndeclare const _;\n\nexport class NotificationActionManager extends BaseActionManager {\n\n    private onToasterClick(variable) {\n        initiateCallback('onClick', variable, '');\n    }\n\n    private onToasterHide(variable) {\n        initiateCallback('onHide', variable, '');\n    }\n\n    private notifyViaToaster(variable, options) {\n        const type = (options.class || variable.dataBinding.class || 'info').toLowerCase(),\n            body = options.message || variable.dataBinding.text,\n            title = options.title,\n            positionClass = 'toast-' + (options.position || variable.dataBinding.toasterPosition || 'bottom right').replace(' ', '-'),\n            partialPage = variable.dataBinding.page,\n            DEFAULT_DURATION = 3000;\n        let duration = parseInt(variable.dataBinding.duration || options.duration, null),\n            toaster;\n\n        // duration\n        if (!duration) {\n            duration = (duration !== 0 && type === 'success') ? DEFAULT_DURATION : 0;\n        }\n        if (variable.dataBinding.content && variable.dataBinding.content === 'page' && partialPage) {\n            toaster = toasterService.showCustom(partialPage, {positionClass: positionClass, timeOut: duration,\n                partialParams: variable._binddataSet, context: variable._context});\n        } else {\n            toaster = toasterService.show(type, title, body || null, {positionClass: positionClass, timeOut: duration, enableHtml: true});\n        }\n\n        // callbacks\n        if (variable.onClick) {\n            toaster.onTap.subscribe( this.onToasterClick.bind(this, variable) );\n        }\n        if (variable.onHide) {\n            toaster.onHidden.subscribe( this.onToasterHide.bind(this, variable) );\n        }\n    }\n\n    private notifyViaDialog(variable, options) {\n        const commonPageDialogId = 'Common' + _.capitalize(variable.operation) + 'Dialog',\n            variableOwner = variable.owner,\n            dialogId = (variableOwner === VARIABLE_CONSTANTS.OWNER.APP ) ? commonPageDialogId : 'notification' + variable.operation + 'dialog';\n        dialogService.open(dialogId,  variable._context, {\n            notification: {\n                'title' : options.title || variable.dataBinding.title,\n                'text' : options.message || variable.dataBinding.text,\n                'okButtonText' : options.okButtonText || variable.dataBinding.okButtonText || 'OK',\n                'cancelButtonText' : options.cancelButtonText || variable.dataBinding.cancelButtonText || 'CANCEL',\n                'alerttype' : options.alerttype || variable.dataBinding.alerttype || 'information',\n                onOk: () => {\n                    initiateCallback('onOk', variable, options.data);\n                    // Close the action dialog after triggering onOk callback event\n                    dialogService.close(dialogId, variable._context);\n                },\n                onCancel: () => {\n                    initiateCallback('onCancel', variable, options.data);\n                    // Close the action dialog after triggering onCancel callback event\n                    dialogService.close(dialogId, variable._context);\n                },\n                onClose: () => {\n                    initiateCallback('onClose', variable, options.data);\n                }\n            }\n        });\n    }\n\n// *********************************************************** PUBLIC ***********************************************************//\n\n    notify(variable, options, success, error) {\n        const operation = variable.operation;\n        options = options || {};\n\n        if (operation === 'toast') {\n            this.notifyViaToaster(variable, options);\n        } else {\n            this.notifyViaDialog(variable, options);\n        }\n    }\n\n    getMessage(variable) {\n        return variable.dataBinding.text;\n    }\n\n    setMessage(variable, text) {\n        if (_.isString(text)) {\n            variable.dataBinding.text = text;\n        }\n        return variable.dataBinding.text;\n    }\n\n    getOkButtonText(variable) {\n        return variable.dataBinding.okButtonText;\n    }\n    setOkButtonText(variable, text) {\n        if (_.isString(text)) {\n            variable.dataBinding.okButtonText = text;\n        }\n        return variable.dataBinding.okButtonText;\n    }\n\n    getToasterDuration(variable) {\n        return variable.dataBinding.duration;\n    }\n\n    setToasterDuration(variable, duration) {\n        variable.dataBinding.duration = duration;\n        return variable.dataBinding.duration;\n    }\n\n    getToasterClass(variable) {\n        return variable.dataBinding.class;\n    }\n\n    setToasterClass(variable, type) {\n        if (_.isString(type)) {\n            variable.dataBinding.class = type;\n        }\n        return variable.dataBinding.class;\n    }\n\n    getToasterPosition(variable) {\n        return variable.dataBinding.class;\n    }\n\n    setToasterPosition(variable, position) {\n        if (_.isString(position)) {\n            variable.dataBinding.position = position;\n        }\n        return variable.dataBinding.position;\n    }\n\n    getAlertType(variable) {\n        return variable.dataBinding.alerttype;\n    }\n\n    setAlertType(variable, alerttype) {\n        if (_.isString(alerttype)) {\n            variable.dataBinding.alerttype = alerttype;\n        }\n        return variable.dataBinding.alerttype;\n    }\n\n    getCancelButtonText(variable) {\n        return variable.dataBinding.cancelButtonText;\n    }\n\n    setCancelButtonText(variable, text) {\n        if (_.isString(text)) {\n            variable.dataBinding.cancelButtonText = text;\n        }\n        return variable.dataBinding.cancelButtonText;\n    }\n}\n","import { getClonedObject, triggerFn } from '@wm/core';\n\nimport { BaseActionManager } from './base-action.manager';\nimport { CONSTANTS, VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { appManager, dialogService, initiateCallback, routerService, securityService } from '../../util/variable/variables.utils';\n\ndeclare const _;\n\nexport class LoginActionManager extends BaseActionManager {\n\n    private validate(params: any) {\n        let err, paramKey, remembermeKey;\n        const LOGIN_PARAM_REMEMBER_ME = 'j_rememberme';\n        const LOGIN_PARAM_REMEMBER_ME_OLD = ['rememberme', 'remembermecheck'];\n\n        // for older projects\n        LOGIN_PARAM_REMEMBER_ME_OLD.forEach((old_key) => {\n            if (_.isBoolean(params[old_key])) {\n                remembermeKey = old_key;\n            }\n        });\n\n        remembermeKey =  remembermeKey || LOGIN_PARAM_REMEMBER_ME;\n\n        // check remember me\n        params[remembermeKey] = _.isBoolean(params[remembermeKey]) ? params[remembermeKey] : false;\n\n        for (paramKey in params) {\n            if (params.hasOwnProperty(paramKey) &&\n                (params[paramKey] === '' || params[paramKey] === undefined)) {\n                err = 'Please provide required credentials';\n                break;\n            }\n        }\n\n        return err;\n    }\n\n    private migrateOldParams(params) {\n        const loginParams = {},\n            paramMigrationMap = {\n            'usernametext': 'j_username',\n            'username': 'j_username',\n            'passwordtext': 'j_password',\n            'password': 'j_password',\n            'remembermecheck': 'j_rememberme',\n            'rememberme': 'j_rememberme'\n        };\n\n        _.each(params, function(value, key) {\n            if (paramMigrationMap[key]) {\n                loginParams[paramMigrationMap[key]] = value;\n            } else {\n                loginParams[key] = value;\n            }\n        });\n        return loginParams;\n    }\n\n    login(variable, options, success, error) {\n        let newDataSet;\n        options = options || {};\n\n        // If login info provided along explicitly with options, don't look into the variable bindings for the same\n        const loginInfo: any = options.loginInfo || options.input || variable.dataBinding;\n\n        // client side validation\n        const errMsg = this.validate(loginInfo);\n\n        /* if error message initialized, return error */\n        if (errMsg) {\n            triggerFn(error, errMsg);\n            initiateCallback('onError', variable, errMsg);\n            return;\n        }\n\n        // Triggering 'onBeforeUpdate' and considering\n        let params: any = getClonedObject(loginInfo);\n        const output: any = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, params);\n        if (_.isObject(output)) {\n            params = output;\n        } else if (output === false) {\n            triggerFn(error);\n            return;\n        }\n\n        // migrate old params to new\n        params = this.migrateOldParams(params);\n\n        // get previously loggedInUser name (if any)\n        const lastLoggedInUsername = _.get(securityService.get(), 'userInfo.userName');\n\n        this.notifyInflight(variable, true);\n        variable.promise = securityService.appLogin(params, (response) => {\n            // Closing login dialog after successful login\n            dialogService.close('CommonLoginDialog');\n\n            /*\n             * Get fresh security config\n             * Get App variables. if not loaded\n             * Update loggedInUser variable with new user details\n             */\n            appManager.reloadAppData().\n            then((config) => {\n                // EVENT: ON_RESULT\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, _.get(config, 'userInfo'));\n                // EVENT: ON_PREPARESETDATA\n                newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, _.get(config, 'userInfo'));\n                if (newDataSet) {\n                        // setting newDataSet as the response to service variable onPrepareSetData\n                        _.set(config, 'userInfo',newDataSet);\n                }\n                // hide the spinner after all the n/w calls are completed\n                this.notifyInflight(variable, false, response);\n                triggerFn(success);\n                setTimeout(()=>{\n                    // EVENT: ON_SUCCESS\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, _.get(config, 'userInfo'));\n\n                    /* handle navigation if defaultSuccessHandler on variable is true */\n                    if (variable.useDefaultSuccessHandler) {\n                        const isSameUserReloggedIn = lastLoggedInUsername === params['j_username'];\n                        // if first time user logging in or same user re-logging in, execute n/w calls failed before logging in\n                        if (!lastLoggedInUsername || isSameUserReloggedIn) {\n                            appManager.executeSessionFailureRequests();\n                        }\n                        // get redirectTo page from URL and remove it from URL\n                        const redirectPage = securityService.getCurrentRouteQueryParam('redirectTo'),\n                            noRedirect = appManager.noRedirect();\n                        // Get query params(page params of page being redirected to) and append to the URL after login.\n                        const queryParamsObj = securityService.getRedirectedRouteQueryParams();\n                        // The redirectTo param isn't required after login\n                        if (queryParamsObj.redirectTo) {\n                            delete queryParamsObj.redirectTo;\n                        }\n                        appManager.noRedirect(false);\n                        // first time login\n                        if (!lastLoggedInUsername) {\n                            // if redirect page found, navigate to it.\n                            if (!_.isEmpty(redirectPage)) {\n                                routerService.navigate([`/${redirectPage}`], { queryParams : queryParamsObj});\n                            } else if (!noRedirect) {\n                                // simply reset the URL, route handling will take care of page redirection\n                                routerService.navigate([`/`]);\n                            }\n                        } else {\n                        // login after a session timeout\n                            // if redirect page found and same user logs in again, just navigate to redirect page\n                            if (!_.isEmpty(redirectPage)) {\n                                // same user logs in again, just redirect to the redirectPage\n                                if (lastLoggedInUsername === params['j_username']) {\n                                    routerService.navigate([`/${redirectPage}`], { queryParams : queryParamsObj});\n                                } else {\n                                    // different user logs in, reload the app and discard the redirectPage\n                                    routerService.navigate([`/`]);\n                                    window.location.reload();\n                                }\n                            } else {\n                                const securityConfig = securityService.get(),\n                                    sessionTimeoutLoginMode = _.get(securityConfig, 'loginConfig.sessionTimeout.type') || 'PAGE';\n                                // if in dialog mode and a new user logs in OR login happening through page, reload the app\n                                if (!isSameUserReloggedIn || sessionTimeoutLoginMode !== 'DIALOG') {\n                                    routerService.navigate([`/`]);\n                                    window.location.reload();\n                                }\n                            }\n\n                        }\n                    }\n                    // EVENT: ON_CAN_UPDATE\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, _.get(config, 'userInfo'));\n                })\n                \n            });\n        }, (e) => {\n            // EVENT: ON_RESULT\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, e);\n            this.notifyInflight(variable, false, e);\n            const errorMsg = e.error || 'Invalid credentials.';\n            const xhrObj = e.details;\n            /* if in RUN mode, trigger error events associated with the variable */\n            if (CONSTANTS.isRunMode) {\n                initiateCallback('onError', variable, errorMsg, xhrObj, true);\n            }\n            triggerFn(error, errorMsg, xhrObj);\n            // EVENT: ON_CAN_UPDATE\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, e);\n        });\n    }\n}\n","import { getValidJSON, triggerFn } from '@wm/core';\n\nimport { BaseActionManager } from './base-action.manager';\nimport { CONSTANTS, VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { appManager, initiateCallback, securityService } from './../../util/variable/variables.utils';\nimport { routerService } from '../../util/variable/variables.utils';\n\nexport class LogoutActionManager extends BaseActionManager {\n    logout(variable, options, success, error) {\n        let handleError,\n            redirectPage,\n            output,\n            newDataSet;\n\n        handleError = function (msg, details, xhrObj) {\n            /* if in RUN mode, trigger error events associated with the variable */\n            if (!CONSTANTS.isStudioMode) {\n                initiateCallback('onError', variable, msg, xhrObj);\n            }\n            triggerFn(error, msg, xhrObj);\n        };\n\n        // EVENT: ON_BEFORE_UPDATE\n        output = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, null);\n        if (output === false) {\n            triggerFn(error);\n            return;\n        }\n        securityService.isAuthenticated(isAuthenticated => {\n            if (isAuthenticated) {\n                this.notifyInflight(variable, true);\n                variable.promise = securityService.appLogout(response => {\n                    let redirectUrl = response.body;\n                    redirectUrl = getValidJSON(redirectUrl);\n                    // Reset Security Config.\n                    // $rootScope.isUserAuthenticated = false;\n                    appManager.reloadAppData().\n                    then(() => {\n                        this.notifyInflight(variable, false, redirectUrl);\n                        // EVENT: ON_RESULT\n                        initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, redirectUrl);\n                        // EVENT: ON_PREPARESETDATA\n                        newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, redirectUrl);\n                        if (newDataSet) {\n                                // setting newDataSet as the response to service variable onPrepareSetData\n                                redirectUrl = newDataSet;\n                        }\n                        setTimeout(()=>{\n                            // EVENT: ON_SUCCESS\n                            initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, redirectUrl);\n                            // EVENT: ON_CAN_UPDATE\n                            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, redirectUrl);\n                        })\n                    });\n\n                    // In case of CAS response will be the redirectUrl\n                    if (redirectUrl && redirectUrl.result) {\n                        window.location.href = redirectUrl.result;\n                    } else if (variable.useDefaultSuccessHandler) {\n                        redirectPage = variable.redirectTo;\n                        /* backward compatibility (index.html/login.html may be present in older projects) */\n                        if (!redirectPage || redirectPage === 'login.html' || redirectPage === 'index.html') {\n                            redirectPage = '';\n                        }\n                        routerService.navigate([`/${redirectPage}`]);\n                        // do not reload the mobile app.\n                        if (!window['cordova']) {\n                            setTimeout(() => {\n                                // reloading in timeout as, firefox and safari are not updating the url before reload(WMS-7887)\n                                window.location.reload();\n                            });\n                        }\n                    }\n                    triggerFn(success);\n                }, handleError);\n            } else {\n                handleError('No authenticated user to logout.');\n            }\n        }, (err) => {\n            this.notifyInflight(variable, false, err);\n            handleError(err);\n        });\n    }\n}\n","import { isDefined } from '@wm/core';\n\nimport { BaseActionManager } from './base-action.manager';\nimport { initiateCallback } from '../../util/variable/variables.utils';\nimport { CONSTANTS } from '../../constants/variables.constants';\n\nexport class TimerActionManager extends BaseActionManager {\n    trigger(variable, options, success, error) {\n        if (isDefined(variable._promise) || CONSTANTS.isStudioMode) {\n            return;\n        }\n        const repeatTimer = variable.repeating,\n            delay = variable.delay || CONSTANTS.DEFAULT_TIMER_DELAY,\n            event = 'onTimerFire',\n            exec = function () {\n                initiateCallback(event, variable, {});\n            };\n\n        variable._promise = repeatTimer ? setInterval(exec, delay) : setTimeout(function () {\n            exec();\n            variable._promise = undefined;\n        }, delay);\n\n        /*// destroy the timer on scope destruction\n        callBackScope.$on('$destroy', function () {\n            variable.cancel(variable._promise);\n        });*/\n\n        return variable._promise;\n    }\n\n    cancel(variable) {\n        if (isDefined(variable._promise)) {\n            if (variable.repeating) {\n                clearInterval(variable._promise);\n            } else {\n                clearTimeout(variable._promise);\n            }\n            variable._promise = undefined;\n        }\n    }\n}\n","import { BaseVariableManager } from './base-variable.manager';\nimport { initiateCallback } from '../../util/variable/variables.utils';\nimport { DeviceVariableService } from './device-variable-service';\n\n/**\n * Device operation registered in this class will be invoked when a device variable requests the operation.\n */\nexport class DeviceVariableManager extends BaseVariableManager {\n\n    /**\n     * A map that contains services and their operations.\n     *\n     * @type {Map<string, Map<string, DeviceVariableService>>}\n     */\n    private serviceRegistry: Map<string, DeviceVariableService> = new Map<string, DeviceVariableService>();\n\n    /**\n     * Invokes the given device variable and returns a promise that is resolved or rejected\n     * by the device operation's outcome.\n     * @param variable\n     * @param options\n     * @returns {Promise<any>}\n     */\n    public invoke(variable: any, options: any): Promise<any> {\n        const service = this.serviceRegistry.get(variable.service);\n        if (service == null) {\n            initiateCallback('onError', variable, null);\n            return Promise.reject(`Could not find service '${service}'`);\n        } else {\n            this.notifyInflight(variable, true);\n            return service.invoke(variable, options).then( response => {\n                this.notifyInflight(variable, false, response);\n                return response;\n            }, err => {\n                this.notifyInflight(variable, false, err);\n                return Promise.reject(err);\n            });\n        }\n    }\n\n    /**\n     * Adds an operation under the given service category\n     * @param {string} service\n     */\n    public registerService(service: DeviceVariableService) {\n        this.serviceRegistry.set(service.name, service);\n    }\n}\n","import { $WebSocket } from 'angular2-websocket/angular2-websocket';\n\nimport { getValidJSON, isDefined, isInsecureContentRequest, isObject, triggerFn, xmlToJson } from '@wm/core';\n\nimport { BaseVariableManager } from './base-variable.manager';\nimport { WebSocketVariable } from '../../model/variable/web-socket-variable';\nimport { initiateCallback, metadataService } from '../../util/variable/variables.utils';\nimport { CONSTANTS, VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { ServiceVariableUtils } from '../../util/variable/service-variable.utils';\n\ndeclare const _;\n\nexport class WebSocketVariableManager extends BaseVariableManager {\n\n    scope_var_socket_map = new Map();\n    PROPERTY = {\n        'SERVICE': 'service',\n        'DATA_UPDATE_STRATEGY': 'dataUpdateStrategy',\n        'DATA_LIMIT': 'dataLimit'\n    };\n    DATA_UPDATE_STRATEGY = {\n        'REFRESH': 'refresh',\n        'PREPEND': 'prepend',\n        'APPEND': 'append'\n    };\n\n    /**\n     * returns the state of property to decide weather to append new messages to dataSet or not\n     * @param variable\n     * @returns boolean\n     */\n    private shouldAppendData(variable) {\n        variable = variable || this;\n        return variable[this.PROPERTY.DATA_UPDATE_STRATEGY] !== this.DATA_UPDATE_STRATEGY.REFRESH;\n    }\n\n    /**\n     * returns the state of property to decide weather to APPEND or PREPEND new messages to dataSet\n     * @param variable\n     * @returns boolean\n     */\n    private shouldAppendLast(variable) {\n        return variable[this.PROPERTY.DATA_UPDATE_STRATEGY] === this.DATA_UPDATE_STRATEGY.APPEND;\n    }\n\n    /**\n     * returns upper limit on number of records to be in dataSet\n     * this is applicable only when appendData is true\n     * @param variable\n     * @returns {dataLimit}\n     */\n    private getDataLimit(variable) {\n        return variable.dataLimit;\n    }\n\n    /**\n     * get url from wmServiceOperationInfo\n     * @param variable\n     * @returns {*}\n     */\n    private getURL(variable) {\n        const prefabName = variable.getPrefabName();\n        const opInfo = prefabName ? _.get(metadataService.getByOperationId(variable.operationId, prefabName), 'wmServiceOperationInfo') : _.get(metadataService.getByOperationId(variable.operationId), 'wmServiceOperationInfo');\n        const inputFields = variable.dataBinding;\n        let config;\n\n        // add sample values to the params (url and path)\n        _.forEach(opInfo.parameters, function (param) {\n            param.sampleValue = inputFields[param.name];\n        });\n        // although, no header params will be present, keeping 'skipCloakHeaders' flag if support provided later\n        $.extend(opInfo, {\n            skipCloakHeaders: true\n        });\n\n        // call common method to prepare config for the service operation info.\n        config = ServiceVariableUtils.constructRequestParams(variable, opInfo, inputFields);\n        /* if error found, return */\n        if (config.error && config.error.message) {\n            this._onSocketError(variable, {data: config.error.message});\n            return;\n        }\n        return config.url;\n    }\n\n    /**\n     * handler for onMessage event on a socket connection for a variable\n     * the data returned is converted to JSON from string/xml and assigned to dataSet of variable\n     * If not able to do so, message is simply assigned to the dataSet of variable\n     * If appendData property is set, the message is appended to the dataSet, else it replaces the existing value of dataSet\n     * @param variable\n     * @param evt\n     * @private\n     */\n    private _onSocketMessage(variable, evt) {\n        let data = _.get(evt, 'data'), value, dataLength, dataLimit, shouldAddToLast, insertIdx;\n        data = getValidJSON(data) || xmlToJson(data) || data;\n        // EVENT: ON_MESSAGE\n        value = initiateCallback(VARIABLE_CONSTANTS.EVENT.MESSAGE_RECEIVE, variable, data, evt);\n        data = isDefined(value) ? value : data;\n        if (this.shouldAppendData(variable)) {\n            variable.dataSet = variable.dataSet || [];\n            dataLength = variable.dataSet.length;\n            dataLimit = this.getDataLimit(variable);\n            shouldAddToLast = this.shouldAppendLast(variable);\n            if (dataLimit && (dataLength >= dataLimit)) {\n                if (shouldAddToLast) {\n                    variable.dataSet.shift();\n                } else {\n                    variable.dataSet.pop();\n                }\n            }\n            insertIdx = shouldAddToLast ? dataLength : 0;\n            variable.dataSet.splice(insertIdx, 0, data);\n        } else {\n            variable.dataSet = isDefined(value) ? value : data;\n        }\n    }\n\n    /**\n     * calls the ON_BEFORE_SEND callback on the variable\n     * @param variable\n     * @param message\n     * @returns {*}\n     * @private\n     */\n    private _onBeforeSend(variable, message) {\n        // EVENT: ON_BEFORE_SEND\n        return initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_SEND, variable, message);\n    }\n\n    /**\n     * calls the ON_BEFORE_CLOSE callback assigned to the variable\n     * @param variable\n     * @param evt\n     * @returns {*}\n     * @private\n     */\n    private _onBeforeSocketClose(variable, evt?) {\n        // EVENT: ON_BEFORE_CLOSE\n        return initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_CLOSE, variable, _.get(evt, 'data'), evt);\n    }\n\n    /**\n     * calls the ON_BEFORE_OPEN callback assigned\n     * called just before the connection is open\n     * @param variable\n     * @param evt\n     * @returns {*}\n     * @private\n     */\n    private _onBeforeSocketOpen(variable, evt?) {\n        // EVENT: ON_BEFORE_OPEN\n        return initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_OPEN, variable, _.get(evt, 'data'), evt);\n    }\n\n    /**\n     * calls the ON_OPEN event on the variable\n     * this is called once the connection is established by the variable with the target WebSocket service\n     * @param variable\n     * @param evt\n     * @private\n     */\n    private _onSocketOpen(variable, evt) {\n        variable._socketConnected = true;\n        // EVENT: ON_OPEN\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.OPEN, variable, _.get(evt, 'data'), evt);\n    }\n\n    /**\n     * clears the socket variable against the variable in a scope\n     * @param variable\n     */\n    private freeSocket(variable) {\n        this.scope_var_socket_map.set(variable, undefined);\n    }\n\n    /**\n     * calls the ON_CLOSE event on the variable\n     * this is called on close of an existing connection on a variable\n     * @param variable\n     * @param evt\n     * @private\n     */\n    private _onSocketClose(variable, evt) {\n        variable._socketConnected = false;\n        this.freeSocket(variable);\n        // EVENT: ON_CLOSE\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.CLOSE, variable, _.get(evt, 'data'), evt);\n    }\n\n    /**\n     * calls the ON_ERROR event on the variable\n     * this is called if an error occurs while connecting to the socket service\n     * @param variable\n     * @param evt\n     * @private\n     */\n    private _onSocketError(variable, evt) {\n        variable._socketConnected = false;\n        this.freeSocket(variable);\n        // EVENT: ON_ERROR\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, _.get(evt, 'data') || 'Error while connecting with ' + variable.service, evt);\n    }\n\n    /**\n     * returns an existing socket connection on the variable\n     * if not present, make the connection and return it\n     * @param variable\n     * @returns {*}\n     */\n    private getSocket(variable) {\n        const url     = this.getURL(variable);\n        let _socket = this.scope_var_socket_map.get(variable);\n        if (_socket) {\n            return _socket;\n        }\n\n        // Trigger error if unsecured webSocket is used in secured domain, ignore in mobile device\n        if (!CONSTANTS.hasCordova && isInsecureContentRequest(url)) {\n            triggerFn(this._onSocketError.bind(this, variable));\n            return;\n        }\n        _socket = new $WebSocket(url);\n        _socket.onOpen(this._onSocketOpen.bind(this, variable));\n        _socket.onError(this._onSocketError.bind(this, variable));\n        _socket.onMessage(this._onSocketMessage.bind(this, variable));\n        _socket.onClose(this._onSocketClose.bind(this, variable));\n\n        this.scope_var_socket_map.set(variable, _socket);\n        variable._socket = _socket;\n        return _socket;\n}\n\n    /**\n     * opens a socket connection on the variable.\n     * URL & other meta data is fetched from wmServiceOperationInfo\n     * @returns {*}\n     */\n    public open(variable: WebSocketVariable, success?, error?) {\n        const shouldOpen = this._onBeforeSocketOpen(variable);\n        let socket;\n        if (shouldOpen === false) {\n            triggerFn(error);\n            return;\n        }\n        socket = this.getSocket(variable);\n        triggerFn(success);\n        return socket;\n    }\n\n    /**\n     * closes an existing socket connection on variable\n     */\n    public close(variable: WebSocketVariable) {\n        const shouldClose = this._onBeforeSocketClose(variable),\n            socket      = this.getSocket(variable);\n        if (shouldClose === false) {\n            return;\n        }\n        socket.close();\n    }\n\n    /**\n     * sends a message to the existing socket connection on the variable\n     * If socket connection not open yet, open a connections and then send\n     * if message provide, it is sent, else the one present in RequestBody param is sent\n     * @param message\n     */\n    public send(variable: WebSocketVariable, message?: string) {\n        const socket      = this.getSocket(variable);\n        let response;\n\n        message = message || _.get(variable, 'dataBinding.RequestBody');\n        response = this._onBeforeSend(variable, message);\n        if (response === false) {\n            return;\n        }\n        message = isDefined(response) ? response : message;\n        message = isObject(message) ? JSON.stringify(message) : message;\n        socket.send(message, 0);\n    }\n}\n","import { ModelVariableManager } from '../manager/variable/model-variable.manager';\nimport { ServiceVariableManager } from '../manager/variable/service-variable.manager';\nimport { LiveVariableManager } from '../manager/variable/live-variable.manager';\nimport { NavigationActionManager } from '../manager/action/navigation-action.manager';\nimport { NotificationActionManager } from '../manager/action/notification-action.manager';\nimport { BaseVariableManager } from '../manager/variable/base-variable.manager';\nimport { BaseActionManager } from '../manager/action/base-action.manager';\nimport { LoginActionManager } from '../manager/action/login-action.manager';\nimport { LogoutActionManager } from '../manager/action/logout-action.manager';\nimport { TimerActionManager } from '../manager/action/timer-action.manager';\nimport { DeviceVariableManager } from '../manager/variable/device-variable-manager';\nimport { WebSocketVariableManager } from '../manager/variable/web-socket-variable.manager';\n\nconst managerMap = new Map(),\n    typeToManagerMap = {\n        'Variable': BaseVariableManager,\n        'Action': BaseActionManager,\n        'wm.Variable': ModelVariableManager,\n        'wm.ServiceVariable': ServiceVariableManager,\n        'wm.LiveVariable': LiveVariableManager,\n        'wm.NavigationVariable': NavigationActionManager,\n        'wm.NotificationVariable': NotificationActionManager,\n        'wm.LoginVariable': LoginActionManager,\n        'wm.LogoutVariable': LogoutActionManager,\n        'wm.TimerVariable': TimerActionManager,\n        'wm.DeviceVariable': DeviceVariableManager,\n        'wm.WebSocketVariable': WebSocketVariableManager\n    };\n\nexport class VariableManagerFactory {\n\n    static get(type) {\n        return managerMap.has(type) ?\n            managerMap.get(type) :\n            managerMap.set(type, new typeToManagerMap[type]()).get(type);\n    }\n}\n","import { $invokeWatchers } from '@wm/core';\n\nimport { initiateCallback } from '../../util/variable/variables.utils';\nimport { IDeviceVariableOperation } from './device-variable-operation';\nimport { CONSTANTS, VARIABLE_CONSTANTS } from '../../constants/variables.constants';\n\nexport class DeviceVariableService {\n\n    name: string;\n\n    protected operations: IDeviceVariableOperation[];\n\n    invoke(variable: any, options: any): Promise<any> {\n        const operation = this.operations.find(o => {\n            return o.name === variable.operation;\n        });\n        if (operation == null) {\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null);\n            return Promise.reject(`Could not find operation '${variable.operation}' in service '${this.name}'`);\n        } else if (CONSTANTS.hasCordova) {\n            const dataBindings = new Map<string, any>();\n            if (variable.dataBinding !== undefined) {\n                Object.entries(variable).forEach(o => {\n                    dataBindings.set(o[0], o[1]);\n                });\n                Object.entries(variable.dataBinding).forEach(o => {\n                    dataBindings.set(o[0], o[1]);\n                });\n            }\n            return operation.invoke(variable, options, dataBindings)\n                .then(function (data) {\n                    variable.dataSet = data;\n                    $invokeWatchers(true);\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, data);\n                    return data;\n                }, function (reason) {\n                    variable.dataSet = {};\n                    $invokeWatchers(true);\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null);\n                    return reason;\n                });\n        } else {\n            return Promise.resolve()\n                .then(() => {\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, operation.model);\n                    return operation.model;\n                });\n        }\n    }\n}\n","declare const _;\n\nexport default class DatasetUtil {\n\n    static isValidDataset(dataSet, isList?) {\n        if (!dataSet) {\n            return false;\n        }\n\n        // check array type dataset for list type variable\n        if (isList && !_.isArray(dataSet)) {\n            return false;\n        }\n\n        // change the dataSet\n        return dataSet;\n    }\n\n    static getValue(dataSet, key, index, isList?) {\n        index = index || 0;\n\n        // return the value against the specified key\n        return isList ? dataSet[index][key] : dataSet[key];\n    }\n\n    static setValue(dataSet, key, value, isList?) {\n        // check param sanity\n        if (key && !isList) {\n            dataSet[key] = value;\n        }\n\n        // return the new dataSet\n        return dataSet;\n    }\n\n    static getItem(dataSet, index, isList?) {\n        // return the object against the specified index\n        return isList ? dataSet[index] : dataSet;\n    }\n\n    static setItem(dataSet, i, value, isList?) {\n        let index;\n\n        // check param sanity\n        if (_.isUndefined(i) || !isList) {\n            return dataSet;\n        }\n\n        if (_.isObject(i)) {\n            index = _.findIndex(dataSet, i);\n        } else {\n            index = i;\n        }\n\n        if (index > -1) {\n            // set the value against the specified index\n            dataSet[index] = value;\n        }\n\n        // return the new dataSet\n        return dataSet;\n    }\n\n    static addItem(dataSet, value, index, isList?) {\n        // check param sanity\n        if (_.isUndefined(value) || !isList) {\n            return dataSet;\n        }\n\n        // check for index sanity\n        index = index !== undefined ? index : dataSet.length;\n\n        // set the value against the specified index\n        dataSet.splice(index, 0, value);\n\n        // return the new dataSet\n        return dataSet;\n    }\n\n    /**\n     *\n     * @param dataSet\n     * @param i, can be index value of the object/element in array\n     *      or\n     * the whole object which needs to be removed\n     * @param exactMatch\n     * @returns {any}\n     */\n    static removeItem(dataSet, i, exactMatch) {\n        let index;\n        // check for index sanity\n        i = i !== undefined ? i : dataSet.length - 1;\n\n        if (_.isObject(i)) {\n            index = _.findIndex(dataSet, i);\n            // When exactMatch property is set to true delete only when every property values are same*/\n            if (index > -1 && (!exactMatch || (exactMatch && _.isEqual(dataSet[index], i)))) {\n                dataSet.splice(index, 1);\n            }\n        } else {\n            dataSet.splice(i, 1);\n        }\n        // return the new dataSet\n        return dataSet;\n    }\n\n    static getValidDataset(isList?) {\n        return isList ? [] : {};\n    }\n\n    static getCount(dataSet, isList?) {\n        return isList ? dataSet.length : Object.keys(dataSet).length;\n    }\n}\n","import { DataSource } from '@wm/core';\n\nimport DatasetUtil from '../util/dataset-util';\n\nexport abstract class BaseVariable {\n\n    protected _id: string;\n\n    name: string;\n    owner: string;\n    category: string;\n    isList: boolean;\n    dataSet: any;\n    dataBinding: any;\n    _context: any;\n\n    execute(operation, options) {\n        let returnVal;\n        switch (operation) {\n            case DataSource.Operation.GET_NAME:\n                returnVal = this.name;\n                break;\n            case DataSource.Operation.GET_UNIQUE_IDENTIFIER:\n                returnVal = this._id;\n                break;\n            case DataSource.Operation.GET_CONTEXT_IDENTIFIER:\n                returnVal = this._context;\n                break;\n            case DataSource.Operation.ADD_ITEM:\n                returnVal = this.addItem(options.item);\n                break;\n            case DataSource.Operation.SET_ITEM:\n                returnVal = this.setItem(options.prevItem, options.item);\n                break;\n            case DataSource.Operation.REMOVE_ITEM:\n                returnVal = this.removeItem(options.item);\n                break;\n        }\n        return returnVal;\n    }\n\n    getData() {\n        return this.dataSet;\n    }\n\n    setData(dataSet: any) {\n        if (DatasetUtil.isValidDataset(dataSet, this.isList)) {\n            this.dataSet = dataSet;\n        }\n        return this.dataSet;\n    }\n\n    getValue(key: string, index: number) {\n        return DatasetUtil.getValue(this.dataSet, key, index, this.isList);\n    }\n\n    setValue(key: string, value: any) {\n        return DatasetUtil.setValue(this.dataSet, key, value, this.isList);\n    }\n\n    getItem(index: number) {\n        return DatasetUtil.getItem(this.dataSet, index, this.isList);\n    }\n\n    /**\n     *\n     * @param index, a number in ideal case\n     *        it can be the object to be replaced by the passed value\n     * @param value\n     * @returns {any}\n     */\n    setItem(index: any, value: any) {\n        return DatasetUtil.setItem(this.dataSet, index, value, this.isList);\n    }\n\n    addItem(value: any, index?: number) {\n        return DatasetUtil.addItem(this.dataSet, value, index, this.isList);\n    }\n\n    removeItem(index: any, exactMatch?: boolean) {\n        return DatasetUtil.removeItem(this.dataSet, index, exactMatch);\n    }\n\n    clearData() {\n        this.dataSet = DatasetUtil.getValidDataset(this.isList);\n        return this.dataSet;\n    }\n\n    getCount() {\n        return DatasetUtil.getCount(this.dataSet, this.isList);\n    }\n\n    /**\n     * Return the prefab name if the variable is form a prefab\n     * @returns {string}\n     */\n    getPrefabName() {\n        // __self__ is a prefab name given to a prefab which is run in preview mode\n        return this._context && (this._context.prefabName !== '__self__' && this._context.prefabName);\n    }\n}\n","import { BaseVariable } from '../base-variable';\n\nexport abstract class ApiAwareVariable extends BaseVariable {\n\n    service: string;\n    operation: string;\n    controller: string;\n    operationId: string;\n    operationType: string;\n    serviceType: string;\n    maxResults: number;\n    startUpdate: boolean;\n    autoUpdate: boolean;\n    inFlightBehavior: boolean;\n    transformationRequired: boolean;\n    canUpdate: boolean;\n\n    firstRecord;\n    lastRecord;\n\n    onBeforeUpdate: string;\n    onResult: string;\n    onError: string;\n    onBeforeDatasetReady: string;\n    onSuccess: string;\n}\n","import { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { DeviceVariableManager } from '../../manager/variable/device-variable-manager';\nimport { ApiAwareVariable } from './api-aware-variable';\n\nconst getManager = () => {\n    return <DeviceVariableManager> VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.DEVICE);\n};\n\nexport class DeviceVariable extends ApiAwareVariable {\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    init() {\n        getManager().initBinding(this);\n    }\n\n    invoke(options?, onSuccess?, onError?) {\n        getManager().invoke(this, options).then(onSuccess, onError);\n    }\n}\n","import { DataSource, IDataSource, isDefined } from '@wm/core';\n\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { ApiAwareVariable } from './api-aware-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { LiveVariableManager } from '../../manager/variable/live-variable.manager';\n\nconst getManager = (): LiveVariableManager => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.LIVE);\n};\n\nexport class LiveVariable extends ApiAwareVariable implements IDataSource {\n\n    matchMode;\n    liveSource;\n    propertiesMap;\n    pagination;\n    type;\n    orderBy;\n    _options;\n    // Used to track a variable http call, so that it can be cancelled at any point of time during its execution\n    _observable;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    execute(operation, options) {\n        let returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        switch (operation) {\n            case DataSource.Operation.IS_API_AWARE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_CRUD:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_DISTINCT_API:\n                returnVal = true;\n                break;\n            case DataSource.Operation.IS_PAGEABLE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_SERVER_FILTER:\n                returnVal = true;\n                break;\n            case DataSource.Operation.GET_OPERATION_TYPE:\n                returnVal = this.operation;\n                break;\n            case DataSource.Operation.GET_RELATED_PRIMARY_KEYS:\n                returnVal = this.getRelatedTablePrimaryKeys(options);\n                break;\n            case DataSource.Operation.GET_ENTITY_NAME:\n                returnVal = this.propertiesMap.entityName;\n                break;\n            case DataSource.Operation.LIST_RECORDS:\n                returnVal = this.listRecords(options);\n                break;\n            case DataSource.Operation.UPDATE_RECORD :\n                returnVal = this.updateRecord(options);\n                break;\n            case DataSource.Operation.INSERT_RECORD :\n                returnVal = this.insertRecord(options);\n                break;\n            case DataSource.Operation.DELETE_RECORD :\n                returnVal = this.deleteRecord(options);\n                break;\n            case DataSource.Operation.INVOKE :\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.UPDATE :\n                returnVal = this.update(options);\n                break;\n            case DataSource.Operation.GET_RELATED_TABLE_DATA:\n                returnVal = this.getRelatedTableData(options.relatedField, options);\n                break;\n            case DataSource.Operation.GET_DISTINCT_DATA_BY_FIELDS:\n                returnVal = this.getDistinctDataByFields(options);\n                break;\n            case DataSource.Operation.GET_AGGREGATED_DATA:\n                returnVal = this.getAggregatedData(options);\n                break;\n            case DataSource.Operation.GET_MATCH_MODE:\n                returnVal = this.matchMode;\n                break;\n            case DataSource.Operation.DOWNLOAD:\n                returnVal = this.download(options);\n                break;\n            case DataSource.Operation.GET_PROPERTIES_MAP:\n                returnVal = this.propertiesMap;\n                break;\n            case DataSource.Operation.GET_PRIMARY_KEY:\n                returnVal = this.getPrimaryKey();\n                break;\n            case DataSource.Operation.GET_BLOB_URL:\n                returnVal = `services/${this.liveSource}/${this.type}/${options.primaryValue}/content/${options.columnName}`;\n                break;\n            case DataSource.Operation.GET_OPTIONS:\n                returnVal = this._options || {};\n                break;\n            case DataSource.Operation.SEARCH_RECORDS:\n                returnVal = this.searchRecords(options);\n                break;\n            case DataSource.Operation.GET_REQUEST_PARAMS:\n                returnVal = this.getRequestParams(options);\n                break;\n            case DataSource.Operation.GET_PAGING_OPTIONS:\n                returnVal = this.pagination;\n                break;\n            case DataSource.Operation.IS_UPDATE_REQUIRED:\n                returnVal = true;\n                break;\n            case DataSource.Operation.IS_BOUND_TO_LOCALE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.CANCEL:\n                returnVal = false;\n                break;\n            default:\n                returnVal = {};\n                break;\n        }\n        return returnVal;\n    }\n\n    listRecords(options?, success?, error?) {\n        return getManager().listRecords(this, options, success, error);\n    }\n\n    updateRecord(options?, success?, error?) {\n        return getManager().updateRecord(this, options, success, error);\n    }\n\n    insertRecord(options?, success?, error?) {\n        return getManager().insertRecord(this, options, success, error);\n    }\n\n    deleteRecord(options?, success?, error?) {\n        return getManager().deleteRecord(this, options, success, error);\n    }\n\n    setInput(key, val, options) {\n        return getManager().setInput(this, key, val, options);\n    }\n\n    setFilter(key, val) {\n        return getManager().setFilter(this, key, val);\n    }\n\n    download(options, success?, error?) {\n        return getManager().download(this, options, success, error);\n    }\n\n    invoke(options?, success?, error?) {\n        switch (this.operation) {\n            case 'insert':\n                return this.insertRecord(options, success, error);\n            case 'update':\n                return this.updateRecord(options, success, error);\n            case 'delete':\n                return this.deleteRecord(options, success, error);\n            default:\n                return this.listRecords(options, success, error);\n        }\n    }\n\n    getRelatedTablePrimaryKeys(columnName) {\n        return getManager().getRelatedTablePrimaryKeys(this, columnName);\n    }\n\n    getRelatedTableData(columnName, options, success?, error?) {\n        return getManager().getRelatedTableData(this, columnName, options, success, error);\n    }\n\n    getDistinctDataByFields(options, success?, error?) {\n        return getManager().getDistinctDataByFields(this, options, success, error);\n    }\n\n    getAggregatedData(options, success?, error?) {\n        return getManager().getAggregatedData(this, options, success, error);\n    }\n\n    getPrimaryKey() {\n        return getManager().getPrimaryKey(this);\n    }\n\n    searchRecords(options, success?, error?) {\n        return getManager().searchRecords(this, options, success, error);\n    }\n\n    getRequestParams(options) {\n        return getManager().prepareRequestParams(options);\n    }\n\n    _downgradeInputData(data) {\n        return getManager().downgradeFilterExpressionsToInputData(this, data);\n    }\n\n    _upgradeInputData(response, data) {\n        return getManager().upgradeInputDataToFilterExpressions(this, response, data);\n    }\n\n    setOrderBy(expression) {\n        this.orderBy = expression;\n\n        /* update the variable if autoUpdate flag is set */\n        if (this.autoUpdate) {\n            this.update();\n        }\n\n        return this.orderBy;\n    }\n\n    // legacy method\n    update(options?, success?, error?) {\n        return this.invoke(options, success, error);\n    }\n\n    createRecord(options?, success?, error?) {\n        return this.insertRecord(options, success, error);\n    }\n\n    init() {\n        getManager().initBinding(this, 'dataBinding', this.operation === 'read' ? 'filterFields' : 'inputFields');\n        if (this.operation === 'read') {\n            getManager().initFilterExpressionBinding(this);\n        }\n        getManager().defineFirstLastRecord(this);\n    }\n\n    cancel(options?) {\n        return getManager().cancel(this, options);\n    }\n}\n","import { DataSource } from '@wm/core';\n\nimport DatasetUtil from '../util/dataset-util';\n\nexport abstract class BaseAction {\n\n    protected _id: string;\n\n    name: string;\n    owner: string;\n    category: string;\n    dataSet: any;\n    dataBinding: any;\n    _context: any;\n\n    execute(operation, options) {\n        let returnVal;\n        switch (operation) {\n            case DataSource.Operation.GET_NAME:\n                returnVal = this.name;\n                break;\n            case DataSource.Operation.GET_UNIQUE_IDENTIFIER:\n                returnVal = this._id;\n                break;\n            case DataSource.Operation.GET_CONTEXT_IDENTIFIER:\n                returnVal = this._context;\n                break;\n        }\n        return returnVal;\n    }\n\n    getData() {\n        return this.dataSet;\n    }\n\n    setData(dataSet: any) {\n        if (DatasetUtil.isValidDataset(dataSet)) {\n            this.dataSet = dataSet;\n        }\n        return this.dataSet;\n    }\n\n    getValue(key: string, index: number) {\n        return DatasetUtil.getValue(this.dataSet, key, index);\n    }\n\n    setValue(key: string, value: any) {\n        return DatasetUtil.setValue(this.dataSet, key, value);\n    }\n\n    getItem(index: number) {\n        return DatasetUtil.getItem(this.dataSet, index);\n    }\n\n    /**\n     *\n     * @param index, a number in ideal case\n     *        it can be the object to be replaced by the passed value\n     * @param value\n     * @returns {any}\n     */\n    setItem(index: any, value: any) {\n        return DatasetUtil.setItem(this.dataSet, index, value);\n    }\n\n    addItem(value: any, index: number) {\n        return DatasetUtil.addItem(this.dataSet, value, index);\n    }\n\n    removeItem(index: any, exactMatch: boolean) {\n        return DatasetUtil.removeItem(this.dataSet, index, exactMatch);\n    }\n\n    clearData() {\n        this.dataSet = DatasetUtil.getValidDataset();\n        return this.dataSet;\n    }\n\n    getCount() {\n        return DatasetUtil.getCount(this.dataSet);\n    }\n\n    init() {\n    }\n}\n","import { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { BaseAction } from '../base-action';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\n\nconst  getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.NAVIGATION);\n};\n\nexport class NavigationAction extends BaseAction {\n    operation: string;\n    pageName: string;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    invoke(options?) {\n        getManager().invoke(this, options);\n    }\n\n    // legacy method.\n    navigate(options?) {\n        this.invoke(options);\n    }\n\n    init() {\n        // static property bindings\n        getManager().initBinding(this, 'dataBinding', 'dataBinding');\n\n        // dynamic property bindings (e.g. page params)\n        getManager().initBinding(this, 'dataSet', 'dataSet');\n    }\n}\n","import { DataSource, IDataSource, isDefined } from '@wm/core';\n\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { BaseVariable } from '../base-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { appManager } from '../../util/variable/variables.utils';\n\nconst getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.MODEL);\n};\n\nexport class ModelVariable extends BaseVariable implements IDataSource {\n\n    type: any;\n    saveInPhonegap: any;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    init() {\n        if (this.isList) {\n            getManager().removeFirstEmptyObject(this);\n        }\n\n        getManager().initBinding(this, 'dataBinding', 'dataSet');\n    }\n\n    execute(operation, options) {\n        let returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        switch (operation) {\n            case DataSource.Operation.IS_API_AWARE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_CRUD:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_DISTINCT_API:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_PAGEABLE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_SERVER_FILTER:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_BOUND_TO_LOCALE:\n                returnVal = this.isBoundToLocale();\n                break;\n            case DataSource.Operation.GET_DEFAULT_LOCALE:\n                returnVal = this.getDefaultLocale();\n                break;\n            default:\n                returnVal = {};\n                break;\n        }\n        return returnVal;\n    }\n\n    isBoundToLocale() {\n        return this.name === 'supportedLocale';\n    }\n\n    getDefaultLocale() {\n        return appManager.getSelectedLocale();\n    }\n\n}\n","import { DataSource, IDataSource, isDefined } from '@wm/core';\n\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { ApiAwareVariable } from './api-aware-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { ServiceVariableManager } from '../../manager/variable/service-variable.manager';\nimport { ServiceVariableUtils } from '../../util/variable/service-variable.utils';\n\ndeclare const _;\n\nconst getManager = (): ServiceVariableManager => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.SERVICE);\n};\n\nexport class ServiceVariable extends ApiAwareVariable implements IDataSource {\n\n    // Used to track progress of file upload\n    _progressObservable;\n    // Used to track a variable http call, so that it can be cancelled at any point of time during its execution\n    _observable;\n    pagination;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    execute(operation, options) {\n        let returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        switch (operation) {\n            case DataSource.Operation.IS_API_AWARE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_CRUD:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_DISTINCT_API:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_PAGEABLE:\n                returnVal = (this.controller === VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY || !_.isEmpty(this.pagination));\n                break;\n            case DataSource.Operation.SUPPORTS_SERVER_FILTER:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SET_INPUT:\n                returnVal = this.setInput(options);\n                break;\n            case DataSource.Operation.LIST_RECORDS:\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.INVOKE :\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.UPDATE :\n                returnVal = this.update(options);\n                break;\n            case DataSource.Operation.SEARCH_RECORDS:\n                returnVal = this.searchRecords(options);\n                break;\n            case DataSource.Operation.DOWNLOAD:\n                returnVal = this.download(options);\n                break;\n            case DataSource.Operation.GET_PAGING_OPTIONS:\n                returnVal = this.pagination;\n                break;\n            case DataSource.Operation.IS_UPDATE_REQUIRED:\n                returnVal = this.isUpdateRequired(options);\n                break;\n            case DataSource.Operation.IS_BOUND_TO_LOCALE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.CANCEL:\n                returnVal = this.cancel(options);\n                break;\n            default :\n                returnVal = {};\n                break;\n        }\n        return returnVal;\n    }\n\n    invoke(options?, success?, error?) {\n        return getManager().invoke(this, options, success, error);\n    }\n\n    update(options, success?, error?) {\n        return getManager().invoke(this, options, success, error);\n    }\n\n    download(options, success?, error?) {\n        return getManager().download(this, options, success, error);\n    }\n\n    setInput(key, val?, options?) {\n        return getManager().setInput(this, key, val, options);\n    }\n\n    searchRecords(options, success?, error?) {\n        return new Promise((resolve, reject) => {\n            getManager().searchRecords(this, options, (response, pagination) => {\n                resolve({data: response.content || response, pagination});\n            }, reject);\n        });\n    }\n\n    isUpdateRequired(hasData) {\n        const inputFields = getManager().getInputParms(this);\n        const queryParams = ServiceVariableUtils.excludePaginationParams(inputFields);\n\n        if (!queryParams.length) {\n            // if we don't have any query params and variable data is available then we don't need variable update, so return false\n            if (hasData) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    cancel(options?) {\n        return getManager().cancel(this, options);\n    }\n\n    init() {\n        getManager().initBinding(this);\n        getManager().defineFirstLastRecord(this);\n    }\n}\n","import { DataSource, IDataSource, isDefined } from '@wm/core';\n\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { BaseAction } from '../base-action';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\n\nconst getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.NOTIFICATION);\n};\n\nexport class NotificationAction extends BaseAction implements IDataSource {\n\n    message: string;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    execute(operation, options) {\n        const returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        return new Promise((resolve, reject) => {\n            switch (operation) {\n                case DataSource.Operation.INVOKE :\n                    this.invoke(options, resolve, reject);\n                    break;\n                case DataSource.Operation.NOTIFY :\n                    this.notify(options, resolve, reject);\n                    break;\n                default :\n                    reject(`${operation} operation is not supported on this data source`);\n                    break;\n            }\n        });\n    }\n\n    // Backward compatible method\n    notify(options, success, error) {\n        getManager().notify(this, options, success, error);\n    }\n\n    invoke(options, success, error) {\n        this.notify(options, success, error);\n    }\n\n    getMessage() {\n        return getManager().getMessage(this);\n    }\n\n    setMessage(text) {\n        return getManager().setMessage(this, text);\n    }\n\n    clearMessage() {\n        return getManager().setMessage(this, '');\n    }\n\n    getOkButtonText() {\n        return getManager().getOkButtonText(this);\n    }\n\n    setOkButtonText(text) {\n        return getManager().setOkButtonText(this, text);\n    }\n\n    getToasterDuration() {\n        return getManager().getToasterDuration(this);\n    }\n\n    setToasterDuration(duration) {\n        return getManager().setToasterDuration(this, duration);\n    }\n\n    getToasterClass() {\n        return getManager().getToasterClass(this);\n    }\n\n    setToasterClass(classText) {\n        return getManager().setToasterClass(this, classText);\n    }\n\n    getToasterPosition() {\n        return getManager().getToasterPosition(this);\n    }\n\n    setToasterPosition(position) {\n        return getManager().setToasterPosition(this, position);\n    }\n\n    getAlertType() {\n        return getManager().getAlertType(this);\n    }\n\n    setAlertType(type) {\n        return getManager().setAlertType(this, type);\n    }\n\n    getCancelButtonText() {\n        return getManager().getCancelButtonText(this);\n    }\n\n    setCancelButtonText(text) {\n        return getManager().setCancelButtonText(this, text);\n    }\n\n    init() {\n        // static property bindings\n        getManager().initBinding(this, 'dataBinding', 'dataBinding');\n\n        // dynamic property bindings\n        getManager().initBinding(this, 'dataSet', 'dataSet');\n    }\n}\n","import { BaseAction } from '../base-action';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\n\nconst  getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.LOGIN);\n};\n\nexport class LoginAction extends BaseAction {\n\n    startUpdate: boolean;\n    autoUpdate: boolean;\n    useDefaultSuccessHandler: boolean;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this, variable);\n    }\n\n    login(options, success, error) {\n        return getManager().login(this, options, success, error);\n    }\n\n    invoke(options, success, error) {\n        return this.login(options, success, error);\n    }\n\n    cancel() {\n        // TODO[VIBHU]: implement http abort logic\n    }\n\n    init() {\n        getManager().initBinding(this, 'dataBinding', 'dataBinding');\n    }\n}\n","import { BaseAction } from '../base-action';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\n\nconst  getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.LOGOUT);\n};\n\nexport class LogoutAction extends BaseAction {\n\n    startUpdate: boolean;\n    autoUpdate: boolean;\n    useDefaultSuccessHandler: boolean;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this, variable);\n    }\n\n    logout(options, success, error) {\n        getManager().logout(this, options, success, error);\n    }\n\n    invoke(options, success, error) {\n        this.logout(options, success, error);\n    }\n\n    cancel() {\n        // TODO[VIBHU]: implement http abort logic\n    }\n}\n","import { BaseAction } from '../base-action';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\n\nconst  getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.TIMER);\n};\n\nexport class TimerAction extends BaseAction {\n    constructor(variable: any) {\n        super();\n        Object.assign(this, variable);\n    }\n\n    // Backward compatible method\n    fire(options, success, error) {\n        return getManager().trigger(this, options, success, error);\n    }\n\n    invoke(options, success, error) {\n        return this.fire(options, success, error);\n    }\n\n    cancel() {\n        return getManager().cancel(this);\n    }\n}\n","import { ApiAwareVariable } from './api-aware-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\n\nconst getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.WEBSOCKET);\n};\n\nexport class WebSocketVariable extends ApiAwareVariable {\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    open(success?, error?) {\n        return getManager().open(this, success, error);\n    }\n\n    close () {\n        return getManager().close(this);\n    }\n\n    update() {\n        return getManager().update(this);\n    }\n\n    send(message?: string) {\n        return getManager().send(this, message);\n    }\n\n    cancel() {\n        return this.close();\n    }\n\n    invoke(options?, success?, error?) {\n        this.open(success, error);\n    }\n\n    init () {\n        getManager().initBinding(this);\n    }\n}\n","import { DeviceVariable } from '../model/variable/device-variable';\nimport { LiveVariable } from '../model/variable/live-variable';\nimport { NavigationAction } from '../model/action/navigation-action';\nimport { ModelVariable } from '../model/variable/model-variable';\nimport { ServiceVariable } from '../model/variable/service-variable';\nimport { NotificationAction } from '../model/action/notification-action';\nimport { VARIABLE_CONSTANTS } from '../constants/variables.constants';\nimport { LoginAction } from '../model/action/login-action';\nimport { LogoutAction } from '../model/action/logout-action';\nimport { TimerAction } from '../model/action/timer-action';\nimport { WebSocketVariable } from '../model/variable/web-socket-variable';\n\nexport class VariableFactory {\n\n    static create(variable, context) {\n        let variableInstance;\n        switch (variable.category) {\n            case VARIABLE_CONSTANTS.CATEGORY.MODEL:\n                variableInstance = new ModelVariable(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.SERVICE:\n                variableInstance = new ServiceVariable(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.LIVE:\n                variableInstance = new LiveVariable(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.DEVICE:\n                variableInstance = new DeviceVariable(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.NAVIGATION:\n                variableInstance = new NavigationAction(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.NOTIFICATION:\n                variableInstance = new NotificationAction(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.LOGIN:\n                variableInstance = new LoginAction(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.LOGOUT:\n                variableInstance = new LogoutAction(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.TIMER:\n                variableInstance = new TimerAction(variable);\n                break;\n            case VARIABLE_CONSTANTS.CATEGORY.WEBSOCKET:\n                variableInstance = new WebSocketVariable(variable);\n        }\n\n        variableInstance._context = context;\n        variableInstance.__cloneable__ = false;\n        return variableInstance;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { AbstractHttpService, hasCordova } from '@wm/core';\n\n@Injectable()\nexport class MetadataService {\n    metadataMap: Map<string, any>;\n    CONTEXT_APP = 'app';\n\n    constructor(private $http: AbstractHttpService) {}\n\n    isLoaded() {\n        return this.metadataMap ? this.metadataMap.has(this.CONTEXT_APP) : false;\n    }\n\n    load(prefabName?: string): Promise<any> {\n        let url;\n        if (hasCordova()) {\n            url = 'metadata/' + (prefabName ? `prefabs/${prefabName}/` : 'app/') + 'service-definitions.json';\n        } else {\n            url = './services/' + (prefabName ? `prefabs/${prefabName}/` : '') + 'servicedefs';\n        }\n        return new Promise((resolve, reject) => {\n            this.$http.send({'url' : url, 'method': 'GET'}).then((response) => {\n                this.metadataMap = this.metadataMap || new Map();\n                this.metadataMap.set(prefabName || this.CONTEXT_APP, response.body);\n                resolve(response.body);\n            }, reject);\n        });\n    }\n\n    getByOperationId(operationId, context) {\n        context = context || this.CONTEXT_APP;\n        const map = this.metadataMap.get(context);\n        return map && map[operationId];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AbstractDialogService, AbstractHttpService, AbstractNavigationService, AbstractToasterService } from '@wm/core';\nimport { OAuthService } from '@wm/oAuth';\nimport { SecurityService } from '@wm/security';\n\nimport { VariableFactory } from '../factory/variable.factory';\nimport { BaseAction } from '../model/base-action';\nimport { setDependency } from '../util/variable/variables.utils';\nimport { MetadataService } from './metadata-service/metadata.service';\n\ndeclare const _;\n\n@Injectable()\nexport class VariablesService {\n\n    constructor(\n        private httpService: AbstractHttpService,\n        private metadataService: MetadataService,\n        private navigationService: AbstractNavigationService,\n        private routerService: Router,\n        private toasterService: AbstractToasterService,\n        private oAuthService: OAuthService,\n        private securityService: SecurityService,\n        private dialogService: AbstractDialogService\n    ) {\n        // set external dependencies, to be used across variable classes, managers and utils\n        setDependency('http', this.httpService);\n        setDependency('metadata', this.metadataService);\n        setDependency('navigationService', this.navigationService);\n        setDependency('router', this.routerService);\n        setDependency('toaster', this.toasterService);\n        setDependency('oAuth', this.oAuthService);\n        setDependency('security', this.securityService);\n        setDependency('dialog', this.dialogService);\n    }\n\n    /**\n     * loop through a collection of variables/actions\n     * trigger cancel on each (of exists)\n     * @param collection\n     */\n    bulkCancel(collection) {\n        Object.keys(collection).forEach(name => {\n            const variable = collection[name];\n            if (_.isFunction(variable.cancel)) {\n                variable.cancel();\n            }\n        });\n    }\n\n    /**\n     * loops over the variable/actions collection and trigger invoke on it if startUpdate on it is true\n     * @param collection\n     */\n    triggerStartUpdate(collection) {\n        return Promise.all(\n            Object.keys(collection)\n                .map(name => collection[name])\n                .filter( variable => variable.startUpdate && variable.invoke)\n                .map(variable => variable.invoke())\n            );\n    }\n\n    /**\n     * Takes the raw variables and actions json as input\n     * Initialize the variable and action instances through the factory\n     * collect the variables and actions in separate maps and return the collection\n     * @param {string} page\n     * @param variablesJson\n     * @param scope\n     * @returns {Variables , Actions}\n     */\n    register(page: string, variablesJson: any, scope: any) {\n        const variableInstances = {\n            Variables: {},\n            Actions: {},\n            callback: this.triggerStartUpdate\n        };\n        let varInstance;\n\n        for (const variableName in variablesJson) {\n            varInstance = VariableFactory.create(variablesJson[variableName], scope);\n            varInstance.init();\n            // if action type, put it in Actions namespace\n            if (varInstance instanceof BaseAction) {\n                variableInstances.Actions[variableName] = varInstance;\n            } else {\n                variableInstances.Variables[variableName] = varInstance;\n            }\n        }\n\n        // if the context has onDestroy listener, subscribe the event and trigger cancel on all varibales\n        if (scope.registerDestroyListener) {\n            scope.registerDestroyListener(() => {\n                this.bulkCancel(variableInstances.Variables);\n                this.bulkCancel(variableInstances.Actions);\n            });\n        }\n\n        return variableInstances;\n    }\n\n    destroy() {\n    }\n\n    registerDependency(name, ref) {\n        setDependency(name, ref);\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {CommonModule, HashLocationStrategy, Location, LocationStrategy} from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { HttpServiceModule } from '@wm/http';\nimport { SecurityModule } from '@wm/security';\nimport { OAuthModule } from '@wm/oAuth';\n\nimport { VariablesService } from './service/variables.service';\nimport { MetadataService } from './service/metadata-service/metadata.service';\n\nexport const toastrModule: ModuleWithProviders = ToastrModule.forRoot({maxOpened: 1, autoDismiss: true});\n\n@NgModule({\n    imports: [\n        CommonModule,\n        toastrModule,\n        HttpClientModule,\n        HttpServiceModule,\n        OAuthModule,\n        SecurityModule\n    ],\n    declarations: []\n})\nexport class VariablesModule {\n\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: VariablesModule,\n            providers: [\n                VariablesService,\n                MetadataService,\n                Location,\n                {provide: LocationStrategy, useClass: HashLocationStrategy}\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {BaseActionManager as Éµb} from './manager/action/base-action.manager';\nexport {LoginActionManager as Éµh} from './manager/action/login-action.manager';\nexport {LogoutActionManager as Éµi} from './manager/action/logout-action.manager';\nexport {NavigationActionManager as Éµf} from './manager/action/navigation-action.manager';\nexport {NotificationActionManager as Éµg} from './manager/action/notification-action.manager';\nexport {TimerActionManager as Éµj} from './manager/action/timer-action.manager';\nexport {BaseVariableManager as Éµa} from './manager/variable/base-variable.manager';\nexport {LiveVariableManager as Éµe} from './manager/variable/live-variable.manager';\nexport {ModelVariableManager as Éµc} from './manager/variable/model-variable.manager';\nexport {ServiceVariableManager as Éµd} from './manager/variable/service-variable.manager';\nexport {WebSocketVariableManager as Éµk} from './manager/variable/web-socket-variable.manager';"],"names":["appManager","httpService","metadataService","navigationService","routerService","toasterService","oauthService","securityService","dialogService","$parseEvent","triggerFn","findValueOf","stringStartsWith","$watch","getClonedObject","getBlob","DEFAULT_FORMATS","DataType","extractType","tslib_1.__extends","isDateTimeType","isDefined","replace","getValidJSON","xmlToJson","isPageable","$invokeWatchers","isValidWebURL","noop","hasCordova","isNumberType","removeExtraSlashes","processFilterExpBindNode","NVUtils.navigate","isInsecureContentRequest","$WebSocket","isObject","DataSource","getManager","Injectable","AbstractHttpService","AbstractNavigationService","Router","AbstractToasterService","OAuthService","SecurityService","AbstractDialogService","ToastrModule","Location","LocationStrategy","HashLocationStrategy","NgModule","CommonModule","HttpClientModule","HttpServiceModule","OAuthModule","SecurityModule"],"mappings":"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"}
