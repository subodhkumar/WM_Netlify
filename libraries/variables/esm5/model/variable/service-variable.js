import * as tslib_1 from "tslib";
import { DataSource, isDefined } from '@wm/core';
import { VariableManagerFactory } from '../../factory/variable-manager.factory';
import { ApiAwareVariable } from './api-aware-variable';
import { VARIABLE_CONSTANTS } from '../../constants/variables.constants';
import { ServiceVariableUtils } from '../../util/variable/service-variable.utils';
var getManager = function () {
    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.SERVICE);
};
var ɵ0 = getManager;
var ServiceVariable = /** @class */ (function (_super) {
    tslib_1.__extends(ServiceVariable, _super);
    function ServiceVariable(variable) {
        var _this = _super.call(this) || this;
        Object.assign(_this, variable);
        return _this;
    }
    ServiceVariable.prototype.execute = function (operation, options) {
        var returnVal = _super.prototype.execute.call(this, operation, options);
        if (isDefined(returnVal)) {
            return returnVal;
        }
        switch (operation) {
            case DataSource.Operation.IS_API_AWARE:
                returnVal = true;
                break;
            case DataSource.Operation.SUPPORTS_CRUD:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_DISTINCT_API:
                returnVal = false;
                break;
            case DataSource.Operation.IS_PAGEABLE:
                returnVal = (this.controller === VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY || !_.isEmpty(this.pagination));
                break;
            case DataSource.Operation.SUPPORTS_SERVER_FILTER:
                returnVal = false;
                break;
            case DataSource.Operation.SET_INPUT:
                returnVal = this.setInput(options);
                break;
            case DataSource.Operation.LIST_RECORDS:
                returnVal = this.invoke(options);
                break;
            case DataSource.Operation.INVOKE:
                returnVal = this.invoke(options);
                break;
            case DataSource.Operation.UPDATE:
                returnVal = this.update(options);
                break;
            case DataSource.Operation.SEARCH_RECORDS:
                returnVal = this.searchRecords(options);
                break;
            case DataSource.Operation.DOWNLOAD:
                returnVal = this.download(options);
                break;
            case DataSource.Operation.GET_PAGING_OPTIONS:
                returnVal = this.pagination;
                break;
            case DataSource.Operation.IS_UPDATE_REQUIRED:
                returnVal = this.isUpdateRequired(options);
                break;
            case DataSource.Operation.IS_BOUND_TO_LOCALE:
                returnVal = false;
                break;
            case DataSource.Operation.CANCEL:
                returnVal = this.cancel(options);
                break;
            default:
                returnVal = {};
                break;
        }
        return returnVal;
    };
    ServiceVariable.prototype.invoke = function (options, success, error) {
        return getManager().invoke(this, options, success, error);
    };
    ServiceVariable.prototype.update = function (options, success, error) {
        return getManager().invoke(this, options, success, error);
    };
    ServiceVariable.prototype.download = function (options, success, error) {
        return getManager().download(this, options, success, error);
    };
    ServiceVariable.prototype.setInput = function (key, val, options) {
        return getManager().setInput(this, key, val, options);
    };
    ServiceVariable.prototype.searchRecords = function (options, success, error) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            getManager().searchRecords(_this, options, function (response, pagination) {
                resolve({ data: response.content || response, pagination: pagination });
            }, reject);
        });
    };
    ServiceVariable.prototype.isUpdateRequired = function (hasData) {
        var inputFields = getManager().getInputParms(this);
        var queryParams = ServiceVariableUtils.excludePaginationParams(inputFields);
        if (!queryParams.length) {
            // if we don't have any query params and variable data is available then we don't need variable update, so return false
            if (hasData) {
                return false;
            }
        }
        return true;
    };
    ServiceVariable.prototype.cancel = function (options) {
        return getManager().cancel(this, options);
    };
    ServiceVariable.prototype.init = function () {
        getManager().initBinding(this);
        getManager().defineFirstLastRecord(this);
    };
    return ServiceVariable;
}(ApiAwareVariable));
export { ServiceVariable };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,