import * as tslib_1 from "tslib";
import { DataSource, isDefined } from '@wm/core';
import { VariableManagerFactory } from '../../factory/variable-manager.factory';
import { ApiAwareVariable } from './api-aware-variable';
import { VARIABLE_CONSTANTS } from '../../constants/variables.constants';
var getManager = function () {
    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.LIVE);
};
var ɵ0 = getManager;
var LiveVariable = /** @class */ (function (_super) {
    tslib_1.__extends(LiveVariable, _super);
    function LiveVariable(variable) {
        var _this = _super.call(this) || this;
        Object.assign(_this, variable);
        return _this;
    }
    LiveVariable.prototype.execute = function (operation, options) {
        var returnVal = _super.prototype.execute.call(this, operation, options);
        if (isDefined(returnVal)) {
            return returnVal;
        }
        switch (operation) {
            case DataSource.Operation.IS_API_AWARE:
                returnVal = true;
                break;
            case DataSource.Operation.SUPPORTS_CRUD:
                returnVal = true;
                break;
            case DataSource.Operation.SUPPORTS_DISTINCT_API:
                returnVal = true;
                break;
            case DataSource.Operation.IS_PAGEABLE:
                returnVal = true;
                break;
            case DataSource.Operation.SUPPORTS_SERVER_FILTER:
                returnVal = true;
                break;
            case DataSource.Operation.GET_OPERATION_TYPE:
                returnVal = this.operation;
                break;
            case DataSource.Operation.GET_RELATED_PRIMARY_KEYS:
                returnVal = this.getRelatedTablePrimaryKeys(options);
                break;
            case DataSource.Operation.GET_ENTITY_NAME:
                returnVal = this.propertiesMap.entityName;
                break;
            case DataSource.Operation.LIST_RECORDS:
                returnVal = this.listRecords(options);
                break;
            case DataSource.Operation.UPDATE_RECORD:
                returnVal = this.updateRecord(options);
                break;
            case DataSource.Operation.INSERT_RECORD:
                returnVal = this.insertRecord(options);
                break;
            case DataSource.Operation.DELETE_RECORD:
                returnVal = this.deleteRecord(options);
                break;
            case DataSource.Operation.INVOKE:
                returnVal = this.invoke(options);
                break;
            case DataSource.Operation.UPDATE:
                returnVal = this.update(options);
                break;
            case DataSource.Operation.GET_RELATED_TABLE_DATA:
                returnVal = this.getRelatedTableData(options.relatedField, options);
                break;
            case DataSource.Operation.GET_DISTINCT_DATA_BY_FIELDS:
                returnVal = this.getDistinctDataByFields(options);
                break;
            case DataSource.Operation.GET_AGGREGATED_DATA:
                returnVal = this.getAggregatedData(options);
                break;
            case DataSource.Operation.GET_MATCH_MODE:
                returnVal = this.matchMode;
                break;
            case DataSource.Operation.DOWNLOAD:
                returnVal = this.download(options);
                break;
            case DataSource.Operation.GET_PROPERTIES_MAP:
                returnVal = this.propertiesMap;
                break;
            case DataSource.Operation.GET_PRIMARY_KEY:
                returnVal = this.getPrimaryKey();
                break;
            case DataSource.Operation.GET_BLOB_URL:
                returnVal = "services/" + this.liveSource + "/" + this.type + "/" + options.primaryValue + "/content/" + options.columnName;
                break;
            case DataSource.Operation.GET_OPTIONS:
                returnVal = this._options || {};
                break;
            case DataSource.Operation.SEARCH_RECORDS:
                returnVal = this.searchRecords(options);
                break;
            case DataSource.Operation.GET_REQUEST_PARAMS:
                returnVal = this.getRequestParams(options);
                break;
            case DataSource.Operation.GET_PAGING_OPTIONS:
                returnVal = this.pagination;
                break;
            case DataSource.Operation.IS_UPDATE_REQUIRED:
                returnVal = true;
                break;
            case DataSource.Operation.IS_BOUND_TO_LOCALE:
                returnVal = false;
                break;
            case DataSource.Operation.CANCEL:
                returnVal = false;
                break;
            default:
                returnVal = {};
                break;
        }
        return returnVal;
    };
    LiveVariable.prototype.listRecords = function (options, success, error) {
        return getManager().listRecords(this, options, success, error);
    };
    LiveVariable.prototype.updateRecord = function (options, success, error) {
        return getManager().updateRecord(this, options, success, error);
    };
    LiveVariable.prototype.insertRecord = function (options, success, error) {
        return getManager().insertRecord(this, options, success, error);
    };
    LiveVariable.prototype.deleteRecord = function (options, success, error) {
        return getManager().deleteRecord(this, options, success, error);
    };
    LiveVariable.prototype.setInput = function (key, val, options) {
        return getManager().setInput(this, key, val, options);
    };
    LiveVariable.prototype.setFilter = function (key, val) {
        return getManager().setFilter(this, key, val);
    };
    LiveVariable.prototype.download = function (options, success, error) {
        return getManager().download(this, options, success, error);
    };
    LiveVariable.prototype.invoke = function (options, success, error) {
        switch (this.operation) {
            case 'insert':
                return this.insertRecord(options, success, error);
            case 'update':
                return this.updateRecord(options, success, error);
            case 'delete':
                return this.deleteRecord(options, success, error);
            default:
                return this.listRecords(options, success, error);
        }
    };
    LiveVariable.prototype.getRelatedTablePrimaryKeys = function (columnName) {
        return getManager().getRelatedTablePrimaryKeys(this, columnName);
    };
    LiveVariable.prototype.getRelatedTableData = function (columnName, options, success, error) {
        return getManager().getRelatedTableData(this, columnName, options, success, error);
    };
    LiveVariable.prototype.getDistinctDataByFields = function (options, success, error) {
        return getManager().getDistinctDataByFields(this, options, success, error);
    };
    LiveVariable.prototype.getAggregatedData = function (options, success, error) {
        return getManager().getAggregatedData(this, options, success, error);
    };
    LiveVariable.prototype.getPrimaryKey = function () {
        return getManager().getPrimaryKey(this);
    };
    LiveVariable.prototype.searchRecords = function (options, success, error) {
        return getManager().searchRecords(this, options, success, error);
    };
    LiveVariable.prototype.getRequestParams = function (options) {
        return getManager().prepareRequestParams(options);
    };
    LiveVariable.prototype._downgradeInputData = function (data) {
        return getManager().downgradeFilterExpressionsToInputData(this, data);
    };
    LiveVariable.prototype._upgradeInputData = function (response, data) {
        return getManager().upgradeInputDataToFilterExpressions(this, response, data);
    };
    LiveVariable.prototype.setOrderBy = function (expression) {
        this.orderBy = expression;
        /* update the variable if autoUpdate flag is set */
        if (this.autoUpdate) {
            this.update();
        }
        return this.orderBy;
    };
    // legacy method
    LiveVariable.prototype.update = function (options, success, error) {
        return this.invoke(options, success, error);
    };
    LiveVariable.prototype.createRecord = function (options, success, error) {
        return this.insertRecord(options, success, error);
    };
    LiveVariable.prototype.init = function () {
        getManager().initBinding(this, 'dataBinding', this.operation === 'read' ? 'filterFields' : 'inputFields');
        if (this.operation === 'read') {
            getManager().initFilterExpressionBinding(this);
        }
        getManager().defineFirstLastRecord(this);
    };
    LiveVariable.prototype.cancel = function (options) {
        return getManager().cancel(this, options);
    };
    return LiveVariable;
}(ApiAwareVariable));
export { LiveVariable };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,