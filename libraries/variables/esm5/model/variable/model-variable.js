import * as tslib_1 from "tslib";
import { DataSource, isDefined } from '@wm/core';
import { VariableManagerFactory } from '../../factory/variable-manager.factory';
import { BaseVariable } from '../base-variable';
import { VARIABLE_CONSTANTS } from '../../constants/variables.constants';
import { appManager } from '../../util/variable/variables.utils';
var getManager = function () {
    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.MODEL);
};
var ɵ0 = getManager;
var ModelVariable = /** @class */ (function (_super) {
    tslib_1.__extends(ModelVariable, _super);
    function ModelVariable(variable) {
        var _this = _super.call(this) || this;
        Object.assign(_this, variable);
        return _this;
    }
    ModelVariable.prototype.init = function () {
        if (this.isList) {
            getManager().removeFirstEmptyObject(this);
        }
        getManager().initBinding(this, 'dataBinding', 'dataSet');
    };
    ModelVariable.prototype.execute = function (operation, options) {
        var returnVal = _super.prototype.execute.call(this, operation, options);
        if (isDefined(returnVal)) {
            return returnVal;
        }
        switch (operation) {
            case DataSource.Operation.IS_API_AWARE:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_CRUD:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_DISTINCT_API:
                returnVal = false;
                break;
            case DataSource.Operation.IS_PAGEABLE:
                returnVal = false;
                break;
            case DataSource.Operation.SUPPORTS_SERVER_FILTER:
                returnVal = false;
                break;
            case DataSource.Operation.IS_BOUND_TO_LOCALE:
                returnVal = this.isBoundToLocale();
                break;
            case DataSource.Operation.GET_DEFAULT_LOCALE:
                returnVal = this.getDefaultLocale();
                break;
            default:
                returnVal = {};
                break;
        }
        return returnVal;
    };
    ModelVariable.prototype.isBoundToLocale = function () {
        return this.name === 'supportedLocale';
    };
    ModelVariable.prototype.getDefaultLocale = function () {
        return appManager.getSelectedLocale();
    };
    return ModelVariable;
}(BaseVariable));
export { ModelVariable };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwtdmFyaWFibGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vdmFyaWFibGVzLyIsInNvdXJjZXMiOlsibW9kZWwvdmFyaWFibGUvbW9kZWwtdmFyaWFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFakUsSUFBTSxVQUFVLEdBQUc7SUFDZixPQUFPLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDOztBQUVGO0lBQW1DLHlDQUFZO0lBSzNDLHVCQUFZLFFBQWE7UUFBekIsWUFDSSxpQkFBTyxTQUVWO1FBREcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7O0lBQ3pDLENBQUM7SUFFRCw0QkFBSSxHQUFKO1FBQ0ksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsVUFBVSxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0M7UUFFRCxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsK0JBQU8sR0FBUCxVQUFRLFNBQVMsRUFBRSxPQUFPO1FBQ3RCLElBQUksU0FBUyxHQUFHLGlCQUFNLE9BQU8sWUFBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbEQsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFFRCxRQUFRLFNBQVMsRUFBRTtZQUNmLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZO2dCQUNsQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWE7Z0JBQ25DLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMscUJBQXFCO2dCQUMzQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLFdBQVc7Z0JBQ2pDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCO2dCQUM1QyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLGtCQUFrQjtnQkFDeEMsU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDbkMsTUFBTTtZQUNWLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0I7Z0JBQ3hDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDcEMsTUFBTTtZQUNWO2dCQUNJLFNBQVMsR0FBRyxFQUFFLENBQUM7Z0JBQ2YsTUFBTTtTQUNiO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVELHVDQUFlLEdBQWY7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUM7SUFDM0MsQ0FBQztJQUVELHdDQUFnQixHQUFoQjtRQUNJLE9BQU8sVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVMLG9CQUFDO0FBQUQsQ0FBQyxBQTdERCxDQUFtQyxZQUFZLEdBNkQ5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UsIElEYXRhU291cmNlLCBpc0RlZmluZWQgfSBmcm9tICdAd20vY29yZSc7XG5cbmltcG9ydCB7IFZhcmlhYmxlTWFuYWdlckZhY3RvcnkgfSBmcm9tICcuLi8uLi9mYWN0b3J5L3ZhcmlhYmxlLW1hbmFnZXIuZmFjdG9yeSc7XG5pbXBvcnQgeyBCYXNlVmFyaWFibGUgfSBmcm9tICcuLi9iYXNlLXZhcmlhYmxlJztcbmltcG9ydCB7IFZBUklBQkxFX0NPTlNUQU5UUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy92YXJpYWJsZXMuY29uc3RhbnRzJztcbmltcG9ydCB7IGFwcE1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlsL3ZhcmlhYmxlL3ZhcmlhYmxlcy51dGlscyc7XG5cbmNvbnN0IGdldE1hbmFnZXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIFZhcmlhYmxlTWFuYWdlckZhY3RvcnkuZ2V0KFZBUklBQkxFX0NPTlNUQU5UUy5DQVRFR09SWS5NT0RFTCk7XG59O1xuXG5leHBvcnQgY2xhc3MgTW9kZWxWYXJpYWJsZSBleHRlbmRzIEJhc2VWYXJpYWJsZSBpbXBsZW1lbnRzIElEYXRhU291cmNlIHtcblxuICAgIHR5cGU6IGFueTtcbiAgICBzYXZlSW5QaG9uZWdhcDogYW55O1xuXG4gICAgY29uc3RydWN0b3IodmFyaWFibGU6IGFueSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMgYXMgYW55LCB2YXJpYWJsZSk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMaXN0KSB7XG4gICAgICAgICAgICBnZXRNYW5hZ2VyKCkucmVtb3ZlRmlyc3RFbXB0eU9iamVjdCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldE1hbmFnZXIoKS5pbml0QmluZGluZyh0aGlzLCAnZGF0YUJpbmRpbmcnLCAnZGF0YVNldCcpO1xuICAgIH1cblxuICAgIGV4ZWN1dGUob3BlcmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCByZXR1cm5WYWwgPSBzdXBlci5leGVjdXRlKG9wZXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChpc0RlZmluZWQocmV0dXJuVmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLklTX0FQSV9BV0FSRTpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uU1VQUE9SVFNfQ1JVRDpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uU1VQUE9SVFNfRElTVElOQ1RfQVBJOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5JU19QQUdFQUJMRTpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uU1VQUE9SVFNfU0VSVkVSX0ZJTFRFUjpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uSVNfQk9VTkRfVE9fTE9DQUxFOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMuaXNCb3VuZFRvTG9jYWxlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLkdFVF9ERUZBVUxUX0xPQ0FMRTpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0aGlzLmdldERlZmF1bHRMb2NhbGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0ge307XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICB9XG5cbiAgICBpc0JvdW5kVG9Mb2NhbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgPT09ICdzdXBwb3J0ZWRMb2NhbGUnO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRMb2NhbGUoKSB7XG4gICAgICAgIHJldHVybiBhcHBNYW5hZ2VyLmdldFNlbGVjdGVkTG9jYWxlKCk7XG4gICAgfVxuXG59XG4iXX0=