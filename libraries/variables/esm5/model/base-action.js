import { DataSource } from '@wm/core';
import DatasetUtil from '../util/dataset-util';
var BaseAction = /** @class */ (function () {
    function BaseAction() {
    }
    BaseAction.prototype.execute = function (operation, options) {
        var returnVal;
        switch (operation) {
            case DataSource.Operation.GET_NAME:
                returnVal = this.name;
                break;
            case DataSource.Operation.GET_UNIQUE_IDENTIFIER:
                returnVal = this._id;
                break;
            case DataSource.Operation.GET_CONTEXT_IDENTIFIER:
                returnVal = this._context;
                break;
        }
        return returnVal;
    };
    BaseAction.prototype.getData = function () {
        return this.dataSet;
    };
    BaseAction.prototype.setData = function (dataSet) {
        if (DatasetUtil.isValidDataset(dataSet)) {
            this.dataSet = dataSet;
        }
        return this.dataSet;
    };
    BaseAction.prototype.getValue = function (key, index) {
        return DatasetUtil.getValue(this.dataSet, key, index);
    };
    BaseAction.prototype.setValue = function (key, value) {
        return DatasetUtil.setValue(this.dataSet, key, value);
    };
    BaseAction.prototype.getItem = function (index) {
        return DatasetUtil.getItem(this.dataSet, index);
    };
    /**
     *
     * @param index, a number in ideal case
     *        it can be the object to be replaced by the passed value
     * @param value
     * @returns {any}
     */
    BaseAction.prototype.setItem = function (index, value) {
        return DatasetUtil.setItem(this.dataSet, index, value);
    };
    BaseAction.prototype.addItem = function (value, index) {
        return DatasetUtil.addItem(this.dataSet, value, index);
    };
    BaseAction.prototype.removeItem = function (index, exactMatch) {
        return DatasetUtil.removeItem(this.dataSet, index, exactMatch);
    };
    BaseAction.prototype.clearData = function () {
        this.dataSet = DatasetUtil.getValidDataset();
        return this.dataSet;
    };
    BaseAction.prototype.getCount = function () {
        return DatasetUtil.getCount(this.dataSet);
    };
    BaseAction.prototype.init = function () {
    };
    return BaseAction;
}());
export { BaseAction };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ad20vdmFyaWFibGVzLyIsInNvdXJjZXMiOlsibW9kZWwvYmFzZS1hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxPQUFPLFdBQVcsTUFBTSxzQkFBc0IsQ0FBQztBQUUvQztJQUFBO0lBZ0ZBLENBQUM7SUFyRUcsNEJBQU8sR0FBUCxVQUFRLFNBQVMsRUFBRSxPQUFPO1FBQ3RCLElBQUksU0FBUyxDQUFDO1FBQ2QsUUFBUSxTQUFTLEVBQUU7WUFDZixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUTtnQkFDOUIsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ3RCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMscUJBQXFCO2dCQUMzQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDckIsTUFBTTtZQUNWLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0I7Z0JBQzVDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUMxQixNQUFNO1NBQ2I7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsNEJBQU8sR0FBUDtRQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsNEJBQU8sR0FBUCxVQUFRLE9BQVk7UUFDaEIsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFRCw2QkFBUSxHQUFSLFVBQVMsR0FBVyxFQUFFLEtBQWE7UUFDL0IsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCw2QkFBUSxHQUFSLFVBQVMsR0FBVyxFQUFFLEtBQVU7UUFDNUIsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCw0QkFBTyxHQUFQLFVBQVEsS0FBYTtRQUNqQixPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsNEJBQU8sR0FBUCxVQUFRLEtBQVUsRUFBRSxLQUFVO1FBQzFCLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsNEJBQU8sR0FBUCxVQUFRLEtBQVUsRUFBRSxLQUFhO1FBQzdCLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsK0JBQVUsR0FBVixVQUFXLEtBQVUsRUFBRSxVQUFtQjtRQUN0QyxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELDhCQUFTLEdBQVQ7UUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM3QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELDZCQUFRLEdBQVI7UUFDSSxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCx5QkFBSSxHQUFKO0lBQ0EsQ0FBQztJQUNMLGlCQUFDO0FBQUQsQ0FBQyxBQWhGRCxJQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UgfSBmcm9tICdAd20vY29yZSc7XG5cbmltcG9ydCBEYXRhc2V0VXRpbCBmcm9tICcuLi91dGlsL2RhdGFzZXQtdXRpbCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQWN0aW9uIHtcblxuICAgIHByb3RlY3RlZCBfaWQ6IHN0cmluZztcblxuICAgIG5hbWU6IHN0cmluZztcbiAgICBvd25lcjogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgZGF0YVNldDogYW55O1xuICAgIGRhdGFCaW5kaW5nOiBhbnk7XG4gICAgX2NvbnRleHQ6IGFueTtcblxuICAgIGV4ZWN1dGUob3BlcmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCByZXR1cm5WYWw7XG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLkdFVF9OQU1FOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uR0VUX1VOSVFVRV9JREVOVElGSUVSOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMuX2lkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5HRVRfQ09OVEVYVF9JREVOVElGSUVSOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMuX2NvbnRleHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICB9XG5cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2V0O1xuICAgIH1cblxuICAgIHNldERhdGEoZGF0YVNldDogYW55KSB7XG4gICAgICAgIGlmIChEYXRhc2V0VXRpbC5pc1ZhbGlkRGF0YXNldChkYXRhU2V0KSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU2V0ID0gZGF0YVNldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2V0O1xuICAgIH1cblxuICAgIGdldFZhbHVlKGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5nZXRWYWx1ZSh0aGlzLmRhdGFTZXQsIGtleSwgaW5kZXgpO1xuICAgIH1cblxuICAgIHNldFZhbHVlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5zZXRWYWx1ZSh0aGlzLmRhdGFTZXQsIGtleSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldEl0ZW0oaW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gRGF0YXNldFV0aWwuZ2V0SXRlbSh0aGlzLmRhdGFTZXQsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCwgYSBudW1iZXIgaW4gaWRlYWwgY2FzZVxuICAgICAqICAgICAgICBpdCBjYW4gYmUgdGhlIG9iamVjdCB0byBiZSByZXBsYWNlZCBieSB0aGUgcGFzc2VkIHZhbHVlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHJldHVybnMge2FueX1cbiAgICAgKi9cbiAgICBzZXRJdGVtKGluZGV4OiBhbnksIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRVdGlsLnNldEl0ZW0odGhpcy5kYXRhU2V0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGFkZEl0ZW0odmFsdWU6IGFueSwgaW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gRGF0YXNldFV0aWwuYWRkSXRlbSh0aGlzLmRhdGFTZXQsIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlSXRlbShpbmRleDogYW55LCBleGFjdE1hdGNoOiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5yZW1vdmVJdGVtKHRoaXMuZGF0YVNldCwgaW5kZXgsIGV4YWN0TWF0Y2gpO1xuICAgIH1cblxuICAgIGNsZWFyRGF0YSgpIHtcbiAgICAgICAgdGhpcy5kYXRhU2V0ID0gRGF0YXNldFV0aWwuZ2V0VmFsaWREYXRhc2V0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXQ7XG4gICAgfVxuXG4gICAgZ2V0Q291bnQoKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5nZXRDb3VudCh0aGlzLmRhdGFTZXQpO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgfVxufVxuIl19