import { DataSource } from '@wm/core';
import DatasetUtil from '../util/dataset-util';
var BaseVariable = /** @class */ (function () {
    function BaseVariable() {
    }
    BaseVariable.prototype.execute = function (operation, options) {
        var returnVal;
        switch (operation) {
            case DataSource.Operation.GET_NAME:
                returnVal = this.name;
                break;
            case DataSource.Operation.GET_UNIQUE_IDENTIFIER:
                returnVal = this._id;
                break;
            case DataSource.Operation.GET_CONTEXT_IDENTIFIER:
                returnVal = this._context;
                break;
            case DataSource.Operation.ADD_ITEM:
                returnVal = this.addItem(options.item);
                break;
            case DataSource.Operation.SET_ITEM:
                returnVal = this.setItem(options.prevItem, options.item);
                break;
            case DataSource.Operation.REMOVE_ITEM:
                returnVal = this.removeItem(options.item);
                break;
        }
        return returnVal;
    };
    BaseVariable.prototype.getData = function () {
        return this.dataSet;
    };
    BaseVariable.prototype.setData = function (dataSet) {
        if (DatasetUtil.isValidDataset(dataSet, this.isList)) {
            this.dataSet = dataSet;
        }
        return this.dataSet;
    };
    BaseVariable.prototype.getValue = function (key, index) {
        return DatasetUtil.getValue(this.dataSet, key, index, this.isList);
    };
    BaseVariable.prototype.setValue = function (key, value) {
        return DatasetUtil.setValue(this.dataSet, key, value, this.isList);
    };
    BaseVariable.prototype.getItem = function (index) {
        return DatasetUtil.getItem(this.dataSet, index, this.isList);
    };
    /**
     *
     * @param index, a number in ideal case
     *        it can be the object to be replaced by the passed value
     * @param value
     * @returns {any}
     */
    BaseVariable.prototype.setItem = function (index, value) {
        return DatasetUtil.setItem(this.dataSet, index, value, this.isList);
    };
    BaseVariable.prototype.addItem = function (value, index) {
        return DatasetUtil.addItem(this.dataSet, value, index, this.isList);
    };
    BaseVariable.prototype.removeItem = function (index, exactMatch) {
        return DatasetUtil.removeItem(this.dataSet, index, exactMatch);
    };
    BaseVariable.prototype.clearData = function () {
        this.dataSet = DatasetUtil.getValidDataset(this.isList);
        return this.dataSet;
    };
    BaseVariable.prototype.getCount = function () {
        return DatasetUtil.getCount(this.dataSet, this.isList);
    };
    /**
     * Return the prefab name if the variable is form a prefab
     * @returns {string}
     */
    BaseVariable.prototype.getPrefabName = function () {
        // __self__ is a prefab name given to a prefab which is run in preview mode
        return this._context && (this._context.prefabName !== '__self__' && this._context.prefabName);
    };
    return BaseVariable;
}());
export { BaseVariable };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12YXJpYWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3bS92YXJpYWJsZXMvIiwic291cmNlcyI6WyJtb2RlbC9iYXNlLXZhcmlhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFFL0M7SUFBQTtJQWdHQSxDQUFDO0lBcEZHLDhCQUFPLEdBQVAsVUFBUSxTQUFTLEVBQUUsT0FBTztRQUN0QixJQUFJLFNBQVMsQ0FBQztRQUNkLFFBQVEsU0FBUyxFQUFFO1lBQ2YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVE7Z0JBQzlCLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUN0QixNQUFNO1lBQ1YsS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLHFCQUFxQjtnQkFDM0MsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCO2dCQUM1QyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDMUIsTUFBTTtZQUNWLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRO2dCQUM5QixTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZDLE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUTtnQkFDOUIsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pELE1BQU07WUFDVixLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVztnQkFDakMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxQyxNQUFNO1NBQ2I7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsOEJBQU8sR0FBUDtRQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsOEJBQU8sR0FBUCxVQUFRLE9BQVk7UUFDaEIsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELCtCQUFRLEdBQVIsVUFBUyxHQUFXLEVBQUUsS0FBYTtRQUMvQixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsK0JBQVEsR0FBUixVQUFTLEdBQVcsRUFBRSxLQUFVO1FBQzVCLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCw4QkFBTyxHQUFQLFVBQVEsS0FBYTtRQUNqQixPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCw4QkFBTyxHQUFQLFVBQVEsS0FBVSxFQUFFLEtBQVU7UUFDMUIsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELDhCQUFPLEdBQVAsVUFBUSxLQUFVLEVBQUUsS0FBYztRQUM5QixPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsaUNBQVUsR0FBVixVQUFXLEtBQVUsRUFBRSxVQUFvQjtRQUN2QyxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELGdDQUFTLEdBQVQ7UUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsK0JBQVEsR0FBUjtRQUNJLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsb0NBQWEsR0FBYjtRQUNJLDJFQUEyRTtRQUMzRSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsS0FBSyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBaEdELElBZ0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJ0B3bS9jb3JlJztcblxuaW1wb3J0IERhdGFzZXRVdGlsIGZyb20gJy4uL3V0aWwvZGF0YXNldC11dGlsJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VWYXJpYWJsZSB7XG5cbiAgICBwcm90ZWN0ZWQgX2lkOiBzdHJpbmc7XG5cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgb3duZXI6IHN0cmluZztcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xuICAgIGlzTGlzdDogYm9vbGVhbjtcbiAgICBkYXRhU2V0OiBhbnk7XG4gICAgZGF0YUJpbmRpbmc6IGFueTtcbiAgICBfY29udGV4dDogYW55O1xuXG4gICAgZXhlY3V0ZShvcGVyYXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHJldHVyblZhbDtcbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uR0VUX05BTUU6XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdGhpcy5uYW1lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5HRVRfVU5JUVVFX0lERU5USUZJRVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdGhpcy5faWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLkdFVF9DT05URVhUX0lERU5USUZJRVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdGhpcy5fY29udGV4dDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRGF0YVNvdXJjZS5PcGVyYXRpb24uQUREX0lURU06XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdGhpcy5hZGRJdGVtKG9wdGlvbnMuaXRlbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERhdGFTb3VyY2UuT3BlcmF0aW9uLlNFVF9JVEVNOlxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRoaXMuc2V0SXRlbShvcHRpb25zLnByZXZJdGVtLCBvcHRpb25zLml0ZW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEYXRhU291cmNlLk9wZXJhdGlvbi5SRU1PVkVfSVRFTTpcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB0aGlzLnJlbW92ZUl0ZW0ob3B0aW9ucy5pdGVtKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgIH1cblxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXQ7XG4gICAgfVxuXG4gICAgc2V0RGF0YShkYXRhU2V0OiBhbnkpIHtcbiAgICAgICAgaWYgKERhdGFzZXRVdGlsLmlzVmFsaWREYXRhc2V0KGRhdGFTZXQsIHRoaXMuaXNMaXN0KSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU2V0ID0gZGF0YVNldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2V0O1xuICAgIH1cblxuICAgIGdldFZhbHVlKGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5nZXRWYWx1ZSh0aGlzLmRhdGFTZXQsIGtleSwgaW5kZXgsIHRoaXMuaXNMaXN0KTtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICByZXR1cm4gRGF0YXNldFV0aWwuc2V0VmFsdWUodGhpcy5kYXRhU2V0LCBrZXksIHZhbHVlLCB0aGlzLmlzTGlzdCk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5nZXRJdGVtKHRoaXMuZGF0YVNldCwgaW5kZXgsIHRoaXMuaXNMaXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCwgYSBudW1iZXIgaW4gaWRlYWwgY2FzZVxuICAgICAqICAgICAgICBpdCBjYW4gYmUgdGhlIG9iamVjdCB0byBiZSByZXBsYWNlZCBieSB0aGUgcGFzc2VkIHZhbHVlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHJldHVybnMge2FueX1cbiAgICAgKi9cbiAgICBzZXRJdGVtKGluZGV4OiBhbnksIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRVdGlsLnNldEl0ZW0odGhpcy5kYXRhU2V0LCBpbmRleCwgdmFsdWUsIHRoaXMuaXNMaXN0KTtcbiAgICB9XG5cbiAgICBhZGRJdGVtKHZhbHVlOiBhbnksIGluZGV4PzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5hZGRJdGVtKHRoaXMuZGF0YVNldCwgdmFsdWUsIGluZGV4LCB0aGlzLmlzTGlzdCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlSXRlbShpbmRleDogYW55LCBleGFjdE1hdGNoPzogYm9vbGVhbikge1xuICAgICAgICByZXR1cm4gRGF0YXNldFV0aWwucmVtb3ZlSXRlbSh0aGlzLmRhdGFTZXQsIGluZGV4LCBleGFjdE1hdGNoKTtcbiAgICB9XG5cbiAgICBjbGVhckRhdGEoKSB7XG4gICAgICAgIHRoaXMuZGF0YVNldCA9IERhdGFzZXRVdGlsLmdldFZhbGlkRGF0YXNldCh0aGlzLmlzTGlzdCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXQ7XG4gICAgfVxuXG4gICAgZ2V0Q291bnQoKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VXRpbC5nZXRDb3VudCh0aGlzLmRhdGFTZXQsIHRoaXMuaXNMaXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHByZWZhYiBuYW1lIGlmIHRoZSB2YXJpYWJsZSBpcyBmb3JtIGEgcHJlZmFiXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRQcmVmYWJOYW1lKCkge1xuICAgICAgICAvLyBfX3NlbGZfXyBpcyBhIHByZWZhYiBuYW1lIGdpdmVuIHRvIGEgcHJlZmFiIHdoaWNoIGlzIHJ1biBpbiBwcmV2aWV3IG1vZGVcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQgJiYgKHRoaXMuX2NvbnRleHQucHJlZmFiTmFtZSAhPT0gJ19fc2VsZl9fJyAmJiB0aGlzLl9jb250ZXh0LnByZWZhYk5hbWUpO1xuICAgIH1cbn1cbiJdfQ==