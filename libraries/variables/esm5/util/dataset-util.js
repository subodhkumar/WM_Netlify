var DatasetUtil = /** @class */ (function () {
    function DatasetUtil() {
    }
    DatasetUtil.isValidDataset = function (dataSet, isList) {
        if (!dataSet) {
            return false;
        }
        // check array type dataset for list type variable
        if (isList && !_.isArray(dataSet)) {
            return false;
        }
        // change the dataSet
        return dataSet;
    };
    DatasetUtil.getValue = function (dataSet, key, index, isList) {
        index = index || 0;
        // return the value against the specified key
        return isList ? dataSet[index][key] : dataSet[key];
    };
    DatasetUtil.setValue = function (dataSet, key, value, isList) {
        // check param sanity
        if (key && !isList) {
            dataSet[key] = value;
        }
        // return the new dataSet
        return dataSet;
    };
    DatasetUtil.getItem = function (dataSet, index, isList) {
        // return the object against the specified index
        return isList ? dataSet[index] : dataSet;
    };
    DatasetUtil.setItem = function (dataSet, i, value, isList) {
        var index;
        // check param sanity
        if (_.isUndefined(i) || !isList) {
            return dataSet;
        }
        if (_.isObject(i)) {
            index = _.findIndex(dataSet, i);
        }
        else {
            index = i;
        }
        if (index > -1) {
            // set the value against the specified index
            dataSet[index] = value;
        }
        // return the new dataSet
        return dataSet;
    };
    DatasetUtil.addItem = function (dataSet, value, index, isList) {
        // check param sanity
        if (_.isUndefined(value) || !isList) {
            return dataSet;
        }
        // check for index sanity
        index = index !== undefined ? index : dataSet.length;
        // set the value against the specified index
        dataSet.splice(index, 0, value);
        // return the new dataSet
        return dataSet;
    };
    /**
     *
     * @param dataSet
     * @param i, can be index value of the object/element in array
     *      or
     * the whole object which needs to be removed
     * @param exactMatch
     * @returns {any}
     */
    DatasetUtil.removeItem = function (dataSet, i, exactMatch) {
        var index;
        // check for index sanity
        i = i !== undefined ? i : dataSet.length - 1;
        if (_.isObject(i)) {
            index = _.findIndex(dataSet, i);
            // When exactMatch property is set to true delete only when every property values are same*/
            if (index > -1 && (!exactMatch || (exactMatch && _.isEqual(dataSet[index], i)))) {
                dataSet.splice(index, 1);
            }
        }
        else {
            dataSet.splice(i, 1);
        }
        // return the new dataSet
        return dataSet;
    };
    DatasetUtil.getValidDataset = function (isList) {
        return isList ? [] : {};
    };
    DatasetUtil.getCount = function (dataSet, isList) {
        return isList ? dataSet.length : Object.keys(dataSet).length;
    };
    return DatasetUtil;
}());
export default DatasetUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNldC11dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL3ZhcmlhYmxlcy8iLCJzb3VyY2VzIjpbInV0aWwvZGF0YXNldC11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0lBQUE7SUErR0EsQ0FBQztJQTdHVSwwQkFBYyxHQUFyQixVQUFzQixPQUFPLEVBQUUsTUFBTztRQUNsQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxrREFBa0Q7UUFDbEQsSUFBSSxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9CLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQscUJBQXFCO1FBQ3JCLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTSxvQkFBUSxHQUFmLFVBQWdCLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU87UUFDeEMsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7UUFFbkIsNkNBQTZDO1FBQzdDLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sb0JBQVEsR0FBZixVQUFnQixPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFPO1FBQ3hDLHFCQUFxQjtRQUNyQixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO1FBRUQseUJBQXlCO1FBQ3pCLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTSxtQkFBTyxHQUFkLFVBQWUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFPO1FBQ2xDLGdEQUFnRDtRQUNoRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FB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b3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIGNvbnN0IF87XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFzZXRVdGlsIHtcblxuICAgIHN0YXRpYyBpc1ZhbGlkRGF0YXNldChkYXRhU2V0LCBpc0xpc3Q/KSB7XG4gICAgICAgIGlmICghZGF0YVNldCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgYXJyYXkgdHlwZSBkYXRhc2V0IGZvciBsaXN0IHR5cGUgdmFyaWFibGVcbiAgICAgICAgaWYgKGlzTGlzdCAmJiAhXy5pc0FycmF5KGRhdGFTZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGFuZ2UgdGhlIGRhdGFTZXRcbiAgICAgICAgcmV0dXJuIGRhdGFTZXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFZhbHVlKGRhdGFTZXQsIGtleSwgaW5kZXgsIGlzTGlzdD8pIHtcbiAgICAgICAgaW5kZXggPSBpbmRleCB8fCAwO1xuXG4gICAgICAgIC8vIHJldHVybiB0aGUgdmFsdWUgYWdhaW5zdCB0aGUgc3BlY2lmaWVkIGtleVxuICAgICAgICByZXR1cm4gaXNMaXN0ID8gZGF0YVNldFtpbmRleF1ba2V5XSA6IGRhdGFTZXRba2V5XTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0VmFsdWUoZGF0YVNldCwga2V5LCB2YWx1ZSwgaXNMaXN0Pykge1xuICAgICAgICAvLyBjaGVjayBwYXJhbSBzYW5pdHlcbiAgICAgICAgaWYgKGtleSAmJiAhaXNMaXN0KSB7XG4gICAgICAgICAgICBkYXRhU2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiB0aGUgbmV3IGRhdGFTZXRcbiAgICAgICAgcmV0dXJuIGRhdGFTZXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEl0ZW0oZGF0YVNldCwgaW5kZXgsIGlzTGlzdD8pIHtcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBvYmplY3QgYWdhaW5zdCB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICAgIHJldHVybiBpc0xpc3QgPyBkYXRhU2V0W2luZGV4XSA6IGRhdGFTZXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldEl0ZW0oZGF0YVNldCwgaSwgdmFsdWUsIGlzTGlzdD8pIHtcbiAgICAgICAgbGV0IGluZGV4O1xuXG4gICAgICAgIC8vIGNoZWNrIHBhcmFtIHNhbml0eVxuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChpKSB8fCAhaXNMaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmlzT2JqZWN0KGkpKSB7XG4gICAgICAgICAgICBpbmRleCA9IF8uZmluZEluZGV4KGRhdGFTZXQsIGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgYWdhaW5zdCB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICAgICAgICBkYXRhU2V0W2luZGV4XSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBuZXcgZGF0YVNldFxuICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkSXRlbShkYXRhU2V0LCB2YWx1ZSwgaW5kZXgsIGlzTGlzdD8pIHtcbiAgICAgICAgLy8gY2hlY2sgcGFyYW0gc2FuaXR5XG4gICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHZhbHVlKSB8fCAhaXNMaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBpbmRleCBzYW5pdHlcbiAgICAgICAgaW5kZXggPSBpbmRleCAhPT0gdW5kZWZpbmVkID8gaW5kZXggOiBkYXRhU2V0Lmxlbmd0aDtcblxuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIGFnYWluc3QgdGhlIHNwZWNpZmllZCBpbmRleFxuICAgICAgICBkYXRhU2V0LnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuXG4gICAgICAgIC8vIHJldHVybiB0aGUgbmV3IGRhdGFTZXRcbiAgICAgICAgcmV0dXJuIGRhdGFTZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVNldFxuICAgICAqIEBwYXJhbSBpLCBjYW4gYmUgaW5kZXggdmFsdWUgb2YgdGhlIG9iamVjdC9lbGVtZW50IGluIGFycmF5XG4gICAgICogICAgICBvclxuICAgICAqIHRoZSB3aG9sZSBvYmplY3Qgd2hpY2ggbmVlZHMgdG8gYmUgcmVtb3ZlZFxuICAgICAqIEBwYXJhbSBleGFjdE1hdGNoXG4gICAgICogQHJldHVybnMge2FueX1cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVtb3ZlSXRlbShkYXRhU2V0LCBpLCBleGFjdE1hdGNoKSB7XG4gICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGluZGV4IHNhbml0eVxuICAgICAgICBpID0gaSAhPT0gdW5kZWZpbmVkID8gaSA6IGRhdGFTZXQubGVuZ3RoIC0gMTtcblxuICAgICAgICBpZiAoXy5pc09iamVjdChpKSkge1xuICAgICAgICAgICAgaW5kZXggPSBfLmZpbmRJbmRleChkYXRhU2V0LCBpKTtcbiAgICAgICAgICAgIC8vIFdoZW4gZXhhY3RNYXRjaCBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSBkZWxldGUgb25seSB3aGVuIGV2ZXJ5IHByb3BlcnR5IHZhbHVlcyBhcmUgc2FtZSovXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSAmJiAoIWV4YWN0TWF0Y2ggfHwgKGV4YWN0TWF0Y2ggJiYgXy5pc0VxdWFsKGRhdGFTZXRbaW5kZXhdLCBpKSkpKSB7XG4gICAgICAgICAgICAgICAgZGF0YVNldC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YVNldC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBuZXcgZGF0YVNldFxuICAgICAgICByZXR1cm4gZGF0YVNldDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VmFsaWREYXRhc2V0KGlzTGlzdD8pIHtcbiAgICAgICAgcmV0dXJuIGlzTGlzdCA/IFtdIDoge307XG4gICAgfVxuXG4gICAgc3RhdGljIGdldENvdW50KGRhdGFTZXQsIGlzTGlzdD8pIHtcbiAgICAgICAgcmV0dXJuIGlzTGlzdCA/IGRhdGFTZXQubGVuZ3RoIDogT2JqZWN0LmtleXMoZGF0YVNldCkubGVuZ3RoO1xuICAgIH1cbn1cbiJdfQ==