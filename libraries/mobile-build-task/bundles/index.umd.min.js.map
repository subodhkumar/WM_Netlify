{"version":3,"sources":["ng://@wm/mobile/components/widgets/barcode-scanner/barcode-scanner.build.ts","ng://@wm/mobile/components/widgets/camera/camera.build.ts","ng://@wm/mobile/components/widgets/media-list/media-list.build.ts","ng://@wm/mobile/components/widgets/media-list/media-list-item/media-list-item.build.ts","ng://@wm/mobile/components/widgets/mobile-navbar/mobile-navbar.build.ts","ng://@wm/mobile/components/widgets/network-info-toaster/network-info-toaster.build.ts","ng://@wm/mobile/components/widgets/tabbar/tab-bar.build.ts","ng://@wm/mobile/components/widgets/segmented-control/segment-content/segment-content.build.ts","ng://@wm/mobile/components/widgets/segmented-control/segmented-control.build.ts","ng://@wm/mobile/components/widgets/widget-template/widget-template.build.ts","ng://@wm/mobile/components/public_api_buildtask.ts"],"names":["tagName","register","pre","attrs","getAttrMarkup","post","copyAttribute","from","fromAttrName","to","toAttrName","fromAttr","find","a","name","push","Attribute","value","sourceSpan","valueSpan","template","node","bindDataset","attrObj","attr","replaceBind","children","forEach","childNode","startsWith","replace","e","Element","get"],"mappings":"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","sourcesContent":["import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'button';\n\nregister('wm-barcodescanner', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmBarcodescanner ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'button';\n\nregister('wm-camera', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmCamera ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { Attribute, Element } from '@angular/compiler';\n\nimport { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst wmlistTag = 'wm-list';\nconst tagName = 'div';\nconst dataSetKey = 'dataset';\n\nfunction copyAttribute(from: Element, fromAttrName: string, to: Element, toAttrName: string) {\n    const fromAttr = from.attrs.find( a => a.name === fromAttrName);\n    if (fromAttr) {\n        to.attrs.push(new Attribute(toAttrName, fromAttr.value, fromAttr.sourceSpan, fromAttr.valueSpan));\n    }\n}\n\nregister('wm-media-list', (): IBuildTaskDef => {\n    return {\n        template: (node: Element) => {\n            let bindDataset;\n            const attrObj = node.attrs.find(attr => attr.name === dataSetKey),\n                /**\n                 *  Replacing binded property value with item\n                 * @param children\n                 */\n                replaceBind = (children = []) => {\n                    children.forEach(childNode => {\n                        if (childNode.name) {\n                            // return if the child Element is of wm-list .\n                            if (childNode.name !== wmlistTag) {\n                                childNode.attrs.forEach((attr) => {\n                                    if (attr.value.startsWith(`bind:${bindDataset}.data[$i]`)) {\n                                        attr.value = attr.value.replace(`${bindDataset}.data[$i]`, 'item');\n                                    } else if (attr.value.startsWith(`bind:${bindDataset}`)) {\n                                        attr.value = attr.value.replace(bindDataset, 'item');\n                                    }\n                                });\n                                replaceBind(childNode.children);\n                            }\n                        }\n                    });\n                };\n            if (attrObj && attrObj.value.startsWith('bind:')) {\n                bindDataset = attrObj.value.replace('bind:', '');\n            }\n            if (bindDataset) {\n                replaceBind(node.children);\n            }\n            const template = <Element> node.children\n                .find(e => e instanceof Element && (<Element> e).name === 'wm-media-template');\n            if (template != null) {\n                copyAttribute(template, 'width', node, 'thumbnailwidth');\n                copyAttribute(template, 'height', node, 'thumbnailheight');\n            }\n        },\n        pre: attrs => `<${tagName} wmMediaList ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'ng-template';\n\nregister('wm-media-template', (): IBuildTaskDef => {\n    return {\n        pre: () => `<${tagName} #mediaListTemplate let-item=\"item\" let-index=\"index\">`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'header';\n\nregister('wm-mobile-navbar', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmMobileNavbar ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-network-info-toaster', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmNetworkInfoToaster ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-mobile-tabbar', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmMobileTabbar ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'li';\n\nregister('wm-segment-content', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmSegmentContent partialContainer wmSmoothscroll=${attrs.get('smoothscroll') || 'true'} wm-navigable-element=\"true\" ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-segmented-control', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmSegmentedControl ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","import { getAttrMarkup, IBuildTaskDef, register } from '@wm/transpiler';\n\nconst tagName = 'div';\n\nregister('wm-widget-template', (): IBuildTaskDef => {\n    return {\n        pre: attrs => `<${tagName} wmWidgetTemplate ${getAttrMarkup(attrs)}>`,\n        post: () => `</${tagName}>`\n    };\n});\n\nexport default () => {};\n","export * from './widgets/barcode-scanner/barcode-scanner.build';\nexport * from './widgets/camera/camera.build';\nexport * from './widgets/media-list/media-list.build';\nexport * from './widgets/media-list/media-list-item/media-list-item.build';\nexport * from './widgets/mobile-navbar/mobile-navbar.build';\nexport * from './widgets/network-info-toaster/network-info-toaster.build';\nexport * from './widgets/tabbar/tab-bar.build';\nexport * from './widgets/segmented-control/segment-content/segment-content.build';\nexport * from './widgets/segmented-control/segmented-control.build';\nexport * from './widgets/widget-template/widget-template.build';\n\nexport * from '@wm/transpiler';\n\nexport const initComponentsBuildTask = () => {};\n"]}