import * as tslib_1 from "tslib";
import { IDGenerator } from './id-generator';
import { $parseExpr } from './expression-parser';
var registry = new Map();
var watchIdGenerator = new IDGenerator('watch-id-');
export var FIRST_TIME_WATCH = {};
Object.freeze(FIRST_TIME_WATCH);
export var isFirstTimeChange = function (v) { return v === FIRST_TIME_WATCH; };
var muted = false;
export var debounce = function (fn, wait) {
    if (wait === void 0) { wait = 50; }
    var timeout;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        window['__zone_symbol__clearTimeout'](timeout);
        timeout = window['__zone_symbol__setTimeout'](function () { return fn.apply(void 0, tslib_1.__spread(args)); }, wait);
    };
};
export var muteWatchers = function () {
    muted = true;
};
export var unMuteWatchers = function () {
    muted = false;
    triggerWatchers();
};
export var $watch = function (expr, $scope, $locals, listener, identifier, doNotClone) {
    if (identifier === void 0) { identifier = watchIdGenerator.nextUid(); }
    if (doNotClone === void 0) { doNotClone = false; }
    if (expr.indexOf('[$i]') !== -1) {
        expr = expr.replace(/\[\$i]/g, '[0]');
    }
    var fn = $parseExpr(expr);
    registry.set(identifier, {
        fn: fn.bind(expr, $scope, $locals),
        listener: listener,
        expr: expr,
        last: FIRST_TIME_WATCH,
        doNotClone: doNotClone
    });
    return function () { return $unwatch(identifier); };
};
export var $unwatch = function (identifier) { return registry.delete(identifier); };
var changedByWatch = false;
var $RAF = window.requestAnimationFrame;
var ngZone;
var triggerWatchers = function (ignoreMuted) {
    if (muted && !ignoreMuted) {
        return;
    }
    var limit = 5;
    var pass = 1;
    var changeDetected;
    do {
        changeDetected = false;
        registry.forEach(function (watchInfo) {
            var fn = watchInfo.fn;
            var listener = watchInfo.listener;
            var ov = watchInfo.last;
            var nv;
            try {
                nv = fn();
            }
            catch (e) {
                console.warn("error in executing expression: '" + watchInfo.expr + "'");
            }
            if (!_.isEqual(nv, ov)) {
                changeDetected = true;
                changedByWatch = true;
                watchInfo.last = nv;
                if (_.isObject(nv) && !watchInfo.doNotClone && nv.__cloneable__ !== false) {
                    watchInfo.last = _.clone(nv);
                }
                listener(nv, ov);
                resetChangeFromWatch();
            }
        });
        pass++;
    } while (changeDetected && pass < limit);
    if (changeDetected && pass === limit) {
        console.warn("Number of watch cycles gone above set limit of: " + limit + " ");
    }
};
var ɵ0 = triggerWatchers;
export var setNgZone = function (zone) { return ngZone = zone; };
export var setAppRef = function (appRef) {
    $appDigest = (function () {
        var queued = false;
        return function (force) {
            if (force) {
                ngZone.run(function () { return appRef.tick(); });
                queued = false;
            }
            else {
                if (queued) {
                    return;
                }
                else {
                    queued = true;
                    $RAF(function () {
                        ngZone.run(function () { return appRef.tick(); });
                        queued = false;
                    });
                }
            }
        };
    })();
};
export var isChangeFromWatch = function () { return changedByWatch; };
export var resetChangeFromWatch = function () { return changedByWatch = false; };
window.watchRegistry = registry;
var skipWatchers;
var ɵ1 = function () {
    skipWatchers = true;
    ngZone.run(function () { return triggerWatchers(); });
};
var debouncedTriggerWatchers = debounce(ɵ1, 100);
export var $invokeWatchers = function (force, ignoreMuted) {
    if (force) {
        triggerWatchers(ignoreMuted);
    }
    else {
        if (skipWatchers) {
            skipWatchers = false;
            return;
        }
        debouncedTriggerWatchers();
    }
};
export var $appDigest = function (force) { };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,