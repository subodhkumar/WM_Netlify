var $RAF = window.requestAnimationFrame;
var $RAFQueue = [];
var invokeLater = function (fn) {
    if (!$RAFQueue.length) {
        $RAF(function () {
            $RAFQueue.forEach(function (f) { return f(); });
            $RAFQueue.length = 0;
        });
    }
    $RAFQueue.push(fn);
};
var ɵ0 = invokeLater;
export var appendNode = function (node, parent, sync) {
    var task = function () { return parent.appendChild(node); };
    sync ? task() : invokeLater(task);
};
export var insertBefore = function (node, ref, sync) {
    var task = function () { return ref.parentNode.insertBefore(node, ref); };
    sync ? task() : invokeLater(task);
};
export var insertAfter = function (node, ref, sync) {
    var task = function () { return ref.parentNode.insertBefore(node, ref.nextSibling); };
    sync ? task() : invokeLater(task);
};
export var removeNode = function (node, sync) {
    var task = function () { return node.remove(); };
    sync ? task() : invokeLater(task);
};
export var removeClass = function (node, ov, sync) {
    ov = ov || '';
    var task = function (c) { return node.classList.remove(c); };
    ov.split(' ').forEach(function (c) {
        if (c.length) {
            sync ? task(c) : invokeLater(function () { return task(c); });
        }
    });
};
export var addClass = function (node, nv, sync) {
    nv = nv || '';
    var task = function (c) { return node.classList.add(c); };
    nv.split(' ').forEach(function (c) {
        if (c.length) {
            sync ? task(c) : invokeLater(function () { return task(c); });
        }
    });
};
export var switchClass = function (node, toAdd, toRemove, sync) {
    if (toAdd === void 0) { toAdd = ''; }
    if (toRemove === void 0) { toRemove = ''; }
    removeClass(node, toRemove, sync);
    addClass(node, toAdd, sync);
};
export var toggleClass = function (node, cls, condition, sync) {
    if (condition) {
        addClass(node, cls, sync);
    }
    else {
        removeClass(node, cls, sync);
    }
};
export var setCSS = function (node, cssName, val, sync) {
    var task = function () { return node.style[cssName] = val; };
    sync ? task() : invokeLater(task);
};
export var setCSSFromObj = function (node, cssObj, sync) {
    var keys = Object.keys(cssObj || {});
    keys.forEach(function (key) { return setCSS(node, key, cssObj[key], sync); });
};
export var setProperty = function (node, propName, val, sync) {
    var task = function () { return node[propName] = val; };
    sync ? task() : invokeLater(task);
};
export var setAttr = function (node, attrName, val, sync) {
    var task = function () { return node instanceof Element && node.setAttribute(attrName, val); };
    sync ? task() : invokeLater(task);
};
export var setHtml = function (node, html, sync) {
    var task = function () { return node.innerHTML = html; };
    sync ? task() : invokeLater(task);
};
export var removeAttr = function (node, attrName, sync) {
    var task = function () { return node.removeAttribute(attrName); };
    sync ? task() : invokeLater(task);
};
export var createElement = function (nodeType, attrs, sync) {
    var node = document.createElement(nodeType);
    if (attrs) {
        Object.keys(attrs).forEach(function (attrName) {
            setAttr(node, attrName, attrs[attrName], sync);
        });
    }
    return node;
};
// for width and height if a numeric value is specified return in px
// else return the same value
export var toDimension = function (v) {
    // @ts-ignore
    if (v == +v) {
        return v + "px";
    }
    return v;
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHdtL2NvcmUvIiwic291cmNlcyI6WyJ1dGlscy9kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDO0FBQzFDLElBQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUVyQixJQUFNLFdBQVcsR0FBRyxVQUFBLEVBQUU7SUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDbkIsSUFBSSxDQUFDO1lBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRSxFQUFILENBQUcsQ0FBQyxDQUFDO1lBQzVCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0tBQ047SUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQzs7QUFFRixNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUcsVUFBQyxJQUFpQixFQUFFLE1BQW1CLEVBQUUsSUFBYztJQUM3RSxJQUFNLElBQUksR0FBRyxjQUFNLE9BQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQztJQUM1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLFVBQUMsSUFBaUIsRUFBRSxHQUFnQixFQUFFLElBQWM7SUFDNUUsSUFBTSxJQUFJLEdBQUcsY0FBTSxPQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQztJQUMxRCxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FB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QUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0tBQ047SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixvRUFBb0U7QUFDcEUsNkJBQTZCO0FBQzdCLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxVQUFDLENBQWtCO0lBQzFDLGFBQWE7SUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtRQUNULE9BQVUsQ0FBQyxPQUFJLENBQUM7S0FDbkI7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0ICRSQUYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuY29uc3QgJFJBRlF1ZXVlID0gW107XG5cbmNvbnN0IGludm9rZUxhdGVyID0gZm4gPT4ge1xuICAgIGlmICghJFJBRlF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAkUkFGKCgpID0+IHtcbiAgICAgICAgICAgICRSQUZRdWV1ZS5mb3JFYWNoKGYgPT4gZigpKTtcbiAgICAgICAgICAgICRSQUZRdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgJFJBRlF1ZXVlLnB1c2goZm4pO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGVuZE5vZGUgPSAobm9kZTogSFRNTEVsZW1lbnQsIHBhcmVudDogSFRNTEVsZW1lbnQsIHN5bmM/OiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgdGFzayA9ICgpID0+IHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICBzeW5jID8gdGFzaygpIDogaW52b2tlTGF0ZXIodGFzayk7XG59O1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0QmVmb3JlID0gKG5vZGU6IEhUTUxFbGVtZW50LCByZWY6IEhUTUxFbGVtZW50LCBzeW5jPzogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHRhc2sgPSAoKSA9PiByZWYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmKTtcbiAgICBzeW5jID8gdGFzaygpIDogaW52b2tlTGF0ZXIodGFzayk7XG59O1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0QWZ0ZXIgPSAobm9kZTogSFRNTEVsZW1lbnQsIHJlZjogSFRNTEVsZW1lbnQsIHN5bmM/OiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgdGFzayA9ICgpID0+IHJlZi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCByZWYubmV4dFNpYmxpbmcpO1xuICAgIHN5bmMgPyB0YXNrKCkgOiBpbnZva2VMYXRlcih0YXNrKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVOb2RlID0gKG5vZGU6IEhUTUxFbGVtZW50LCBzeW5jPzogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHRhc2sgPSAoKSA9PiBub2RlLnJlbW92ZSgpO1xuICAgIHN5bmMgPyB0YXNrKCkgOiBpbnZva2VMYXRlcih0YXNrKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzcyA9IChub2RlOiBIVE1MRWxlbWVudCwgb3Y6IHN0cmluZywgc3luYz86IGJvb2xlYW4pID0+IHtcbiAgICBvdiA9IG92IHx8ICcnO1xuICAgIGNvbnN0IHRhc2sgPSBjID0+IG5vZGUuY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICBvdi5zcGxpdCgnICcpLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGlmIChjLmxlbmd0aCkge1xuICAgICAgICAgICAgc3luYyA/IHRhc2soYykgOiBpbnZva2VMYXRlcigoKSA9PiB0YXNrKGMpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZENsYXNzID0gKG5vZGU6IEhUTUxFbGVtZW50LCBudjogc3RyaW5nLCBzeW5jPzogYm9vbGVhbikgPT4ge1xuICAgIG52ID0gbnYgfHwgJyc7XG4gICAgY29uc3QgdGFzayA9IGMgPT4gbm9kZS5jbGFzc0xpc3QuYWRkKGMpO1xuICAgIG52LnNwbGl0KCcgJykuZm9yRWFjaChjID0+IHtcbiAgICAgICAgaWYgKGMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzeW5jID8gdGFzayhjKSA6IGludm9rZUxhdGVyKCgpID0+IHRhc2soYykpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc3dpdGNoQ2xhc3MgPSAobm9kZTogSFRNTEVsZW1lbnQsIHRvQWRkOiBzdHJpbmcgPSAnJywgdG9SZW1vdmU6IHN0cmluZyA9ICcnLCBzeW5jPzogYm9vbGVhbikgPT4ge1xuICAgIHJlbW92ZUNsYXNzKG5vZGUsIHRvUmVtb3ZlLCBzeW5jKTtcbiAgICBhZGRDbGFzcyhub2RlLCB0b0FkZCwgc3luYyk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9nZ2xlQ2xhc3MgPSAobm9kZTogSFRNTEVsZW1lbnQsIGNsczogc3RyaW5nLCBjb25kaXRpb246IGJvb2xlYW4sIHN5bmM/OiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICBhZGRDbGFzcyhub2RlLCBjbHMsIHN5bmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKG5vZGUsIGNscywgc3luYyk7XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNldENTUyA9IChub2RlOiBIVE1MRWxlbWVudCwgY3NzTmFtZTogc3RyaW5nLCB2YWw/OiBzdHJpbmcgfCBudW1iZXIsIHN5bmM/OiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgdGFzayA9ICgpID0+IG5vZGUuc3R5bGVbY3NzTmFtZV0gPSB2YWw7XG4gICAgc3luYyA/IHRhc2soKSA6IGludm9rZUxhdGVyKHRhc2spO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldENTU0Zyb21PYmogPSAobm9kZTogSFRNTEVsZW1lbnQsIGNzc09iajogYW55LCBzeW5jPzogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjc3NPYmogfHwge30pO1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4gc2V0Q1NTKG5vZGUsIGtleSwgY3NzT2JqW2tleV0sIHN5bmMpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRQcm9wZXJ0eSA9IChub2RlOiBIVE1MRWxlbWVudCwgcHJvcE5hbWU6IHN0cmluZywgdmFsOiBhbnksIHN5bmM/OiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgdGFzayA9ICgpID0+IG5vZGVbcHJvcE5hbWVdID0gdmFsO1xuICAgIHN5bmMgPyB0YXNrKCkgOiBpbnZva2VMYXRlcih0YXNrKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRBdHRyID0gKG5vZGU6IEhUTUxFbGVtZW50LCBhdHRyTmFtZTogc3RyaW5nLCB2YWw6IGFueSwgc3luYz86IGJvb2xlYW4pID0+IHtcbiAgICBjb25zdCB0YXNrID0gKCkgPT4gbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbCk7XG4gICAgc3luYyA/IHRhc2soKSA6IGludm9rZUxhdGVyKHRhc2spO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEh0bWwgPSAobm9kZTogSFRNTEVsZW1lbnQsIGh0bWw6IHN0cmluZywgc3luYz86IGJvb2xlYW4pID0+IHtcbiAgICBjb25zdCB0YXNrID0gKCkgPT4gbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgIHN5bmMgPyB0YXNrKCkgOiBpbnZva2VMYXRlcih0YXNrKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVBdHRyID0gKG5vZGU6IEhUTUxFbGVtZW50LCBhdHRyTmFtZTogc3RyaW5nLCBzeW5jPzogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHRhc2sgPSAoKSA9PiBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgc3luYyA/IHRhc2soKSA6IGludm9rZUxhdGVyKHRhc2spO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAobm9kZVR5cGU6IHN0cmluZywgYXR0cnM6IGFueSwgc3luYz86IGJvb2xlYW4pOiBIVE1MRWxlbWVudCA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZVR5cGUpO1xuXG4gICAgaWYgKGF0dHJzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGF0dHJOYW1lID0+IHtcbiAgICAgICAgICAgIHNldEF0dHIobm9kZSwgYXR0ck5hbWUsIGF0dHJzW2F0dHJOYW1lXSwgc3luYyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbi8vIGZvciB3aWR0aCBhbmQgaGVpZ2h0IGlmIGEgbnVtZXJpYyB2YWx1ZSBpcyBzcGVjaWZpZWQgcmV0dXJuIGluIHB4XG4vLyBlbHNlIHJldHVybiB0aGUgc2FtZSB2YWx1ZVxuZXhwb3J0IGNvbnN0IHRvRGltZW5zaW9uID0gKHY6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAodiA9PSArdikge1xuICAgICAgICByZXR1cm4gYCR7dn1weGA7XG4gICAgfVxuICAgIHJldHVybiB2O1xufTtcbiJdfQ==